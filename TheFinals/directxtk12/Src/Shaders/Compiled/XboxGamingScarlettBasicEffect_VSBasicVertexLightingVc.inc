#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; SV_Position              0   xyzw        2      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_VSBasicVertexLightingVc.pdb
; shader hash: c28081195b5fa56fa5ff9235da446eab
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 3
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 3
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSBasicVertexLightingVc
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 12
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 8 }
;   output 1 depends on inputs: { 4, 5, 6, 9 }
;   output 2 depends on inputs: { 4, 5, 6, 10 }
;   output 3 depends on inputs: { 11 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 0, 1, 2, 3 }
;   output 9 depends on inputs: { 0, 1, 2, 3 }
;   output 10 depends on inputs: { 0, 1, 2, 3 }
;   output 11 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingVc() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = extractvalue %dx.types.CBufRet.f32 %13, 3
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = extractvalue %dx.types.CBufRet.f32 %18, 3
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = fmul fast float %14, %9
  %29 = call float @dx.op.tertiary.f32(i32 46, float %10, float %15, float %28)  ; FMad(a,b,c)
  %30 = call float @dx.op.tertiary.f32(i32 46, float %11, float %16, float %29)  ; FMad(a,b,c)
  %31 = call float @dx.op.tertiary.f32(i32 46, float %12, float %17, float %30)  ; FMad(a,b,c)
  %32 = fmul fast float %19, %9
  %33 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %11, float %21, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %12, float %22, float %34)  ; FMad(a,b,c)
  %36 = fmul fast float %24, %9
  %37 = call float @dx.op.tertiary.f32(i32 46, float %10, float %25, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %11, float %26, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %12, float %27, float %38)  ; FMad(a,b,c)
  %40 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.f32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %40, 2
  %44 = fsub fast float %41, %31
  %45 = fsub fast float %42, %35
  %46 = fsub fast float %43, %39
  %47 = call float @dx.op.dot3.f32(i32 55, float %44, float %45, float %46, float %44, float %45, float %46)  ; Dot3(ax,ay,az,bx,by,bz)
  %48 = call float @dx.op.unary.f32(i32 25, float %47)  ; Rsqrt(value)
  %49 = fmul fast float %44, %48
  %50 = fmul fast float %45, %48
  %51 = fmul fast float %46, %48
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = fmul fast float %53, %6
  %65 = call float @dx.op.tertiary.f32(i32 46, float %7, float %54, float %64)  ; FMad(a,b,c)
  %66 = call float @dx.op.tertiary.f32(i32 46, float %8, float %55, float %65)  ; FMad(a,b,c)
  %67 = fmul fast float %57, %6
  %68 = call float @dx.op.tertiary.f32(i32 46, float %7, float %58, float %67)  ; FMad(a,b,c)
  %69 = call float @dx.op.tertiary.f32(i32 46, float %8, float %59, float %68)  ; FMad(a,b,c)
  %70 = fmul fast float %61, %6
  %71 = call float @dx.op.tertiary.f32(i32 46, float %7, float %62, float %70)  ; FMad(a,b,c)
  %72 = call float @dx.op.tertiary.f32(i32 46, float %8, float %63, float %71)  ; FMad(a,b,c)
  %73 = call float @dx.op.dot3.f32(i32 55, float %66, float %69, float %72, float %66, float %69, float %72)  ; Dot3(ax,ay,az,bx,by,bz)
  %74 = call float @dx.op.unary.f32(i32 25, float %73)  ; Rsqrt(value)
  %75 = fmul fast float %74, %66
  %76 = fmul fast float %74, %69
  %77 = fmul fast float %74, %72
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = fsub fast float %49, %79
  %91 = fsub fast float %50, %80
  %92 = fsub fast float %51, %81
  %93 = call float @dx.op.dot3.f32(i32 55, float %90, float %91, float %92, float %90, float %91, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %94 = call float @dx.op.unary.f32(i32 25, float %93)  ; Rsqrt(value)
  %95 = fmul fast float %94, %91
  %96 = fmul fast float %94, %92
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = fsub fast float %49, %98
  %110 = fsub fast float %50, %99
  %111 = fsub fast float %51, %100
  %112 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %109, float %110, float %111)  ; Dot3(ax,ay,az,bx,by,bz)
  %113 = call float @dx.op.unary.f32(i32 25, float %112)  ; Rsqrt(value)
  %114 = fmul fast float %113, %110
  %115 = fmul fast float %113, %111
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %128 = fsub fast float %49, %117
  %129 = fsub fast float %50, %118
  %130 = fsub fast float %51, %119
  %131 = call float @dx.op.dot3.f32(i32 55, float %128, float %129, float %130, float %128, float %129, float %130)  ; Dot3(ax,ay,az,bx,by,bz)
  %132 = call float @dx.op.unary.f32(i32 25, float %131)  ; Rsqrt(value)
  %133 = fmul fast float %132, %129
  %134 = fmul fast float %132, %130
  %135 = fsub fast float -0.000000e+00, %80
  %136 = fsub fast float -0.000000e+00, %81
  %137 = fsub fast float -0.000000e+00, %99
  %138 = fsub fast float -0.000000e+00, %100
  %139 = fsub fast float -0.000000e+00, %118
  %140 = fsub fast float -0.000000e+00, %119
  %141 = fmul fast float %75, %79
  %142 = fsub fast float -0.000000e+00, %141
  %143 = call float @dx.op.tertiary.f32(i32 46, float %135, float %76, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %136, float %77, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %75, %98
  %146 = fsub fast float -0.000000e+00, %145
  %147 = call float @dx.op.tertiary.f32(i32 46, float %137, float %76, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %138, float %77, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %75, %117
  %150 = fsub fast float -0.000000e+00, %149
  %151 = call float @dx.op.tertiary.f32(i32 46, float %139, float %76, float %150)  ; FMad(a,b,c)
  %152 = call float @dx.op.tertiary.f32(i32 46, float %140, float %77, float %151)  ; FMad(a,b,c)
  %153 = fmul fast float %90, %75
  %154 = fmul fast float %153, %94
  %155 = call float @dx.op.tertiary.f32(i32 46, float %95, float %76, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %96, float %77, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %109, %75
  %158 = fmul fast float %157, %113
  %159 = call float @dx.op.tertiary.f32(i32 46, float %114, float %76, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %115, float %77, float %159)  ; FMad(a,b,c)
  %161 = fmul fast float %128, %75
  %162 = fmul fast float %161, %132
  %163 = call float @dx.op.tertiary.f32(i32 46, float %133, float %76, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %134, float %77, float %163)  ; FMad(a,b,c)
  %165 = fcmp fast olt float %144, 0.000000e+00
  %166 = fcmp fast olt float %148, 0.000000e+00
  %167 = fcmp fast olt float %152, 0.000000e+00
  %168 = select i1 %165, float 0.000000e+00, float 1.000000e+00
  %169 = select i1 %166, float 0.000000e+00, float 1.000000e+00
  %170 = select i1 %167, float 0.000000e+00, float 1.000000e+00
  %171 = fmul fast float %168, %144
  %172 = fmul fast float %169, %148
  %173 = fmul fast float %170, %152
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 3
  %176 = call float @dx.op.binary.f32(i32 35, float %156, float 0.000000e+00)  ; FMax(a,b)
  %177 = call float @dx.op.binary.f32(i32 35, float %160, float 0.000000e+00)  ; FMax(a,b)
  %178 = call float @dx.op.binary.f32(i32 35, float %164, float 0.000000e+00)  ; FMax(a,b)
  %179 = fmul fast float %176, %168
  %180 = fmul fast float %177, %169
  %181 = fmul fast float %178, %170
  %182 = call float @dx.op.unary.f32(i32 23, float %179)  ; Log(value)
  %183 = call float @dx.op.unary.f32(i32 23, float %180)  ; Log(value)
  %184 = call float @dx.op.unary.f32(i32 23, float %181)  ; Log(value)
  %185 = fmul fast float %182, %175
  %186 = fmul fast float %183, %175
  %187 = fmul fast float %184, %175
  %188 = call float @dx.op.unary.f32(i32 21, float %185)  ; Exp(value)
  %189 = call float @dx.op.unary.f32(i32 21, float %186)  ; Exp(value)
  %190 = call float @dx.op.unary.f32(i32 21, float %187)  ; Exp(value)
  %191 = fmul fast float %188, %144
  %192 = fmul fast float %189, %148
  %193 = fmul fast float %190, %152
  %194 = fmul fast float %171, %83
  %195 = call float @dx.op.tertiary.f32(i32 46, float %172, float %102, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %173, float %121, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %171, %84
  %198 = call float @dx.op.tertiary.f32(i32 46, float %172, float %103, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %173, float %122, float %198)  ; FMad(a,b,c)
  %200 = fmul fast float %171, %85
  %201 = call float @dx.op.tertiary.f32(i32 46, float %172, float %104, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %173, float %123, float %201)  ; FMad(a,b,c)
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = fmul fast float %204, %196
  %208 = fmul fast float %205, %199
  %209 = fmul fast float %206, %202
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 2
  %214 = fadd fast float %207, %211
  %215 = fadd fast float %208, %212
  %216 = fadd fast float %209, %213
  %217 = fmul fast float %191, %87
  %218 = call float @dx.op.tertiary.f32(i32 46, float %192, float %106, float %217)  ; FMad(a,b,c)
  %219 = call float @dx.op.tertiary.f32(i32 46, float %193, float %125, float %218)  ; FMad(a,b,c)
  %220 = fmul fast float %191, %88
  %221 = call float @dx.op.tertiary.f32(i32 46, float %192, float %107, float %220)  ; FMad(a,b,c)
  %222 = call float @dx.op.tertiary.f32(i32 46, float %193, float %126, float %221)  ; FMad(a,b,c)
  %223 = fmul fast float %191, %89
  %224 = call float @dx.op.tertiary.f32(i32 46, float %192, float %108, float %223)  ; FMad(a,b,c)
  %225 = call float @dx.op.tertiary.f32(i32 46, float %193, float %127, float %224)  ; FMad(a,b,c)
  %226 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %229 = fmul fast float %226, %219
  %230 = fmul fast float %227, %222
  %231 = fmul fast float %228, %225
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %234 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %235 = extractvalue %dx.types.CBufRet.f32 %232, 2
  %236 = extractvalue %dx.types.CBufRet.f32 %232, 3
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %237, 1
  %240 = extractvalue %dx.types.CBufRet.f32 %237, 2
  %241 = extractvalue %dx.types.CBufRet.f32 %237, 3
  %242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.f32 %242, 0
  %244 = extractvalue %dx.types.CBufRet.f32 %242, 1
  %245 = extractvalue %dx.types.CBufRet.f32 %242, 2
  %246 = extractvalue %dx.types.CBufRet.f32 %242, 3
  %247 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %248 = extractvalue %dx.types.CBufRet.f32 %247, 0
  %249 = extractvalue %dx.types.CBufRet.f32 %247, 1
  %250 = extractvalue %dx.types.CBufRet.f32 %247, 2
  %251 = extractvalue %dx.types.CBufRet.f32 %247, 3
  %252 = fmul fast float %233, %9
  %253 = call float @dx.op.tertiary.f32(i32 46, float %10, float %234, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %11, float %235, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %12, float %236, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %238, %9
  %257 = call float @dx.op.tertiary.f32(i32 46, float %10, float %239, float %256)  ; FMad(a,b,c)
  %258 = call float @dx.op.tertiary.f32(i32 46, float %11, float %240, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %12, float %241, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %243, %9
  %261 = call float @dx.op.tertiary.f32(i32 46, float %10, float %244, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %11, float %245, float %261)  ; FMad(a,b,c)
  %263 = call float @dx.op.tertiary.f32(i32 46, float %12, float %246, float %262)  ; FMad(a,b,c)
  %264 = fmul fast float %248, %9
  %265 = call float @dx.op.tertiary.f32(i32 46, float %10, float %249, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.tertiary.f32(i32 46, float %11, float %250, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %12, float %251, float %266)  ; FMad(a,b,c)
  %268 = extractvalue %dx.types.CBufRet.f32 %203, 3
  %269 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.f32 %269, 0
  %271 = extractvalue %dx.types.CBufRet.f32 %269, 1
  %272 = extractvalue %dx.types.CBufRet.f32 %269, 2
  %273 = extractvalue %dx.types.CBufRet.f32 %269, 3
  %274 = call float @dx.op.dot4.f32(i32 56, float %9, float %10, float %11, float %12, float %270, float %271, float %272, float %273)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %275 = call float @dx.op.unary.f32(i32 7, float %274)  ; Saturate(value)
  %276 = fmul fast float %214, %2
  %277 = fmul fast float %215, %3
  %278 = fmul fast float %216, %4
  %279 = fmul fast float %268, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %276)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %277)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %278)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %279)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %229)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %230)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %231)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %275)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %255)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %259)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %263)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %267)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[14 x i32] [i32 12, i32 12, i32 4080, i32 4080, i32 4080, i32 4080, i32 119, i32 119, i32 119, i32 0, i32 1, i32 2, i32 4, i32 8]}
!9 = !{void ()* @VSBasicVertexLightingVc, !"VSBasicVertexLightingVc", !10, !5, null}
!10 = !{!11, !18, null}
!11 = !{!12, !15, !17}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 2, i8 0, !14}
!18 = !{!19, !20, !22}
!19 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!20 = !{i32 1, !"COLOR", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!21 = !{i32 1}
!22 = !{i32 2, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 2, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 25
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1024
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0x198180c2, 0x6fa55f5b                // 000000000000: D58080C2 03FE3381 6FA55F5B
;   v_nop_xbox_data 0x3592ffa5, 0xab6e44da                // 00000000000C: D580FFA5 03FE6B92 AB6E44DA
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_mov_b32     s63, lit(0x11014fac)                    // 000000000020: BEBF03FF 11014FAC
;   s_mov_b32     s62, -1                                 // 000000000028: BEBE03C1
;   s_mov_b32     s60, s8                                 // 00000000002C: BEBC0308
;   s_or_b32      s61, s9, lit(0x00100000)                // 000000000030: 883DFF09 00100000
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x0000c0   // 000000000038: F428091E FA0000C0
;   s_buffer_load_dwordx16  s[0:15], s[60:63], 0x0000e0   // 000000000040: F430001E FA0000E0
;   s_buffer_load_dwordx16  s[20:35], s[60:63], 0x000130  // 000000000048: F430051E FA000130
;   s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000050: BF8C0070
;   v_mul_legacy_f32  v0, s8, v4                          // 000000000054: 0E000808
;   v_mul_legacy_f32  v16, s4, v4                         // 000000000058: 0E200804
;   v_mul_legacy_f32  v20, s12, v4                        // 00000000005C: 0E28080C
;   v_mul_legacy_f32  v11, s24, v8                        // 000000000060: 0E161018
;   v_fmac_f32    v0, s9, v5                              // 000000000064: 56000A09
;   v_fmac_f32    v16, s5, v5                             // 000000000068: 56200A05
;   v_fmac_f32    v20, s13, v5                            // 00000000006C: 56280A0D
;   v_fmac_f32    v11, s25, v9                            // 000000000070: 56161219
;   v_fmac_f32    v0, s10, v6                             // 000000000074: 56000C0A
;   v_fmac_f32    v16, s6, v6                             // 000000000078: 56200C06
;   v_fmac_f32    v20, s14, v6                            // 00000000007C: 56280C0E
;   v_fmac_f32    v11, s26, v10                           // 000000000080: 5616141A
;   v_fmac_f32    v0, s11, v7                             // 000000000084: 56000E0B
;   v_fmac_f32    v16, s7, v7                             // 000000000088: 56200E07
;   v_fmac_f32    v20, s15, v7                            // 00000000008C: 56280E0F
;   s_buffer_load_dwordx16  s[4:19], s[60:63], null       // 000000000090: F430011E FA000000
;   v_sub_f32     v0, s37, v0                             // 000000000098: 08000025
;   v_sub_f32     v1, s36, v16                            // 00000000009C: 08022024
;   v_sub_f32     v2, s38, v20                            // 0000000000A0: 08042826
;   v_mul_legacy_f32  v16, s20, v8                        // 0000000000A4: 0E201014
;   s_buffer_load_dwordx16  s[36:51], s[60:63], 0x000040  // 0000000000A8: F430091E FA000040
;   v_mul_legacy_f32  v3, v0, v0                          // 0000000000B0: 0E060100
;   v_mul_legacy_f32  v8, s28, v8                         // 0000000000B4: 0E10101C
;   v_fmac_f32    v16, s21, v9                            // 0000000000B8: 56201215
;   v_fmac_f32    v3, v1, v1                              // 0000000000BC: 56060301
;   v_fmac_f32    v8, s29, v9                             // 0000000000C0: 5610121D
;   v_mul_legacy_f32  v9, v11, v11                        // 0000000000C4: 0E12170B
;   v_fmac_f32    v16, s22, v10                           // 0000000000C8: 56201416
;   v_fmac_f32    v3, v2, v2                              // 0000000000CC: 56060502
;   v_fmac_f32    v8, s30, v10                            // 0000000000D0: 5610141E
;   v_fmac_f32    v9, v16, v16                            // 0000000000D4: 56122110
;   v_rsq_f32     v3, v3                                  // 0000000000D8: 7E065D03
;   v_fmac_f32    v9, v8, v8                              // 0000000000DC: 56121108
;   v_rsq_f32     v9, v9                                  // 0000000000E0: 7E125D09
;   s_waitcnt     lgkmcnt(0)                              // 0000000000E4: BF8CC07F
;   v_fma_f32     v10, v0, v3, -s17                       // 0000000000E8: D54B000A 80460700
;   v_fma_f32     v17, v0, v3, -s37                       // 0000000000F0: D54B0011 80960700
;   v_fma_f32     v18, v1, v3, -s16                       // 0000000000F8: D54B0012 80420701
;   v_fma_f32     v0, v0, v3, -s41                        // 000000000100: D54B0000 80A60700
;   v_fma_f32     v21, v1, v3, -s36                       // 000000000108: D54B0015 80920701
;   v_mul_legacy_f32  v19, v10, v10                       // 000000000110: 0E26150A
;   v_mul_legacy_f32  v22, v17, v17                       // 000000000114: 0E2C2311
;   v_fma_f32     v20, v2, v3, -s18                       // 000000000118: D54B0014 804A0702
;   v_fma_f32     v23, v2, v3, -s38                       // 000000000120: D54B0017 809A0702
;   v_fma_f32     v1, v1, v3, -s40                        // 000000000128: D54B0001 80A20701
;   v_fmac_f32    v19, v18, v18                           // 000000000130: 56262512
;   v_fmac_f32    v22, v21, v21                           // 000000000134: 562C2B15
;   v_mul_legacy_f32  v24, v0, v0                         // 000000000138: 0E300100
;   v_mul_legacy_f32  v16, v9, v16                        // 00000000013C: 0E202109
;   v_fma_f32     v2, v2, v3, -s42                        // 000000000140: D54B0002 80AA0702
;   v_fmac_f32    v19, v20, v20                           // 000000000148: 56262914
;   v_fmac_f32    v22, v23, v23                           // 00000000014C: 562C2F17
;   v_fmac_f32    v24, v1, v1                             // 000000000150: 56300301
;   v_mul_legacy_f32  v18, v18, v16                       // 000000000154: 0E242112
;   v_mul_legacy_f32  v11, v9, v11                        // 000000000158: 0E161709
;   v_rsq_f32     v3, v19                                 // 00000000015C: 7E065D13
;   v_mul_legacy_f32  v21, v21, v16                       // 000000000160: 0E2A2115
;   v_fmac_f32    v24, v2, v2                             // 000000000164: 56300502
;   v_mul_legacy_f32  v8, v9, v8                          // 000000000168: 0E101109
;   v_mul_legacy_f32  v1, v1, v16                         // 00000000016C: 0E022101
;   v_rsq_f32     v19, v22                                // 000000000170: 7E265D16
;   v_mul_legacy_f32  v22, s16, v16                       // 000000000174: 0E2C2010
;   v_rsq_f32     v24, v24                                // 000000000178: 7E305D18
;   v_fma_f32     v9, -s17, v11, -v22                     // 00000000017C: D54B0009 A45A1611
;   v_mul_legacy_f32  v22, s36, v16                       // 000000000184: 0E2C2024
;   v_mul_legacy_f32  v18, v18, v3                        // 000000000188: 0E240712
;   v_mul_legacy_f32  v10, v3, v10                        // 00000000018C: 0E141503
;   v_mul_legacy_f32  v3, v3, v20                         // 000000000190: 0E062903
;   v_fmac_f32    v9, -s18, v8                            // 000000000194: D52B0009 20021012
;   v_fma_f32     v20, -s37, v11, -v22                    // 00000000019C: D54B0014 A45A1625
;   v_mul_legacy_f32  v17, v19, v17                       // 0000000001A4: 0E222313
;   v_fmac_f32    v18, v10, v11                           // 0000000001A8: 5624170A
;   v_mul_legacy_f32  v10, v21, v19                       // 0000000001AC: 0E142715
;   v_mul_legacy_f32  v16, s40, v16                       // 0000000001B0: 0E202028
;   v_fmac_f32    v20, -s38, v8                           // 0000000001B4: D52B0014 20021026
;   v_mul_legacy_f32  v1, v1, v24                         // 0000000001BC: 0E023101
;   v_mul_legacy_f32  v0, v24, v0                         // 0000000001C0: 0E000118
;   v_fmac_f32    v10, v17, v11                           // 0000000001C4: 56141711
;   v_mul_legacy_f32  v17, v19, v23                       // 0000000001C8: 0E222F13
;   v_fmac_f32    v18, v3, v8                             // 0000000001CC: 56241103
;   v_fma_f32     v3, -s41, v11, -v16                     // 0000000001D0: D54B0003 A4421629
;   v_cmp_gt_f32  vcc, 0, v9                              // 0000000001D8: 7C081280
;   v_mul_legacy_f32  v19, v24, v2                        // 0000000001DC: 0E260518
;   v_fmac_f32    v1, v0, v11                             // 0000000001E0: 56021700
;   v_fmac_f32    v10, v17, v8                            // 0000000001E4: 56141111
;   v_max_f32     v2, 0, v18                              // 0000000001E8: 20042480
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 0000000001EC: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v20                             // 0000000001F4: 7C082880
;   v_fmac_f32    v3, -s42, v8                            // 0000000001F8: D52B0003 2002102A
;   v_fmac_f32    v1, v19, v8                             // 000000000200: 56021113
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x000190   // 000000000204: F428091E FA000190
;   v_mul_legacy_f32  v0, v2, v16                         // 00000000020C: 0E002102
;   s_buffer_load_dwordx8  s[52:59], s[60:63], 0x000170   // 000000000210: F42C0D1E FA000170
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000218: D501000B 01A900F2
;   v_max_f32     v2, 0, v10                              // 000000000220: 20041480
;   v_cmp_gt_f32  vcc, 0, v3                              // 000000000224: 7C080680
;   v_log_f32     v0, v0                                  // 000000000228: 7E004F00
;   v_max_f32     v1, 0, v1                               // 00000000022C: 20020280
;   s_buffer_load_dwordx16  s[16:31], s[60:63], 0x000080  // 000000000230: F430041E FA000080
;   v_mul_legacy_f32  v2, v2, v11                         // 000000000238: 0E041702
;   v_cndmask_b32  v8, 1.0, 0, vcc                        // 00000000023C: D5010008 01A900F2
;   v_mul_legacy_f32  v10, s32, v4                        // 000000000244: 0E140820
;   v_mul_legacy_f32  v16, v16, v9                        // 000000000248: 0E201310
;   v_mul_legacy_f32  v11, v11, v20                       // 00000000024C: 0E16290B
;   v_log_f32     v2, v2                                  // 000000000250: 7E044F02
;   v_mul_legacy_f32  v1, v1, v8                          // 000000000254: 0E021101
;   v_mul_legacy_f32  v0, s15, v0                         // 000000000258: 0E00000F
;   v_fmac_f32    v10, s33, v5                            // 00000000025C: 56140A21
;   v_mul_legacy_f32  v21, s44, v16                       // 000000000260: 0E2A202C
;   v_mul_legacy_f32  v22, s46, v16                       // 000000000264: 0E2C202E
;   v_log_f32     v1, v1                                  // 000000000268: 7E024F01
;   s_waitcnt     lgkmcnt(0)                              // 00000000026C: BF8CC07F
;   v_mul_legacy_f32  v19, s36, v4                        // 000000000270: 0E260824
;   v_mul_legacy_f32  v17, s52, v4                        // 000000000274: 0E220834
;   v_mul_legacy_f32  v18, s56, v4                        // 000000000278: 0E240838
;   v_mul_legacy_f32  v2, s15, v2                         // 00000000027C: 0E04040F
;   v_exp_f32     v0, v0                                  // 000000000280: 7E004B00
;   v_fmac_f32    v19, s37, v5                            // 000000000284: 56260A25
;   v_fmac_f32    v17, s53, v5                            // 000000000288: 56220A35
;   v_fmac_f32    v18, s57, v5                            // 00000000028C: 56240A39
;   v_fmac_f32    v10, s34, v6                            // 000000000290: 56140C22
;   v_exp_f32     v2, v2                                  // 000000000294: 7E044B02
;   v_mul_legacy_f32  v1, s15, v1                         // 000000000298: 0E02020F
;   v_fmac_f32    v17, s54, v6                            // 00000000029C: 56220C36
;   v_fmac_f32    v18, s58, v6                            // 0000000002A0: 56240C3A
;   v_fmac_f32    v19, s38, v6                            // 0000000002A4: 56260C26
;   v_mul_legacy_f32  v16, s45, v16                       // 0000000002A8: 0E20202D
;   v_mul_legacy_f32  v0, v0, v9                          // 0000000002AC: 0E001300
;   v_exp_f32     v1, v1                                  // 0000000002B0: 7E024B01
;   v_mul_legacy_f32  v5, s1, v5                          // 0000000002B4: 0E0A0A01
;   v_fmac_f32    v19, s39, v7                            // 0000000002B8: 56260E27
;   v_fmac_f32    v18, s59, v7                            // 0000000002BC: 56240E3B
;   v_fmac_f32    v17, s55, v7                            // 0000000002C0: 56220E37
;   v_fmac_f32    v10, s35, v7                            // 0000000002C4: 56140E23
;   v_mul_legacy_f32  v23, v8, v3                         // 0000000002C8: 0E2E0708
;   v_fmac_f32    v16, s49, v11                           // 0000000002CC: 56201631
;   v_fmac_f32    v22, s50, v11                           // 0000000002D0: 562C1632
;   v_fmac_f32    v21, s48, v11                           // 0000000002D4: 562A1630
;   v_mul_legacy_f32  v2, v2, v20                         // 0000000002D8: 0E042902
;   v_mul_legacy_f32  v9, s21, v0                         // 0000000002DC: 0E120015
;   v_mul_legacy_f32  v11, s22, v0                        // 0000000002E0: 0E160016
;   v_mul_legacy_f32  v0, s20, v0                         // 0000000002E4: 0E000014
;   v_fmac_f32    v5, s0, v4                              // 0000000002E8: 560A0800
;   exp           pos0, v10, v17, v18, v19 done           // 0000000002EC: F80008CF 1312110A
;   s_waitcnt     expcnt(0)                               // 0000000002F4: BF8CFF0F
;   v_mul_legacy_f32  v10, v1, v3                         // 0000000002F8: 0E140701
;   v_fmac_f32    v11, s26, v2                            // 0000000002FC: 5616041A
;   v_fmac_f32    v0, s24, v2                             // 000000000300: 56000418
;   v_fmac_f32    v9, s25, v2                             // 000000000304: 56120419
;   v_fmac_f32    v22, s18, v23                           // 000000000308: 562C2E12
;   v_fmac_f32    v16, s17, v23                           // 00000000030C: 56202E11
;   v_fmac_f32    v21, s16, v23                           // 000000000310: 562A2E10
;   v_fmac_f32    v5, s3, v7                              // 000000000314: 560A0E03
;   v_fmac_f32    v0, s28, v10                            // 000000000318: 5600141C
;   v_fma_f32     v3, s6, v22, s10                        // 00000000031C: D54B0003 002A2C06
;   v_fma_f32     v2, s5, v16, s9                         // 000000000324: D54B0002 00262005
;   v_fma_f32     v7, s4, v21, s8                         // 00000000032C: D54B0007 00222A04
;   v_fmac_f32    v9, s29, v10                            // 000000000334: 5612141D
;   v_fmac_f32    v11, s30, v10                           // 000000000338: 5616141E
;   v_fmac_f32    v5, v6, s2 clamp                        // 00000000033C: D52B8005 00000506
;   v_mul_legacy_f32  v1, s7, v15                         // 000000000344: 0E021E07
;   v_mul_legacy_f32  v4, v7, v12                         // 000000000348: 0E081907
;   v_mul_legacy_f32  v3, v3, v14                         // 00000000034C: 0E061D03
;   v_mul_legacy_f32  v2, v2, v13                         // 000000000350: 0E041B02
;   v_mul_legacy_f32  v0, s12, v0                         // 000000000354: 0E00000C
;   v_mul_legacy_f32  v6, s14, v11                        // 000000000358: 0E0C160E
;   v_mul_legacy_f32  v7, s13, v9                         // 00000000035C: 0E0E120D
;   exp           param0, v4, v2, v3, v1                  // 000000000360: F800020F 01030204
;   exp           param1, v0, v7, v6, v5                  // 000000000368: F800021F 05060700
;   s_endpgm                                              // 000000000370: BF810000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
;   s_code_end                                            // 0000000003C0: BF9F0000
;   s_code_end                                            // 0000000003C4: BF9F0000
;   s_code_end                                            // 0000000003C8: BF9F0000
;   s_code_end                                            // 0000000003CC: BF9F0000
;   s_code_end                                            // 0000000003D0: BF9F0000
;   s_code_end                                            // 0000000003D4: BF9F0000
;   s_code_end                                            // 0000000003D8: BF9F0000
;   s_code_end                                            // 0000000003DC: BF9F0000
;   s_code_end                                            // 0000000003E0: BF9F0000
;   s_code_end                                            // 0000000003E4: BF9F0000
;   s_code_end                                            // 0000000003E8: BF9F0000
;   s_code_end                                            // 0000000003EC: BF9F0000
;   s_code_end                                            // 0000000003F0: BF9F0000
;   s_code_end                                            // 0000000003F4: BF9F0000
;   s_code_end                                            // 0000000003F8: BF9F0000
;   s_code_end                                            // 0000000003FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 10
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 1
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 43
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSBasicVertexLightingVc)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 15
;       data_vgpr: 12
;       data_size: 3
;     }
; 
;   num_output_semantics: 2
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 2 {
;     vs_export_count: 1
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 8
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000000001100110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000000001111011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=25,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=18
; VAlu:158,SAlu:11,VMem:0,SMem:8,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char BasicEffect_VSBasicVertexLightingVc[] = {
  0x44, 0x58, 0x42, 0x43, 0xfc, 0x2b, 0xea, 0x19, 0xb0, 0xaa, 0xdd, 0x18,
  0xa8, 0x8b, 0xcd, 0x16, 0x5e, 0x62, 0x51, 0x8d, 0x01, 0x00, 0x00, 0x00,
  0xac, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
  0xa4, 0x02, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00,
  0x90, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x7c, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
  0x6e, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x3c, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52,
  0x4d, 0x41, 0x4c, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x56, 0x53,
  0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c,
  0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x63, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00,
  0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00,
  0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x30, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63,
  0x74, 0x5f, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72,
  0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x56,
  0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x80, 0x81, 0x19,
  0x5b, 0x5f, 0xa5, 0x6f, 0xa5, 0xff, 0x92, 0x35, 0xda, 0x44, 0x6e, 0xab,
  0x44, 0x58, 0x49, 0x4c, 0x14, 0x14, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x05, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0xd0, 0x0f, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xe8, 0x0f, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x48, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x5c, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x6c, 0x10, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x04, 0x14, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xfa, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xd0, 0x0f, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0xf1, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3,
  0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0,
  0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95,
  0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60,
  0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8,
  0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04,
  0x0c, 0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30, 0xe4, 0x80, 0x97, 0x04, 0xdd,
  0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04,
  0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a, 0xcf, 0x1b, 0xbe, 0xef, 0xf3,
  0xbc, 0x0e, 0xfc, 0x40, 0x0a, 0xd3, 0x81, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x20, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb9, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xa3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x80,
  0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0xa8, 0x28, 0x89, 0x11, 0x80,
  0x42, 0x28, 0x83, 0x22, 0x20, 0x71, 0x06, 0x80, 0xc6, 0xb1, 0x1c, 0x86,
  0x81, 0xff, 0x01, 0xfe, 0x07, 0xf8, 0x1f, 0xe0, 0x7f, 0xb8, 0x87, 0x7b,
  0xb8, 0x07, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x78, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x28, 0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x60, 0x36, 0x08, 0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x34,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x62, 0x80, 0x11, 0x98, 0x20, 0x10,
  0xce, 0x06, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d,
  0x20, 0x00, 0x40, 0x02, 0x26, 0x08, 0x63, 0x90, 0x6d, 0x08, 0xa8, 0x09,
  0x82, 0x00, 0xf0, 0xb2, 0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a,
  0x93, 0xa3, 0x2b, 0xc3, 0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b,
  0xb3, 0x1a, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97,
  0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa6, 0x09, 0x42, 0x41, 0x6d, 0x08, 0x8e,
  0x09, 0x42, 0x51, 0x4d, 0x10, 0x88, 0x67, 0x82, 0x40, 0x40, 0x1b, 0x84,
  0xce, 0xdb, 0xb0, 0x1c, 0x58, 0xa6, 0x6d, 0x9a, 0xc1, 0x1d, 0xda, 0x47,
  0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x58, 0x13, 0x04,
  0x22, 0xda, 0x20, 0x74, 0x63, 0xb0, 0x61, 0x31, 0xc2, 0x20, 0xd3, 0x36,
  0xcd, 0x10, 0x03, 0x43, 0x23, 0x83, 0x09, 0x02, 0x21, 0xb1, 0x18, 0x7a,
  0x62, 0x7a, 0x92, 0xda, 0xb0, 0x98, 0xc1, 0x19, 0x64, 0xda, 0xa6, 0x19,
  0x9c, 0x19, 0x68, 0xdf, 0x86, 0x01, 0x0c, 0xca, 0x00, 0x0d, 0x26, 0x08,
  0xc5, 0xb5, 0x61, 0x39, 0xce, 0x20, 0xd3, 0x36, 0x35, 0x30, 0xb8, 0x43,
  0xfb, 0x36, 0x04, 0xc6, 0x86, 0xc5, 0x38, 0x83, 0x4c, 0x63, 0x03, 0x35,
  0x30, 0x38, 0x43, 0xfb, 0x36, 0x2c, 0x66, 0x80, 0x65, 0x62, 0xb0, 0x71,
  0x06, 0x67, 0x06, 0xda, 0xb7, 0x61, 0x58, 0x83, 0x36, 0x70, 0x83, 0x0d,
  0x43, 0x1a, 0xbc, 0x01, 0xb0, 0xa1, 0xb0, 0x2e, 0x38, 0x98, 0x80, 0x56,
  0x78, 0x62, 0x6f, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
  0x72, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x02, 0xa1,
  0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94,
  0x80, 0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6,
  0x36, 0x25, 0x38, 0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95,
  0xc9, 0x4d, 0x09, 0x92, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64,
  0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x02, 0xa6, 0x0c, 0x19,
  0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94,
  0x40, 0xaa, 0x43, 0x86, 0xe7, 0x62, 0x97, 0x56, 0x76, 0x97, 0x44, 0x36,
  0x45, 0x17, 0x46, 0x57, 0x36, 0x25, 0xa0, 0xea, 0x90, 0xe1, 0xb9, 0x94,
  0xb9, 0xd1, 0xc9, 0xe5, 0x41, 0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09,
  0xe0, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x06, 0x70, 0xbd, 0xec, 0x06, 0x48, 0x88, 0xf0,
  0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xaf, 0x60,
  0x05, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x5f,
  0xdc, 0xb6, 0x1d, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51,
  0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5, 0x6d,
  0x5b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11,
  0x02, 0xcd, 0xb0, 0x10, 0x36, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0,
  0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x19, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f,
  0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3,
  0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26, 0x50,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43,
  0x4d, 0x7e, 0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44,
  0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5,
  0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2, 0x0c,
  0x40, 0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81, 0x94,
  0x48, 0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x94, 0x45, 0xb1, 0x14,
  0x4c, 0x71, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x23, 0x00,
  0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xa0, 0xb5, 0xc1, 0xf3, 0xad, 0xc1, 0x1a, 0x70, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xd8, 0xc1, 0x55, 0x06, 0x6c, 0x30, 0x06,
  0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x77, 0x80, 0x99, 0x41,
  0x1b, 0x74, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x78, 0x90,
  0x9d, 0x81, 0x1b, 0x88, 0x01, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x1e, 0x68, 0x68, 0xf0, 0x06, 0x64, 0x90, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0xa1, 0x07, 0x5b, 0x1c, 0xc0, 0xc1, 0x19, 0x68, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec, 0x01, 0x27, 0x07, 0x71, 0x10,
  0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7c, 0xd0, 0xcd,
  0x81, 0x1c, 0x98, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46,
  0x1f, 0x78, 0x73, 0x30, 0x07, 0x6a, 0xd0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0xe1, 0x07, 0x1f, 0x1d, 0xd0, 0x01, 0x19, 0x78, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x01, 0x18, 0xd4, 0x41, 0x1d, 0xa4,
  0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x28, 0x84, 0x81,
  0x1d, 0xd8, 0xc1, 0x1a, 0x80, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x54, 0x7b, 0x40, 0x06, 0x8c, 0x1c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00,
  0x08, 0x82, 0x41, 0x05, 0x0a, 0x69, 0x10, 0x7d, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x50, 0x95, 0x82, 0x1b, 0x58, 0x63, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4,
  0x60, 0xce, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x54,
  0xa1, 0x0e, 0x26, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b,
  0x15, 0xec, 0x60, 0x72, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8,
  0x58, 0xe1, 0x0e, 0x26, 0x27, 0xb0, 0xe6, 0x92, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xae, 0x90, 0x07, 0x57, 0x13, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0xf5, 0x0a, 0x7a, 0x70, 0x35, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xb0, 0xb0, 0x07, 0x57, 0x13, 0x18, 0xb3,
  0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x59, 0xe8, 0x83,
  0x8d, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x9a, 0x05, 0x3f,
  0xd8, 0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x5a, 0xf8,
  0x83, 0x8d, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xb2, 0x85,
  0x3f, 0x38, 0x83, 0x39, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x86, 0x23,
  0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0x84, 0x43, 0x28, 0x0c,
  0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xe1,
  0x30, 0x0a, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20,
  0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xc4, 0x61, 0x15, 0xe6,
  0xc0, 0x0f, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x73, 0x78, 0x85, 0x3b,
  0x08, 0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4a, 0x1d, 0x66, 0x61, 0x0f,
  0x5a, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6c, 0xd1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xe5,
  0x0e, 0xb9, 0xa0, 0x07, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd7, 0x3b, 0xe8, 0x82, 0x1e, 0x2c, 0x81, 0x29, 0x7d, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xe2, 0x81, 0x17, 0xfa, 0x40, 0x09,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x92, 0x87, 0x5e, 0xe8, 0x03,
  0x25, 0xb0, 0x04, 0x14, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x17, 0x3d, 0xfc, 0x02, 0x28, 0x24, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xf5, 0x00, 0x0e, 0xa0, 0x90, 0x04, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xa0, 0xec, 0xc3, 0x2e, 0x1c, 0x44, 0x70, 0x10, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xfb, 0xd0, 0x0b, 0x81, 0x05, 0x89,
  0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0xf8, 0xa1, 0x1c, 0x5a, 0x81, 0x1e, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x2a, 0x90, 0x48, 0x87, 0x58, 0xd0, 0x87, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x8a, 0x24, 0xda, 0xa1, 0x16, 0x7c, 0x61, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x2c, 0x0d, 0x96, 0xf8, 0x58,
  0x1a, 0x2c, 0xf1, 0xb1, 0x34, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0xca, 0x4b, 0xbc, 0xc3, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x01, 0xf3, 0x12, 0xf1, 0x10, 0x58, 0x40, 0xc8,
  0xc7, 0x04, 0x42, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xbd,
  0x04, 0x3e, 0x80, 0x83, 0x3d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x33,
  0xc1, 0x0f, 0xe4, 0x90, 0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x4d,
  0x80, 0x04, 0x3a, 0xc0, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x18, 0x1f, 0x2c, 0xf1, 0x31, 0x3e, 0x58, 0xe2, 0x63,
  0x7c, 0xb0, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x14, 0xb1,
  0x10, 0x89, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x46, 0x2c, 0x48, 0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84, 0x7c,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x12, 0x8b, 0x95, 0x98, 0x07,
  0x95, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xcc, 0xe2, 0x25, 0xee, 0x21,
  0x2c, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xb5, 0x98, 0x89, 0x7d, 0x10,
  0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0,
  0x57, 0x58, 0xe2, 0x63, 0xaf, 0xb0, 0xc4, 0xc7, 0x5e, 0x61, 0x89, 0xcf,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0x75, 0x51, 0x13, 0x83, 0x10,
  0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x5d, 0xdc,
  0x44, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9, 0xd8, 0x49, 0xdc, 0x41,
  0x7c, 0x0c, 0x25, 0xee, 0x20, 0x3e, 0x96, 0x12, 0x66, 0x10, 0x1f, 0x53,
  0x09, 0x33, 0x88, 0x8f, 0xad, 0x44, 0x15, 0x1f, 0x63, 0x89, 0x2a, 0x3e,
  0x26, 0x0a, 0x7e, 0x20, 0x1f, 0x73, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x70, 0xf1, 0xc5, 0x59, 0x20, 0xa3, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0xc1, 0xd5, 0x17, 0x68, 0x81, 0x8c, 0x42, 0x60,
  0xa6, 0xf0, 0x06, 0xf2, 0x31, 0x99, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x68, 0xac, 0x85, 0x72, 0x0a, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xa1, 0xc1, 0x16, 0xca, 0x29, 0x04, 0xa6,
  0x0a, 0x60, 0x20, 0x1f, 0xb3, 0x89, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x70, 0x91, 0xc6, 0x5b, 0x30, 0xab, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0xc1, 0x55, 0x1a, 0x70, 0xc1, 0xac, 0x42, 0x60, 0x7f,
  0xe0, 0x0a, 0xf2, 0xb1, 0x80, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x6a, 0xcc, 0x05, 0x1f, 0xbc, 0x42, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x57, 0x6a, 0xd0, 0x05, 0x1f, 0xbc, 0x42, 0x60,
  0x70, 0x20, 0x0b, 0xf2, 0xb1, 0xa0, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x6b, 0xdc, 0x45, 0x1b, 0xcc, 0x42, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x6b, 0xe0, 0x45, 0x1b, 0xcc, 0x42,
  0x60, 0x61, 0x60, 0x0b, 0xf2, 0xb1, 0xc0, 0x93, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xb0, 0xb1, 0x17, 0xde, 0x2d, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0xc5, 0x06, 0x5f, 0x78, 0xb7, 0x10, 0x0c,
  0x47, 0x54, 0x66, 0x41, 0x7c, 0xc3, 0x11, 0xd2, 0x59, 0x10, 0xdf, 0x70,
  0xc4, 0x83, 0x16, 0xc4, 0x37, 0xdd, 0x90, 0x16, 0x6a, 0x31, 0x4c, 0x37,
  0xa8, 0xc5, 0x5a, 0x0c, 0xd3, 0x0d, 0x6b, 0xc1, 0x16, 0x83, 0x0d, 0x9b,
  0x7c, 0x6c, 0xc0, 0xe4, 0x63, 0x43, 0x25, 0x9f, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x78, 0xa3, 0x34, 0xda, 0x22, 0x36, 0x46, 0x13, 0x82,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xf0, 0xf8, 0x0b, 0x2a,
  0x2e, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x09, 0x0f, 0xd0, 0x88,
  0xe4, 0x62, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xf1, 0x08, 0x0d,
  0x67, 0x2e, 0x6c, 0x58, 0xe4, 0x63, 0xc3, 0x22, 0x1f, 0x1b, 0x16, 0xf9,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x73, 0x1e, 0xa6, 0x31, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x83, 0x1e, 0xa7, 0x31, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x01, 0x93, 0x1e, 0xa8, 0x31, 0xd8, 0xa0, 0xc8,
  0xc7, 0x86, 0x45, 0x3e, 0x36, 0x30, 0xf2, 0x19, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0xa6, 0x3d, 0x5a, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0xc6, 0x3d, 0x5c, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03,
  0xe6, 0x3d, 0x5e, 0x63, 0xb0, 0xe1, 0x0d, 0xe4, 0x63, 0x03, 0x1b, 0xc8,
  0xc7, 0x86, 0x34, 0x90, 0x8f, 0x5d, 0xef, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe0, 0x63, 0x37, 0xae, 0x5e, 0x08, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0x8a, 0x0f, 0xde, 0xb8, 0x56, 0x21, 0x30,
  0x2d, 0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x7c,
  0xf8, 0x86, 0xf6, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0xf4, 0xf1, 0x1b, 0x5a, 0x2b, 0x04, 0xd6, 0xcd, 0x83, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xb2, 0x8f, 0xf0, 0xe8, 0xc2, 0x21, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x3e, 0xc4, 0xa3, 0x7b, 0x85,
  0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0xfc, 0x10, 0x0f, 0xd5,
  0xa8, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33, 0x62,
  0x70, 0x00, 0x20, 0x08, 0x06, 0x15, 0x88, 0xa4, 0x47, 0x6c, 0xf4, 0xc7,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x31,
  0xc0, 0xc7, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0x31, 0x4d, 0x24, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x89, 0xc8, 0x87, 0x06,
  0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x28, 0x32, 0x1f,
  0x9a, 0x2f, 0x04, 0xd6, 0x91, 0x84, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xe0, 0x52, 0x91, 0xfa, 0xe8, 0xe4, 0x21, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x6b, 0x45, 0xec, 0xa3, 0x03, 0x87, 0xc0, 0xc0, 0xc0,
  0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x8b, 0xe0,
  0x07, 0x18, 0xd0, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97,
  0x8b, 0xe4, 0x07, 0x18, 0x88, 0x43, 0x30, 0x9a, 0x40, 0x07, 0xc0, 0x68,
  0x42, 0x1d, 0x04, 0xa3, 0x09, 0x76, 0x20, 0xd8, 0xa0, 0xc8, 0xc7, 0x06,
  0x44, 0x3e, 0x36, 0x18, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0xca, 0x46, 0xfe, 0xe3, 0x3c, 0xda, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0x1d, 0x21, 0x11, 0xf6, 0xe8, 0x8f, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xc0, 0x24, 0x45, 0xe2, 0xc3,
  0x3e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x2a, 0x13,
  0x17, 0xb1, 0x0f, 0x15, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0xb0, 0x69, 0x3e, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x9a, 0xd4, 0xc8, 0x7c, 0x4c, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x6b, 0x62, 0x23, 0xf3, 0x31,
  0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb1, 0xc9, 0x8d, 0xcc,
  0xc7, 0x14, 0x98, 0x74, 0x1f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xcb, 0x4d, 0x72, 0xe4, 0x3e, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xae, 0x37, 0xd1, 0x91, 0xfb, 0x90, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe0, 0x64, 0x47, 0xee, 0x43, 0x0a, 0x2c, 0xda,
  0x0f, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x25, 0x27, 0x3d,
  0xb2, 0x1f, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x9c,
  0xf8, 0xc8, 0x7e, 0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0x74, 0xf2, 0x23, 0xfb, 0x11, 0x05, 0x06, 0xfd, 0x87, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xb2, 0x93, 0x30, 0xf9, 0x0f, 0x28, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x4e, 0xc4, 0xe4, 0x3f, 0xa0,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x3c, 0x19, 0x93, 0xff,
  0x80, 0x82, 0xd1, 0x84, 0x50, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xa0, 0xda, 0x13, 0x32, 0x61, 0x11, 0x18, 0x19, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x68,
  0x00, 0x10, 0x04, 0x03, 0x28, 0x54, 0xd6, 0x24, 0x45, 0x50, 0xe4, 0x44,
  0x4c, 0x84, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18,
  0x52, 0xb9, 0x93, 0xc0, 0xfc, 0x40, 0x46, 0xe4, 0x63, 0x7e, 0x20, 0x23,
  0xf2, 0x31, 0x3f, 0x90, 0x11, 0xf9, 0xd8, 0x22, 0x23, 0xf2, 0x19, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x55, 0xdc, 0x44, 0x54, 0x44, 0x25,
  0x4f, 0x88, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x56, 0xc5, 0x4d,
  0x44, 0x45, 0x54, 0xe4, 0x64, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0x64, 0x55, 0xdc, 0x44, 0x54, 0x44, 0xc5, 0x4e, 0x84, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x40, 0x56, 0xc5, 0x4d, 0x44, 0x45, 0x54, 0xee, 0x24,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x64, 0x55, 0xdc, 0x64, 0x54,
  0x44, 0x25, 0x4f, 0xe6, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90,
  0x55, 0x71, 0x93, 0x51, 0x11, 0x15, 0x39, 0x91, 0x83, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x40, 0x56, 0xc5, 0x4d, 0x46, 0x45, 0x54, 0xec, 0x24,
  0x0e, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x59, 0x15, 0x37, 0x19,
  0x15, 0x51, 0xb9, 0x93, 0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90,
  0x55, 0x71, 0x93, 0x3d, 0x11, 0x95, 0x3c, 0xc9, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x00, 0x59, 0x15, 0x37, 0xd9, 0x13, 0x51, 0x91, 0x93, 0x6a,
  0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x55, 0x71, 0x93, 0x3d, 0x11,
  0x15, 0x3b, 0x89, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x59, 0x15,
  0x37, 0xd9, 0x13, 0x51, 0xb9, 0x93, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xa4, 0x54, 0xd6, 0x2b,
  0x42, 0x70, 0x01, 0x65, 0x6f, 0xd4, 0x97, 0x34, 0x25, 0xcd, 0x2a, 0xeb,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x5b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xd5, 0x54, 0xcd, 0x8b, 0x1c, 0x45, 0x14, 0x7f, 0x55, 0x5d,
  0xd3, 0x5d, 0xdd, 0xdb, 0xfb, 0xa6, 0xbb, 0xa7, 0xa6, 0x67, 0x36, 0x66,
  0xc7, 0x9a, 0xd9, 0xde, 0xce, 0x7c, 0x39, 0xe9, 0xf8, 0xfd, 0x81, 0x20,
  0x4b, 0xc8, 0xc1, 0x51, 0xf6, 0xb0, 0xf0, 0x0e, 0xca, 0x22, 0x12, 0x42,
  0x5c, 0x84, 0x18, 0x34, 0x07, 0x0f, 0xcb, 0xd8, 0x01, 0x0f, 0x1e, 0xf6,
  0x20, 0x39, 0x78, 0xf0, 0xa2, 0x48, 0x22, 0xf8, 0x05, 0xfe, 0x01, 0x32,
  0x13, 0xfd, 0x07, 0x3c, 0xcd, 0xc5, 0x83, 0xf8, 0x1f, 0x28, 0x61, 0xc0,
  0x65, 0x0f, 0x19, 0x6b, 0x66, 0x77, 0x71, 0x18, 0x50, 0x82, 0xa7, 0xf8,
  0xe0, 0xf1, 0xea, 0x57, 0xef, 0x57, 0xaf, 0xde, 0xab, 0x57, 0xbc, 0x4b,
  0x3b, 0x3b, 0xaf, 0x32, 0x06, 0xd0, 0x77, 0x60, 0x2e, 0xf6, 0xb1, 0x81,
  0xdf, 0x87, 0xdf, 0xfd, 0xfa, 0x6f, 0xfa, 0xfd, 0x03, 0xf2, 0xfe, 0x49,
  0xf9, 0xc9, 0xf9, 0x8b, 0xf0, 0xdf, 0xe4, 0x34, 0xce, 0xe1, 0x69, 0x20,
  0xf1, 0xb7, 0x4f, 0x80, 0x27, 0xc4, 0x12, 0xff, 0xf0, 0xa4, 0x30, 0xff,
  0xa4, 0x4e, 0x76, 0xa2, 0x02, 0x38, 0xdc, 0x5d, 0xe0, 0xad, 0x81, 0x16,
  0x6c, 0x01, 0xeb, 0x05, 0x7e, 0x67, 0xe1, 0x5e, 0x1b, 0x8a, 0xc2, 0xb2,
  0x99, 0x23, 0xb9, 0xcd, 0x8b, 0xbe, 0x05, 0x0f, 0x9b, 0xcc, 0x32, 0x3a,
  0x2e, 0xd9, 0x66, 0x0c, 0xfe, 0x9f, 0x32, 0x6b, 0xad, 0x5a, 0xd0, 0x19,
  0x5e, 0xee, 0xab, 0x5c, 0xc2, 0xd9, 0x52, 0x2b, 0xfe, 0xf8, 0xf3, 0xc1,
  0xee, 0xfa, 0x29, 0xcf, 0xc7, 0x37, 0x9f, 0xb8, 0x6f, 0xbd, 0xfe, 0xc6,
  0x9d, 0x77, 0xee, 0x4c, 0xf3, 0xf1, 0xad, 0xb7, 0xef, 0x5b, 0xbf, 0x5c,
  0xbc, 0xf6, 0x8d, 0xa8, 0x7f, 0x38, 0xb4, 0xe0, 0xf3, 0xd1, 0xd4, 0x1a,
  0x0d, 0xbf, 0xdd, 0x66, 0xe1, 0x8f, 0xd6, 0x70, 0x28, 0xad, 0x1f, 0x86,
  0xee, 0xf4, 0xc5, 0x8f, 0x00, 0x02, 0xa8, 0xb9, 0xcd, 0x89, 0xf9, 0x3f,
  0x47, 0x35, 0xc8, 0x26, 0xbf, 0xcd, 0x6c, 0x21, 0x9b, 0x64, 0x0c, 0x8e,
  0xae, 0xc3, 0xc1, 0x48, 0x4a, 0x40, 0x21, 0x35, 0xfa, 0xb2, 0x89, 0xd5,
  0x20, 0x46, 0xd7, 0x03, 0x2a, 0x78, 0x9a, 0x56, 0xbd, 0x26, 0xad, 0x45,
  0x31, 0x79, 0x3e, 0x90, 0xed, 0x6b, 0x42, 0xbf, 0x49, 0x67, 0x54, 0x4c,
  0x2b, 0x08, 0xe4, 0xa0, 0xa6, 0x22, 0x36, 0xa9, 0xc6, 0xb2, 0x89, 0x49,
  0xeb, 0x68, 0xd3, 0x94, 0x98, 0x68, 0x2e, 0xd3, 0xa6, 0x90, 0x2a, 0xd0,
  0x58, 0x73, 0xb3, 0xc9, 0x4b, 0x66, 0x1f, 0x98, 0x8d, 0x67, 0x83, 0x00,
  0xcb, 0x91, 0x26, 0x66, 0xd9, 0xb4, 0x1e, 0x05, 0xb4, 0x52, 0x89, 0x30,
  0x56, 0x9a, 0x78, 0xc1, 0xa6, 0x9a, 0x0a, 0x28, 0xa8, 0x47, 0x64, 0xed,
  0xda, 0x03, 0x19, 0x46, 0xe4, 0xee, 0x46, 0x83, 0x0f, 0xee, 0x1e, 0x8c,
  0x3c, 0xe8, 0x8f, 0xc1, 0xb9, 0x94, 0x87, 0x73, 0xfb, 0x49, 0x1e, 0x19,
  0xcb, 0x9c, 0xad, 0x1c, 0xe6, 0xf8, 0xcb, 0xbc, 0x3c, 0xc7, 0xb7, 0x72,
  0xaf, 0x9c, 0x62, 0xb8, 0xd1, 0x45, 0x65, 0x30, 0x77, 0x5e, 0xce, 0x2b,
  0x73, 0xfb, 0x69, 0xce, 0xe6, 0xfe, 0x2f, 0xf2, 0x68, 0x33, 0xa5, 0x72,
  0xa7, 0x4b, 0xc0, 0x32, 0x74, 0xeb, 0x1a, 0xf9, 0xdc, 0xff, 0x75, 0xae,
  0x5a, 0x29, 0x55, 0xce, 0x77, 0x4d, 0x4e, 0x19, 0x45, 0xf5, 0x04, 0xdd,
  0x4a, 0x8c, 0x25, 0x93, 0x43, 0xb9, 0xde, 0x46, 0x5e, 0xc8, 0xc8, 0x0d,
  0x03, 0x64, 0x75, 0x8e, 0xf1, 0x6e, 0x3a, 0x08, 0x74, 0x17, 0xab, 0xbb,
  0xd9, 0xc0, 0x35, 0x67, 0xc3, 0xf8, 0xb5, 0xdb, 0x89, 0xc1, 0x91, 0x93,
  0xa0, 0x55, 0x56, 0x68, 0xb5, 0x6c, 0x74, 0xa1, 0x33, 0x8e, 0x02, 0xae,
  0x67, 0x39, 0x6c, 0x1a, 0x7f, 0x69, 0xa3, 0x81, 0x5e, 0x25, 0xa1, 0xf2,
  0x39, 0x85, 0x4d, 0xad, 0x4d, 0x6e, 0x9d, 0x71, 0x6a, 0xfc, 0xec, 0x02,
  0xc7, 0x2a, 0x03, 0x0c, 0x2b, 0x8a, 0x4a, 0xe7, 0x1b, 0x68, 0x85, 0x09,
  0x59, 0xe6, 0x4c, 0x2b, 0xde, 0xba, 0x9d, 0x47, 0x72, 0xbf, 0x5a, 0x48,
  0x11, 0x2a, 0x9c, 0xc2, 0x50, 0x51, 0x9e, 0x08, 0x1d, 0x00, 0x1b, 0xdf,
  0x83, 0xaf, 0x58, 0xde, 0x94, 0xfb, 0x96, 0x89, 0xd1, 0x36, 0x31, 0x4a,
  0x21, 0xa7, 0x59, 0x2f, 0x3f, 0x36, 0xbd, 0xe3, 0x75, 0xc0, 0xda, 0x6a,
  0x77, 0x72, 0xdd, 0xac, 0x57, 0x4e, 0xb9, 0x4a, 0xe8, 0xdc, 0x96, 0xfb,
  0xb0, 0x0d, 0x83, 0x9c, 0x73, 0x5d, 0x13, 0xd9, 0xc4, 0x3c, 0xda, 0x11,
  0xaf, 0x08, 0x94, 0x27, 0x1c, 0x2d, 0x15, 0x06, 0x25, 0x8d, 0x2b, 0xad,
  0x18, 0xf9, 0xb6, 0x18, 0xb0, 0x90, 0x63, 0x11, 0x00, 0xeb, 0x9e, 0xa2,
  0xae, 0x6e, 0x63, 0xcf, 0xd4, 0xc7, 0xb6, 0xf9, 0xbc, 0x0f, 0x89, 0x4c,
  0xf1, 0x49, 0xd9, 0xc0, 0x67, 0x65, 0x82, 0x45, 0x21, 0x10, 0xfa, 0x30,
  0xd8, 0xf4, 0x52, 0x7a, 0xca, 0x6b, 0xd0, 0x73, 0x5e, 0x42, 0x0d, 0x5f,
  0x11, 0xef, 0x8b, 0x41, 0x91, 0x73, 0x7c, 0xda, 0x6f, 0xd0, 0xf3, 0x7e,
  0x42, 0xa9, 0x9f, 0xd2, 0x63, 0xa6, 0x6e, 0x28, 0x01, 0xb2, 0x3e, 0x1f,
  0x30, 0xcf, 0xc3, 0x73, 0x98, 0xd2, 0x0b, 0x98, 0xd0, 0x33, 0xd8, 0xa0,
  0x0d, 0x54, 0x24, 0x9d, 0x1e, 0x5e, 0x88, 0x35, 0x3d, 0x1e, 0x77, 0x29,
  0x8b, 0xdb, 0xc4, 0x5b, 0x02, 0xcb, 0x60, 0xfe, 0x05, 0xc4, 0xe6, 0xbd,
  0x00, 0x41, 0x7a, 0xf4, 0xb3, 0x84, 0x43, 0x2f, 0x8c, 0x4a, 0xc5, 0xe9,
  0xc1, 0x88, 0x39, 0x0a, 0xcf, 0x88, 0x98, 0xaa, 0x02, 0x68, 0x4d, 0x44,
  0x14, 0xf5, 0xba, 0x14, 0xf6, 0x34, 0x05, 0xbd, 0x36, 0x59, 0xe8, 0xd1,
  0x59, 0x05, 0xf3, 0xb7, 0xb4, 0xbb, 0x6d, 0x98, 0xf5, 0xb8, 0xa0, 0x53,
  0x70, 0x8c, 0x15, 0xed, 0x06, 0xac, 0xab, 0xc8, 0xfc, 0xb3, 0x98, 0x0a,
  0x79, 0x67, 0x6c, 0x17, 0x00, 0x9c, 0x1a, 0x47, 0x67, 0x4d, 0xa2, 0xb5,
  0x6e, 0x23, 0x7f, 0x44, 0xa0, 0x6f, 0xee, 0xc3, 0xd8, 0xc7, 0xd5, 0x08,
  0xb1, 0xc8, 0xe1, 0x50, 0x70, 0x8b, 0x3d, 0x6a, 0x2c, 0x38, 0x33, 0xf6,
  0xcd, 0x11, 0xc0, 0x67, 0x0f, 0x8d, 0xb2, 0x85, 0x99, 0x73, 0x3a, 0x57,
  0xf8, 0xd2, 0xe0, 0x14, 0x0b, 0xc3, 0x66, 0x6a, 0xe4, 0x78, 0x55, 0x01,
  0xda, 0xd9, 0x7a, 0xf3, 0xbd, 0xbd, 0xcb, 0x74, 0xe5, 0xdd, 0x1b, 0x57,
  0xde, 0x7f, 0x65, 0xef, 0xea, 0x5b, 0x37, 0xf6, 0xae, 0x5d, 0xa5, 0xcb,
  0x7f, 0x01, 0xfe, 0x37, 0x46, 0x24, 0x00, 0x00, 0xc2, 0x80, 0x81, 0x19,
  0x5b, 0x5f, 0xa5, 0x6f, 0xa5, 0xff, 0x92, 0x35, 0xda, 0x44, 0x6e, 0xab
};
