#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float       
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_PSConstant.pdb
; shader hash: da4132ff41c29c96697feebd34843340
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSConstant
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s1     1
;                                   texture     f32        cube      T0             t4     1
;                                   texture     f32        cube      T1             t5     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 4, 5, 6, 8, 9, 10 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSConstant() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %15 = fsub fast float %12, %8
  %16 = fsub fast float %13, %9
  %17 = fsub fast float %14, %10
  %18 = call float @dx.op.dot3.f32(i32 55, float %15, float %16, float %17, float %15, float %16, float %17)  ; Dot3(ax,ay,az,bx,by,bz)
  %19 = call float @dx.op.unary.f32(i32 25, float %18)  ; Rsqrt(value)
  %20 = fmul fast float %15, %19
  %21 = fmul fast float %16, %19
  %22 = fmul fast float %17, %19
  %23 = call float @dx.op.dot3.f32(i32 55, float %5, float %6, float %7, float %5, float %6, float %7)  ; Dot3(ax,ay,az,bx,by,bz)
  %24 = call float @dx.op.unary.f32(i32 25, float %23)  ; Rsqrt(value)
  %25 = fmul fast float %24, %5
  %26 = fmul fast float %24, %6
  %27 = fmul fast float %24, %7
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %20, float %21, float %22)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 7, float %35)  ; Saturate(value)
  %37 = fmul fast float %30, %30
  %38 = fmul fast float %32, %29
  %39 = fmul fast float %33, %29
  %40 = fmul fast float %34, %29
  %41 = fsub fast float %32, %38
  %42 = fsub fast float %33, %39
  %43 = fsub fast float %34, %40
  %44 = fadd fast float %32, 0xBFA47AE140000000
  %45 = fadd fast float %33, 0xBFA47AE140000000
  %46 = fadd fast float %34, 0xBFA47AE140000000
  %47 = fmul fast float %44, %29
  %48 = fmul fast float %45, %29
  %49 = fmul fast float %46, %29
  %50 = fadd fast float %47, 0x3FA47AE140000000
  %51 = fadd fast float %48, 0x3FA47AE140000000
  %52 = fadd fast float %49, 0x3FA47AE140000000
  br label %53

; <label>:53                                      ; preds = %53, %0
  %54 = phi float [ 0.000000e+00, %0 ], [ %150, %53 ]
  %55 = phi float [ 0.000000e+00, %0 ], [ %151, %53 ]
  %56 = phi float [ 0.000000e+00, %0 ], [ %152, %53 ]
  %57 = phi i32 [ 0, %0 ], [ %153, %53 ]
  %58 = add nuw nsw i32 %57, 16
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %58)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = fsub fast float -0.000000e+00, %60
  %64 = fsub fast float -0.000000e+00, %61
  %65 = fsub fast float -0.000000e+00, %62
  %66 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float %63, float %64, float %65)  ; Dot3(ax,ay,az,bx,by,bz)
  %67 = call float @dx.op.unary.f32(i32 25, float %66)  ; Rsqrt(value)
  %68 = fmul fast float %67, %63
  %69 = fmul fast float %67, %64
  %70 = fmul fast float %67, %65
  %71 = fadd fast float %68, %20
  %72 = fadd fast float %69, %21
  %73 = fadd fast float %70, %22
  %74 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %71, float %72, float %73)  ; Dot3(ax,ay,az,bx,by,bz)
  %75 = call float @dx.op.unary.f32(i32 25, float %74)  ; Rsqrt(value)
  %76 = fmul fast float %71, %75
  %77 = fmul fast float %72, %75
  %78 = fmul fast float %73, %75
  %79 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %68, float %69, float %70)  ; Dot3(ax,ay,az,bx,by,bz)
  %80 = call float @dx.op.unary.f32(i32 7, float %79)  ; Saturate(value)
  %81 = call float @dx.op.dot3.f32(i32 55, float %68, float %69, float %70, float %76, float %77, float %78)  ; Dot3(ax,ay,az,bx,by,bz)
  %82 = call float @dx.op.unary.f32(i32 7, float %81)  ; Saturate(value)
  %83 = call float @dx.op.dot3.f32(i32 55, float %25, float %26, float %27, float %76, float %77, float %78)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 7, float %83)  ; Saturate(value)
  %85 = fmul fast float %30, 2.000000e+00
  %86 = fmul fast float %82, %82
  %87 = fmul fast float %86, %85
  %88 = fadd fast float %87, -5.000000e-01
  %89 = fsub fast float 1.000000e+00, %80
  %90 = fmul fast float %89, %89
  %91 = fmul fast float %90, %90
  %92 = fmul fast float %91, %89
  %93 = fmul fast float %92, %88
  %94 = fadd fast float %93, 1.000000e+00
  %95 = fsub fast float 1.000000e+00, %36
  %96 = fmul fast float %95, %95
  %97 = fmul fast float %96, %96
  %98 = fmul fast float %97, %95
  %99 = fmul fast float %98, %88
  %100 = fadd fast float %99, 1.000000e+00
  %101 = fmul fast float %94, %100
  %102 = fmul fast float %37, %37
  %103 = fadd fast float %102, -1.000000e+00
  %104 = fmul fast float %84, %84
  %105 = fmul fast float %104, %103
  %106 = fadd fast float %105, 1.000000e+00
  %107 = fmul fast float %106, %106
  %108 = fmul fast float %107, 0x400921FB60000000
  %109 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %108)  ; FMax(a,b)
  %110 = fdiv fast float %102, %109
  %111 = fsub fast float 0x3FEEB851E0000000, %47
  %112 = fsub fast float 0x3FEEB851E0000000, %48
  %113 = fsub fast float 0x3FEEB851E0000000, %49
  %114 = fsub fast float 1.000000e+00, %82
  %115 = fmul fast float %114, %114
  %116 = fmul fast float %115, %115
  %117 = fmul fast float %116, %114
  %118 = fmul fast float %117, %111
  %119 = fmul fast float %117, %112
  %120 = fmul fast float %117, %113
  %121 = fadd fast float %118, %50
  %122 = fadd fast float %119, %51
  %123 = fadd fast float %120, %52
  %124 = fsub fast float 1.000000e+00, %86
  %125 = fmul fast float %102, 2.500000e-01
  %126 = fmul fast float %125, %124
  %127 = fadd fast float %126, %86
  %128 = fdiv fast float 1.000000e+00, %127
  %129 = fmul fast float %128, %110
  %130 = fmul fast float %129, %121
  %131 = fmul fast float %129, %122
  %132 = fmul fast float %129, %123
  %133 = add nuw nsw i32 %57, 19
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 %133)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = fmul fast float %135, %80
  %139 = fmul fast float %136, %80
  %140 = fmul fast float %137, %80
  %141 = fmul fast float %101, %41
  %142 = fmul fast float %101, %42
  %143 = fmul fast float %101, %43
  %144 = fadd fast float %130, %141
  %145 = fadd fast float %131, %142
  %146 = fadd fast float %132, %143
  %147 = fmul fast float %138, %144
  %148 = fmul fast float %139, %145
  %149 = fmul fast float %140, %146
  %150 = fadd fast float %147, %54
  %151 = fadd fast float %148, %55
  %152 = fadd fast float %149, %56
  %153 = add nuw nsw i32 %57, 1
  %154 = icmp eq i32 %153, 3
  br i1 %154, label %155, label %53

; <label>:155                                     ; preds = %53
  %156 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %25, float %26, float %27, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %157 = extractvalue %dx.types.ResRet.f32 %156, 0
  %158 = extractvalue %dx.types.ResRet.f32 %156, 1
  %159 = extractvalue %dx.types.ResRet.f32 %156, 2
  %160 = fmul fast float %157, %41
  %161 = fmul fast float %158, %42
  %162 = fmul fast float %159, %43
  %163 = fadd fast float %160, %150
  %164 = fadd fast float %161, %151
  %165 = fadd fast float %162, %152
  %166 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.i32 %166, 2
  %168 = sitofp i32 %167 to float
  %169 = fmul fast float %168, %30
  %170 = fsub fast float -0.000000e+00, %20
  %171 = fsub fast float -0.000000e+00, %21
  %172 = fsub fast float -0.000000e+00, %22
  %173 = call float @dx.op.dot3.f32(i32 55, float %170, float %171, float %172, float %25, float %26, float %27)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = fmul fast float %173, 2.000000e+00
  %175 = fmul fast float %174, %25
  %176 = fmul fast float %174, %26
  %177 = fmul fast float %174, %27
  %178 = fsub fast float %170, %175
  %179 = fsub fast float %171, %176
  %180 = fsub fast float %172, %177
  %181 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %3, float %178, float %179, float %180, float undef, i32 undef, i32 undef, i32 undef, float %169)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = fmul fast float %182, %50
  %186 = fmul fast float %183, %51
  %187 = fmul fast float %184, %52
  %188 = fadd fast float %163, %185
  %189 = fadd fast float %164, %186
  %190 = fadd fast float %165, %187
  %191 = extractvalue %dx.types.CBufRet.f32 %31, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %188)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %190)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!12 = !{!13}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!14 = !{[18 x i32] [i32 16, i32 4, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0]}
!15 = !{void ()* @PSConstant, !"PSConstant", !16, !5, null}
!16 = !{!17, !26, null}
!17 = !{!18, !20, !23, !25}
!18 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!19 = !{i32 0}
!20 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 7}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 3, i32 2, i8 0, !22}
!24 = !{i32 2}
!25 = !{i32 3, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!26 = !{!27}
!27 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !28}
!28 = !{i32 3, i32 15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 2048
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0xff3241da, 0x969cc241                // 000000000000: D58041DA 03FFFF32 969CC241
;   v_nop_xbox_data 0xbdee7f69, 0x40338434                // 00000000000C: D5807F69 03FF7BEE 40338434
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[44:45], exec                          // 00000000001C: BEAC047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s2, s13                                 // 000000000024: BE82030D
;   s_mov_b32     s13, 0                                  // 000000000028: BE8D0380
;   s_mov_b32     s3, 0                                   // 00000000002C: BE830380
;   s_or_b32      s41, s17, lit(0x00100000)               // 000000000030: 8829FF11 00100000
;   s_mov_b32     s40, s16                                // 000000000038: BEA80310
;   s_mov_b32     s42, -1                                 // 00000000003C: BEAA03C1
;   s_mov_b32     s43, lit(0x11014fac)                    // 000000000040: BEAB03FF 11014FAC
;   s_load_dwordx8  s[56:63], s[2:3], null                // 000000000048: F40C0E01 FA000000
;   s_mov_b32     s46, s15                                // 000000000050: BEAE030F
;   s_load_dwordx8  s[24:31], s[12:13], null              // 000000000054: F40C0606 FA000000
;   s_buffer_load_dwordx4  s[16:19], s[40:43], null       // 00000000005C: F4280414 FA000000
;   s_mov_b32     m0, s20                                 // 000000000064: BEFC0314
;   s_buffer_load_dwordx16  s[0:15], s[40:43], 0x000100   // 000000000068: F4300014 FA000100
;   v_interp_p1_f32  v2, v0, attr0.y                      // 000000000070: C8080100
;   v_interp_p1_f32  v3, v0, attr0.x                      // 000000000074: C80C0000
;   v_interp_p1_f32  v4, v0, attr0.z                      // 000000000078: C8100200
;   v_interp_p1_f32  v6, v0, attr1.y                      // 00000000007C: C8180500
;   v_interp_p1_f32  v8, v0, attr1.x                      // 000000000080: C8200400
;   v_interp_p2_f32  v2, v1, attr0.y                      // 000000000084: C8090101
;   v_interp_p2_f32  v3, v1, attr0.x                      // 000000000088: C80D0001
;   v_interp_p2_f32  v4, v1, attr0.z                      // 00000000008C: C8110201
;   v_interp_p1_f32  v0, v0, attr1.z                      // 000000000090: C8000600
;   v_interp_p2_f32  v6, v1, attr1.y                      // 000000000094: C8190501
;   v_interp_p2_f32  v8, v1, attr1.x                      // 000000000098: C8210401
;   s_mov_b32     s47, 0                                  // 00000000009C: BEAF0380
;   v_interp_p2_f32  v0, v1, attr1.z                      // 0000000000A0: C8010601
;   v_mul_legacy_f32  v9, v6, v6                          // 0000000000A4: 0E120D06
;   s_waitcnt     lgkmcnt(0)                              // 0000000000A8: BF8CC07F
;   v_sub_f32     v2, s17, v2                             // 0000000000AC: 08040411
;   v_sub_f32     v3, s16, v3                             // 0000000000B0: 08060610
;   v_mul_legacy_f32  v7, s0, s0                          // 0000000000B4: D5070007 00000000
;   v_sub_f32     v4, s18, v4                             // 0000000000BC: 08080812
;   v_fmac_f32    v9, v8, v8                              // 0000000000C0: 56121108
;   v_mul_legacy_f32  v5, v2, v2                          // 0000000000C4: 0E0A0502
;   s_buffer_load_dwordx4  s[20:23], s[40:43], 0x000160   // 0000000000C8: F4280514 FA000160
;   v_fmac_f32    v7, s1, s1                              // 0000000000D0: D52B0007 00000201
;   s_buffer_load_dwordx4  s[16:19], s[40:43], 0x000170   // 0000000000D8: F4280414 FA000170
;   v_fmac_f32    v9, v0, v0                              // 0000000000E0: 56120100
;   v_fmac_f32    v5, v3, v3                              // 0000000000E4: 560A0703
;   v_mul_legacy_f32  v17, s4, s4                         // 0000000000E8: D5070011 00000804
;   v_fmac_f32    v7, s2, s2                              // 0000000000F0: D52B0007 00000402
;   v_rsq_f32     v9, v9                                  // 0000000000F8: 7E125D09
;   v_fmac_f32    v5, v4, v4                              // 0000000000FC: 560A0904
;   v_fmac_f32    v17, s5, s5                             // 000000000100: D52B0011 00000A05
;   v_rsq_f32     v1, v7                                  // 000000000108: 7E025D07
;   v_fmac_f32    v17, s6, s6                             // 00000000010C: D52B0011 00000C06
;   v_rsq_f32     v5, v5                                  // 000000000114: 7E0A5D05
;   v_mul_legacy_f32  v6, v9, v6                          // 000000000118: 0E0C0D09
;   s_waitcnt     lgkmcnt(0)                              // 00000000011C: BF8CC07F
;   v_add_f32     v10, lit(0xbd23d70a), s20               // 000000000120: D503000A 000028FF BD23D70A
;   v_add_f32     v11, lit(0xbd23d70a), s21               // 00000000012C: D503000B 00002AFF BD23D70A
;   v_add_f32     v14, s17, s17                           // 000000000138: D503000E 00002211
;   v_add_f32     v13, lit(0xbd23d70a), s22               // 000000000140: D503000D 00002CFF BD23D70A
;   v_mul_legacy_f32  v8, v9, v8                          // 00000000014C: 0E101109
;   v_fma_f32     v18, v10, s16, lit(0x3d23d70a)          // 000000000150: D54B0012 03FC210A 3D23D70A
;   v_mul_legacy_f32  v0, v9, v0                          // 00000000015C: 0E000109
;   v_readfirstlane_b32  s48, v14                         // 000000000160: 7E60050E
;   v_mul_legacy_f32  v2, v2, v5                          // 000000000164: 0E040B02
;   v_mul_legacy_f32  v3, v3, v5                          // 000000000168: 0E060B03
;   v_mul_legacy_f32  v4, v4, v5                          // 00000000016C: 0E080B04
;   v_fma_f32     v14, v11, s16, lit(0x3d23d70a)          // 000000000170: D54B000E 03FC210B 3D23D70A
;   v_readfirstlane_b32  s11, v18                         // 00000000017C: 7E160512
;   v_fma_f32     v12, -s1, v1, v2                        // 000000000180: D54B000C 240A0201
;   v_fma_f32     v5, -s0, v1, v3                         // 000000000188: D54B0005 240E0200
;   v_fma_f32     v22, -s2, v1, v4                        // 000000000190: D54B0016 24120202
;   v_fma_f32     v18, v13, s16, lit(0x3d23d70a)          // 000000000198: D54B0012 03FC210D 3D23D70A
;   v_mul_legacy_f32  v16, s17, s17                       // 0000000001A4: D5070010 00002211
;   v_mul_legacy_f32  v15, v12, v12                       // 0000000001AC: 0E1E190C
;   v_mul_legacy_f32  v23, v1, -s1                        // 0000000001B0: D5070017 40000301
;   v_readfirstlane_b32  s15, v14                         // 0000000001B8: 7E1E050E
;   v_fma_f32     v10, -v10, s16, lit(0x3f75c28f)         // 0000000001BC: D54B000A 23FC210A 3F75C28F
;   v_mul_legacy_f32  v14, v16, v16                       // 0000000001C8: 0E1C2110
;   v_fmac_f32    v15, v5, v5                             // 0000000001CC: 561E0B05
;   v_fma_f32     v16, v16, v16, -1.0                     // 0000000001D0: D54B0010 03CE2110
;   v_readfirstlane_b32  s19, v18                         // 0000000001D8: 7E260512
;   v_mul_legacy_f32  v21, v1, -s0                        // 0000000001DC: D5070015 40000101
;   v_mul_legacy_f32  v18, v6, v23                        // 0000000001E4: 0E242F06
;   v_fmac_f32    v15, v22, v22                           // 0000000001E8: 561E2D16
;   v_mul_legacy_f32  v19, v6, v2                         // 0000000001EC: 0E260506
;   v_readfirstlane_b32  s50, v10                         // 0000000001F0: 7E64050A
;   v_readfirstlane_b32  s49, v16                         // 0000000001F4: 7E620510
;   v_mul_legacy_f32  v1, v1, -s2                         // 0000000001F8: D5070001 40000501
;   v_rsq_f32     v15, v15                                // 000000000200: 7E1E5D0F
;   v_fmac_f32    v18, v8, v21                            // 000000000204: 56242B08
;   v_fma_f32     v10, v8, v3, v19                        // 000000000208: D54B000A 044E0708
;   v_fma_f32     v7, s16, -s20, s20                      // 000000000210: D54B0007 40502810
;   v_readfirstlane_b32  s20, v14                         // 000000000218: 7E28050E
;   v_fma_f32     v11, -v11, s16, lit(0x3f75c28f)         // 00000000021C: D54B000B 23FC210B 3F75C28F
;   v_fmac_f32    v18, v0, v1                             // 000000000228: 56240300
;   v_fmac_f32    v10, v0, v4                             // 00000000022C: 56140900
;   v_rsq_f32     v17, v17                                // 000000000230: 7E225D11
;   v_fma_f32     v13, -v13, s16, lit(0x3f75c28f)         // 000000000234: D54B000D 23FC210D 3F75C28F
;   v_mul_legacy_f32  v12, v12, v15                       // 000000000240: 0E181F0C
;   v_mul_legacy_f32  v5, v5, v15                         // 000000000244: 0E0A1F05
;   v_mul_legacy_f32  v15, v22, v15                       // 000000000248: 0E1E1F16
;   v_sub_f32     v14, 1.0, v18 clamp                     // 00000000024C: D504800E 000224F2
;   v_sub_f32     v10, 1.0, v10 clamp                     // 000000000254: D504800A 000214F2
;   v_mul_legacy_f32  v9, v6, v12                         // 00000000025C: 0E121906
;   v_mul_legacy_f32  v12, v23, v12                       // 000000000260: 0E181917
;   v_mul_legacy_f32  v16, v14, v14                       // 000000000264: 0E201D0E
;   v_mul_legacy_f32  v20, v17, -s5                       // 000000000268: D5070014 40000B11
;   v_fmac_f32    v9, v8, v5                              // 000000000270: 56120B08
;   v_fmac_f32    v12, v21, v5                            // 000000000274: 56180B15
;   v_mul_legacy_f32  v22, v17, -s4                       // 000000000278: D5070016 40000911
;   v_mul_legacy_f32  v21, v17, -s6                       // 000000000280: D5070015 40000D11
;   v_fmac_f32    v9, v0, v15 clamp                       // 000000000288: D52B8009 00021F00
;   v_fmac_f32    v12, v1, v15                            // 000000000290: 56181F01
;   v_mul_legacy_f32  v15, v10, v10                       // 000000000294: 0E1E150A
;   v_mul_legacy_f32  v1, v16, v16                        // 000000000298: 0E022110
;   v_mul_legacy_f32  v5, v9, v9                          // 00000000029C: 0E0A1309
;   v_mul_legacy_f32  v9, lit(0x3e800000), s20            // 0000000002A0: D5070009 000028FF 3E800000
;   v_mul_legacy_f32  v23, v15, v15                       // 0000000002AC: 0E2E1F0F
;   v_mul_legacy_f32  v1, v1, v14                         // 0000000002B0: 0E021D01
;   v_fma_f32     v5, v5, s49, 1.0                        // 0000000002B4: D54B0005 03C86305
;   v_readfirstlane_b32  s51, v9                          // 0000000002BC: 7E660509
;   v_max_f32     v9, v12, v12 clamp                      // 0000000002C0: D5108009 0002190C
;   v_sub_f32     v12, 1.0, v12 clamp                     // 0000000002C8: D504800C 000218F2
;   v_mul_legacy_f32  v10, v23, v10                       // 0000000002D0: 0E141517
;   v_mul_legacy_f32  v5, v5, v5                          // 0000000002D4: 0E0A0B05
;   v_mul_legacy_f32  v15, v9, v9                         // 0000000002D8: 0E1E1309
;   v_fma_f32     v9, -v9, v9, 1.0                        // 0000000002DC: D54B0009 23CA1309
;   v_mul_legacy_f32  v14, v12, v12                       // 0000000002E4: 0E1C190C
;   v_mul_legacy_f32  v5, lit(0x40490fdb), v5             // 0000000002E8: 0E0A0AFF 40490FDB
;   v_fma_f32     v16, v15, s48, -0.5                     // 0000000002F0: D54B0010 03C4610F
;   v_fmac_f32    v15, s51, v9                            // 0000000002F8: 561E1233
;   v_fma_f32     v9, s16, -s21, s21                      // 0000000002FC: D54B0009 40542A10
;   v_max_f32     v5, lit(0x358637bd), v5                 // 000000000304: 200A0AFF 358637BD
;   v_readfirstlane_b32  s21, v11                         // 00000000030C: 7E2A050B
;   v_mul_legacy_f32  v11, v14, v14                       // 000000000310: 0E161D0E
;   v_fma_f32     v1, v1, v16, 1.0                        // 000000000314: D54B0001 03CA2101
;   v_fma_f32     v14, v10, v16, 1.0                      // 00000000031C: D54B000E 03CA210A
;   v_rcp_f32     v5, v5                                  // 000000000324: 7E0A5505
;   v_mul_legacy_f32  v11, v11, v12                       // 000000000328: 0E16190B
;   v_fma_f32     v12, s16, -s22, s22                     // 00000000032C: D54B000C 40582C10
;   v_mul_legacy_f32  v1, v1, v14                         // 000000000334: 0E021D01
;   v_rcp_f32     v15, v15                                // 000000000338: 7E1E550F
;   v_readfirstlane_b32  s16, v13                         // 00000000033C: 7E20050D
;   v_fma_f32     v23, v11, s50, s11                      // 000000000340: D54B0017 002C650B
;   v_fma_f32     v13, -s5, v17, v2                       // 000000000348: D54B000D 240A2205
;   v_mul_legacy_f32  v14, v1, v7                         // 000000000350: 0E1C0F01
;   v_mul_legacy_f32  v5, s20, v5                         // 000000000354: 0E0A0A14
;   v_mul_legacy_f32  v16, v1, v9                         // 000000000358: 0E201301
;   v_mul_legacy_f32  v1, v1, v12                         // 00000000035C: 0E021901
;   v_mul_legacy_f32  v5, v15, v5                         // 000000000360: 0E0A0B0F
;   v_fma_f32     v15, v11, s21, s15                      // 000000000364: D54B000F 003C2B0B
;   v_fma_f32     v11, v11, s16, s19                      // 00000000036C: D54B000B 004C210B
;   v_fmac_f32    v14, v5, v23                            // 000000000374: 561C2F05
;   v_fmac_f32    v16, v5, v15                            // 000000000378: 56201F05
;   v_fmac_f32    v1, v5, v11                             // 00000000037C: 56021705
;   v_fma_f32     v5, -s4, v17, v3                        // 000000000380: D54B0005 240E2204
;   v_mul_legacy_f32  v11, v13, v13                       // 000000000388: 0E161B0D
;   v_fma_f32     v15, -s6, v17, v4                       // 00000000038C: D54B000F 24122206
;   v_mul_legacy_f32  v17, v6, v20                        // 000000000394: 0E222906
;   s_buffer_load_dwordx8  s[0:7], s[40:43], 0x000140     // 000000000398: F42C0014 FA000140
;   v_fmac_f32    v11, v5, v5                             // 0000000003A0: 56160B05
;   v_fmac_f32    v17, v8, v22                            // 0000000003A4: 56222D08
;   v_fmac_f32    v11, v15, v15                           // 0000000003A8: 56161F0F
;   v_fmac_f32    v17, v0, v21                            // 0000000003AC: 56222B00
;   v_rsq_f32     v11, v11                                // 0000000003B0: 7E165D0B
;   v_mul_legacy_f32  v13, v13, v11                       // 0000000003B4: 0E1A170D
;   v_mul_legacy_f32  v5, v5, v11                         // 0000000003B8: 0E0A1705
;   v_mul_legacy_f32  v11, v15, v11                       // 0000000003BC: 0E16170F
;   v_mul_legacy_f32  v15, v20, v13                       // 0000000003C0: 0E1E1B14
;   v_mul_legacy_f32  v13, v6, v13                        // 0000000003C4: 0E1A1B06
;   v_fmac_f32    v15, v22, v5                            // 0000000003C8: 561E0B16
;   v_fmac_f32    v13, v8, v5                             // 0000000003CC: 561A0B08
;   v_sub_f32     v5, 1.0, v17 clamp                      // 0000000003D0: D5048005 000222F2
;   v_fmac_f32    v15, v21, v11                           // 0000000003D8: 561E1715
;   v_fmac_f32    v13, v0, v11 clamp                      // 0000000003DC: D52B800D 00021700
;   v_mul_legacy_f32  v11, v5, v5                         // 0000000003E4: 0E160B05
;   v_mul_legacy_f32  v11, v11, v11                       // 0000000003E8: 0E16170B
;   v_mul_legacy_f32  v5, v11, v5                         // 0000000003EC: 0E0A0B0B
;   v_max_f32     v11, v15, v15 clamp                     // 0000000003F0: D510800B 00021F0F
;   v_sub_f32     v15, 1.0, v15 clamp                     // 0000000003F8: D504800F 00021EF2
;   v_mul_legacy_f32  v20, v11, v11                       // 000000000400: 0E28170B
;   v_fma_f32     v11, -v11, v11, 1.0                     // 000000000404: D54B000B 23CA170B
;   v_mul_legacy_f32  v21, v15, v15                       // 00000000040C: 0E2A1F0F
;   v_fma_f32     v23, v20, s48, -0.5                     // 000000000410: D54B0017 03C46114
;   v_fmac_f32    v20, s51, v11                           // 000000000418: 56281633
;   v_mul_legacy_f32  v11, v13, v13                       // 00000000041C: 0E161B0D
;   v_mul_legacy_f32  v21, v21, v21                       // 000000000420: 0E2A2B15
;   v_fma_f32     v5, v5, v23, 1.0                        // 000000000424: D54B0005 03CA2F05
;   v_fma_f32     v23, v10, v23, 1.0                      // 00000000042C: D54B0017 03CA2F0A
;   v_fma_f32     v11, v11, s49, 1.0                      // 000000000434: D54B000B 03C8630B
;   v_rcp_f32     v13, v20                                // 00000000043C: 7E1A5514
;   v_mul_legacy_f32  v15, v21, v15                       // 000000000440: 0E1E1F15
;   v_mul_legacy_f32  v5, v5, v23                         // 000000000444: 0E0A2F05
;   v_mul_legacy_f32  v11, v11, v11                       // 000000000448: 0E16170B
;   v_mul_legacy_f32  v20, v5, v7                         // 00000000044C: 0E280F05
;   v_mul_legacy_f32  v11, lit(0x40490fdb), v11           // 000000000450: 0E1616FF 40490FDB
;   v_mul_legacy_f32  v22, v5, v9                         // 000000000458: 0E2C1305
;   v_mul_legacy_f32  v5, v5, v12                         // 00000000045C: 0E0A1905
;   v_max_f32     v11, lit(0x358637bd), v11               // 000000000460: 201616FF 358637BD
;   v_rcp_f32     v11, v11                                // 000000000468: 7E16550B
;   v_mul_legacy_f32  v11, s20, v11                       // 00000000046C: 0E161614
;   v_mul_legacy_f32  v11, v13, v11                       // 000000000470: 0E16170D
;   v_fma_f32     v13, v15, s50, s11                      // 000000000474: D54B000D 002C650F
;   v_fmac_f32    v20, v11, v13                           // 00000000047C: 56281B0B
;   v_fma_f32     v13, v15, s21, s15                      // 000000000480: D54B000D 003C2B0F
;   v_fmac_f32    v22, v11, v13                           // 000000000488: 562C1B0B
;   v_fma_f32     v13, v15, s16, s19                      // 00000000048C: D54B000D 004C210F
;   v_max_f32     v15, v17, v17 clamp                     // 000000000494: D510800F 00022311
;   v_fmac_f32    v5, v11, v13                            // 00000000049C: 560A1B0B
;   v_max_f32     v11, v18, v18 clamp                     // 0000000004A0: D510800B 00022512
;   v_mul_legacy_f32  v13, s12, v11                       // 0000000004A8: 0E1A160C
;   v_mul_legacy_f32  v17, s13, v11                       // 0000000004AC: 0E22160D
;   v_mul_legacy_f32  v11, s14, v11                       // 0000000004B0: 0E16160E
;   v_mul_legacy_f32  v13, v13, v14                       // 0000000004B4: 0E1A1D0D
;   s_waitcnt     lgkmcnt(0)                              // 0000000004B8: BF8CC07F
;   v_mul_legacy_f32  v14, s0, v15                        // 0000000004BC: 0E1C1E00
;   v_mul_legacy_f32  v16, v17, v16                       // 0000000004C0: 0E202111
;   v_mul_legacy_f32  v17, s1, v15                        // 0000000004C4: 0E221E01
;   v_mul_legacy_f32  v11, v11, v1                        // 0000000004C8: 0E16030B
;   v_fmac_f32    v13, v14, v20                           // 0000000004CC: 561A290E
;   v_mul_legacy_f32  v14, s8, s8                         // 0000000004D0: D507000E 00001008
;   v_fmac_f32    v16, v17, v22                           // 0000000004D8: 56202D11
;   v_fmac_f32    v14, s9, s9                             // 0000000004DC: D52B000E 00001209
;   v_fmac_f32    v14, s10, s10                           // 0000000004E4: D52B000E 0000140A
;   v_rsq_f32     v14, v14                                // 0000000004EC: 7E1C5D0E
;   v_fma_f32     v18, -s9, v14, v2                       // 0000000004F0: D54B0012 240A1C09
;   v_fma_f32     v17, -s8, v14, v3                       // 0000000004F8: D54B0011 240E1C08
;   v_mul_legacy_f32  v22, v14, -s8                       // 000000000500: D5070016 4000110E
;   v_mul_legacy_f32  v21, v14, -s9                       // 000000000508: D5070015 4000130E
;   v_mul_legacy_f32  v23, v14, -s10                      // 000000000510: D5070017 4000150E
;   v_mul_legacy_f32  v20, v18, v18                       // 000000000518: 0E282512
;   v_fma_f32     v14, -s10, v14, v4                      // 00000000051C: D54B000E 24121C0A
;   v_fmac_f32    v20, v17, v17                           // 000000000524: 56282311
;   v_fmac_f32    v20, v14, v14                           // 000000000528: 56281D0E
;   v_rsq_f32     v20, v20                                // 00000000052C: 7E285D14
;   v_mul_legacy_f32  v18, v18, v20                       // 000000000530: 0E242912
;   v_mul_legacy_f32  v17, v17, v20                       // 000000000534: 0E222911
;   v_mul_legacy_f32  v14, v14, v20                       // 000000000538: 0E1C290E
;   v_mul_legacy_f32  v20, v21, v18                       // 00000000053C: 0E282515
;   v_mul_legacy_f32  v18, v6, v18                        // 000000000540: 0E242506
;   v_fmac_f32    v20, v22, v17                           // 000000000544: 56282316
;   v_fmac_f32    v18, v8, v17                            // 000000000548: 56242308
;   v_mul_legacy_f32  v17, v6, v21                        // 00000000054C: 0E222B06
;   v_fmac_f32    v20, v23, v14                           // 000000000550: 56281D17
;   v_fmac_f32    v18, v0, v14 clamp                      // 000000000554: D52B8012 00021D00
;   v_fmac_f32    v17, v8, v22                            // 00000000055C: 56222D08
;   v_fmac_f32    v17, v0, v23                            // 000000000560: 56222F00
;   v_sub_f32     v21, 1.0, v17 clamp                     // 000000000564: D5048015 000222F2
;   v_max_f32     v17, v17, v17 clamp                     // 00000000056C: D5108011 00022311
;   v_mul_legacy_f32  v22, v21, v21                       // 000000000574: 0E2C2B15
;   v_mul_legacy_f32  v22, v22, v22                       // 000000000578: 0E2C2D16
;   v_mul_legacy_f32  v21, v22, v21                       // 00000000057C: 0E2A2B16
;   v_max_f32     v22, v20, v20 clamp                     // 000000000580: D5108016 00022914
;   v_mul_legacy_f32  v23, v22, v22                       // 000000000588: 0E2E2D16
;   v_fma_f32     v1, v23, s48, -0.5                      // 00000000058C: D54B0001 03C46117
;   v_fma_f32     v21, v21, v1, 1.0                       // 000000000594: D54B0015 03CA0315
;   v_fma_f32     v10, v10, v1, 1.0                       // 00000000059C: D54B000A 03CA030A
;   v_mul_legacy_f32  v1, v21, v10                        // 0000000005A4: 0E021515
;   v_sub_f32     v21, 1.0, v20 clamp                     // 0000000005A8: D5048015 000228F2
;   v_mul_legacy_f32  v14, v21, v21                       // 0000000005B0: 0E1C2B15
;   v_mul_legacy_f32  v14, v14, v14                       // 0000000005B4: 0E1C1D0E
;   v_mul_legacy_f32  v10, v14, v21                       // 0000000005B8: 0E142B0E
;   v_fma_f32     v14, -v22, v22, 1.0                     // 0000000005BC: D54B000E 23CA2D16
;   v_mul_legacy_f32  v22, s2, v15                        // 0000000005C4: 0E2C1E02
;   v_mul_legacy_f32  v15, v1, v7                         // 0000000005C8: 0E1E0F01
;   s_load_dwordx4  s[0:3], s[46:47], null                // 0000000005CC: F4080017 FA000000
;   v_fmac_f32    v23, s51, v14                           // 0000000005D4: 562E1C33
;   v_mul_legacy_f32  v14, v18, v18                       // 0000000005D8: 0E1C2512
;   v_fmac_f32    v11, v22, v5                            // 0000000005DC: 56160B16
;   v_fma_f32     v5, v10, s50, s11                       // 0000000005E0: D54B0005 002C650A
;   v_fma_f32     v18, v10, s21, s15                      // 0000000005E8: D54B0012 003C2B0A
;   v_rcp_f32     v23, v23                                // 0000000005F0: 7E2E5517
;   v_fma_f32     v14, v14, s49, 1.0                      // 0000000005F4: D54B000E 03C8630E
;   v_fma_f32     v10, v10, s16, s19                      // 0000000005FC: D54B000A 004C210A
;   v_mul_legacy_f32  v22, s6, v17                        // 000000000604: 0E2C2206
;   v_mul_legacy_f32  v14, v14, v14                       // 000000000608: 0E1C1D0E
;   v_mul_legacy_f32  v14, lit(0x40490fdb), v14           // 00000000060C: 0E1C1CFF 40490FDB
;   v_max_f32     v14, lit(0x358637bd), v14               // 000000000614: 201C1CFF 358637BD
;   v_rcp_f32     v14, v14                                // 00000000061C: 7E1C550E
;   v_mul_legacy_f32  v14, s20, v14                       // 000000000620: 0E1C1C14
;   v_mul_legacy_f32  v20, v23, v14                       // 000000000624: 0E281D17
;   v_fmac_f32    v15, v20, v5                            // 000000000628: 561E0B14
;   v_mul_legacy_f32  v5, v1, v9                          // 00000000062C: 0E0A1301
;   v_mul_legacy_f32  v1, v1, v12                         // 000000000630: 0E021901
;   v_fmac_f32    v5, v20, v18                            // 000000000634: 560A2514
;   v_cubema_f32  v18, v8, v6, v0                         // 000000000638: D5470012 04020D08
;   v_fmac_f32    v1, v20, v10                            // 000000000640: 56021514
;   v_mul_legacy_f32  v10, s4, v17                        // 000000000644: 0E142204
;   v_rcp_f32     v14, abs(v18)                           // 000000000648: D5AA010E 00000112
;   v_mul_legacy_f32  v18, s5, v17                        // 000000000650: 0E242205
;   v_fmac_f32    v13, v10, v15                           // 000000000654: 561A1F0A
;   v_cubesc_f32  v17, v8, v6, v0                         // 000000000658: D5450011 04020D08
;   v_mov_b32     v15, lit(0x3fc00000)                    // 000000000660: 7E1E02FF 3FC00000
;   v_fmac_f32    v11, v22, v1                            // 000000000668: 56160316
;   v_fmac_f32    v16, v18, v5                            // 00000000066C: 56200B12
;   v_cubetc_f32  v5, v8, v6, v0                          // 000000000670: D5460005 04020D08
;   v_mov_b32     v18, s23                                // 000000000678: 7E240217
;   v_cubeid_f32  v22, v8, v6, v0                         // 00000000067C: D5440016 04020D08
;   v_mad_f32     v20, v17, v14, v15                      // 000000000684: D5410014 043E1D11
;   v_mad_f32     v21, v5, v14, v15                       // 00000000068C: D5410015 043E1D05
;   s_and_b64     exec, exec, s[44:45]                    // 000000000694: 87FE2C7E
;   v_fma_f32     v1, -v3, v8, -v19                       // 000000000698: D54B0001 A44E1103
;   v_cvt_f32_i32  v14, s18                               // 0000000006A0: 7E1C0A12
;   v_fmac_f32    v1, -v4, v0 mul:2                       // 0000000006A4: D52B0001 28020104
;   v_mul_legacy_f32  v5, s17, v14                        // 0000000006AC: 0E0A1C11
;   v_fma_f32     v3, -v1, v8, -v3                        // 0000000006B0: D54B0003 A40E1101
;   v_fma_f32     v6, -v1, v6, -v2                        // 0000000006B8: D54B0006 A40A0D01
;   v_fma_f32     v4, -v1, v0, -v4                        // 0000000006C0: D54B0004 A4120101
;   v_cubema_f32  v0, v3, v6, v4                          // 0000000006C8: D5470000 04120D03
;   v_cubesc_f32  v17, v3, v6, v4                         // 0000000006D0: D5450011 04120D03
;   v_cubetc_f32  v10, v3, v6, v4                         // 0000000006D8: D546000A 04120D03
;   v_cubeid_f32  v6, v3, v6, v4                          // 0000000006E0: D5440006 04120D03
;   v_rcp_f32     v8, abs(v0)                             // 0000000006E8: D5AA0108 00000100
;   s_waitcnt     lgkmcnt(0)                              // 0000000006F0: BF8CC07F
;   image_sample  v[0:2], v[20:22], s[56:63], s[0:3] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 0000000006F4: F0800718 000E0014
;   v_mad_f32     v4, v17, v8, v15                        // 0000000006FC: D5410004 043E1111
;   v_mac_f32     v15, v10, v8                            // 000000000704: 3E1E110A
;   image_sample_l  v[4:6], [v4,v15,v6,v5], s[24:31], s[0:3] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 000000000708: F090071A 00060404 0005060F
;   s_waitcnt     vmcnt(1)                                // 000000000714: BF8C3F71
;   v_fmac_f32    v13, v0, v7                             // 000000000718: 561A0F00
;   v_fmac_f32    v16, v1, v9                             // 00000000071C: 56201301
;   v_fmac_f32    v11, v2, v12                            // 000000000720: 56161902
;   s_waitcnt     vmcnt(0)                                // 000000000724: BF8C3F70
;   v_fmac_f32    v13, s11, v4                            // 000000000728: 561A080B
;   v_fmac_f32    v16, s15, v5                            // 00000000072C: 56200A0F
;   v_fmac_f32    v11, s19, v6                            // 000000000730: 56160C13
;   s_nop         0x0000                                  // 000000000734: BF800000
;   s_nop         0x0000                                  // 000000000738: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v13, v16                     // 00000000073C: 5E00210D
;   v_cvt_pkrtz_f16_f32  v1, v11, v18                     // 000000000740: 5E02250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000744: F8001C0F 00000100
;   s_endpgm                                              // 00000000074C: BF810000
;   s_code_end                                            // 000000000750: BF9F0000
;   s_code_end                                            // 000000000754: BF9F0000
;   s_code_end                                            // 000000000758: BF9F0000
;   s_code_end                                            // 00000000075C: BF9F0000
;   s_code_end                                            // 000000000760: BF9F0000
;   s_code_end                                            // 000000000764: BF9F0000
;   s_code_end                                            // 000000000768: BF9F0000
;   s_code_end                                            // 00000000076C: BF9F0000
;   s_code_end                                            // 000000000770: BF9F0000
;   s_code_end                                            // 000000000774: BF9F0000
;   s_code_end                                            // 000000000778: BF9F0000
;   s_code_end                                            // 00000000077C: BF9F0000
;   s_code_end                                            // 000000000780: BF9F0000
;   s_code_end                                            // 000000000784: BF9F0000
;   s_code_end                                            // 000000000788: BF9F0000
;   s_code_end                                            // 00000000078C: BF9F0000
;   s_code_end                                            // 000000000790: BF9F0000
;   s_code_end                                            // 000000000794: BF9F0000
;   s_code_end                                            // 000000000798: BF9F0000
;   s_code_end                                            // 00000000079C: BF9F0000
;   s_code_end                                            // 0000000007A0: BF9F0000
;   s_code_end                                            // 0000000007A4: BF9F0000
;   s_code_end                                            // 0000000007A8: BF9F0000
;   s_code_end                                            // 0000000007AC: BF9F0000
;   s_code_end                                            // 0000000007B0: BF9F0000
;   s_code_end                                            // 0000000007B4: BF9F0000
;   s_code_end                                            // 0000000007B8: BF9F0000
;   s_code_end                                            // 0000000007BC: BF9F0000
;   s_code_end                                            // 0000000007C0: BF9F0000
;   s_code_end                                            // 0000000007C4: BF9F0000
;   s_code_end                                            // 0000000007C8: BF9F0000
;   s_code_end                                            // 0000000007CC: BF9F0000
;   s_code_end                                            // 0000000007D0: BF9F0000
;   s_code_end                                            // 0000000007D4: BF9F0000
;   s_code_end                                            // 0000000007D8: BF9F0000
;   s_code_end                                            // 0000000007DC: BF9F0000
;   s_code_end                                            // 0000000007E0: BF9F0000
;   s_code_end                                            // 0000000007E4: BF9F0000
;   s_code_end                                            // 0000000007E8: BF9F0000
;   s_code_end                                            // 0000000007EC: BF9F0000
;   s_code_end                                            // 0000000007F0: BF9F0000
;   s_code_end                                            // 0000000007F4: BF9F0000
;   s_code_end                                            // 0000000007F8: BF9F0000
;   s_code_end                                            // 0000000007FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 72, resource_class: 0 (SRV), index: 5, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[1] {  instr_offset: 84, resource_class: 0 (SRV), index: 4, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[2] {  instr_offset: 1484, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 4
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 4
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 5
;       allocated_offset : 13
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 15
;       orig_rootsig_slot_id: 7
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 30
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSConstant)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 2
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 2 {
;     num_interp: 2
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 461
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0xd,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v13, off, off, off done vm        // 000000000010: F8001801 0000000D
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x100d,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v13, v16, off, off done vm        // 000000000010: F8001803 0000100D
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x120d,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v13, v18, off, off done vm        // 000000000010: F8001803 0000120D
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e00210d,
;        0x5e02250b,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v13, v16                     // 000000000008: 5E00210D
;   v_cvt_pkrtz_f16_f32  v1, v11, v18                     // 00000000000C: 5E02250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x2210d,
;        0xd7690001,
;        0x2250b,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v13, v16                    // 000000000000: D7690000 0002210D
;   v_cvt_pknorm_u16_f32  v1, v11, v18                    // 000000000008: D7690001 0002250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x2210d,
;        0xd7680001,
;        0x2250b,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v13, v16                    // 000000000000: D7680000 0002210D
;   v_cvt_pknorm_i16_f32  v1, v11, v18                    // 000000000008: D7680001 0002250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x2210d,
;        0xd76a0001,
;        0x2250b,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v13, v16                        // 000000000000: D76A0000 0002210D
;   v_cvt_pk_u16_u32  v1, v11, v18                        // 000000000008: D76A0001 0002250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x2210d,
;        0xd76b0001,
;        0x2250b,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v13, v16                        // 000000000000: D76B0000 0002210D
;   v_cvt_pk_i16_i32  v1, v11, v18                        // 000000000008: D76B0001 0002250B
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x120b100d,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v13, v16, v11, v18 done vm        // 000000000010: F800180F 120B100D
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:295,SAlu:23,VMem:2,SMem:8,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char PBREffect_PSConstant[] = {
  0x44, 0x58, 0x42, 0x43, 0xa4, 0x97, 0xe1, 0x11, 0xc5, 0x8a, 0xc9, 0xc4,
  0x06, 0x0c, 0x5f, 0x11, 0xa5, 0xfe, 0x79, 0x29, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x19, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xac, 0x02, 0x00, 0x00, 0x5c, 0x04, 0x00, 0x00, 0xe4, 0x04, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x78, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xda, 0x41, 0x32, 0xff, 0x41, 0xc2, 0x9c, 0x96,
  0x69, 0x7f, 0xee, 0xbd, 0x34, 0x84, 0x33, 0x40, 0x44, 0x58, 0x49, 0x4c,
  0x08, 0x14, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0xa0, 0x0c, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xb8, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x18, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x2c, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3c, 0x0d, 0x00, 0x00,
  0xba, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xf8, 0x13, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x2e, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xa0, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x25, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x4f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xac, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94,
  0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0xce, 0x4d, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0xfe, 0x4a, 0x48, 0x2b, 0x31, 0xf9, 0xc5,
  0x6d, 0xa3, 0x62, 0x18, 0x86, 0x81, 0xa0, 0xe2, 0x9e, 0xe1, 0xf2, 0x27,
  0xec, 0x21, 0x24, 0x3f, 0x04, 0x9a, 0x61, 0x21, 0x50, 0x10, 0x15, 0x06,
  0x22, 0x24, 0x69, 0x18, 0x86, 0x81, 0x20, 0x88, 0x81, 0xa6, 0xa3, 0x86,
  0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0x7c,
  0xe4, 0xb6, 0x11, 0x41, 0x10, 0x04, 0x51, 0x88, 0x8a, 0x90, 0x08, 0xb2,
  0x8e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0xb9, 0x8d, 0x2a, 0x56,
  0x62, 0xf2, 0x8b, 0xdb, 0x46, 0xc4, 0x30, 0x0c, 0x43, 0x21, 0x30, 0x42,
  0x22, 0x28, 0x9b, 0x23, 0x08, 0x8a, 0x21, 0x11, 0x05, 0x41, 0x6c, 0xc4,
  0x0d, 0x04, 0x0c, 0x23, 0x0c, 0xc3, 0x4c, 0x64, 0x30, 0x0e, 0xec, 0x10,
  0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50,
  0x0f, 0xf2, 0x50, 0x0e, 0xa3, 0x50, 0x0f, 0xe2, 0x50, 0x0e, 0x7c, 0x60,
  0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0,
  0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e, 0x00,
  0x06, 0x7e, 0x80, 0x82, 0x8f, 0xc0, 0x61, 0x04, 0x62, 0x48, 0x02, 0x31,
  0x07, 0xbe, 0xa3, 0x0e, 0x47, 0x9a, 0x16, 0x00, 0x73, 0xa8, 0xc9, 0xe7,
  0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92, 0x90, 0xf3, 0x8d, 0xe4, 0x38, 0x92,
  0xe4, 0x37, 0x0c, 0x03, 0x31, 0x0c, 0x54, 0xde, 0x24, 0x4d, 0x11, 0x25,
  0x4c, 0x3e, 0x0b, 0x30, 0xcf, 0x42, 0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a,
  0x08, 0x3a, 0x53, 0x82, 0x98, 0x02, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x4c, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb1, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x93, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x87, 0x03, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x10,
  0x4a, 0xa1, 0x24, 0x0a, 0xd1, 0xa0, 0x0c, 0xca, 0xa1, 0x08, 0xca, 0x83,
  0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1, 0x70,
  0x06, 0x80, 0xcc, 0x19, 0x00, 0x42, 0x67, 0x00, 0x28, 0x1d, 0x4b, 0x82,
  0x08, 0x00, 0x00, 0x80, 0xe3, 0x38, 0x80, 0xe3, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x2c,
  0x13, 0x04, 0x82, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x68, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x38, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x61, 0xd0, 0x11, 0x98, 0x20, 0x10, 0xcf, 0x04, 0x81, 0x80,
  0x26, 0x08, 0x44, 0xb4, 0x41, 0x38, 0xa4, 0x0d, 0xc9, 0xe1, 0x3c, 0x07,
  0x64, 0x44, 0xc7, 0xb4, 0x21, 0x31, 0x9c, 0xe7, 0x88, 0x8c, 0xe8, 0x98,
  0x36, 0x08, 0x54, 0x35, 0x41, 0x30, 0x03, 0x6f, 0x82, 0x40, 0x48, 0x1b,
  0x90, 0xe3, 0x7a, 0x8e, 0xc3, 0xc0, 0x80, 0x0d, 0x41, 0x36, 0x41, 0x40,
  0x83, 0x6f, 0x03, 0x72, 0x6c, 0xcf, 0x61, 0x18, 0x07, 0xb0, 0x21, 0xe0,
  0x36, 0x10, 0x16, 0xa0, 0x75, 0x13, 0x84, 0x34, 0x00, 0x83, 0x0d, 0xc1,
  0x37, 0x41, 0x10, 0x00, 0x2a, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x74,
  0x61, 0x6e, 0x74, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e, 0x9e, 0xa4, 0x88,
  0x26, 0x08, 0xc5, 0x35, 0x41, 0x28, 0xb0, 0x0d, 0xc1, 0x31, 0x41, 0x28,
  0xb2, 0x0d, 0xcb, 0x31, 0x06, 0x64, 0x50, 0x06, 0x66, 0x70, 0x06, 0xc6,
  0x19, 0x1c, 0x65, 0x00, 0x6c, 0x08, 0x8c, 0x09, 0x42, 0xa1, 0x4d, 0x10,
  0x88, 0x69, 0x82, 0x40, 0x50, 0x1b, 0x84, 0x35, 0x60, 0x83, 0x0d, 0x8b,
  0x31, 0x06, 0x64, 0x50, 0x06, 0x69, 0x70, 0x06, 0x86, 0x1a, 0x18, 0x65,
  0xd0, 0x06, 0x13, 0x04, 0xa2, 0xda, 0x10, 0xbc, 0xc1, 0x04, 0xa1, 0xd8,
  0x36, 0x2c, 0x6f, 0x30, 0x06, 0x64, 0x50, 0x06, 0x70, 0x70, 0x06, 0x46,
  0x1c, 0xbc, 0x41, 0x19, 0xb4, 0x01, 0x8b, 0xa1, 0x27, 0xa6, 0x27, 0xa9,
  0x0d, 0xcb, 0x1a, 0xcc, 0x01, 0x19, 0x94, 0x81, 0x19, 0x9c, 0x81, 0xa1,
  0x06, 0x6b, 0x50, 0x06, 0xc0, 0x06, 0x02, 0x0d, 0xdc, 0x40, 0x0e, 0xe8,
  0x80, 0xc9, 0x94, 0xd5, 0x17, 0x55, 0x98, 0xdc, 0x59, 0x19, 0xdd, 0x04,
  0xa1, 0xe0, 0x26, 0x08, 0x84, 0xb5, 0x41, 0x58, 0x03, 0x3c, 0xd8, 0xb0,
  0x1c, 0x76, 0x40, 0x06, 0x77, 0x60, 0x06, 0x65, 0x60, 0xa8, 0xc1, 0x51,
  0x06, 0x79, 0xb0, 0x21, 0xd0, 0x83, 0x0d, 0x43, 0x1d, 0xec, 0x01, 0xb0,
  0xa1, 0x08, 0x03, 0x31, 0xe0, 0x03, 0x0f, 0x68, 0x85, 0x27, 0xf6, 0x86,
  0xe7, 0x32, 0xf6, 0xd6, 0x06, 0x97, 0xc6, 0x56, 0x26, 0xe7, 0xf2, 0x06,
  0x47, 0x97, 0xf6, 0xe6, 0x36, 0x37, 0x25, 0x10, 0xaa, 0xb0, 0xb1, 0xd9,
  0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9, 0xd1, 0x4d, 0x09, 0x88, 0x2a, 0x64,
  0x78, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x82, 0xa3,
  0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18, 0x9b, 0x5d, 0x99, 0xdc, 0x94, 0x20,
  0xa9, 0x43, 0x86, 0xe7, 0x32, 0x87, 0x16, 0x46, 0x56, 0x26, 0xd7, 0xf4,
  0x46, 0x56, 0xc6, 0x36, 0x25, 0x60, 0xca, 0x90, 0xe1, 0xb9, 0xc8, 0x95,
  0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95, 0xcd, 0x4d, 0x09, 0xba, 0x3a, 0x64,
  0x78, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74,
  0x65, 0x53, 0x82, 0xaf, 0x0e, 0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c,
  0x1e, 0xd4, 0x5b, 0x9a, 0x1b, 0xdd, 0xdc, 0x94, 0x80, 0x0f, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81,
  0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d,
  0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x2d, 0x00, 0x00, 0x00, 0x06, 0xa0, 0xa4, 0x2c, 0xe7, 0x34, 0xd2, 0x04,
  0x34, 0x93, 0x15, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10,
  0x61, 0x7e, 0x71, 0xdb, 0x96, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10,
  0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6,
  0x17, 0xb7, 0x6d, 0x08, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55,
  0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x3e, 0x72,
  0xdb, 0xa6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44,
  0x84, 0x40, 0x33, 0x2c, 0x84, 0x0d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f,
  0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3,
  0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x66, 0x00,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5, 0x6d,
  0xdb, 0x41, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b, 0x51,
  0x12, 0x15, 0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3,
  0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d,
  0x1b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98, 0x5f,
  0xdc, 0x36, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x43, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5f, 0xe1, 0x95, 0x49,
  0x19, 0x15, 0x48, 0xb1, 0x94, 0x4b, 0xc9, 0x94, 0x5c, 0xd9, 0x95, 0xdb,
  0x0c, 0x00, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xe8, 0x37, 0x46, 0xd0,
  0xf7, 0x2d, 0x8b, 0x6b, 0x63, 0x04, 0xbb, 0x3f, 0xca, 0x24, 0x18, 0x8c,
  0x11, 0x80, 0x20, 0x08, 0xe2, 0xbf, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08,
  0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06, 0x33, 0x00, 0x63,
  0x04, 0x2f, 0x0d, 0xaf, 0xf7, 0x37, 0x02, 0x30, 0x46, 0xa0, 0xe2, 0xf5,
  0x29, 0x7b, 0x63, 0x04, 0x2a, 0x5e, 0x9f, 0xb2, 0x2f, 0x8c, 0x11, 0x80,
  0x20, 0x08, 0x82, 0xa0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xc9, 0x41, 0x44, 0x06, 0x71,
  0xc0, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x70, 0x73, 0x20,
  0x95, 0x41, 0x1c, 0xb8, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x1c, 0x1d, 0x4c, 0x63, 0x20, 0x07, 0x73, 0xd0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x01, 0x57, 0x07, 0x94, 0x19, 0xcc, 0xc1, 0x1c, 0x78, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x41, 0x1c, 0xac, 0x01, 0x1d,
  0xa0, 0x81, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x28, 0xc8,
  0x01, 0x1b, 0xd4, 0xc1, 0x37, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0x11, 0x0a, 0x73, 0xd0, 0x06, 0x76, 0x90, 0x06, 0xd4, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0xa2, 0x40, 0x07, 0x78, 0x70, 0x07, 0x6b, 0x50,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x31, 0x0a, 0x75, 0x90, 0x07,
  0x78, 0x20, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa4,
  0x60, 0x07, 0x7a, 0x90, 0x07, 0x6c, 0x70, 0x8d, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0x41, 0xd6, 0x07, 0xda, 0xa1, 0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc3, 0x11, 0x1f, 0x1b, 0x8e, 0xf8,
  0xd8, 0x70, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x55,
  0x00, 0x83, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0x46, 0x15, 0xc8, 0x20, 0xb0, 0x22, 0x90, 0x8f, 0x15, 0x82, 0x7c,
  0xac, 0x18, 0xe4, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xca, 0x2b,
  0x94, 0x81, 0x14, 0x41, 0x52, 0x04, 0x8d, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0xf3, 0x0a, 0x69, 0x10, 0x58, 0x40, 0xc9, 0xc7, 0x04, 0x4a, 0x3e,
  0x36, 0x50, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x15,
  0xd6, 0x00, 0x73, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xc8, 0x62, 0xc1, 0x0d, 0x36, 0x39, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x05, 0x00, 0x41, 0x30, 0x50, 0x76, 0x21, 0x0e, 0x94, 0x04, 0x79, 0x9c,
  0x66, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x5d, 0x58, 0x85, 0xc0,
  0x8e, 0x43, 0x3e, 0x66, 0x24, 0xf2, 0x31, 0x43, 0x91, 0x8f, 0x19, 0x8b,
  0x7c, 0x2c, 0x19, 0xe2, 0x63, 0xc9, 0x10, 0x1f, 0x4b, 0x86, 0xf8, 0x18,
  0xe3, 0x06, 0xf0, 0x31, 0xe6, 0x0d, 0xe0, 0x63, 0x0c, 0x1c, 0xc0, 0xc7,
  0x06, 0x49, 0x3e, 0x36, 0x4c, 0xf2, 0xb1, 0x81, 0x92, 0x8f, 0x0d, 0x75,
  0x00, 0x1f, 0x1b, 0xec, 0x00, 0x3e, 0x36, 0xdc, 0x01, 0x7c, 0x66, 0x09,
  0x82, 0x81, 0x8a, 0x41, 0x1e, 0x80, 0xd0, 0x08, 0x06, 0x2a, 0x06, 0x7a,
  0x00, 0x42, 0x23, 0x18, 0xa8, 0x18, 0xec, 0x01, 0x08, 0x8d, 0x60, 0xa0,
  0x82, 0x70, 0x0d, 0x20, 0x34, 0x02, 0x0b, 0x5a, 0x01, 0x06, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x90, 0xb1, 0x43, 0x2a, 0xd8, 0x41, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xf6, 0x07, 0x43,
  0x7c, 0x0c, 0x14, 0x86, 0xf8, 0x58, 0x28, 0x0c, 0xf1, 0x19, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x03, 0x25, 0x1f, 0x5e, 0x61, 0x10, 0x82, 0x41, 0x08,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0xc9, 0x87, 0x59, 0x08, 0x2c,
  0x28, 0xe4, 0x63, 0x42, 0x21, 0x1f, 0x1b, 0x0a, 0xf9, 0xd8, 0x20, 0x07,
  0xf0, 0xb1, 0x41, 0x0e, 0xe0, 0x63, 0x83, 0x1c, 0xc0, 0x67, 0xc4, 0x60,
  0x01, 0x40, 0x10, 0x0c, 0x94, 0x90, 0xb8, 0x85, 0x41, 0x08, 0x06, 0x21,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x26, 0x24, 0x76, 0x21, 0xb0,
  0x22, 0x90, 0x8f, 0x15, 0x82, 0x7c, 0xac, 0x18, 0xe4, 0x33, 0x62, 0xb0,
  0x00, 0x20, 0x08, 0x06, 0x8a, 0x49, 0xf0, 0x42, 0x1d, 0xd0, 0xc1, 0x1c,
  0x2c, 0x4a, 0x32, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8c, 0x49, 0xd8,
  0x43, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x0a, 0x4a, 0xf8, 0x42,
  0xc3, 0x2c, 0x05, 0x31, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x83,
  0x12, 0xf8, 0x10, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x81, 0xa2, 0x12,
  0xe0, 0x90, 0x07, 0x78, 0x70, 0x07, 0x87, 0x51, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0xa3, 0x12, 0xfa, 0x10, 0x98, 0x1d, 0xec, 0x82, 0x7c,
  0x8c, 0x20, 0xe4, 0x63, 0x81, 0x20, 0x1f, 0x0b, 0x7e, 0x01, 0x3e, 0x86,
  0x0b, 0x49, 0x7c, 0x2c, 0x08, 0xe4, 0x63, 0x41, 0x20, 0x1f, 0x0b, 0x06,
  0xf9, 0x58, 0x50, 0xc8, 0xc7, 0x82, 0x5e, 0x80, 0x8f, 0xf9, 0x82, 0x1e,
  0xc4, 0xc7, 0x82, 0x40, 0x3e, 0x16, 0x04, 0xf2, 0xb1, 0x60, 0x90, 0x8f,
  0x05, 0x8b, 0x7c, 0x2c, 0x18, 0x07, 0xf8, 0xd8, 0x11, 0xc8, 0xc7, 0x40,
  0x01, 0x14, 0xe4, 0x63, 0xc1, 0x3b, 0xc0, 0xc7, 0x28, 0x4a, 0x3e, 0x16,
  0x08, 0xf2, 0xb1, 0x20, 0x1d, 0xe0, 0x63, 0x41, 0x20, 0x1f, 0x0b, 0xea,
  0x41, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xe0, 0x88, 0x45, 0x48,
  0xdc, 0x43, 0x60, 0x48, 0x40, 0x1f, 0x9b, 0x87, 0x3f, 0x88, 0x8f, 0xd1,
  0xc3, 0x1f, 0xc4, 0xc7, 0xea, 0xe1, 0x0f, 0xe2, 0x63, 0xf1, 0x00, 0x06,
  0xf1, 0xb1, 0x20, 0x90, 0x8f, 0x05, 0x81, 0x7c, 0x2c, 0x18, 0xe4, 0x63,
  0xc1, 0x21, 0x1f, 0x13, 0x0e, 0xf9, 0xd8, 0x70, 0xc8, 0xc7, 0x06, 0x53,
  0x80, 0x8f, 0x0d, 0xa6, 0x00, 0x1f, 0x1b, 0x4c, 0x01, 0x3e, 0xb6, 0x0f,
  0x66, 0x10, 0x1f, 0xbb, 0x50, 0x42, 0x3e, 0x16, 0x08, 0xf2, 0xb1, 0x20,
  0x0d, 0xe0, 0x63, 0xff, 0x10, 0xd0, 0xc7, 0x82, 0x49, 0x3e, 0x16, 0x24,
  0xf2, 0x31, 0x21, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x8c, 0x15, 0x74, 0x02,
  0x06, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x90, 0xdd, 0x05, 0x4d, 0x84,
  0x44, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0x36, 0xe8, 0x81, 0x7c, 0x6c, 0xd8, 0x03, 0xf9, 0xd8, 0xc0, 0x07, 0xf2,
  0x31, 0x34, 0x18, 0x07, 0xf9, 0x58, 0x1a, 0x8c, 0x83, 0x7c, 0x4c, 0x0d,
  0xc6, 0x41, 0x3e, 0xe6, 0x0c, 0xf0, 0x31, 0x67, 0x80, 0x8f, 0x39, 0x03,
  0x7c, 0x2c, 0x19, 0xe4, 0x63, 0xc9, 0x20, 0x1f, 0x4b, 0x06, 0xf9, 0xd8,
  0x00, 0x0e, 0xf0, 0xb1, 0x01, 0x1c, 0xe0, 0x63, 0x03, 0x38, 0xc0, 0xc7,
  0xc0, 0x01, 0x35, 0x60, 0x30, 0xdc, 0x10, 0x84, 0x06, 0x18, 0xcc, 0x32,
  0x08, 0x41, 0x30, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0xd3, 0x6b, 0xc4,
  0x45, 0x4e, 0xdc, 0x44, 0x48, 0x80, 0xc4, 0x3f, 0x80, 0xc5, 0x59, 0x9c,
  0xc5, 0x59, 0x80, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0x50, 0x0f, 0xf2, 0xb1, 0xa1, 0x1e, 0xe4, 0x63, 0x43,
  0x3d, 0xc8, 0xc7, 0x06, 0x06, 0x3e, 0x36, 0x30, 0xf0, 0xb1, 0x81, 0x81,
  0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x58, 0xb7, 0x31, 0x17, 0x60,
  0x61, 0x17, 0xa3, 0x09, 0x81, 0x70, 0xc1, 0x60, 0x16, 0xa4, 0x84, 0x7c,
  0x2c, 0x2d, 0x68, 0x22, 0x3e, 0xa6, 0x16, 0x34, 0x11, 0x1f, 0x5b, 0x0b,
  0x9a, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0xe3, 0x91,
  0x17, 0x83, 0x10, 0xc8, 0x44, 0x4c, 0xc0, 0x84, 0x05, 0x73, 0x21, 0x1f,
  0x0b, 0x68, 0x42, 0x3e, 0x26, 0xd0, 0x84, 0x7c, 0x6c, 0xa0, 0x09, 0xf9,
  0x18, 0x32, 0xc4, 0xc7, 0x90, 0x21, 0x3e, 0x86, 0x0c, 0xf1, 0x19, 0x31,
  0x78, 0x00, 0x10, 0x04, 0x83, 0xe9, 0x3c, 0x56, 0x23, 0x2e, 0xe0, 0x62,
  0x10, 0x82, 0xbc, 0x00, 0x0d, 0xd0, 0x00, 0x0d, 0x66, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x28, 0x09, 0xf9, 0xd8,
  0x50, 0x12, 0xf2, 0xb1, 0xa1, 0x24, 0xe4, 0x63, 0xd9, 0x00, 0x1f, 0xcb,
  0x06, 0xf8, 0x58, 0x36, 0xc0, 0x67, 0x34, 0xc1, 0x27, 0x86, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0xee, 0x23, 0x3d, 0xda, 0xa3, 0x3d, 0xc2,
  0x83, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xe4, 0x3e, 0xd2, 0xa3,
  0x3d, 0xda, 0xe3, 0x36, 0x86, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40,
  0xee, 0x23, 0x3d, 0xda, 0xa3, 0x3d, 0xc0, 0x43, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0xe4, 0x3e, 0xd2, 0xa3, 0x3d, 0xda, 0xc3, 0x37, 0x02,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x70, 0x4a, 0x17, 0x2a, 0x02, 0x52, 0xcb, 0xce,
  0xe4, 0xcd, 0xb0, 0xbb, 0xe3, 0xc7, 0xad, 0x6a, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0xa2, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58,
  0x4b, 0x8f, 0x24, 0x47, 0x11, 0x8e, 0xcc, 0xaa, 0xac, 0xae, 0xce, 0xea,
  0x8a, 0x7a, 0x4c, 0x75, 0xf5, 0x63, 0x6a, 0xaa, 0x1f, 0xd3, 0x63, 0xf5,
  0x4c, 0xf7, 0xcc, 0x58, 0x2c, 0x88, 0x0b, 0xec, 0xf6, 0x0a, 0xb3, 0x80,
  0x6c, 0x8c, 0xa5, 0xf5, 0x94, 0xb8, 0x8c, 0x65, 0xf3, 0x92, 0xd7, 0x96,
  0x8c, 0x11, 0x86, 0x0b, 0x52, 0xb9, 0x79, 0x08, 0x38, 0x80, 0xf0, 0x89,
  0x13, 0x12, 0x1c, 0xf6, 0x80, 0x8c, 0x79, 0xfc, 0x01, 0xf7, 0x2e, 0x16,
  0x87, 0xd6, 0x08, 0xfb, 0xd6, 0x5a, 0x09, 0x24, 0x7e, 0x02, 0x58, 0x68,
  0x0f, 0x2b, 0xcb, 0x72, 0x13, 0x51, 0xd5, 0xa3, 0x9d, 0x61, 0xbd, 0xda,
  0x85, 0xd3, 0x20, 0x26, 0xa5, 0x54, 0x64, 0x45, 0x7c, 0x15, 0x11, 0xf9,
  0x45, 0x66, 0x75, 0x67, 0x5e, 0xb9, 0x7a, 0xf5, 0xf3, 0x42, 0x00, 0x7c,
  0xbb, 0x09, 0x45, 0xb3, 0x4a, 0x01, 0xff, 0x98, 0xfd, 0xf6, 0x6f, 0x0f,
  0xd3, 0xff, 0xf0, 0x1f, 0xe2, 0x8f, 0xbb, 0x5c, 0xbd, 0xf7, 0x18, 0xfc,
  0x77, 0xed, 0xd8, 0xcf, 0x1d, 0x5c, 0x29, 0xec, 0x93, 0xd6, 0xe8, 0x1e,
  0xfc, 0x9d, 0xb8, 0x94, 0x37, 0x1b, 0xa5, 0xd4, 0xd4, 0x4d, 0xea, 0x4a,
  0x48, 0xb8, 0x79, 0x02, 0xd7, 0x84, 0xae, 0x29, 0x4e, 0x3c, 0xfb, 0x2b,
  0x5e, 0x58, 0x97, 0x52, 0xdf, 0x3b, 0xe6, 0x49, 0x78, 0xac, 0x95, 0x96,
  0xac, 0x90, 0x49, 0x4a, 0xf8, 0x3f, 0x6b, 0x3c, 0xe1, 0xe1, 0x89, 0x31,
  0x77, 0x9f, 0xba, 0x77, 0x02, 0xc3, 0x6b, 0xe9, 0xed, 0x82, 0xcc, 0xe9,
  0x8d, 0x93, 0xfd, 0xb5, 0x26, 0xdc, 0xf9, 0x70, 0xaf, 0xa7, 0x71, 0x82,
  0x70, 0xee, 0x43, 0xe0, 0x0c, 0xc6, 0xf9, 0x0f, 0x89, 0x0b, 0xef, 0x8f,
  0x73, 0x7b, 0xf0, 0x8c, 0xb3, 0x25, 0x9f, 0xf1, 0x12, 0xca, 0x4f, 0x7c,
  0x18, 0xee, 0xda, 0x2d, 0xb7, 0x27, 0xc9, 0x74, 0xed, 0x16, 0xe1, 0xe0,
  0xfe, 0xb8, 0xe7, 0x57, 0xb8, 0xe7, 0x1f, 0x80, 0x7b, 0x61, 0x85, 0x7b,
  0xe1, 0x01, 0xb8, 0x17, 0x57, 0xb8, 0x17, 0x1f, 0x80, 0x3b, 0x3d, 0x5f,
  0xaf, 0xe0, 0xc5, 0xb9, 0x67, 0xc6, 0x4b, 0x6a, 0x70, 0xde, 0xce, 0x54,
  0x3b, 0xaf, 0xc9, 0xd9, 0x6b, 0xe7, 0x35, 0x39, 0x7b, 0xed, 0xbc, 0x26,
  0x67, 0xaf, 0x9d, 0xd7, 0xe4, 0xec, 0xb5, 0xf3, 0x9a, 0x9c, 0xbd, 0x76,
  0x5e, 0x93, 0xb3, 0xdb, 0xfe, 0x72, 0x79, 0xba, 0xf8, 0xc8, 0x72, 0x69,
  0x5c, 0x7e, 0xeb, 0x17, 0x3f, 0xbf, 0xf6, 0xea, 0x74, 0xf1, 0xf7, 0xef,
  0x2c, 0x8d, 0x8f, 0xfe, 0xe0, 0xc2, 0xc4, 0x80, 0x5f, 0xdd, 0xc8, 0xcd,
  0x37, 0x66, 0xb9, 0xfe, 0x60, 0xe6, 0x1a, 0xdf, 0x9b, 0x4d, 0x8d, 0x9f,
  0x52, 0xff, 0xfe, 0x2c, 0x58, 0x6e, 0xff, 0x98, 0x4f, 0x3c, 0xbe, 0xf1,
  0xeb, 0xd9, 0x1f, 0x8d, 0xd7, 0x67, 0x4b, 0xe3, 0x37, 0xb3, 0x37, 0xbe,
  0x20, 0x02, 0x81, 0xb5, 0xdb, 0xe4, 0xee, 0x3d, 0xcf, 0xf8, 0xdd, 0xcc,
  0xb2, 0xca, 0x71, 0x64, 0x0e, 0x4b, 0x69, 0xbc, 0x3f, 0x8b, 0xe0, 0xd1,
  0xdb, 0xf4, 0xdf, 0xfd, 0x3d, 0x10, 0xf6, 0x1c, 0xa0, 0x36, 0x07, 0xe9,
  0xcf, 0x41, 0x35, 0xe7, 0x60, 0x76, 0xe7, 0x42, 0x54, 0xe7, 0x02, 0xdc,
  0xb9, 0x90, 0xc1, 0x9c, 0x0e, 0x4f, 0x73, 0xa1, 0x5a, 0x73, 0x61, 0xf6,
  0xe6, 0x53, 0xe3, 0xf7, 0x33, 0x61, 0x89, 0xb9, 0xe5, 0x86, 0xf8, 0xea,
  0xcd, 0x9f, 0xdc, 0x08, 0x4c, 0xd3, 0xf6, 0x2d, 0xcb, 0xae, 0x40, 0x65,
  0xc1, 0xb9, 0x87, 0x36, 0xb5, 0x20, 0xcc, 0xa4, 0xd2, 0x18, 0xa9, 0xe1,
  0xed, 0x67, 0xc9, 0x7f, 0x05, 0x46, 0x0b, 0x3a, 0xda, 0x02, 0xc7, 0x7e,
  0xb9, 0x88, 0x17, 0x66, 0x46, 0x45, 0x67, 0x01, 0xbd, 0x63, 0xd2, 0x59,
  0x99, 0xed, 0x92, 0x0e, 0xc0, 0xd5, 0xc3, 0x30, 0x37, 0xab, 0xac, 0x1f,
  0x2d, 0x14, 0x1d, 0x8a, 0x2b, 0x87, 0x32, 0xe7, 0xb1, 0x55, 0xa3, 0xb3,
  0xf1, 0xa1, 0xce, 0xab, 0x6e, 0xad, 0x88, 0xa9, 0xc1, 0x58, 0x2c, 0xe9,
  0xc0, 0xa7, 0x6f, 0x6d, 0xbe, 0xe9, 0xf0, 0x78, 0xa7, 0x1c, 0x23, 0x8d,
  0x83, 0x3e, 0x80, 0xcb, 0xba, 0x71, 0xa9, 0xab, 0x06, 0x3e, 0x86, 0xf0,
  0xf8, 0x42, 0xf7, 0xde, 0x37, 0xe8, 0xf9, 0x93, 0x55, 0x01, 0x88, 0xea,
  0xd9, 0x5c, 0x3a, 0x26, 0x1a, 0x8e, 0x85, 0xa6, 0x63, 0x23, 0x92, 0xdd,
  0x59, 0xd9, 0x43, 0x15, 0xe7, 0x35, 0x7a, 0x16, 0x52, 0x0f, 0x14, 0x49,
  0x90, 0x38, 0x88, 0x49, 0x4a, 0x19, 0x0e, 0xd8, 0x8f, 0xbb, 0xc2, 0xf9,
  0x94, 0x3b, 0xc7, 0xaa, 0xb5, 0x52, 0x6c, 0xd0, 0x58, 0x18, 0x30, 0x41,
  0x95, 0xe6, 0xba, 0x8c, 0xb5, 0xf9, 0xb3, 0xb7, 0xbe, 0x75, 0xc9, 0xef,
  0x25, 0xa8, 0x9c, 0x34, 0xf3, 0x49, 0xe7, 0xf7, 0xde, 0x31, 0x42, 0xf5,
  0x48, 0x5e, 0x67, 0xac, 0x80, 0x89, 0xb5, 0x3f, 0xc0, 0x78, 0x37, 0xcd,
  0x2c, 0xf5, 0x08, 0x6a, 0xf5, 0x95, 0xdc, 0x57, 0x5f, 0xca, 0x05, 0xdb,
  0x14, 0x4c, 0xbc, 0xc3, 0x34, 0xb7, 0x47, 0x83, 0x8c, 0x7d, 0xd9, 0x95,
  0x27, 0xcd, 0x0a, 0xbf, 0x3f, 0x7c, 0x8a, 0xfc, 0x0f, 0x73, 0xa7, 0xcc,
  0xb5, 0xf0, 0x0f, 0xc6, 0x20, 0x83, 0x6a, 0x94, 0x05, 0x87, 0xfd, 0xdc,
  0x2d, 0x73, 0x2b, 0xf4, 0xb5, 0x4e, 0x13, 0x55, 0x47, 0x63, 0xdc, 0x49,
  0x11, 0xa7, 0xe6, 0xe2, 0x9f, 0x03, 0x09, 0x9a, 0x65, 0x24, 0xc1, 0x6a,
  0x85, 0xd8, 0x68, 0x35, 0x11, 0x37, 0xba, 0x18, 0xf1, 0x1c, 0x1c, 0x98,
  0xd8, 0x4e, 0x98, 0xd5, 0x9d, 0x66, 0x16, 0xf3, 0x73, 0x15, 0x26, 0x9c,
  0x63, 0xe0, 0xc2, 0xa4, 0x3a, 0x1d, 0x2d, 0xa0, 0x43, 0x67, 0xbd, 0x4e,
  0x33, 0xd3, 0xf5, 0x14, 0xfd, 0x9e, 0xc4, 0xea, 0x9a, 0xc6, 0x2a, 0xd9,
  0x97, 0xc5, 0x81, 0x7b, 0x7a, 0xd1, 0xeb, 0xec, 0xa1, 0xd8, 0x90, 0xc8,
  0x5c, 0xa9, 0x2f, 0xcf, 0x8d, 0xaa, 0xfa, 0x5a, 0x5e, 0x9d, 0xfa, 0x8b,
  0x5a, 0x4b, 0x42, 0x8d, 0x63, 0x36, 0x25, 0x34, 0xea, 0x11, 0xf1, 0x40,
  0xef, 0xad, 0xa5, 0xf4, 0xee, 0xe3, 0x8b, 0xea, 0xda, 0xd1, 0x66, 0xad,
  0x95, 0xe0, 0x52, 0x6b, 0xfc, 0xab, 0xf7, 0xb9, 0x09, 0xf3, 0xe3, 0x3d,
  0xf7, 0x27, 0xe3, 0x42, 0x98, 0x66, 0x6c, 0xf7, 0x77, 0x9e, 0x9e, 0x90,
  0xad, 0xfb, 0xe6, 0xc7, 0x7f, 0xf8, 0x31, 0x47, 0xed, 0xe4, 0xb8, 0x11,
  0xa3, 0xe0, 0x9a, 0xf4, 0x8e, 0x0c, 0x2c, 0xf8, 0x3d, 0x32, 0xd4, 0x81,
  0xce, 0x9d, 0x56, 0x8c, 0x5c, 0x2b, 0x7f, 0xfc, 0xc5, 0x09, 0xe7, 0xe0,
  0x1d, 0xa4, 0xb9, 0xab, 0xba, 0x79, 0x83, 0x39, 0xfa, 0xea, 0x18, 0x98,
  0x13, 0xd5, 0xd7, 0x03, 0xe1, 0x25, 0x18, 0x51, 0x2c, 0xb1, 0xd6, 0x45,
  0xd1, 0x22, 0x1c, 0xe5, 0xe2, 0x31, 0x66, 0xf4, 0x09, 0x28, 0xf9, 0x7c,
  0x02, 0xd4, 0x7e, 0x92, 0xa9, 0x4e, 0x37, 0x53, 0x0d, 0x99, 0xf1, 0x5c,
  0xcc, 0x3e, 0x0e, 0xdc, 0xf5, 0xb8, 0xc0, 0x59, 0xfd, 0x70, 0x60, 0x6d,
  0xf7, 0x89, 0xaf, 0xf1, 0xed, 0x09, 0xad, 0x5f, 0xe5, 0xc4, 0x99, 0xbd,
  0xdb, 0xcf, 0xbc, 0x4e, 0x9c, 0xc1, 0xa8, 0x9f, 0x39, 0x87, 0x71, 0xee,
  0x36, 0xda, 0xa8, 0x1a, 0xe4, 0xb7, 0x11, 0x63, 0xb4, 0x9e, 0xa2, 0xb5,
  0xde, 0xc6, 0x98, 0x6a, 0x6f, 0x3b, 0xed, 0x4c, 0x31, 0x0f, 0x7d, 0x09,
  0xf5, 0x46, 0x9a, 0xb9, 0xcc, 0x69, 0x43, 0x02, 0xf9, 0x40, 0x87, 0xb0,
  0x0e, 0xe5, 0xe2, 0x10, 0x5f, 0x1e, 0xf1, 0xec, 0x31, 0x2e, 0x95, 0xe0,
  0x34, 0x86, 0x58, 0xe4, 0xd5, 0x38, 0xda, 0xf4, 0x3a, 0x3b, 0xc8, 0xf3,
  0x89, 0x98, 0x9f, 0x78, 0x98, 0x71, 0x4e, 0xf5, 0xd1, 0x4e, 0xc9, 0xf7,
  0xfe, 0x91, 0xc1, 0x36, 0x4d, 0xb2, 0xc0, 0x13, 0xff, 0xd1, 0x41, 0x3b,
  0xaf, 0x53, 0xdd, 0xd5, 0xbe, 0x2e, 0xfc, 0x2b, 0x6f, 0x88, 0xcb, 0x38,
  0x2e, 0x78, 0x56, 0x6b, 0x63, 0x54, 0x2d, 0xcd, 0xcf, 0x25, 0xb7, 0x07,
  0x71, 0x1e, 0x91, 0xcd, 0x25, 0x1c, 0x73, 0xe5, 0x11, 0x67, 0xce, 0x3a,
  0xc5, 0xe0, 0x31, 0x73, 0xb3, 0x3e, 0x2e, 0xc7, 0xc4, 0x8f, 0x47, 0x39,
  0x06, 0x9b, 0x94, 0xdb, 0xba, 0xce, 0x38, 0xdf, 0x90, 0xce, 0xfe, 0xb5,
  0xb8, 0x8d, 0x6e, 0xdc, 0x47, 0x64, 0x1f, 0x1b, 0xed, 0x62, 0x6f, 0x42,
  0x9a, 0x60, 0xd0, 0x23, 0x9e, 0xd3, 0x3e, 0x3a, 0x46, 0x8c, 0xb8, 0xdd,
  0xce, 0x90, 0xd6, 0x8b, 0xed, 0x03, 0x04, 0xbb, 0x5d, 0x1a, 0x8f, 0x16,
  0xd5, 0x10, 0x80, 0xa5, 0x8e, 0x48, 0x1e, 0x26, 0x39, 0xef, 0xab, 0x6a,
  0xa2, 0x07, 0x01, 0xaf, 0xf7, 0x84, 0xf7, 0x5b, 0x65, 0x81, 0x41, 0xb9,
  0x0e, 0x71, 0x0d, 0x26, 0xbc, 0xbf, 0xb0, 0x0e, 0x93, 0x70, 0x6b, 0x58,
  0xec, 0x55, 0x9d, 0x84, 0x83, 0x60, 0x73, 0x98, 0xe1, 0xc6, 0x30, 0x8b,
  0x0e, 0x87, 0x79, 0xb8, 0x3d, 0xc0, 0x80, 0xea, 0x83, 0xdb, 0x09, 0xd6,
  0x09, 0x63, 0x6d, 0xd1, 0xde, 0x22, 0xbb, 0xbd, 0x39, 0xc8, 0xac, 0x51,
  0x1f, 0x1b, 0x84, 0x0b, 0x99, 0xf7, 0x0d, 0x09, 0x5c, 0x37, 0xd8, 0xef,
  0x67, 0xf5, 0x55, 0x4d, 0x82, 0xd5, 0xbc, 0xea, 0xa3, 0x31, 0xed, 0x47,
  0xea, 0xc4, 0x6d, 0x4c, 0xba, 0x68, 0x5b, 0x42, 0xbc, 0xbb, 0x57, 0xac,
  0xbb, 0x06, 0x71, 0x5f, 0x27, 0x59, 0x37, 0x8e, 0x8c, 0x62, 0x7f, 0x93,
  0xac, 0xd7, 0x25, 0x16, 0x3e, 0x86, 0xfc, 0x6e, 0x42, 0xfb, 0x89, 0xfa,
  0x28, 0x2a, 0xf2, 0x8b, 0x77, 0x8f, 0x36, 0x65, 0x3a, 0x46, 0xe1, 0xf1,
  0xb7, 0xc1, 0x2e, 0xbe, 0xb7, 0x17, 0x92, 0xbd, 0x2c, 0xdc, 0x4a, 0x68,
  0x4d, 0xc4, 0xc5, 0xfa, 0xd2, 0xc4, 0x75, 0xf1, 0x5d, 0x22, 0x9e, 0x1b,
  0x07, 0x7b, 0x39, 0xbf, 0x87, 0x54, 0xbf, 0xf2, 0xfb, 0xf1, 0x04, 0x58,
  0xfd, 0x71, 0xe1, 0x73, 0x99, 0x24, 0x45, 0xed, 0x48, 0x16, 0x35, 0xc3,
  0x83, 0x24, 0x8f, 0x48, 0x47, 0x73, 0xc2, 0x88, 0xd6, 0x97, 0xa0, 0xfd,
  0xc8, 0x6b, 0x3a, 0xda, 0xd2, 0x59, 0x08, 0x9f, 0x59, 0xd8, 0xae, 0x34,
  0xa3, 0xba, 0xcc, 0xcc, 0x3e, 0xe5, 0x22, 0x5e, 0x5f, 0x84, 0x82, 0xbe,
  0x9d, 0xfd, 0x01, 0xea, 0x4e, 0x9b, 0xbe, 0xab, 0x9f, 0x2e, 0xec, 0x4b,
  0x99, 0xe6, 0x00, 0x37, 0x2f, 0xc5, 0x46, 0x9c, 0x85, 0x0e, 0xad, 0x79,
  0xb8, 0x52, 0xe8, 0x1b, 0x72, 0x90, 0xc7, 0xf0, 0x58, 0xe9, 0x03, 0x2e,
  0x2f, 0x82, 0x8d, 0x8b, 0x66, 0x9d, 0xa4, 0x22, 0x99, 0x8f, 0x3f, 0xf8,
  0x11, 0x73, 0x61, 0x04, 0x4f, 0x5e, 0x0f, 0x75, 0x42, 0xdf, 0xaa, 0xd1,
  0xc2, 0x14, 0x72, 0x18, 0x24, 0x1a, 0x0d, 0xde, 0x9b, 0x01, 0x5e, 0xb7,
  0x58, 0xba, 0xfa, 0xba, 0xc9, 0x52, 0x84, 0xd7, 0x81, 0xf2, 0x31, 0xdc,
  0xd0, 0xe4, 0xb8, 0x2c, 0x35, 0xc5, 0x61, 0x69, 0x51, 0x0c, 0x96, 0x36,
  0xe5, 0xc7, 0x77, 0x47, 0xbc, 0x6e, 0x9a, 0x95, 0xe9, 0xbb, 0x11, 0xad,
  0x0a, 0x93, 0xe3, 0x06, 0x17, 0x4d, 0x1d, 0xa4, 0x17, 0xdb, 0x95, 0xd7,
  0xde, 0x35, 0x09, 0xed, 0x59, 0x0a, 0xbe, 0x71, 0x89, 0xd6, 0x96, 0xd7,
  0xa6, 0xf9, 0x76, 0x33, 0xd9, 0x8a, 0xb3, 0x97, 0xe9, 0xd9, 0xb1, 0xdb,
  0x99, 0xa7, 0xbb, 0xd9, 0x5a, 0x8d, 0xf6, 0xe1, 0x7d, 0xef, 0xcd, 0xbe,
  0x4b, 0xfa, 0x5f, 0xfe, 0x4f, 0x75, 0x63, 0xf5, 0x3f, 0xe0, 0xf8, 0x5a,
  0x8d, 0xaf, 0x93, 0x4f, 0xea, 0xb8, 0xd3, 0xef, 0xd8, 0x29, 0x1d, 0xdf,
  0x79, 0x6a, 0x79, 0x5a, 0xc7, 0x63, 0xc7, 0x38, 0xad, 0xe3, 0x7b, 0xe6,
  0x9a, 0x79, 0x5a, 0xa7, 0xa8, 0xbb, 0xea, 0xb4, 0x8e, 0x1b, 0x5a, 0xf7,
  0xc6, 0xf5, 0x2a, 0x77, 0xed, 0xc7, 0x17, 0xcd, 0xbe, 0x7d, 0x5a, 0xc7,
  0xe3, 0xb0, 0x7a, 0x37, 0x69, 0x73, 0xd5, 0xed, 0x13, 0x81, 0xd5, 0xb1,
  0x8e, 0x02, 0x0b, 0xe3, 0x74, 0x5c, 0x93, 0x82, 0xc8, 0x7f, 0xbb, 0x53,
  0x34, 0xfd, 0xbb, 0x97, 0xea, 0x77, 0xff, 0xbb, 0x6a, 0x78, 0xea, 0xea,
  0xa7, 0xbe, 0xfe, 0xd2, 0x37, 0x5f, 0x79, 0xee, 0xa5, 0x57, 0x8e, 0x6f,
  0xe1, 0xaf, 0xac, 0x6e, 0xc5, 0x1f, 0x05, 0xfe, 0x67, 0x01, 0xf0, 0xd9,
  0xc2, 0xb3, 0x2a, 0x22, 0x72, 0x7b, 0x7a, 0xf5, 0x6c, 0xae, 0x9e, 0xff,
  0x4c, 0x06, 0x41, 0xbf, 0x2b, 0x65, 0x40, 0x80, 0x7f, 0x01, 0xd9, 0x86,
  0x75, 0x29, 0x00, 0x00, 0xda, 0x41, 0x32, 0xff, 0x41, 0xc2, 0x9c, 0x96,
  0x69, 0x7f, 0xee, 0xbd, 0x34, 0x84, 0x33, 0x40
};
