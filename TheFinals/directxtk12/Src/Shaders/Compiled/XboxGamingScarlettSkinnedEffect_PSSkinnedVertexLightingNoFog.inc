#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettSkinnedEffect_PSSkinnedVertexLightingNoFog.pdb
; shader hash: 28fb1115d5062b37b30db3b508e769b1
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSSkinnedVertexLightingNoFog
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;
;
; ViewId state:
;
; Number of inputs: 10, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 3, 4, 8, 9 }
;   output 1 depends on inputs: { 1, 3, 5, 8, 9 }
;   output 2 depends on inputs: { 2, 3, 6, 8, 9 }
;   output 3 depends on inputs: { 3, 8, 9 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.SamplerState = type { i32 }

define void @PSSkinnedVertexLightingNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %2, float %3, float %4, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %13 = extractvalue %dx.types.ResRet.f32 %12, 0
  %14 = extractvalue %dx.types.ResRet.f32 %12, 1
  %15 = extractvalue %dx.types.ResRet.f32 %12, 2
  %16 = extractvalue %dx.types.ResRet.f32 %12, 3
  %17 = fmul fast float %13, %8
  %18 = fmul fast float %14, %9
  %19 = fmul fast float %15, %10
  %20 = fmul fast float %16, %11
  %21 = fmul fast float %20, %5
  %22 = fmul fast float %20, %6
  %23 = fmul fast float %20, %7
  %24 = fadd fast float %21, %17
  %25 = fadd fast float %22, %18
  %26 = fadd fast float %23, %19
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %24)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %20)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, null, !9}
!6 = !{!7}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10}
!10 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!11 = !{[12 x i32] [i32 10, i32 4, i32 1, i32 2, i32 4, i32 15, i32 1, i32 2, i32 4, i32 0, i32 15, i32 15]}
!12 = !{void ()* @PSSkinnedVertexLightingNoFog, !"PSSkinnedVertexLightingNoFog", !13, !5, null}
!13 = !{!14, !23, null}
!14 = !{!15, !18, !21}
!15 = !{i32 0, !"COLOR", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 15}
!18 = !{i32 1, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 1, i8 0, !20}
!19 = !{i32 1}
!20 = !{i32 3, i32 7}
!21 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 2, i32 2, i8 0, !22}
!22 = !{i32 3, i32 3}
!23 = !{!24}
!24 = !{i32 0, !"SV_Target", i8 9, i8 16, !16, i8 0, i32 1, i8 4, i32 0, i8 0, !17}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 18
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 384
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x1511fb28, 0x372b06d5                // 000000000000: D580FB28 03FE2B11 372B06D5
;   v_nop_xbox_data 0xb5b30db3, 0xb169e708                // 00000000000C: D5800DB3 03FF6BB3 B169E708
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[14:15], exec                          // 00000000001C: BE8E047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s8, s11                                 // 000000000024: BE88030B
;   s_mov_b32     s11, 0                                  // 000000000028: BE8B0380
;   s_mov_b32     s9, 0                                   // 00000000002C: BE890380
;   s_load_dwordx8  s[0:7], s[10:11], null                // 000000000030: F40C0005 FA000000
;   s_load_dwordx4  s[8:11], s[8:9], null                 // 000000000038: F4080204 FA000000
;   s_mov_b32     m0, s12                                 // 000000000040: BEFC030C
;   v_interp_p1_f32  v2, v0, attr2.x                      // 000000000044: C8080800
;   v_interp_p1_f32  v3, v0, attr2.y                      // 000000000048: C80C0900
;   v_interp_p2_f32  v2, v1, attr2.x                      // 00000000004C: C8090801
;   v_interp_p2_f32  v3, v1, attr2.y                      // 000000000050: C80D0901
;   s_and_b64     exec, exec, s[14:15]                    // 000000000054: 87FE0E7E
;   s_waitcnt     lgkmcnt(0)                              // 000000000058: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[8:11] dmask:0xf dim:SQ_RSRC_IMG_2D // 00000000005C: F0800F08 00400202
;   v_interp_p1_f32  v15, v0, attr0.x                     // 000000000064: C83C0000
;   v_interp_p1_f32  v10, v0, attr0.y                     // 000000000068: C8280100
;   v_interp_p1_f32  v11, v0, attr0.w                     // 00000000006C: C82C0300
;   v_interp_p1_f32  v19, v0, attr0.z                     // 000000000070: C84C0200
;   v_interp_p1_f32  v23, v0, attr1.x                     // 000000000074: C85C0400
;   v_interp_p1_f32  v6, v0, attr1.y                      // 000000000078: C8180500
;   v_interp_p1_f32  v7, v0, attr1.z                      // 00000000007C: C81C0600
;   v_interp_p2_f32  v15, v1, attr0.x                     // 000000000080: C83D0001
;   v_interp_p2_f32  v11, v1, attr0.w                     // 000000000084: C82D0301
;   v_interp_p2_f32  v10, v1, attr0.y                     // 000000000088: C8290101
;   v_interp_p2_f32  v19, v1, attr0.z                     // 00000000008C: C84D0201
;   v_interp_p2_f32  v23, v1, attr1.x                     // 000000000090: C85D0401
;   v_interp_p2_f32  v6, v1, attr1.y                      // 000000000094: C8190501
;   v_interp_p2_f32  v7, v1, attr1.z                      // 000000000098: C81D0601
;   s_waitcnt     vmcnt(0)                                // 00000000009C: BF8C3F70
;   v_mul_legacy_f32  v5, v5, v11                         // 0000000000A0: 0E0A1705
;   v_mul_legacy_f32  v2, v2, v15                         // 0000000000A4: 0E041F02
;   v_mul_legacy_f32  v3, v3, v10                         // 0000000000A8: 0E061503
;   v_mul_legacy_f32  v4, v4, v19                         // 0000000000AC: 0E082704
;   v_fmac_f32    v2, v5, v23                             // 0000000000B0: 56042F05
;   v_fmac_f32    v3, v5, v6                              // 0000000000B4: 56060D05
;   v_fmac_f32    v4, v5, v7                              // 0000000000B8: 56080F05
;   s_nop         0x0000                                  // 0000000000BC: BF800000
;   s_nop         0x0000                                  // 0000000000C0: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 0000000000C4: 5E000702
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000000C8: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000000CC: F8001C0F 00000100
;   s_endpgm                                              // 0000000000D4: BF810000
;   s_code_end                                            // 0000000000D8: BF9F0000
;   s_code_end                                            // 0000000000DC: BF9F0000
;   s_code_end                                            // 0000000000E0: BF9F0000
;   s_code_end                                            // 0000000000E4: BF9F0000
;   s_code_end                                            // 0000000000E8: BF9F0000
;   s_code_end                                            // 0000000000EC: BF9F0000
;   s_code_end                                            // 0000000000F0: BF9F0000
;   s_code_end                                            // 0000000000F4: BF9F0000
;   s_code_end                                            // 0000000000F8: BF9F0000
;   s_code_end                                            // 0000000000FC: BF9F0000
;   s_code_end                                            // 000000000100: BF9F0000
;   s_code_end                                            // 000000000104: BF9F0000
;   s_code_end                                            // 000000000108: BF9F0000
;   s_code_end                                            // 00000000010C: BF9F0000
;   s_code_end                                            // 000000000110: BF9F0000
;   s_code_end                                            // 000000000114: BF9F0000
;   s_code_end                                            // 000000000118: BF9F0000
;   s_code_end                                            // 00000000011C: BF9F0000
;   s_code_end                                            // 000000000120: BF9F0000
;   s_code_end                                            // 000000000124: BF9F0000
;   s_code_end                                            // 000000000128: BF9F0000
;   s_code_end                                            // 00000000012C: BF9F0000
;   s_code_end                                            // 000000000130: BF9F0000
;   s_code_end                                            // 000000000134: BF9F0000
;   s_code_end                                            // 000000000138: BF9F0000
;   s_code_end                                            // 00000000013C: BF9F0000
;   s_code_end                                            // 000000000140: BF9F0000
;   s_code_end                                            // 000000000144: BF9F0000
;   s_code_end                                            // 000000000148: BF9F0000
;   s_code_end                                            // 00000000014C: BF9F0000
;   s_code_end                                            // 000000000150: BF9F0000
;   s_code_end                                            // 000000000154: BF9F0000
;   s_code_end                                            // 000000000158: BF9F0000
;   s_code_end                                            // 00000000015C: BF9F0000
;   s_code_end                                            // 000000000160: BF9F0000
;   s_code_end                                            // 000000000164: BF9F0000
;   s_code_end                                            // 000000000168: BF9F0000
;   s_code_end                                            // 00000000016C: BF9F0000
;   s_code_end                                            // 000000000170: BF9F0000
;   s_code_end                                            // 000000000174: BF9F0000
;   s_code_end                                            // 000000000178: BF9F0000
;   s_code_end                                            // 00000000017C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 12
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 2
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 48, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 56, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 2
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 10
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 2
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 48
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSSkinnedVertexLightingNoFog)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 3 {
;     num_interp: 3
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 47
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, off, off, off done vm         // 000000000010: F8001801 00000002
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x302,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v3, off, off done vm          // 000000000010: F8001803 00000302
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x502,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v5, off, off done vm          // 000000000010: F8001803 00000502
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000702,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000008: 5E000702
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20702,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: D7690000 00020702
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20702,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: D7680000 00020702
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20702,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: D76A0000 00020702
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20702,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: D76B0000 00020702
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040302,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v3, v4, v5 done vm            // 000000000010: F800180F 05040302
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=18,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:27,SAlu:13,VMem:1,SMem:2,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char SkinnedEffect_PSSkinnedVertexLightingNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0x6f, 0x5e, 0xe6, 0x1c, 0x4f, 0x91, 0x35, 0x04,
  0x8a, 0xda, 0x14, 0x34, 0xe7, 0x17, 0xd0, 0x92, 0x01, 0x00, 0x00, 0x00,
  0xf4, 0x0d, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00,
  0x3c, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00,
  0x88, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x78, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65,
  0x74, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x28, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x03,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x50, 0x53, 0x53, 0x6b, 0x69, 0x6e,
  0x6e, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e,
  0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x53, 0x6b,
  0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72,
  0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e,
  0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x28, 0xfb, 0x11, 0x15, 0xd5, 0x06, 0x2b, 0x37, 0xb3, 0x0d, 0xb3, 0xb5,
  0x08, 0xe7, 0x69, 0xb1, 0x44, 0x58, 0x49, 0x4c, 0x64, 0x0a, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x8c, 0x07, 0x00, 0x00,
  0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xa4, 0x07, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x54, 0x0a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x8c, 0x07, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xa4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xa4, 0x84,
  0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8a, 0x8c,
  0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x68, 0x23, 0x00, 0x25, 0x00, 0x14, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x20, 0x84, 0x14,
  0x42, 0xa6, 0x18, 0x80, 0x10, 0x52, 0x06, 0xa1, 0x9b, 0x86, 0xcb, 0x9f,
  0xb0, 0x87, 0x90, 0xfc, 0x95, 0x90, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46,
  0xc5, 0x18, 0x63, 0x10, 0x2a, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0x55, 0x18, 0x45, 0x18, 0x1b,
  0x63, 0x0c, 0x42, 0xc8, 0xa0, 0x36, 0x47, 0x10, 0x14, 0x83, 0x91, 0x42,
  0xc8, 0x23, 0x38, 0x10, 0x30, 0x8c, 0x40, 0x0c, 0x33, 0xb5, 0xc1, 0x38,
  0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e,
  0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d,
  0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b,
  0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18,
  0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f,
  0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80, 0xcc, 0x24, 0x06, 0xe3,
  0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8,
  0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6,
  0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec,
  0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60,
  0xe0, 0x07, 0x48, 0x98, 0x94, 0xea, 0x4d, 0xd2, 0x14, 0x51, 0xc2, 0xe4,
  0xb3, 0x00, 0xf3, 0x2c, 0x44, 0xc4, 0x4e, 0xc0, 0x44, 0xa0, 0x80, 0xd0,
  0x4d, 0x06, 0x02, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x08, 0x08, 0x80, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x40, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x25, 0x30, 0x02, 0x50, 0x10, 0xc5, 0x50, 0x04,
  0x25, 0x51, 0x06, 0xe5, 0x51, 0x0e, 0x54, 0x4a, 0x62, 0x04, 0xa0, 0x08,
  0x0a, 0xa1, 0x40, 0xc8, 0xce, 0x00, 0x10, 0x9e, 0x01, 0xa0, 0x3c, 0x16,
  0xa3, 0x10, 0x81, 0x40, 0x3c, 0x81, 0x40, 0x00, 0xcf, 0x03, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa,
  0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a,
  0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa,
  0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2,
  0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63,
  0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34,
  0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37,
  0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x14, 0x13, 0x04, 0xc2, 0xd8,
  0x20, 0x18, 0xc7, 0x04, 0x81, 0x38, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e,
  0x6e, 0x82, 0x40, 0x20, 0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0xd6, 0x44,
  0x60, 0x82, 0x40, 0x24, 0x13, 0x04, 0x42, 0xd9, 0x20, 0x1c, 0xd1, 0x86,
  0xe4, 0x70, 0x9e, 0xe3, 0x30, 0xa0, 0x43, 0xda, 0x10, 0x4c, 0x13, 0x04,
  0x8c, 0xda, 0x80, 0x1c, 0xd5, 0x73, 0x1c, 0xc6, 0x01, 0x6c, 0x08, 0xac,
  0x0d, 0x04, 0x05, 0x00, 0xd7, 0x04, 0x21, 0xab, 0x36, 0x04, 0xd9, 0x04,
  0x41, 0x00, 0xc8, 0x41, 0x4d, 0x4d, 0xad, 0xa5, 0xb9, 0xb9, 0x95, 0x91,
  0x59, 0x95, 0xc9, 0xd1, 0x95, 0xe1, 0x31, 0xa5, 0x9d, 0xa1, 0xd1, 0xa5,
  0xb9, 0x9d, 0x39, 0xbd, 0x19, 0xbd, 0x9d, 0xb1, 0x18, 0x7a, 0x62, 0x7a,
  0x92, 0x9a, 0x20, 0x14, 0xce, 0x04, 0xa1, 0x78, 0x36, 0x04, 0xc7, 0x04,
  0xa1, 0x80, 0x26, 0x08, 0x45, 0x34, 0x41, 0x20, 0x96, 0x09, 0x02, 0xc1,
  0x6c, 0x10, 0xc6, 0x80, 0x0c, 0x36, 0x2c, 0x47, 0xe7, 0x7d, 0x60, 0x10,
  0x06, 0x86, 0x18, 0x1c, 0x5f, 0x19, 0x6c, 0x08, 0x8c, 0x09, 0x02, 0xd1,
  0x6c, 0x10, 0xc6, 0x00, 0x0d, 0x36, 0x2c, 0x46, 0xe7, 0x7d, 0x67, 0x10,
  0x06, 0x86, 0x18, 0x18, 0x5f, 0x1a, 0x10, 0xa1, 0x2a, 0xc2, 0x1a, 0x7a,
  0x7a, 0x92, 0x22, 0xda, 0x20, 0x8c, 0xc1, 0x18, 0x6c, 0x58, 0xa0, 0x35,
  0xf0, 0x3e, 0x30, 0x08, 0x03, 0x23, 0x0c, 0xa0, 0x8f, 0x0d, 0x36, 0x0c,
  0x66, 0xa0, 0x06, 0x6d, 0xc0, 0x64, 0xca, 0xea, 0x8b, 0x2a, 0x4c, 0xee,
  0xac, 0x8c, 0x6e, 0x82, 0x50, 0x48, 0x1b, 0x96, 0xe3, 0x0d, 0x3c, 0x38,
  0x00, 0x83, 0xcf, 0x10, 0x83, 0xe3, 0x2b, 0x83, 0x0d, 0x41, 0x1c, 0x6c,
  0x18, 0xdc, 0x40, 0x0e, 0x80, 0x0d, 0xc5, 0xc6, 0xcd, 0x01, 0x06, 0xb4,
  0xc2, 0x13, 0x7b, 0xc3, 0x73, 0x19, 0x7b, 0x6b, 0x83, 0x4b, 0x63, 0x2b,
  0x93, 0x73, 0x79, 0x83, 0xa3, 0x4b, 0x7b, 0x73, 0x9b, 0x9b, 0x12, 0x08,
  0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6,
  0x04, 0x44, 0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37,
  0xb7, 0x29, 0xc1, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae,
  0x4c, 0x6e, 0x4a, 0x90, 0xd4, 0x21, 0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23,
  0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12, 0x30, 0x65, 0xc8,
  0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6,
  0x04, 0x57, 0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2,
  0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x41, 0x56, 0x87, 0x0c, 0xcf, 0xa5,
  0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d, 0x6e, 0x6e, 0x4a,
  0x30, 0x07, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x06, 0xc0, 0xa5, 0x2c, 0xab, 0x20, 0x4d, 0x43, 0x0c, 0x2f, 0x11, 0x4d,
  0xc4, 0x55, 0x22, 0xc6, 0x31, 0x21, 0x8d, 0x71, 0x3a, 0x9f, 0x63, 0x18,
  0x81, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02,
  0xcd, 0xb0, 0x10, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00,
  0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9,
  0xce, 0xe3, 0x4b, 0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50,
  0x93, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xf4, 0x46, 0x00, 0x88, 0xcc, 0x00, 0x14, 0x42,
  0x29, 0x94, 0x5c, 0xe1, 0x51, 0x29, 0x81, 0x32, 0xa0, 0x31, 0x03, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x6d, 0x05, 0x94, 0x65, 0xc9,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x40, 0x9c, 0x31, 0x68, 0x9a, 0x32,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x18, 0x24, 0xd8, 0x26, 0x29,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x84, 0x81, 0x92, 0x71, 0xc6,
  0x32, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x18, 0x2c, 0x5e, 0x47,
  0x31, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x8c, 0x01, 0xf3, 0x79,
  0x48, 0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x19, 0x34, 0x60,
  0xf0, 0x55, 0xce, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x65, 0xe0,
  0x80, 0x01, 0x18, 0x5c, 0xcf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x66, 0xf0, 0x84, 0x41, 0x18, 0x2c, 0xd0, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0x67, 0x00, 0x89, 0x81, 0x18, 0x60, 0xd1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x68, 0x10, 0x8d, 0xc1, 0x18, 0x30, 0xd2, 0x88,
  0xc1, 0x03, 0x80, 0x20, 0x18, 0x34, 0x67, 0xf0, 0x2c, 0x4a, 0x82, 0x30,
  0x0c, 0x19, 0x90, 0xc1, 0xc4, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x91, 0xc8, 0xc7, 0x88,
  0x44, 0x3e, 0x46, 0x24, 0xf2, 0x31, 0x22, 0x91, 0x8f, 0x05, 0x90, 0x7c,
  0x4c, 0x80, 0xe4, 0x63, 0x03, 0x24, 0x1f, 0x1b, 0x0e, 0xf8, 0xd8, 0x70,
  0xc0, 0xc7, 0x86, 0x03, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80,
  0xdc, 0x01, 0x18, 0xcc, 0xc1, 0x1c, 0xa8, 0xc1, 0x30, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0xc8, 0x1d, 0x80, 0xc1, 0x1c, 0xcc, 0x41, 0x27, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x72, 0x07, 0x60, 0x30, 0x07, 0x73,
  0x90, 0x06, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x77, 0x00,
  0x06, 0x73, 0x30, 0x07, 0xdc, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0xc9, 0x03,
  0xed, 0x63, 0x88, 0x6e, 0x64, 0xa6, 0x1c, 0x9f, 0xaf, 0x4a, 0xf9, 0xc2,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xed, 0x98, 0xbd, 0x6e, 0x13, 0x41, 0x10, 0xc7, 0x67, 0x66,
  0x77, 0xcf, 0xe7, 0xaf, 0x3b, 0x52, 0x20, 0x8c, 0x64, 0x44, 0x0a, 0x24,
  0x82, 0x12, 0x14, 0x3a, 0x28, 0x40, 0x50, 0x44, 0xa9, 0x12, 0x84, 0x64,
  0xc9, 0x15, 0xa4, 0xc2, 0xb2, 0x2f, 0x96, 0x1c, 0x84, 0x52, 0xa4, 0x32,
  0x47, 0x05, 0x88, 0x08, 0xf1, 0x06, 0xf0, 0x02, 0x48, 0xa0, 0x50, 0x9f,
  0x53, 0xce, 0x0b, 0x58, 0x69, 0x10, 0x2d, 0x25, 0x14, 0x14, 0x11, 0x20,
  0x87, 0x5d, 0xdf, 0x1d, 0xbe, 0xe0, 0x58, 0x36, 0x54, 0x87, 0xb8, 0xbf,
  0x34, 0x9a, 0xfd, 0xf8, 0xed, 0x68, 0x77, 0xe7, 0xae, 0x98, 0x5d, 0xad,
  0xd5, 0xd6, 0x11, 0x01, 0x56, 0xe6, 0x60, 0x28, 0x2b, 0x74, 0xf0, 0x39,
  0x78, 0xf3, 0x71, 0x16, 0x7b, 0xfb, 0x87, 0x7c, 0x6c, 0x14, 0xad, 0x5b,
  0x81, 0xbf, 0x53, 0x1c, 0xe7, 0xd0, 0x09, 0xfb, 0x3e, 0x26, 0x67, 0x4b,
  0x63, 0xfc, 0xce, 0xa9, 0xd0, 0xbf, 0x8f, 0xbc, 0xd0, 0x66, 0xf6, 0xa0,
  0x90, 0x60, 0x3f, 0xc1, 0x55, 0x60, 0x1e, 0x93, 0xa1, 0x3e, 0x44, 0xbc,
  0x19, 0xbb, 0x62, 0x22, 0xff, 0xba, 0x27, 0xd7, 0x38, 0xb2, 0xd0, 0xd5,
  0x53, 0x48, 0x16, 0x09, 0x1d, 0x8e, 0x08, 0xfe, 0x13, 0x99, 0xfb, 0xab,
  0x24, 0xda, 0xe6, 0xe0, 0xe6, 0xaa, 0xdc, 0x04, 0x63, 0xbe, 0xa5, 0xe5,
  0x61, 0xcb, 0xef, 0x25, 0xed, 0x65, 0x05, 0x0e, 0x4f, 0x8e, 0x7a, 0x9c,
  0x43, 0xcd, 0xd1, 0x0c, 0x9c, 0x30, 0x9c, 0x98, 0x91, 0x53, 0x93, 0x39,
  0xca, 0xc1, 0x86, 0x2c, 0xd2, 0x86, 0x5b, 0xd5, 0xfb, 0xc3, 0x93, 0x38,
  0xef, 0x80, 0x72, 0xa4, 0xa7, 0xbc, 0x03, 0xcd, 0xc1, 0x64, 0xae, 0x15,
  0x71, 0xad, 0x29, 0xdc, 0x66, 0xc4, 0x6d, 0x4e, 0xe1, 0xda, 0x11, 0xd7,
  0x9e, 0xc2, 0x1d, 0x3f, 0xaf, 0x3b, 0xbc, 0x17, 0x39, 0x76, 0xe2, 0x23,
  0x2d, 0xc8, 0x94, 0x2a, 0x65, 0x39, 0x49, 0x9f, 0xb2, 0x9c, 0xa4, 0x4f,
  0x59, 0x4e, 0xd2, 0xa7, 0x2c, 0x27, 0xe9, 0x53, 0x96, 0x93, 0xf4, 0x29,
  0xcb, 0x49, 0x7a, 0xb5, 0xf0, 0xdd, 0xef, 0xcf, 0x2d, 0x0e, 0x44, 0xdf,
  0x5a, 0xbc, 0xba, 0x57, 0xf6, 0xfb, 0x7b, 0xed, 0x23, 0x61, 0x7f, 0xf2,
  0xde, 0x09, 0x78, 0xdd, 0xeb, 0xca, 0x17, 0x41, 0xb7, 0x30, 0x08, 0x8a,
  0xe2, 0x69, 0xe0, 0x8b, 0xe7, 0xda, 0x9e, 0x05, 0x0a, 0x4a, 0x5f, 0xf5,
  0xb2, 0x6f, 0x92, 0xec, 0xa1, 0x2f, 0x89, 0x1f, 0x01, 0xd8, 0x36, 0x43,
  0xbe, 0xc4, 0x68, 0xe7, 0x19, 0xf3, 0x65, 0xee, 0x3a, 0x83, 0x27, 0x8f,
  0xf6, 0x77, 0x7b, 0xb6, 0xeb, 0x7f, 0x21, 0xba, 0xa5, 0xb1, 0xeb, 0x0c,
  0xb8, 0xc0, 0x20, 0x96, 0x18, 0x68, 0x8d, 0x41, 0xde, 0x65, 0x50, 0x15,
  0x06, 0xab, 0xca, 0x08, 0x37, 0x18, 0xc5, 0x65, 0x46, 0xbc, 0xc4, 0x48,
  0xeb, 0x8c, 0xf2, 0x1e, 0xa3, 0x3a, 0xcb, 0x68, 0x9d, 0xe3, 0x07, 0x37,
  0x77, 0x7b, 0xea, 0x4c, 0xc1, 0xa1, 0xf3, 0xd2, 0x11, 0xa7, 0x2d, 0x47,
  0x5e, 0xb4, 0x1d, 0xb5, 0x2c, 0xeb, 0xaa, 0x6c, 0xd5, 0x95, 0x6b, 0xd7,
  0x27, 0xd7, 0x2f, 0x8f, 0xf5, 0xf8, 0xab, 0x7f, 0xc2, 0xe2, 0x72, 0x26,
  0xae, 0xf7, 0x6c, 0x08, 0xeb, 0x4a, 0xa3, 0x78, 0xae, 0x80, 0xe3, 0x63,
  0x45, 0x4a, 0x80, 0x5a, 0xd2, 0xac, 0xd5, 0x20, 0xfe, 0x56, 0x0f, 0xca,
  0xe2, 0xa8, 0x92, 0x1c, 0xfd, 0x87, 0x55, 0xb8, 0x53, 0xab, 0xb5, 0xbd,
  0x4e, 0xa7, 0x71, 0xbf, 0xde, 0x78, 0xb8, 0xdd, 0xd8, 0x59, 0xf3, 0x9a,
  0xad, 0x6d, 0xaf, 0xd3, 0xbc, 0xbd, 0xb5, 0xba, 0xd5, 0x8c, 0xdf, 0x18,
  0x2e, 0x44, 0x35, 0xff, 0xbc, 0xb6, 0x1c, 0x84, 0xef, 0x00, 0x08, 0xa3,
  0x78, 0xd7, 0x4c, 0x5f, 0x44, 0x0f, 0x11, 0x00, 0xf0, 0x13, 0x01, 0x1f,
  0x31, 0x51, 0x00, 0x00, 0x28, 0xfb, 0x11, 0x15, 0xd5, 0x06, 0x2b, 0x37,
  0xb3, 0x0d, 0xb3, 0xb5, 0x08, 0xe7, 0x69, 0xb1
};
