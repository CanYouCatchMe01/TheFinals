#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_VSBasicVertexLightingTxVcBn.pdb
; shader hash: 9671f4f70404cd3822bc7db6541ee2d3
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 4
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 4
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSBasicVertexLightingTxVcBn
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12 }
;   output 1 depends on inputs: { 4, 5, 6, 13 }
;   output 2 depends on inputs: { 4, 5, 6, 14 }
;   output 3 depends on inputs: { 15 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3 }
;   output 13 depends on inputs: { 0, 1, 2, 3 }
;   output 14 depends on inputs: { 0, 1, 2, 3 }
;   output 15 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLightingTxVcBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fmul fast float %9, 2.000000e+00
  %17 = fmul fast float %10, 2.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = fadd fast float %16, -1.000000e+00
  %20 = fadd fast float %17, -1.000000e+00
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = extractvalue %dx.types.CBufRet.f32 %26, 3
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %36 = fmul fast float %22, %11
  %37 = call float @dx.op.tertiary.f32(i32 46, float %12, float %23, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %13, float %24, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %14, float %25, float %38)  ; FMad(a,b,c)
  %40 = fmul fast float %27, %11
  %41 = call float @dx.op.tertiary.f32(i32 46, float %12, float %28, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %13, float %29, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %14, float %30, float %42)  ; FMad(a,b,c)
  %44 = fmul fast float %32, %11
  %45 = call float @dx.op.tertiary.f32(i32 46, float %12, float %33, float %44)  ; FMad(a,b,c)
  %46 = call float @dx.op.tertiary.f32(i32 46, float %13, float %34, float %45)  ; FMad(a,b,c)
  %47 = call float @dx.op.tertiary.f32(i32 46, float %14, float %35, float %46)  ; FMad(a,b,c)
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = fsub fast float %49, %39
  %53 = fsub fast float %50, %43
  %54 = fsub fast float %51, %47
  %55 = call float @dx.op.dot3.f32(i32 55, float %52, float %53, float %54, float %52, float %53, float %54)  ; Dot3(ax,ay,az,bx,by,bz)
  %56 = call float @dx.op.unary.f32(i32 25, float %55)  ; Rsqrt(value)
  %57 = fmul fast float %52, %56
  %58 = fmul fast float %53, %56
  %59 = fmul fast float %54, %56
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = fmul fast float %61, %18
  %73 = call float @dx.op.tertiary.f32(i32 46, float %19, float %62, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %20, float %63, float %73)  ; FMad(a,b,c)
  %75 = fmul fast float %65, %18
  %76 = call float @dx.op.tertiary.f32(i32 46, float %19, float %66, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.tertiary.f32(i32 46, float %20, float %67, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %69, %18
  %79 = call float @dx.op.tertiary.f32(i32 46, float %19, float %70, float %78)  ; FMad(a,b,c)
  %80 = call float @dx.op.tertiary.f32(i32 46, float %20, float %71, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.dot3.f32(i32 55, float %74, float %77, float %80, float %74, float %77, float %80)  ; Dot3(ax,ay,az,bx,by,bz)
  %82 = call float @dx.op.unary.f32(i32 25, float %81)  ; Rsqrt(value)
  %83 = fmul fast float %82, %74
  %84 = fmul fast float %82, %77
  %85 = fmul fast float %82, %80
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.f32 %90, 1
  %93 = extractvalue %dx.types.CBufRet.f32 %90, 2
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = fsub fast float %57, %87
  %99 = fsub fast float %58, %88
  %100 = fsub fast float %59, %89
  %101 = call float @dx.op.dot3.f32(i32 55, float %98, float %99, float %100, float %98, float %99, float %100)  ; Dot3(ax,ay,az,bx,by,bz)
  %102 = call float @dx.op.unary.f32(i32 25, float %101)  ; Rsqrt(value)
  %103 = fmul fast float %102, %99
  %104 = fmul fast float %102, %100
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = fsub fast float %57, %106
  %118 = fsub fast float %58, %107
  %119 = fsub fast float %59, %108
  %120 = call float @dx.op.dot3.f32(i32 55, float %117, float %118, float %119, float %117, float %118, float %119)  ; Dot3(ax,ay,az,bx,by,bz)
  %121 = call float @dx.op.unary.f32(i32 25, float %120)  ; Rsqrt(value)
  %122 = fmul fast float %121, %118
  %123 = fmul fast float %121, %119
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = fsub fast float %57, %125
  %137 = fsub fast float %58, %126
  %138 = fsub fast float %59, %127
  %139 = call float @dx.op.dot3.f32(i32 55, float %136, float %137, float %138, float %136, float %137, float %138)  ; Dot3(ax,ay,az,bx,by,bz)
  %140 = call float @dx.op.unary.f32(i32 25, float %139)  ; Rsqrt(value)
  %141 = fmul fast float %140, %137
  %142 = fmul fast float %140, %138
  %143 = fsub fast float -0.000000e+00, %88
  %144 = fsub fast float -0.000000e+00, %89
  %145 = fsub fast float -0.000000e+00, %107
  %146 = fsub fast float -0.000000e+00, %108
  %147 = fsub fast float -0.000000e+00, %126
  %148 = fsub fast float -0.000000e+00, %127
  %149 = fmul fast float %83, %87
  %150 = fsub fast float -0.000000e+00, %149
  %151 = call float @dx.op.tertiary.f32(i32 46, float %143, float %84, float %150)  ; FMad(a,b,c)
  %152 = call float @dx.op.tertiary.f32(i32 46, float %144, float %85, float %151)  ; FMad(a,b,c)
  %153 = fmul fast float %83, %106
  %154 = fsub fast float -0.000000e+00, %153
  %155 = call float @dx.op.tertiary.f32(i32 46, float %145, float %84, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %146, float %85, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %83, %125
  %158 = fsub fast float -0.000000e+00, %157
  %159 = call float @dx.op.tertiary.f32(i32 46, float %147, float %84, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %148, float %85, float %159)  ; FMad(a,b,c)
  %161 = fmul fast float %98, %83
  %162 = fmul fast float %161, %102
  %163 = call float @dx.op.tertiary.f32(i32 46, float %103, float %84, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %104, float %85, float %163)  ; FMad(a,b,c)
  %165 = fmul fast float %117, %83
  %166 = fmul fast float %165, %121
  %167 = call float @dx.op.tertiary.f32(i32 46, float %122, float %84, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %123, float %85, float %167)  ; FMad(a,b,c)
  %169 = fmul fast float %136, %83
  %170 = fmul fast float %169, %140
  %171 = call float @dx.op.tertiary.f32(i32 46, float %141, float %84, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %142, float %85, float %171)  ; FMad(a,b,c)
  %173 = fcmp fast olt float %152, 0.000000e+00
  %174 = fcmp fast olt float %156, 0.000000e+00
  %175 = fcmp fast olt float %160, 0.000000e+00
  %176 = select i1 %173, float 0.000000e+00, float 1.000000e+00
  %177 = select i1 %174, float 0.000000e+00, float 1.000000e+00
  %178 = select i1 %175, float 0.000000e+00, float 1.000000e+00
  %179 = fmul fast float %176, %152
  %180 = fmul fast float %177, %156
  %181 = fmul fast float %178, %160
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 3
  %184 = call float @dx.op.binary.f32(i32 35, float %164, float 0.000000e+00)  ; FMax(a,b)
  %185 = call float @dx.op.binary.f32(i32 35, float %168, float 0.000000e+00)  ; FMax(a,b)
  %186 = call float @dx.op.binary.f32(i32 35, float %172, float 0.000000e+00)  ; FMax(a,b)
  %187 = fmul fast float %184, %176
  %188 = fmul fast float %185, %177
  %189 = fmul fast float %186, %178
  %190 = call float @dx.op.unary.f32(i32 23, float %187)  ; Log(value)
  %191 = call float @dx.op.unary.f32(i32 23, float %188)  ; Log(value)
  %192 = call float @dx.op.unary.f32(i32 23, float %189)  ; Log(value)
  %193 = fmul fast float %190, %183
  %194 = fmul fast float %191, %183
  %195 = fmul fast float %192, %183
  %196 = call float @dx.op.unary.f32(i32 21, float %193)  ; Exp(value)
  %197 = call float @dx.op.unary.f32(i32 21, float %194)  ; Exp(value)
  %198 = call float @dx.op.unary.f32(i32 21, float %195)  ; Exp(value)
  %199 = fmul fast float %196, %152
  %200 = fmul fast float %197, %156
  %201 = fmul fast float %198, %160
  %202 = fmul fast float %179, %91
  %203 = call float @dx.op.tertiary.f32(i32 46, float %180, float %110, float %202)  ; FMad(a,b,c)
  %204 = call float @dx.op.tertiary.f32(i32 46, float %181, float %129, float %203)  ; FMad(a,b,c)
  %205 = fmul fast float %179, %92
  %206 = call float @dx.op.tertiary.f32(i32 46, float %180, float %111, float %205)  ; FMad(a,b,c)
  %207 = call float @dx.op.tertiary.f32(i32 46, float %181, float %130, float %206)  ; FMad(a,b,c)
  %208 = fmul fast float %179, %93
  %209 = call float @dx.op.tertiary.f32(i32 46, float %180, float %112, float %208)  ; FMad(a,b,c)
  %210 = call float @dx.op.tertiary.f32(i32 46, float %181, float %131, float %209)  ; FMad(a,b,c)
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 2
  %215 = fmul fast float %212, %204
  %216 = fmul fast float %213, %207
  %217 = fmul fast float %214, %210
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 0
  %220 = extractvalue %dx.types.CBufRet.f32 %218, 1
  %221 = extractvalue %dx.types.CBufRet.f32 %218, 2
  %222 = fadd fast float %215, %219
  %223 = fadd fast float %216, %220
  %224 = fadd fast float %217, %221
  %225 = fmul fast float %199, %95
  %226 = call float @dx.op.tertiary.f32(i32 46, float %200, float %114, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %201, float %133, float %226)  ; FMad(a,b,c)
  %228 = fmul fast float %199, %96
  %229 = call float @dx.op.tertiary.f32(i32 46, float %200, float %115, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.tertiary.f32(i32 46, float %201, float %134, float %229)  ; FMad(a,b,c)
  %231 = fmul fast float %199, %97
  %232 = call float @dx.op.tertiary.f32(i32 46, float %200, float %116, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %201, float %135, float %232)  ; FMad(a,b,c)
  %234 = extractvalue %dx.types.CBufRet.f32 %182, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %182, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %237 = fmul fast float %234, %227
  %238 = fmul fast float %235, %230
  %239 = fmul fast float %236, %233
  %240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %241 = extractvalue %dx.types.CBufRet.f32 %240, 0
  %242 = extractvalue %dx.types.CBufRet.f32 %240, 1
  %243 = extractvalue %dx.types.CBufRet.f32 %240, 2
  %244 = extractvalue %dx.types.CBufRet.f32 %240, 3
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = extractvalue %dx.types.CBufRet.f32 %245, 3
  %250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %251 = extractvalue %dx.types.CBufRet.f32 %250, 0
  %252 = extractvalue %dx.types.CBufRet.f32 %250, 1
  %253 = extractvalue %dx.types.CBufRet.f32 %250, 2
  %254 = extractvalue %dx.types.CBufRet.f32 %250, 3
  %255 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %256 = extractvalue %dx.types.CBufRet.f32 %255, 0
  %257 = extractvalue %dx.types.CBufRet.f32 %255, 1
  %258 = extractvalue %dx.types.CBufRet.f32 %255, 2
  %259 = extractvalue %dx.types.CBufRet.f32 %255, 3
  %260 = fmul fast float %241, %11
  %261 = call float @dx.op.tertiary.f32(i32 46, float %12, float %242, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %13, float %243, float %261)  ; FMad(a,b,c)
  %263 = call float @dx.op.tertiary.f32(i32 46, float %14, float %244, float %262)  ; FMad(a,b,c)
  %264 = fmul fast float %246, %11
  %265 = call float @dx.op.tertiary.f32(i32 46, float %12, float %247, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.tertiary.f32(i32 46, float %13, float %248, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %14, float %249, float %266)  ; FMad(a,b,c)
  %268 = fmul fast float %251, %11
  %269 = call float @dx.op.tertiary.f32(i32 46, float %12, float %252, float %268)  ; FMad(a,b,c)
  %270 = call float @dx.op.tertiary.f32(i32 46, float %13, float %253, float %269)  ; FMad(a,b,c)
  %271 = call float @dx.op.tertiary.f32(i32 46, float %14, float %254, float %270)  ; FMad(a,b,c)
  %272 = fmul fast float %256, %11
  %273 = call float @dx.op.tertiary.f32(i32 46, float %12, float %257, float %272)  ; FMad(a,b,c)
  %274 = call float @dx.op.tertiary.f32(i32 46, float %13, float %258, float %273)  ; FMad(a,b,c)
  %275 = call float @dx.op.tertiary.f32(i32 46, float %14, float %259, float %274)  ; FMad(a,b,c)
  %276 = extractvalue %dx.types.CBufRet.f32 %211, 3
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 0
  %279 = extractvalue %dx.types.CBufRet.f32 %277, 1
  %280 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %281 = extractvalue %dx.types.CBufRet.f32 %277, 3
  %282 = call float @dx.op.dot4.f32(i32 56, float %11, float %12, float %13, float %14, float %278, float %279, float %280, float %281)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %283 = call float @dx.op.unary.f32(i32 7, float %282)  ; Saturate(value)
  %284 = fmul fast float %222, %2
  %285 = fmul fast float %223, %3
  %286 = fmul fast float %224, %4
  %287 = fmul fast float %276, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %284)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %285)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %286)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %237)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %238)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %239)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %283)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %263)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %267)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %271)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %275)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[18 x i32] [i32 16, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 1, i32 2, i32 4, i32 8]}
!9 = !{void ()* @VSBasicVertexLightingTxVcBn, !"VSBasicVertexLightingTxVcBn", !10, !5, null}
!10 = !{!11, !20, null}
!11 = !{!12, !15, !17, !19}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{i32 3, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 3, i8 0, !14}
!20 = !{!21, !22, !24, !25}
!21 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!22 = !{i32 1, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 2, i8 0, !18}
!25 = !{i32 3, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 3, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 27
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1088
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xf7f47196, 0x38cd0404                // 000000000000: D5807196 03FFEFF4 38CD0404
;   v_nop_xbox_data 0xb67dbc22, 0xd3e21e54                // 00000000000C: D580BC22 03FF6D7D D3E21E54
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_mov_b32     s63, lit(0x11014fac)                    // 000000000020: BEBF03FF 11014FAC
;   s_mov_b32     s62, -1                                 // 000000000028: BEBE03C1
;   s_mov_b32     s60, s8                                 // 00000000002C: BEBC0308
;   s_or_b32      s61, s9, lit(0x00100000)                // 000000000030: 883DFF09 00100000
;   s_waitcnt     vmcnt(0)                                // 000000000038: BF8C3F70
;   v_fma_f32     v3, v8, 2.0, -1.0                       // 00000000003C: D54B0003 03CDE908
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x0000c0   // 000000000044: F428091E FA0000C0
;   s_buffer_load_dwordx16  s[0:15], s[60:63], 0x0000e0   // 00000000004C: F430001E FA0000E0
;   s_buffer_load_dwordx16  s[20:35], s[60:63], 0x000130  // 000000000054: F430051E FA000130
;   v_fma_f32     v9, v9, 2.0, -1.0                       // 00000000005C: D54B0009 03CDE909
;   v_fma_f32     v21, v10, 2.0, -1.0                     // 000000000064: D54B0015 03CDE90A
;   s_waitcnt     lgkmcnt(0)                              // 00000000006C: BF8CC07F
;   v_mul_legacy_f32  v0, s8, v4                          // 000000000070: 0E000808
;   v_mul_legacy_f32  v20, s4, v4                         // 000000000074: 0E280804
;   v_mul_legacy_f32  v2, s12, v4                         // 000000000078: 0E04080C
;   v_mul_legacy_f32  v11, s24, v3                        // 00000000007C: 0E160618
;   v_mul_legacy_f32  v14, s20, v3                        // 000000000080: 0E1C0614
;   v_fmac_f32    v0, s9, v5                              // 000000000084: 56000A09
;   v_fmac_f32    v20, s5, v5                             // 000000000088: 56280A05
;   v_fmac_f32    v2, s13, v5                             // 00000000008C: 56040A0D
;   v_fmac_f32    v11, s25, v9                            // 000000000090: 56161219
;   v_fmac_f32    v14, s21, v9                            // 000000000094: 561C1215
;   v_fmac_f32    v0, s10, v6                             // 000000000098: 56000C0A
;   v_fmac_f32    v20, s6, v6                             // 00000000009C: 56280C06
;   v_fmac_f32    v2, s14, v6                             // 0000000000A0: 56040C0E
;   v_mul_legacy_f32  v3, s28, v3                         // 0000000000A4: 0E06061C
;   v_fmac_f32    v11, s26, v21                           // 0000000000A8: 56162A1A
;   v_fmac_f32    v0, s11, v7                             // 0000000000AC: 56000E0B
;   v_fmac_f32    v20, s7, v7                             // 0000000000B0: 56280E07
;   v_fmac_f32    v2, s15, v7                             // 0000000000B4: 56040E0F
;   s_buffer_load_dwordx16  s[4:19], s[60:63], null       // 0000000000B8: F430011E FA000000
;   v_fmac_f32    v3, s29, v9                             // 0000000000C0: 5606121D
;   v_sub_f32     v23, s37, v0                            // 0000000000C4: 082E0025
;   v_sub_f32     v1, s36, v20                            // 0000000000C8: 08022824
;   v_sub_f32     v2, s38, v2                             // 0000000000CC: 08040426
;   s_buffer_load_dwordx16  s[36:51], s[60:63], 0x000040  // 0000000000D0: F430091E FA000040
;   v_fmac_f32    v14, s22, v21                           // 0000000000D8: 561C2A16
;   v_mul_legacy_f32  v8, v23, v23                        // 0000000000DC: 0E102F17
;   v_mul_legacy_f32  v9, v11, v11                        // 0000000000E0: 0E12170B
;   v_fmac_f32    v3, s30, v21                            // 0000000000E4: 56062A1E
;   v_fmac_f32    v8, v1, v1                              // 0000000000E8: 56100301
;   v_fmac_f32    v9, v14, v14                            // 0000000000EC: 56121D0E
;   v_fmac_f32    v8, v2, v2                              // 0000000000F0: 56100502
;   v_fmac_f32    v9, v3, v3                              // 0000000000F4: 56120703
;   v_rsq_f32     v8, v8                                  // 0000000000F8: 7E105D08
;   v_rsq_f32     v9, v9                                  // 0000000000FC: 7E125D09
;   s_waitcnt     lgkmcnt(0)                              // 000000000100: BF8CC07F
;   v_fma_f32     v10, v23, v8, -s17                      // 000000000104: D54B000A 80461117
;   v_fma_f32     v15, v23, v8, -s37                      // 00000000010C: D54B000F 80961117
;   v_fma_f32     v20, v1, v8, -s16                       // 000000000114: D54B0014 80421101
;   v_fma_f32     v0, v23, v8, -s41                       // 00000000011C: D54B0000 80A61117
;   v_fma_f32     v23, v1, v8, -s36                       // 000000000124: D54B0017 80921101
;   v_mul_legacy_f32  v21, v10, v10                       // 00000000012C: 0E2A150A
;   v_mul_legacy_f32  v24, v15, v15                       // 000000000130: 0E301F0F
;   v_fma_f32     v22, v2, v8, -s18                       // 000000000134: D54B0016 804A1102
;   v_fma_f32     v25, v2, v8, -s38                       // 00000000013C: D54B0019 809A1102
;   v_fma_f32     v1, v1, v8, -s40                        // 000000000144: D54B0001 80A21101
;   v_fmac_f32    v21, v20, v20                           // 00000000014C: 562A2914
;   v_fmac_f32    v24, v23, v23                           // 000000000150: 56302F17
;   v_mul_legacy_f32  v26, v0, v0                         // 000000000154: 0E340100
;   v_mul_legacy_f32  v14, v9, v14                        // 000000000158: 0E1C1D09
;   v_fma_f32     v2, v2, v8, -s42                        // 00000000015C: D54B0002 80AA1102
;   v_fmac_f32    v21, v22, v22                           // 000000000164: 562A2D16
;   v_fmac_f32    v24, v25, v25                           // 000000000168: 56303319
;   v_fmac_f32    v26, v1, v1                             // 00000000016C: 56340301
;   v_mul_legacy_f32  v20, v20, v14                       // 000000000170: 0E281D14
;   v_mul_legacy_f32  v11, v9, v11                        // 000000000174: 0E161709
;   v_rsq_f32     v8, v21                                 // 000000000178: 7E105D15
;   v_mul_legacy_f32  v23, v23, v14                       // 00000000017C: 0E2E1D17
;   v_fmac_f32    v26, v2, v2                             // 000000000180: 56340502
;   v_mul_legacy_f32  v3, v9, v3                          // 000000000184: 0E060709
;   v_mul_legacy_f32  v1, v1, v14                         // 000000000188: 0E021D01
;   v_rsq_f32     v21, v24                                // 00000000018C: 7E2A5D18
;   v_mul_legacy_f32  v24, s16, v14                       // 000000000190: 0E301C10
;   v_rsq_f32     v26, v26                                // 000000000194: 7E345D1A
;   v_fma_f32     v9, -s17, v11, -v24                     // 000000000198: D54B0009 A4621611
;   v_mul_legacy_f32  v24, s36, v14                       // 0000000001A0: 0E301C24
;   v_mul_legacy_f32  v20, v20, v8                        // 0000000001A4: 0E281114
;   v_mul_legacy_f32  v10, v8, v10                        // 0000000001A8: 0E141508
;   v_mul_legacy_f32  v8, v8, v22                         // 0000000001AC: 0E102D08
;   v_fmac_f32    v9, -s18, v3                            // 0000000001B0: D52B0009 20020612
;   v_fma_f32     v22, -s37, v11, -v24                    // 0000000001B8: D54B0016 A4621625
;   v_mul_legacy_f32  v15, v21, v15                       // 0000000001C0: 0E1E1F15
;   v_fmac_f32    v20, v10, v11                           // 0000000001C4: 5628170A
;   v_mul_legacy_f32  v10, v23, v21                       // 0000000001C8: 0E142B17
;   v_mul_legacy_f32  v14, s40, v14                       // 0000000001CC: 0E1C1C28
;   v_fmac_f32    v22, -s38, v3                           // 0000000001D0: D52B0016 20020626
;   v_mul_legacy_f32  v1, v1, v26                         // 0000000001D8: 0E023501
;   v_mul_legacy_f32  v0, v26, v0                         // 0000000001DC: 0E00011A
;   v_fmac_f32    v20, v8, v3                             // 0000000001E0: 56280708
;   v_fma_f32     v8, -s41, v11, -v14                     // 0000000001E4: D54B0008 A43A1629
;   v_fmac_f32    v10, v15, v11                           // 0000000001EC: 5614170F
;   v_mul_legacy_f32  v21, v21, v25                       // 0000000001F0: 0E2A3315
;   v_cmp_gt_f32  vcc, 0, v9                              // 0000000001F4: 7C081280
;   v_fmac_f32    v1, v0, v11                             // 0000000001F8: 56021700
;   v_mul_legacy_f32  v0, v26, v2                         // 0000000001FC: 0E00051A
;   v_max_f32     v15, 0, v20                             // 000000000200: 201E2880
;   v_fmac_f32    v10, v21, v3                            // 000000000204: 56140715
;   v_cndmask_b32  v14, 1.0, 0, vcc                       // 000000000208: D501000E 01A900F2
;   v_cmp_gt_f32  vcc, 0, v22                             // 000000000210: 7C082C80
;   v_fmac_f32    v8, -s42, v3                            // 000000000214: D52B0008 2002062A
;   v_fmac_f32    v1, v0, v3                              // 00000000021C: 56020700
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x000190   // 000000000220: F428091E FA000190
;   v_mul_legacy_f32  v0, v15, v14                        // 000000000228: 0E001D0F
;   s_buffer_load_dwordx8  s[52:59], s[60:63], 0x000170   // 00000000022C: F42C0D1E FA000170
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000234: D501000B 01A900F2
;   v_max_f32     v2, 0, v10                              // 00000000023C: 20041480
;   v_cmp_gt_f32  vcc, 0, v8                              // 000000000240: 7C081080
;   v_log_f32     v0, v0                                  // 000000000244: 7E004F00
;   v_max_f32     v1, 0, v1                               // 000000000248: 20020280
;   s_buffer_load_dwordx16  s[16:31], s[60:63], 0x000080  // 00000000024C: F430041E FA000080
;   v_mul_legacy_f32  v2, v2, v11                         // 000000000254: 0E041702
;   v_cndmask_b32  v3, 1.0, 0, vcc                        // 000000000258: D5010003 01A900F2
;   v_mul_legacy_f32  v10, s32, v4                        // 000000000260: 0E140820
;   v_mul_legacy_f32  v14, v14, v9                        // 000000000264: 0E1C130E
;   v_mul_legacy_f32  v11, v11, v22                       // 000000000268: 0E162D0B
;   v_log_f32     v2, v2                                  // 00000000026C: 7E044F02
;   v_mul_legacy_f32  v1, v1, v3                          // 000000000270: 0E020701
;   v_mul_legacy_f32  v0, s15, v0                         // 000000000274: 0E00000F
;   v_fmac_f32    v10, s33, v5                            // 000000000278: 56140A21
;   v_mul_legacy_f32  v23, s44, v14                       // 00000000027C: 0E2E1C2C
;   v_mul_legacy_f32  v24, s46, v14                       // 000000000280: 0E301C2E
;   v_log_f32     v1, v1                                  // 000000000284: 7E024F01
;   s_waitcnt     lgkmcnt(0)                              // 000000000288: BF8CC07F
;   v_mul_legacy_f32  v21, s36, v4                        // 00000000028C: 0E2A0824
;   v_mul_legacy_f32  v15, s52, v4                        // 000000000290: 0E1E0834
;   v_mul_legacy_f32  v20, s56, v4                        // 000000000294: 0E280838
;   v_mul_legacy_f32  v2, s15, v2                         // 000000000298: 0E04040F
;   v_exp_f32     v0, v0                                  // 00000000029C: 7E004B00
;   v_fmac_f32    v21, s37, v5                            // 0000000002A0: 562A0A25
;   v_fmac_f32    v15, s53, v5                            // 0000000002A4: 561E0A35
;   v_fmac_f32    v20, s57, v5                            // 0000000002A8: 56280A39
;   v_fmac_f32    v10, s34, v6                            // 0000000002AC: 56140C22
;   v_exp_f32     v2, v2                                  // 0000000002B0: 7E044B02
;   v_mul_legacy_f32  v1, s15, v1                         // 0000000002B4: 0E02020F
;   v_fmac_f32    v15, s54, v6                            // 0000000002B8: 561E0C36
;   v_fmac_f32    v20, s58, v6                            // 0000000002BC: 56280C3A
;   v_fmac_f32    v21, s38, v6                            // 0000000002C0: 562A0C26
;   v_mul_legacy_f32  v14, s45, v14                       // 0000000002C4: 0E1C1C2D
;   v_mul_legacy_f32  v0, v0, v9                          // 0000000002C8: 0E001300
;   v_exp_f32     v1, v1                                  // 0000000002CC: 7E024B01
;   v_mul_legacy_f32  v5, s1, v5                          // 0000000002D0: 0E0A0A01
;   v_fmac_f32    v21, s39, v7                            // 0000000002D4: 562A0E27
;   v_fmac_f32    v20, s59, v7                            // 0000000002D8: 56280E3B
;   v_fmac_f32    v15, s55, v7                            // 0000000002DC: 561E0E37
;   v_fmac_f32    v10, s35, v7                            // 0000000002E0: 56140E23
;   v_mul_legacy_f32  v3, v3, v8                          // 0000000002E4: 0E061103
;   v_fmac_f32    v14, s49, v11                           // 0000000002E8: 561C1631
;   v_fmac_f32    v24, s50, v11                           // 0000000002EC: 56301632
;   v_fmac_f32    v23, s48, v11                           // 0000000002F0: 562E1630
;   v_mul_legacy_f32  v2, v2, v22                         // 0000000002F4: 0E042D02
;   v_mul_legacy_f32  v9, s21, v0                         // 0000000002F8: 0E120015
;   v_mul_legacy_f32  v11, s22, v0                        // 0000000002FC: 0E160016
;   v_mul_legacy_f32  v0, s20, v0                         // 000000000300: 0E000014
;   v_fmac_f32    v5, s0, v4                              // 000000000304: 560A0800
;   exp           pos0, v10, v15, v20, v21 done           // 000000000308: F80008CF 15140F0A
;   v_fmac_f32    v23, s16, v3                            // 000000000310: 562E0610
;   s_waitcnt     expcnt(0)                               // 000000000314: BF8CFF0F
;   v_mul_legacy_f32  v10, v1, v8                         // 000000000318: 0E141101
;   v_fmac_f32    v0, s24, v2                             // 00000000031C: 56000418
;   v_fmac_f32    v11, s26, v2                            // 000000000320: 5616041A
;   v_fmac_f32    v9, s25, v2                             // 000000000324: 56120419
;   v_fmac_f32    v14, s17, v3                            // 000000000328: 561C0611
;   v_fmac_f32    v24, s18, v3                            // 00000000032C: 56300612
;   v_fmac_f32    v5, s3, v7                              // 000000000330: 560A0E03
;   v_fmac_f32    v0, s28, v10                            // 000000000334: 5600141C
;   v_fma_f32     v15, s4, v23, s8                        // 000000000338: D54B000F 00222E04
;   v_fma_f32     v2, s5, v14, s9                         // 000000000340: D54B0002 00261C05
;   v_fma_f32     v3, s6, v24, s10                        // 000000000348: D54B0003 002A3006
;   v_fmac_f32    v9, s29, v10                            // 000000000350: 5612141D
;   v_fmac_f32    v11, s30, v10                           // 000000000354: 5616141E
;   v_fmac_f32    v5, v6, s2 clamp                        // 000000000358: D52B8005 00000506
;   v_mov_b32     v10, 1.0                                // 000000000360: 7E1402F2
;   v_mov_b32     v7, 0                                   // 000000000364: 7E0E0280
;   v_mul_legacy_f32  v8, s7, v19                         // 000000000368: 0E102607
;   v_mul_legacy_f32  v6, s14, v11                        // 00000000036C: 0E0C160E
;   v_mul_legacy_f32  v21, v15, v16                       // 000000000370: 0E2A210F
;   v_mul_legacy_f32  v3, v3, v18                         // 000000000374: 0E062503
;   v_mul_legacy_f32  v2, v2, v17                         // 000000000378: 0E042302
;   v_mul_legacy_f32  v0, s12, v0                         // 00000000037C: 0E00000C
;   v_mul_legacy_f32  v11, s13, v9                        // 000000000380: 0E16120D
;   exp           param0, v21, v2, v3, v8                 // 000000000384: F800020F 08030215
;   exp           param1, v0, v11, v6, v5                 // 00000000038C: F800021F 05060B00
;   exp           param2, v12, v13, v7, v10               // 000000000394: F800022F 0A070D0C
;   s_endpgm                                              // 00000000039C: BF810000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
;   s_code_end                                            // 0000000003C0: BF9F0000
;   s_code_end                                            // 0000000003C4: BF9F0000
;   s_code_end                                            // 0000000003C8: BF9F0000
;   s_code_end                                            // 0000000003CC: BF9F0000
;   s_code_end                                            // 0000000003D0: BF9F0000
;   s_code_end                                            // 0000000003D4: BF9F0000
;   s_code_end                                            // 0000000003D8: BF9F0000
;   s_code_end                                            // 0000000003DC: BF9F0000
;   s_code_end                                            // 0000000003E0: BF9F0000
;   s_code_end                                            // 0000000003E4: BF9F0000
;   s_code_end                                            // 0000000003E8: BF9F0000
;   s_code_end                                            // 0000000003EC: BF9F0000
;   s_code_end                                            // 0000000003F0: BF9F0000
;   s_code_end                                            // 0000000003F4: BF9F0000
;   s_code_end                                            // 0000000003F8: BF9F0000
;   s_code_end                                            // 0000000003FC: BF9F0000
;   s_code_end                                            // 000000000400: BF9F0000
;   s_code_end                                            // 000000000404: BF9F0000
;   s_code_end                                            // 000000000408: BF9F0000
;   s_code_end                                            // 00000000040C: BF9F0000
;   s_code_end                                            // 000000000410: BF9F0000
;   s_code_end                                            // 000000000414: BF9F0000
;   s_code_end                                            // 000000000418: BF9F0000
;   s_code_end                                            // 00000000041C: BF9F0000
;   s_code_end                                            // 000000000420: BF9F0000
;   s_code_end                                            // 000000000424: BF9F0000
;   s_code_end                                            // 000000000428: BF9F0000
;   s_code_end                                            // 00000000042C: BF9F0000
;   s_code_end                                            // 000000000430: BF9F0000
;   s_code_end                                            // 000000000434: BF9F0000
;   s_code_end                                            // 000000000438: BF9F0000
;   s_code_end                                            // 00000000043C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 12
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 2
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 47
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSBasicVertexLightingTxVcBn)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       data_vgpr: 16
;       data_size: 3
;     }
; 
;   num_output_semantics: 3
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 4 {
;     vs_export_count: 2
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 12
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000000001100110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000011110011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=27,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=18
; VAlu:163,SAlu:12,VMem:0,SMem:8,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char BasicEffect_VSBasicVertexLightingTxVcBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x6e, 0xa2, 0x7a, 0x83, 0xd7, 0xde, 0x7f, 0xd7,
  0x62, 0x8f, 0xc1, 0x19, 0x10, 0x89, 0x23, 0xd5, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x19, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00,
  0x38, 0x03, 0x00, 0x00, 0xc8, 0x03, 0x00, 0x00, 0x64, 0x04, 0x00, 0x00,
  0x80, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xac, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d,
  0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0xa4, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x80, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00,
  0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65,
  0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x56,
  0x63, 0x42, 0x6e, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00,
  0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x42, 0x61,
  0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53,
  0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c,
  0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x56, 0x63, 0x42,
  0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x71, 0xf4, 0xf7,
  0x04, 0x04, 0xcd, 0x38, 0x22, 0xbc, 0x7d, 0xb6, 0x54, 0x1e, 0xe2, 0xd3,
  0x44, 0x58, 0x49, 0x4c, 0xf4, 0x14, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x3d, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x74, 0x10, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x8c, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xec, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x00, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x10, 0x11, 0x00, 0x00, 0xd3, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xe4, 0x14, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x23, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x74, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x1a, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3,
  0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0,
  0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95,
  0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60,
  0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8,
  0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04,
  0x0c, 0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30, 0xe4, 0x80, 0x97, 0x04, 0xdd,
  0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04,
  0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a, 0xcf, 0x1b, 0xbe, 0xef, 0xf3,
  0xbc, 0x0e, 0xfc, 0x40, 0x0a, 0x53, 0x82, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x20, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb9, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xa3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x80,
  0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0xa8, 0x28, 0x89, 0x11, 0x80,
  0x42, 0x28, 0x83, 0x22, 0x20, 0x71, 0x06, 0x80, 0xc6, 0xb1, 0x24, 0x08,
  0x82, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0x80, 0x4f, 0x3e,
  0xb8, 0x87, 0x7b, 0xb8, 0x07, 0x00, 0x44, 0x40, 0x08, 0x00, 0x02, 0x81,
  0x40, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x62, 0x80, 0x11, 0x98, 0x20, 0x10, 0xce, 0x06, 0xe4, 0x70,
  0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d, 0x20, 0x00, 0x40, 0x02,
  0x26, 0x08, 0x63, 0x90, 0x6d, 0x08, 0xa8, 0x09, 0x82, 0x00, 0x70, 0xb3,
  0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93, 0xa3, 0x2b, 0xc3,
  0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3, 0xc2, 0xb3, 0x1a,
  0x13, 0x72, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97,
  0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa6, 0x09, 0x42, 0x41, 0x6d, 0x08, 0x8e,
  0x09, 0x42, 0x51, 0x4d, 0x10, 0x88, 0x67, 0x82, 0x40, 0x40, 0x1b, 0x84,
  0xce, 0xdb, 0xb0, 0x1c, 0x58, 0xa6, 0x6d, 0x9a, 0xc1, 0x1d, 0xda, 0x47,
  0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x58, 0x13, 0x04,
  0x22, 0xda, 0x20, 0x74, 0x63, 0xb0, 0x61, 0x31, 0xc2, 0x20, 0xd3, 0x36,
  0xcd, 0x10, 0x03, 0x43, 0x23, 0x83, 0x09, 0x02, 0x21, 0x11, 0xa1, 0x2a,
  0xc2, 0x1a, 0x7a, 0x7a, 0x92, 0x22, 0x9a, 0x20, 0x14, 0xd7, 0x06, 0xa1,
  0xeb, 0x36, 0x2c, 0x66, 0x70, 0x06, 0x99, 0xb6, 0x69, 0x06, 0x1a, 0x98,
  0x81, 0x96, 0x06, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c, 0xdd,
  0x1a, 0x64, 0xda, 0xa6, 0x19, 0x5c, 0xa7, 0x7d, 0x1b, 0x08, 0x30, 0x28,
  0x03, 0x35, 0x60, 0x83, 0x0d, 0xcb, 0xb1, 0x06, 0x99, 0xb6, 0xa1, 0x81,
  0xc1, 0x1d, 0xda, 0xb7, 0x21, 0x30, 0x36, 0x2c, 0xc6, 0x1a, 0x64, 0xda,
  0x1b, 0xa0, 0x81, 0xc1, 0x19, 0xda, 0xb7, 0x61, 0x31, 0x83, 0x33, 0xc8,
  0xb4, 0x0d, 0x0d, 0x0c, 0x34, 0x30, 0x03, 0x2d, 0x0d, 0x36, 0x2c, 0x1d,
  0x96, 0x89, 0xc1, 0xc6, 0x19, 0x5c, 0xa7, 0x7d, 0x1b, 0x08, 0x37, 0x80,
  0x83, 0x38, 0x90, 0x83, 0x0d, 0x43, 0x1b, 0xcc, 0x01, 0xb0, 0xa1, 0xb0,
  0x2e, 0x3a, 0x98, 0x80, 0x56, 0x78, 0x62, 0x6f, 0x78, 0x2e, 0x63, 0x6f,
  0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
  0x6e, 0x73, 0x53, 0x02, 0xa1, 0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a,
  0x59, 0x99, 0x1b, 0xdd, 0x94, 0x80, 0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57,
  0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36, 0x25, 0x38, 0x9a, 0x90, 0xe1, 0xb9,
  0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9, 0x4d, 0x09, 0x92, 0x3a, 0x64, 0x78,
  0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
  0x53, 0x02, 0xa6, 0x0c, 0x19, 0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d,
  0xdc, 0x58, 0xd9, 0xdc, 0x94, 0x40, 0xaa, 0x43, 0x86, 0xe7, 0x62, 0x97,
  0x56, 0x76, 0x97, 0x44, 0x36, 0x45, 0x17, 0x46, 0x57, 0x36, 0x25, 0xa0,
  0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9, 0xd1, 0xc9, 0xe5, 0x41, 0xbd, 0xa5,
  0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0xe8, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x06, 0xb0, 0xbd, 0xec,
  0x06, 0x48, 0x88, 0xf0, 0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13,
  0xd2, 0x18, 0xed, 0xf5, 0x0a, 0x5b, 0x63, 0x05, 0xd0, 0x70, 0xf9, 0xce,
  0xe3, 0x07, 0x48, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x1d, 0x6c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43,
  0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5, 0x6d, 0x5b, 0x82, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x36,
  0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6,
  0x19, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7,
  0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x86,
  0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98,
  0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40,
  0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x64, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14,
  0x5c, 0x71, 0x14, 0x4c, 0x71, 0x95, 0x5d, 0x29, 0x14, 0xc2, 0x0c, 0x40,
  0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81, 0x94, 0x48,
  0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x94, 0x45, 0xb1, 0xd0, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8,
  0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x02, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xa0, 0xbd, 0xc1, 0x13, 0x06, 0x6d, 0xd0, 0x06, 0xde, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x78, 0x70, 0xa9, 0x81, 0x1b, 0x94,
  0x81, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1e, 0x60, 0x6b,
  0xf0, 0x06, 0xdf, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1e,
  0x64, 0x6c, 0x00, 0x07, 0x64, 0x80, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xb1, 0x07, 0x5a, 0x1b, 0xc4, 0x81, 0x19, 0x64, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf0, 0xc1, 0xb6, 0x06, 0x72, 0x90, 0x06, 0xda,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7d, 0xc0, 0xb1, 0xc1, 0x1c,
  0x8c, 0xc1, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1f, 0x74,
  0x75, 0x40, 0x07, 0x6b, 0xc0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0xf1, 0x07, 0x9e, 0x1d, 0xd4, 0x41, 0x19, 0x74, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0x80, 0xc2, 0x77, 0x07, 0x76, 0xa0, 0x06, 0xde, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa1, 0x00, 0x06, 0x77, 0x70, 0x07,
  0x6e, 0xf0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a, 0x61,
  0x80, 0x07, 0x78, 0x80, 0x06, 0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x28, 0x88, 0x41, 0x1e, 0xe4, 0x41, 0x1b, 0x84, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa4, 0x30, 0x06, 0x7a, 0xa0, 0x07,
  0x6f, 0x20, 0x06, 0x76, 0x44, 0xf2, 0xb1, 0x43, 0x92, 0x8f, 0x1d, 0x93,
  0x7c, 0x6c, 0xa8, 0xe0, 0x63, 0x83, 0x05, 0x1f, 0x1b, 0x2e, 0xf8, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x55, 0x0a, 0x6c, 0x40, 0xf1, 0xc1,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26,
  0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xaa, 0x10, 0x07,
  0xd9, 0x19, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0xf5,
  0x0a, 0x76, 0xe0, 0xad, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x39, 0x99, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xa2, 0x85, 0x3e, 0xc8, 0x9c, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0xae, 0x5a, 0xf0, 0x83, 0xcc, 0x09, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xb2, 0x85, 0x3f, 0xc8, 0x9c, 0xc0,
  0x9a, 0x4e, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xe1, 0x42,
  0x28, 0x74, 0x4d, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x2e,
  0x88, 0x42, 0xd7, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xe9,
  0xc2, 0x28, 0x74, 0x4d, 0x60, 0x4c, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x2e, 0x5e, 0x28, 0x85, 0x30, 0x60, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xb8, 0x7a, 0xc1, 0x14, 0xc2, 0x80, 0x09, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xf2, 0x85, 0x53, 0x08, 0x03, 0x26,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x0a, 0x1c, 0x4e, 0xe1, 0x0d,
  0xf6, 0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6c, 0x68, 0xe2, 0x63, 0x83, 0x12, 0x1f, 0x1b, 0x8e, 0xf8, 0x8c, 0x18,
  0x2c, 0x00, 0x08, 0x82, 0x81, 0xb2, 0x0e, 0xa9, 0x30, 0x08, 0xc1, 0x20,
  0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0xac, 0xc3, 0x2a, 0x04,
  0x56, 0x04, 0xf2, 0xb1, 0x42, 0x90, 0x8f, 0x15, 0x83, 0x7c, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x62, 0x87, 0x59, 0xd8, 0x03, 0x53, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0xe0, 0xe1, 0x16, 0xfe, 0x20, 0x15, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x2a, 0x7a, 0xd8, 0x85, 0x51, 0xa8, 0x85, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0xc5, 0x0e,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x3e, 0x84, 0x83,
  0x1d, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xf9, 0x20,
  0x0e, 0x76, 0xb0, 0x04, 0xa6, 0xe4, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0xda, 0x07, 0x72, 0xc8, 0x03, 0x25, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x8b, 0x1f, 0xca, 0x21, 0x0f, 0x94, 0xc0, 0x12,
  0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xfe, 0x70,
  0x0e, 0x7c, 0x90, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xfd,
  0x03, 0x3a, 0xf0, 0x41, 0x12, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x81,
  0x52, 0x12, 0xe3, 0x70, 0x10, 0xc1, 0x41, 0x04, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xc0, 0x94, 0x44, 0x39, 0x04, 0x16, 0x24, 0xf2, 0x31, 0xe1,
  0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0,
  0x32, 0x89, 0x76, 0xa8, 0x05, 0x7f, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8,
  0x54, 0x22, 0x1e, 0x72, 0x81, 0x24, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a,
  0x97, 0xa8, 0x87, 0x5e, 0x30, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0xb0, 0x34, 0x58, 0xe2, 0x63, 0x69, 0xb0, 0xc4,
  0xc7, 0xd2, 0x60, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28,
  0x39, 0x71, 0x0f, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x4c, 0x4e, 0xe4, 0x43, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08,
  0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x95, 0x13, 0x20, 0x81,
  0x0e, 0xfe, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xf5, 0x04, 0x49, 0xb0,
  0xc3, 0x4c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x61, 0x81, 0x12, 0xf0,
  0x80, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x60, 0x7c, 0xb0, 0xc4, 0xc7, 0xf8, 0x60, 0x89, 0x8f, 0xf1, 0xc1, 0x12,
  0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xd8, 0x42, 0x25, 0x06,
  0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0xb6,
  0x60, 0x89, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0x8a, 0x2d, 0x66, 0x62, 0x1f, 0x64, 0x62, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0x82, 0x8b, 0x9b, 0xf8, 0x87, 0xb5, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0xe8, 0x62, 0x27, 0x46, 0x42, 0x25, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x5e, 0x61, 0x89,
  0x8f, 0xbd, 0xc2, 0x12, 0x1f, 0x7b, 0x85, 0x25, 0x3e, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xa0, 0xfc, 0x45, 0x4f, 0x0c, 0x42, 0x30, 0x08, 0xc1,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x7f, 0xf1, 0x13, 0x81, 0x05,
  0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x63, 0x2f, 0x71, 0x07, 0xf1, 0x31, 0x98,
  0xb8, 0x83, 0xf8, 0x58, 0x4c, 0x98, 0x41, 0x7c, 0x4c, 0x26, 0xcc, 0x20,
  0x3e, 0x36, 0x13, 0x55, 0x7c, 0x8c, 0x26, 0xaa, 0xf8, 0x98, 0x28, 0xf8,
  0x81, 0x7c, 0xcc, 0x26, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0x65, 0x1a, 0x6f, 0x81, 0x8c, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd7, 0x69, 0xc0, 0x05, 0x32, 0x0a, 0x81, 0x99, 0xc2, 0x1b,
  0xc8, 0xc7, 0x74, 0x22, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x5c, 0xaa, 0x31, 0x17, 0xca, 0x29, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x70, 0xad, 0x06, 0x5d, 0x28, 0xa7, 0x10, 0x98, 0x2a, 0x80, 0x81,
  0x7c, 0xcc, 0x27, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1,
  0xe5, 0x1a, 0x77, 0xc1, 0xac, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xd7, 0x6b, 0xe0, 0x05, 0xb3, 0x0a, 0x81, 0xfd, 0x81, 0x2b, 0xc8,
  0xc7, 0x02, 0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0xb2, 0xb1, 0x17, 0x7c, 0xf0, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xb3, 0xc1, 0x17, 0x7c, 0xf0, 0x0a, 0x81, 0xc1, 0x81, 0x2c,
  0xc8, 0xc7, 0x82, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x5c, 0xb6, 0xf1, 0x17, 0x6d, 0x30, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0xb7, 0x01, 0x1a, 0x6d, 0x30, 0x0b, 0x81, 0x85, 0x81,
  0x2d, 0xc8, 0xc7, 0x02, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x70, 0xe9, 0xc6, 0x68, 0x78, 0xb7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xb5, 0x1b, 0xa4, 0xe1, 0xdd, 0x42, 0x30, 0x1c, 0x51, 0xb9,
  0x05, 0xf1, 0x0d, 0x47, 0x48, 0x6f, 0x41, 0x7c, 0xc3, 0x11, 0x0f, 0x5c,
  0x10, 0xdf, 0x74, 0x43, 0x5c, 0xd0, 0xc5, 0x30, 0xdd, 0x20, 0x17, 0x75,
  0x31, 0x4c, 0x37, 0xcc, 0x85, 0x5d, 0x0c, 0x36, 0x6c, 0xf2, 0xb1, 0x01,
  0x93, 0x8f, 0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0,
  0x32, 0x8f, 0xd6, 0xa8, 0x8b, 0xdd, 0x18, 0x4d, 0x08, 0x86, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0x70, 0xd4, 0xe3, 0x34, 0xa8, 0xbc, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x03, 0x67, 0x3d, 0x50, 0x23, 0xd2, 0x8b, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x70, 0xd8, 0x23, 0x35, 0x9c, 0xbd, 0xb0,
  0x61, 0x91, 0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x58, 0xe4, 0x33, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x4c, 0x7c, 0xb8, 0xc6, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x8c, 0x7c, 0xbc, 0xc6, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xcc, 0x7c, 0xc0, 0xc6, 0x60, 0x83, 0x22, 0x1f, 0x1b, 0x16,
  0xf9, 0xd8, 0xc0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98,
  0xfb, 0xa8, 0x8d, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0xfc,
  0xb0, 0x8d, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0xfc, 0xb8,
  0x8d, 0xc1, 0x86, 0x37, 0x90, 0x8f, 0x0d, 0x6c, 0x20, 0x1f, 0x1b, 0xd2,
  0x40, 0x3e, 0x76, 0xbd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0xd2, 0x8f, 0xf1, 0xb8, 0x7a, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x6b, 0x3f, 0xc8, 0xe3, 0x5a, 0x85, 0xc0, 0xb4, 0x78, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xfd, 0x61, 0x1e, 0xda,
  0x2f, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xf9, 0xc7, 0x79,
  0x68, 0xad, 0x10, 0x58, 0x37, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x0b, 0x44, 0xd2, 0xa3, 0x0b, 0x87, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xae, 0x10, 0x51, 0x8f, 0xee, 0x15, 0x82, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0x46, 0x44, 0x3d, 0x64, 0xe3, 0x3f, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x45,
  0x3e, 0x36, 0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x54, 0x2a, 0x12, 0x1f, 0xb9, 0x71, 0x22, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f, 0x3b,
  0x06, 0xf8, 0xd8, 0x31, 0xc0, 0xc7, 0x34, 0x91, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0x31, 0xa2, 0x1f, 0x1a, 0x3c, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xc9, 0xc8, 0x7e, 0x68, 0xbe, 0x10,
  0x58, 0x47, 0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8b,
  0x46, 0xfa, 0xa3, 0x93, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xae, 0x1a, 0xf1, 0x8f, 0x0e, 0x1c, 0x02, 0x03, 0x03, 0x93, 0x90, 0xcf,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x37, 0x02, 0x22, 0x60, 0x40,
  0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x38, 0x12, 0x22,
  0x60, 0x20, 0x0e, 0xc1, 0x68, 0x02, 0x1d, 0x00, 0xa3, 0x09, 0x75, 0x10,
  0x8c, 0x26, 0xd8, 0x81, 0x60, 0x83, 0x22, 0x1f, 0x1b, 0x10, 0xf9, 0xd8,
  0x60, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x30, 0x39,
  0x91, 0xf7, 0xa8, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0xa8, 0xca, 0x84, 0x45, 0xe8, 0xa3, 0x44, 0x46, 0x13, 0x02, 0x60, 0x34,
  0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0x52, 0x93, 0x18, 0xc9, 0x8f, 0x19, 0x19, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xea, 0x4d, 0x6c, 0xc4, 0x3f,
  0x64, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x46, 0x13, 0x88, 0xc1, 0xa6, 0xfc, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x5c, 0x74, 0xd2, 0x23, 0xf9, 0x31, 0x05, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x70, 0xd5, 0x89, 0x8f, 0xe4, 0xc7, 0x14, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0xc1, 0x65, 0x27, 0x3f, 0x92, 0x1f, 0x53, 0x60,
  0x52, 0x7f, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x3c,
  0x09, 0x93, 0xfe, 0x90, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8,
  0xf2, 0x44, 0x4c, 0xfa, 0x43, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0xd2, 0x93, 0x31, 0xe9, 0x0f, 0x29, 0xb0, 0x28, 0x44, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x9f, 0x94, 0x49, 0x88, 0x44,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x7d, 0x62, 0x26, 0x21,
  0x12, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xf9, 0xc9, 0x99,
  0x84, 0x48, 0x14, 0x18, 0x54, 0x22, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x0b, 0x54, 0xd2, 0xa4, 0x44, 0xa0, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xae, 0x50, 0x51, 0x93, 0x12, 0x81, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xb8, 0x44, 0x65, 0x4d, 0x4a, 0x04, 0x0a, 0x46,
  0x13, 0x42, 0x61, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xaa, 0x54,
  0xd8, 0x84, 0x46, 0xde, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xa0, 0x01, 0x40, 0x10,
  0x0c, 0xa0, 0x55, 0xa9, 0x93, 0x17, 0x71, 0x91, 0x16, 0x61, 0x11, 0x62,
  0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0x5c, 0x25, 0x54,
  0x02, 0xf3, 0x03, 0x1d, 0x91, 0x8f, 0xf9, 0x81, 0x8e, 0xc8, 0xc7, 0xfc,
  0x40, 0x47, 0xe4, 0x63, 0x8b, 0x8e, 0xc8, 0x67, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x90, 0x5a, 0xb1, 0x13, 0x56, 0x61, 0x95, 0x51, 0x21, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0xa9, 0x15, 0x3b, 0x61, 0x15, 0x56,
  0xe1, 0x93, 0x61, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x5a, 0xb1,
  0x13, 0x56, 0x61, 0x15, 0x50, 0x11, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x00, 0xa9, 0x15, 0x3b, 0x61, 0x15, 0x56, 0x09, 0x95, 0x60, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x90, 0x5a, 0xb1, 0x93, 0x56, 0x61, 0x95, 0x51,
  0x99, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x6a, 0xc5, 0x4e,
  0x5a, 0x85, 0x55, 0xf8, 0x44, 0x0e, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x00, 0xa9, 0x15, 0x3b, 0x69, 0x15, 0x56, 0x01, 0x95, 0x38, 0x18, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x56, 0xec, 0xa4, 0x55, 0x58, 0x25,
  0x54, 0x8a, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x6a, 0xc5, 0x4e,
  0x4a, 0x85, 0x55, 0x46, 0x45, 0x47, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x00, 0xa9, 0x15, 0x3b, 0x29, 0x15, 0x56, 0xe1, 0x93, 0x1c, 0x19, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0xa4, 0x56, 0xec, 0x04, 0x55, 0x58, 0x65,
  0x54, 0xb2, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x6a, 0xc5, 0x4e,
  0x50, 0x85, 0x55, 0xf8, 0xa4, 0x1a, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0xa4, 0x56, 0xec, 0x04, 0x55, 0x58, 0x05, 0x54, 0xa2, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x40, 0x6a, 0xc5, 0x4e, 0x50, 0x85, 0x55, 0x42, 0xa5,
  0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0xc9, 0x03, 0xed, 0x63, 0x88, 0x6e,
  0x64, 0xa6, 0x1c, 0x9f, 0xaf, 0x4a, 0xf9, 0xc2, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0xbb, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x55,
  0xbd, 0x6f, 0x1c, 0x55, 0x10, 0x9f, 0xf7, 0xf6, 0xdd, 0xdb, 0xb7, 0x7b,
  0xeb, 0xd9, 0xbb, 0xcd, 0x7e, 0xd8, 0xce, 0xde, 0xfa, 0xec, 0xd8, 0x66,
  0xb3, 0xb6, 0xcf, 0x0b, 0x71, 0x88, 0x09, 0x42, 0x44, 0x16, 0x4a, 0x81,
  0x89, 0x5c, 0x38, 0x9a, 0xce, 0x05, 0x44, 0x51, 0x70, 0x41, 0x14, 0xc0,
  0x45, 0x8a, 0x70, 0x2c, 0x12, 0x45, 0x0a, 0x17, 0x88, 0x22, 0x05, 0x0d,
  0x08, 0x45, 0x48, 0x20, 0x90, 0xe8, 0x68, 0xa2, 0xbb, 0xf0, 0x07, 0x44,
  0x14, 0xe8, 0x5a, 0x84, 0xe8, 0xa8, 0x12, 0x45, 0x57, 0x58, 0x6e, 0x8e,
  0xb7, 0xe7, 0xb3, 0xe2, 0x18, 0x81, 0x22, 0xaa, 0x30, 0xd2, 0xe8, 0xf7,
  0xe6, 0xcd, 0xec, 0xcc, 0xbc, 0x99, 0x79, 0x6f, 0x2f, 0x6e, 0x6e, 0x5e,
  0x62, 0x0c, 0xe0, 0x27, 0x13, 0x86, 0x24, 0x0f, 0x00, 0x1e, 0x76, 0x7e,
  0xf8, 0xed, 0xdf, 0xf8, 0xc7, 0x67, 0xb4, 0xfb, 0x27, 0xe6, 0xa3, 0xef,
  0xdf, 0x80, 0xff, 0x46, 0x87, 0x7e, 0xf6, 0x46, 0x8e, 0x2e, 0x88, 0x27,
  0x3a, 0x01, 0x8e, 0x10, 0xc7, 0xec, 0x57, 0x47, 0xe7, 0xdb, 0x19, 0xa1,
  0xa1, 0x99, 0x0d, 0x6d, 0x39, 0xdc, 0x3f, 0x62, 0x77, 0x12, 0x9a, 0x82,
  0x1d, 0x91, 0x6f, 0x8f, 0xec, 0xcb, 0xbd, 0xe5, 0x23, 0x71, 0x25, 0xb8,
  0xc2, 0x90, 0xcc, 0x54, 0x5c, 0x72, 0xc3, 0x61, 0xd2, 0x70, 0x6b, 0x06,
  0x3c, 0x47, 0x54, 0x9e, 0xff, 0xa0, 0x97, 0xb2, 0x6c, 0x2f, 0x48, 0xce,
  0xe1, 0xff, 0x46, 0x65, 0x41, 0xc7, 0x8f, 0xb0, 0x18, 0xf1, 0x51, 0x72,
  0x8e, 0xc9, 0xf9, 0xb1, 0x2e, 0x3c, 0x3a, 0xe7, 0x3e, 0x53, 0xac, 0x3b,
  0xef, 0x17, 0xbd, 0xfe, 0xc3, 0x81, 0x21, 0xc4, 0x83, 0xd5, 0x99, 0x7b,
  0x45, 0xef, 0xa3, 0xf7, 0x06, 0xc6, 0xe5, 0xe4, 0x8f, 0x5f, 0xc5, 0xf4,
  0xa7, 0x1d, 0x03, 0xbe, 0xea, 0x0e, 0x8c, 0x6e, 0xe7, 0xfb, 0x0d, 0x56,
  0xff, 0xd9, 0xe8, 0x74, 0x94, 0x71, 0xaf, 0x63, 0x0d, 0x5e, 0xbb, 0x0d,
  0x50, 0x83, 0x1b, 0xaf, 0xef, 0x76, 0x0d, 0x58, 0xef, 0xa9, 0x3f, 0x1f,
  0x18, 0x89, 0x95, 0xf6, 0xf5, 0x2c, 0xed, 0x27, 0x90, 0xf7, 0x7f, 0x2f,
  0xb1, 0x92, 0xf7, 0x73, 0x06, 0xfb, 0x96, 0xd6, 0x5b, 0x5a, 0x1f, 0x68,
  0xb4, 0x35, 0x7e, 0x7c, 0x7f, 0xb7, 0xab, 0x14, 0xa0, 0x50, 0x29, 0x3a,
  0x4a, 0xe0, 0xb8, 0x0c, 0xd1, 0x97, 0x31, 0x5a, 0x36, 0x50, 0xc5, 0x4e,
  0x69, 0xcc, 0x16, 0x34, 0xe1, 0x85, 0x14, 0x78, 0x31, 0xd9, 0x0e, 0x90,
  0x74, 0x52, 0x42, 0x47, 0x50, 0x2c, 0x25, 0x4e, 0x66, 0x21, 0x55, 0x11,
  0xc8, 0xc4, 0x94, 0x5c, 0x14, 0x94, 0xb0, 0xbc, 0xaf, 0xd3, 0xdf, 0x6f,
  0x78, 0x92, 0xe6, 0xa0, 0xa5, 0x66, 0x53, 0xae, 0xe6, 0x85, 0x50, 0x89,
  0x95, 0xf7, 0x2f, 0xe8, 0xfd, 0x30, 0x8b, 0x29, 0x5a, 0xae, 0x61, 0x35,
  0xf2, 0x30, 0xc9, 0x24, 0x31, 0xa3, 0x46, 0xd8, 0xf0, 0x88, 0x57, 0x6a,
  0x64, 0x98, 0x1e, 0xa9, 0xad, 0x5a, 0xdb, 0xda, 0xf2, 0xda, 0x65, 0x4e,
  0xb6, 0xce, 0x2f, 0xaa, 0x5f, 0x2c, 0xdc, 0x21, 0xde, 0x29, 0x7c, 0x8d,
  0xac, 0xbe, 0x56, 0xc0, 0x50, 0xfe, 0xa6, 0x88, 0x86, 0xf2, 0xe7, 0x85,
  0x1d, 0x64, 0xe8, 0x4e, 0xe5, 0x18, 0x6a, 0x99, 0xd7, 0xdf, 0x2c, 0x26,
  0x86, 0xf8, 0x45, 0xc1, 0x86, 0xfa, 0xaf, 0x0b, 0xff, 0x74, 0xa6, 0x63,
  0xe6, 0x04, 0x6c, 0x05, 0xad, 0x46, 0x8c, 0x7c, 0xa8, 0xff, 0xae, 0x08,
  0x97, 0x32, 0x9a, 0x38, 0x93, 0xeb, 0x1c, 0x56, 0xc8, 0x6f, 0xa4, 0x68,
  0x45, 0x21, 0x06, 0x3a, 0x7e, 0xd4, 0x68, 0x21, 0xaf, 0xac, 0x90, 0x65,
  0x4a, 0x64, 0x0d, 0x8e, 0xe3, 0x5b, 0x59, 0xbb, 0x16, 0xe7, 0x38, 0xb9,
  0xb5, 0xd2, 0x2e, 0x6b, 0x57, 0x0f, 0xdf, 0xb9, 0x3b, 0xab, 0x65, 0xbf,
  0x9e, 0xa2, 0x0a, 0x7c, 0x54, 0x4b, 0x35, 0xb4, 0x60, 0xa1, 0xe7, 0x49,
  0xde, 0x2c, 0x73, 0x98, 0xd3, 0xfa, 0x60, 0x2a, 0x41, 0x3b, 0x4a, 0x29,
  0x5a, 0xf0, 0x31, 0x8d, 0x63, 0x9d, 0xdb, 0x42, 0x6f, 0x5e, 0xeb, 0xd9,
  0x59, 0x8e, 0x93, 0x0c, 0x50, 0x99, 0x29, 0x29, 0x6d, 0x7b, 0x3a, 0x3c,
  0x7f, 0xd7, 0x8d, 0x7c, 0x0a, 0xce, 0x64, 0x58, 0x78, 0xea, 0x16, 0x44,
  0x9c, 0x26, 0x2b, 0x80, 0x45, 0x9a, 0x34, 0x03, 0xd3, 0x27, 0x04, 0xd6,
  0x7b, 0x0c, 0xdf, 0xb2, 0x62, 0x51, 0xdd, 0x52, 0xda, 0x47, 0xa6, 0x7d,
  0x80, 0xc9, 0xa9, 0xec, 0xed, 0x67, 0xba, 0x97, 0x6e, 0x03, 0x30, 0x19,
  0x5b, 0xec, 0xdf, 0xd0, 0xeb, 0xea, 0xa1, 0xad, 0x2f, 0x9a, 0x45, 0x4d,
  0xfb, 0xda, 0x80, 0x76, 0xc1, 0x79, 0x33, 0x11, 0x79, 0x5f, 0x17, 0x6d,
  0x9f, 0x47, 0x02, 0x8d, 0x91, 0x4d, 0x53, 0xf9, 0x88, 0x27, 0x62, 0xac,
  0x2e, 0x85, 0xc8, 0x37, 0x44, 0x9b, 0x99, 0x1c, 0xf5, 0x64, 0xe2, 0xb4,
  0xed, 0xd3, 0x62, 0xdc, 0xc2, 0x96, 0x3e, 0x1f, 0xdb, 0xe0, 0xc3, 0x3e,
  0xcc, 0xaa, 0x0c, 0x57, 0x54, 0x82, 0xab, 0x7a, 0x3e, 0x5c, 0x21, 0x10,
  0xd6, 0xa1, 0x3d, 0x67, 0x67, 0x74, 0xd6, 0x4e, 0xe8, 0x15, 0x3d, 0x1f,
  0x33, 0x8e, 0x4f, 0x7c, 0x5d, 0xb4, 0x5d, 0xce, 0xf1, 0x65, 0x27, 0xa1,
  0xf3, 0x7a, 0x3e, 0xe6, 0x9d, 0x8c, 0x96, 0xf4, 0xb9, 0xe1, 0x04, 0x20,
  0x5b, 0xe7, 0x6d, 0x66, 0xdb, 0xf8, 0x02, 0x66, 0xf4, 0xaa, 0x9e, 0x93,
  0x73, 0x98, 0xd0, 0x29, 0xf4, 0xc9, 0xa8, 0x4b, 0x7c, 0x31, 0x8c, 0xe9,
  0xa5, 0x30, 0xa7, 0x3c, 0x6c, 0x11, 0x5f, 0x12, 0x18, 0x80, 0xa7, 0x6b,
  0xa5, 0xe7, 0x4f, 0xe7, 0x02, 0xca, 0xa6, 0x5f, 0x14, 0xec, 0xd9, 0xae,
  0x1f, 0xd4, 0x64, 0x8b, 0xdc, 0xc1, 0x6e, 0x97, 0xd5, 0x7d, 0x1c, 0x17,
  0x40, 0x93, 0x22, 0xa4, 0x09, 0xe1, 0x51, 0x5d, 0xc6, 0xe4, 0xc9, 0x9c,
  0x0c, 0xb4, 0x29, 0xf6, 0x81, 0xca, 0x59, 0x11, 0xad, 0x19, 0x28, 0x7b,
  0x5c, 0x89, 0xe7, 0xa1, 0xbc, 0x0b, 0x32, 0xcf, 0xa0, 0xe1, 0x7b, 0x94,
  0xf8, 0x21, 0x55, 0x8a, 0x85, 0x9e, 0xac, 0x00, 0x3c, 0xe6, 0xbe, 0xae,
  0x0d, 0xb6, 0xcd, 0xf9, 0x1a, 0x62, 0xe8, 0xa0, 0x3b, 0x9d, 0xa1, 0x31,
  0x27, 0x91, 0x9f, 0x12, 0xa8, 0xef, 0x30, 0x8e, 0x79, 0x21, 0xba, 0x1c,
  0xf6, 0x02, 0x6e, 0xa8, 0x29, 0x8d, 0x50, 0x95, 0x95, 0x65, 0x8d, 0xce,
  0x98, 0x69, 0x03, 0x7c, 0xd2, 0x05, 0xf8, 0xf2, 0xb9, 0xe6, 0xc3, 0x7f,
  0xc6, 0xe1, 0x2b, 0xab, 0x46, 0xef, 0x57, 0x49, 0x87, 0x3a, 0x9b, 0xfd,
  0x7d, 0xaf, 0xaa, 0x3f, 0xe0, 0xec, 0xe9, 0xb7, 0x48, 0xa8, 0x27, 0xeb,
  0x81, 0xa6, 0x83, 0xd5, 0x49, 0xa0, 0xcd, 0xb5, 0xb7, 0x3f, 0xdc, 0xbe,
  0x42, 0x57, 0x3f, 0xd8, 0xb9, 0x7a, 0xf3, 0xad, 0xed, 0x6b, 0xef, 0xee,
  0x6c, 0x5f, 0xbf, 0x76, 0xf9, 0x26, 0x5d, 0x59, 0xbb, 0xfe, 0x17, 0x21,
  0x58, 0x5e, 0x93, 0x00, 0x96, 0x71, 0xf4, 0xf7, 0x04, 0x04, 0xcd, 0x38,
  0x22, 0xbc, 0x7d, 0xb6, 0x54, 0x1e, 0xe2, 0xd3
};
