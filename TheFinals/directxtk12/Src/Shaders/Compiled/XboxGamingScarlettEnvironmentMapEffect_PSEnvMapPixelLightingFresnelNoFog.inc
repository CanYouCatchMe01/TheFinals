#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapPixelLightingFresnelNoFog.pdb
; shader hash: 2bf0bce81b8c8fb31aabf81c4c39642b
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapPixelLightingFresnelNoFog
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32        cube      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapPixelLightingFresnelNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = fmul fast float %22, %9
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = fsub fast float %30, %15
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = fmul fast float %31, %35
  %37 = fmul fast float %32, %35
  %38 = fmul fast float %33, %35
  %39 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %40 = call float @dx.op.unary.f32(i32 25, float %39)  ; Rsqrt(value)
  %41 = fmul fast float %40, %10
  %42 = fmul fast float %40, %11
  %43 = fmul fast float %40, %12
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = fsub fast float -0.000000e+00, %46
  %69 = fsub fast float -0.000000e+00, %47
  %70 = fsub fast float -0.000000e+00, %54
  %71 = fsub fast float -0.000000e+00, %55
  %72 = fsub fast float -0.000000e+00, %62
  %73 = fsub fast float -0.000000e+00, %63
  %74 = fmul fast float %41, %45
  %75 = fsub fast float -0.000000e+00, %74
  %76 = call float @dx.op.tertiary.f32(i32 46, float %68, float %42, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.tertiary.f32(i32 46, float %69, float %43, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %41, %53
  %79 = fsub fast float -0.000000e+00, %78
  %80 = call float @dx.op.tertiary.f32(i32 46, float %70, float %42, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.tertiary.f32(i32 46, float %71, float %43, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %41, %61
  %83 = fsub fast float -0.000000e+00, %82
  %84 = call float @dx.op.tertiary.f32(i32 46, float %72, float %42, float %83)  ; FMad(a,b,c)
  %85 = call float @dx.op.tertiary.f32(i32 46, float %73, float %43, float %84)  ; FMad(a,b,c)
  %86 = fcmp fast olt float %77, 0.000000e+00
  %87 = fcmp fast olt float %81, 0.000000e+00
  %88 = fcmp fast olt float %85, 0.000000e+00
  %89 = select i1 %86, float 0.000000e+00, float 1.000000e+00
  %90 = select i1 %87, float 0.000000e+00, float 1.000000e+00
  %91 = select i1 %88, float 0.000000e+00, float 1.000000e+00
  %92 = fmul fast float %89, %77
  %93 = fmul fast float %90, %81
  %94 = fmul fast float %91, %85
  %95 = fmul fast float %92, %49
  %96 = call float @dx.op.tertiary.f32(i32 46, float %93, float %57, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %94, float %65, float %96)  ; FMad(a,b,c)
  %98 = fmul fast float %92, %50
  %99 = call float @dx.op.tertiary.f32(i32 46, float %93, float %58, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %94, float %66, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %92, %51
  %102 = call float @dx.op.tertiary.f32(i32 46, float %93, float %59, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %94, float %67, float %102)  ; FMad(a,b,c)
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = fmul fast float %105, %97
  %109 = fmul fast float %106, %100
  %110 = fmul fast float %107, %103
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = fadd fast float %108, %112
  %116 = fadd fast float %109, %113
  %117 = fadd fast float %110, %114
  %118 = fmul fast float %23, %115
  %119 = fmul fast float %24, %116
  %120 = fmul fast float %25, %117
  %121 = fsub fast float -0.000000e+00, %36
  %122 = fsub fast float -0.000000e+00, %37
  %123 = fsub fast float -0.000000e+00, %38
  %124 = call float @dx.op.dot3.f32(i32 55, float %121, float %122, float %123, float %41, float %42, float %43)  ; Dot3(ax,ay,az,bx,by,bz)
  %125 = fmul fast float %124, 2.000000e+00
  %126 = fmul fast float %125, %41
  %127 = fmul fast float %125, %42
  %128 = fmul fast float %125, %43
  %129 = fsub fast float %121, %126
  %130 = fsub fast float %122, %127
  %131 = fsub fast float %123, %128
  %132 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %129, float %130, float %131, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %133 = extractvalue %dx.types.ResRet.f32 %132, 0
  %134 = extractvalue %dx.types.ResRet.f32 %132, 1
  %135 = extractvalue %dx.types.ResRet.f32 %132, 2
  %136 = extractvalue %dx.types.ResRet.f32 %132, 3
  %137 = fmul fast float %133, %26
  %138 = fmul fast float %134, %26
  %139 = fmul fast float %135, %26
  %140 = fmul fast float %136, %26
  %141 = call float @dx.op.dot3.f32(i32 55, float %36, float %37, float %38, float %41, float %42, float %43)  ; Dot3(ax,ay,az,bx,by,bz)
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %144 = call float @dx.op.unary.f32(i32 6, float %141)  ; FAbs(value)
  %145 = fsub fast float 1.000000e+00, %144
  %146 = call float @dx.op.binary.f32(i32 35, float %145, float 0.000000e+00)  ; FMax(a,b)
  %147 = call float @dx.op.unary.f32(i32 23, float %146)  ; Log(value)
  %148 = fmul fast float %147, %143
  %149 = call float @dx.op.unary.f32(i32 21, float %148)  ; Exp(value)
  %150 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %151 = fmul fast float %150, %149
  %152 = fsub fast float %137, %118
  %153 = fsub fast float %138, %119
  %154 = fsub fast float %139, %120
  %155 = fmul fast float %151, %152
  %156 = fmul fast float %151, %153
  %157 = fmul fast float %151, %154
  %158 = fadd fast float %155, %118
  %159 = fadd fast float %156, %119
  %160 = fadd fast float %157, %120
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = fmul fast float %162, %140
  %166 = fmul fast float %163, %140
  %167 = fmul fast float %164, %140
  %168 = fadd fast float %158, %165
  %169 = fadd fast float %159, %166
  %170 = fadd fast float %160, %167
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %169)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %170)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 5, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapPixelLightingFresnelNoFog, !"PSEnvMapPixelLightingFresnelNoFog", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !27}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 7}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !24}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !28}
!28 = !{i32 3, i32 15}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !28}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 54
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 960
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0xe8bcf02b, 0xb38f8c1b                // 000000000000: D580F02B 03FFD1BC B38F8C1B
;   v_nop_xbox_data 0x1cf8ab1a, 0x2b64394c                // 00000000000C: D580AB1A 03FE39F8 2B64394C
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[48:49], exec                          // 00000000001C: BEB0047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s16, s9                                 // 000000000024: BE900309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     s17, 0                                  // 00000000002C: BE910380
;   s_mov_b32     s50, s11                                // 000000000030: BEB2030B
;   s_mov_b32     s11, 0                                  // 000000000034: BE8B0380
;   s_load_dwordx8  s[0:7], s[8:9], null                  // 000000000038: F40C0004 FA000000
;   s_load_dwordx4  s[24:27], s[16:17], null              // 000000000040: F4080608 FA000000
;   s_mov_b32     m0, s14                                 // 000000000048: BEFC030E
;   s_load_dwordx8  s[32:39], s[10:11], null              // 00000000004C: F40C0805 FA000000
;   v_interp_p1_f32  v2, v0, attr0.x                      // 000000000054: C8080000
;   v_interp_p1_f32  v3, v0, attr0.y                      // 000000000058: C80C0100
;   s_or_b32      s41, s13, lit(0x00100000)               // 00000000005C: 8829FF0D 00100000
;   s_mov_b32     s40, s12                                // 000000000064: BEA8030C
;   s_mov_b32     s42, -1                                 // 000000000068: BEAA03C1
;   v_interp_p2_f32  v2, v1, attr0.x                      // 00000000006C: C8090001
;   v_interp_p2_f32  v3, v1, attr0.y                      // 000000000070: C80D0101
;   s_mov_b32     s43, lit(0x11014fac)                    // 000000000074: BEAB03FF 11014FAC
;   v_interp_p1_f32  v6, v0, attr2.y                      // 00000000007C: C8180900
;   s_buffer_load_dwordx4  s[44:47], s[40:43], 0x0000a0   // 000000000080: F4280B14 FA0000A0
;   v_interp_p1_f32  v7, v0, attr2.x                      // 000000000088: C81C0800
;   v_interp_p1_f32  v8, v0, attr2.z                      // 00000000008C: C8200A00
;   v_interp_p1_f32  v10, v0, attr1.y                     // 000000000090: C8280500
;   v_interp_p2_f32  v6, v1, attr2.y                      // 000000000094: C8190901
;   v_interp_p1_f32  v11, v0, attr1.x                     // 000000000098: C82C0400
;   v_interp_p2_f32  v7, v1, attr2.x                      // 00000000009C: C81D0801
;   v_interp_p2_f32  v8, v1, attr2.z                      // 0000000000A0: C8210A01
;   s_waitcnt     lgkmcnt(0)                              // 0000000000A4: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000A8: F0800F08 00C00202
;   v_mul_legacy_f32  v9, v6, v6                          // 0000000000B0: 0E120D06
;   v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000B4: C8290501
;   v_interp_p1_f32  v12, v0, attr1.z                     // 0000000000B8: C8300600
;   v_interp_p2_f32  v11, v1, attr1.x                     // 0000000000BC: C82D0401
;   s_buffer_load_dwordx16  s[0:15], s[40:43], 0x000020   // 0000000000C0: F4300014 FA000020
;   v_fmac_f32    v9, v7, v7                              // 0000000000C8: 56120F07
;   s_buffer_load_dwordx16  s[16:31], s[40:43], 0x000060  // 0000000000CC: F4300414 FA000060
;   v_interp_p2_f32  v12, v1, attr1.z                     // 0000000000D4: C8310601
;   v_interp_p1_f32  v15, v0, attr3.x                     // 0000000000D8: C83C0C00
;   v_interp_p1_f32  v16, v0, attr3.y                     // 0000000000DC: C8400D00
;   v_fmac_f32    v9, v8, v8                              // 0000000000E0: 56121108
;   v_sub_f32     v10, s45, v10                           // 0000000000E4: 0814142D
;   v_sub_f32     v11, s44, v11                           // 0000000000E8: 0816162C
;   v_sub_f32     v12, s46, v12                           // 0000000000EC: 0818182E
;   v_interp_p1_f32  v14, v0, attr3.z                     // 0000000000F0: C8380E00
;   v_rsq_f32     v9, v9                                  // 0000000000F4: 7E125D09
;   v_mul_legacy_f32  v13, v10, v10                       // 0000000000F8: 0E1A150A
;   v_interp_p1_f32  v0, v0, attr3.w                      // 0000000000FC: C8000F00
;   v_interp_p2_f32  v15, v1, attr3.x                     // 000000000100: C83D0C01
;   v_interp_p2_f32  v16, v1, attr3.y                     // 000000000104: C8410D01
;   v_interp_p2_f32  v14, v1, attr3.z                     // 000000000108: C8390E01
;   v_fmac_f32    v13, v11, v11                           // 00000000010C: 561A170B
;   v_interp_p2_f32  v0, v1, attr3.w                      // 000000000110: C8010F01
;   s_mov_b32     s51, 0                                  // 000000000114: BEB30380
;   s_buffer_load_dwordx2  s[44:45], s[40:43], 0x000010   // 000000000118: F4240B14 FA000010
;   v_mul_legacy_f32  v7, v9, v7                          // 000000000120: 0E0E0F09
;   v_fmac_f32    v13, v12, v12                           // 000000000124: 561A190C
;   v_mul_legacy_f32  v23, v9, v6                         // 000000000128: 0E2E0D09
;   v_mul_legacy_f32  v8, v9, v8                          // 00000000012C: 0E101109
;   v_mov_b32     v21, lit(0x3fc00000)                    // 000000000130: 7E2A02FF 3FC00000
;   s_waitcnt     lgkmcnt(0)                              // 000000000138: BF8CC07F
;   v_mul_legacy_f32  v18, s8, v7                         // 00000000013C: 0E240E08
;   v_rsq_f32     v13, v13                                // 000000000140: 7E1A5D0D
;   v_mul_legacy_f32  v9, s12, v7                         // 000000000144: 0E120E0C
;   v_mul_legacy_f32  v6, s16, v7                         // 000000000148: 0E0C0E10
;   v_fma_f32     v18, -s9, v23, -v18                     // 00000000014C: D54B0012 A44A2E09
;   v_fma_f32     v1, -s13, v23, -v9                      // 000000000154: D54B0001 A4262E0D
;   v_fma_f32     v9, -s17, v23, -v6                      // 00000000015C: D54B0009 A41A2E11
;   v_fmac_f32    v18, -s10, v8                           // 000000000164: D52B0012 2002100A
;   v_mul_legacy_f32  v10, v10, v13                       // 00000000016C: 0E141B0A
;   v_fmac_f32    v1, -s14, v8                            // 000000000170: D52B0001 2002100E
;   v_mul_legacy_f32  v11, v11, v13                       // 000000000178: 0E161B0B
;   v_mul_legacy_f32  v12, v12, v13                       // 00000000017C: 0E181B0C
;   v_cmp_gt_f32  vcc, 0, v18                             // 000000000180: 7C082480
;   v_mul_legacy_f32  v19, v10, v23                       // 000000000184: 0E262F0A
;   v_fmac_f32    v9, -s18, v8                            // 000000000188: D52B0009 20021012
;   s_load_dwordx4  s[12:15], s[50:51], null              // 000000000190: F4080319 FA000000
;   s_buffer_load_dwordx4  s[8:11], s[40:43], null        // 000000000198: F4280214 FA000000
;   v_cndmask_b32  v13, 1.0, 0, vcc                       // 0000000001A0: D501000D 01A900F2
;   v_cmp_gt_f32  vcc, 0, v1                              // 0000000001A8: 7C080280
;   v_mul_legacy_f32  v13, v13, v18                       // 0000000001AC: 0E1A250D
;   s_waitcnt     vmcnt(0)                                // 0000000001B0: BF8C3F70
;   v_mul_legacy_f32  v4, v4, v14                         // 0000000001B4: 0E081D04
;   v_fma_f32     v14, -v11, v7, -v19                     // 0000000001B8: D54B000E A44E0F0B
;   v_mul_legacy_f32  v2, v2, v15                         // 0000000001C0: 0E041F02
;   v_cndmask_b32  v15, 1.0, 0, vcc                       // 0000000001C4: D501000F 01A900F2
;   v_cmp_gt_f32  vcc, 0, v9                              // 0000000001CC: 7C081280
;   v_mul_legacy_f32  v3, v3, v16                         // 0000000001D0: 0E062103
;   v_fmac_f32    v14, -v12, v8 mul:2                     // 0000000001D4: D52B000E 2802110C
;   v_mul_legacy_f32  v5, v5, v0                          // 0000000001DC: 0E0A0105
;   v_mul_legacy_f32  v20, v15, v1                        // 0000000001E0: 0E28030F
;   v_mul_legacy_f32  v15, s20, v13                       // 0000000001E4: 0E1E1A14
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 0000000001E8: D5010010 01A900F2
;   v_fma_f32     v6, -v14, v23, -v10                     // 0000000001F0: D54B0006 A42A2F0E
;   v_mul_legacy_f32  v10, s21, v13                       // 0000000001F8: 0E141A15
;   v_mul_legacy_f32  v23, s22, v13                       // 0000000001FC: 0E2E1A16
;   v_fma_f32     v17, -v14, v7, -v11                     // 000000000200: D54B0011 A42E0F0E
;   v_fma_f32     v0, -v14, v8, -v12                      // 000000000208: D54B0000 A432110E
;   v_mul_legacy_f32  v9, v16, v9                         // 000000000210: 0E121310
;   v_fmac_f32    v15, s24, v20                           // 000000000214: 561E2818
;   v_fmac_f32    v10, s25, v20                           // 000000000218: 56142819
;   v_fmac_f32    v23, s26, v20                           // 00000000021C: 562E281A
;   v_cubema_f32  v16, v17, v6, v0                        // 000000000220: D5470010 04020D11
;   v_cubesc_f32  v20, v17, v6, v0                        // 000000000228: D5450014 04020D11
;   v_fmac_f32    v15, s28, v9                            // 000000000230: 561E121C
;   v_fmac_f32    v10, s29, v9                            // 000000000234: 5614121D
;   v_fmac_f32    v23, s30, v9                            // 000000000238: 562E121E
;   v_rcp_f32     v18, abs(v16)                           // 00000000023C: D5AA0112 00000110
;   v_cubetc_f32  v16, v17, v6, v0                        // 000000000244: D5460010 04020D11
;   v_fma_f32     v15, s0, v15, s4                        // 00000000024C: D54B000F 00121E00
;   v_fma_f32     v10, s1, v10, s5                        // 000000000254: D54B000A 00161401
;   v_fma_f32     v13, s2, v23, s6                        // 00000000025C: D54B000D 001A2E02
;   v_cubeid_f32  v22, v17, v6, v0                        // 000000000264: D5440016 04020D11
;   v_mul_legacy_f32  v15, v2, v15                        // 00000000026C: 0E1E1F02
;   v_mul_legacy_f32  v10, v3, v10                        // 000000000270: 0E141503
;   v_mul_legacy_f32  v4, v4, v13                         // 000000000274: 0E081B04
;   v_mad_f32     v20, v20, v18, v21                      // 000000000278: D5410014 04562514
;   v_mac_f32     v21, v16, v18                           // 000000000280: 3E2A2510
;   s_and_b64     exec, exec, s[48:49]                    // 000000000284: 87FE307E
;   s_waitcnt     lgkmcnt(0)                              // 000000000288: BF8CC07F
;   image_sample  v[0:3], v[20:22], s[32:39], s[12:15] dmask:0xf dim:SQ_RSRC_IMG_CUBE // 00000000028C: F0800F18 00680014
;   v_fmac_f32    v19, v11, v7                            // 000000000294: 56260F0B
;   v_fmac_f32    v19, v12, v8                            // 000000000298: 5626110C
;   v_sub_f32     v6, 1.0, abs(v19)                       // 00000000029C: D5040206 000226F2
;   v_max_f32     v6, 0, v6                               // 0000000002A4: 200C0C80
;   v_log_f32     v6, v6                                  // 0000000002A8: 7E0C4F06
;   v_mul_legacy_f32  v6, s45, v6                         // 0000000002AC: 0E0C0C2D
;   v_exp_f32     v6, v6                                  // 0000000002B0: 7E0C4B06
;   v_mul_legacy_f32  v7, s44, v6                         // 0000000002B4: 0E0E0C2C
;   s_waitcnt     vmcnt(0)                                // 0000000002B8: BF8C3F70
;   v_fma_f32     v0, v0, v5, -v15                        // 0000000002BC: D54B0000 843E0B00
;   v_fma_f32     v1, v1, v5, -v10                        // 0000000002C4: D54B0001 842A0B01
;   v_fma_f32     v2, v2, v5, -v4                         // 0000000002CC: D54B0002 84120B02
;   v_mul_legacy_f32  v9, v3, v5                          // 0000000002D4: 0E120B03
;   v_fmac_f32    v15, v7, v0                             // 0000000002D8: 561E0107
;   v_fmac_f32    v10, v7, v1                             // 0000000002DC: 56140307
;   v_fmac_f32    v4, v7, v2                              // 0000000002E0: 56080507
;   v_fmac_f32    v15, s8, v9                             // 0000000002E4: 561E1208
;   v_fmac_f32    v10, s9, v9                             // 0000000002E8: 56141209
;   v_fmac_f32    v4, s10, v9                             // 0000000002EC: 5608120A
;   s_nop         0x0000                                  // 0000000002F0: BF800000
;   s_nop         0x0000                                  // 0000000002F4: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v15, v10                     // 0000000002F8: 5E00150F
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000002FC: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000300: F8001C0F 00000100
;   s_endpgm                                              // 000000000308: BF810000
;   s_code_end                                            // 00000000030C: BF9F0000
;   s_code_end                                            // 000000000310: BF9F0000
;   s_code_end                                            // 000000000314: BF9F0000
;   s_code_end                                            // 000000000318: BF9F0000
;   s_code_end                                            // 00000000031C: BF9F0000
;   s_code_end                                            // 000000000320: BF9F0000
;   s_code_end                                            // 000000000324: BF9F0000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 56, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 64, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 76, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[3] {  instr_offset: 400, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 53
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapPixelLightingFresnelNoFog)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 188
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0xf,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v15, off, off, off done vm        // 000000000010: F8001801 0000000F
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xa0f,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v15, v10, off, off done vm        // 000000000010: F8001803 00000A0F
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x50f,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v15, v5, off, off done vm         // 000000000010: F8001803 0000050F
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e00150f,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v15, v10                     // 000000000008: 5E00150F
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x2150f,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v15, v10                    // 000000000000: D7690000 0002150F
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x2150f,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v15, v10                    // 000000000000: D7680000 0002150F
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x2150f,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v15, v10                        // 000000000000: D76A0000 0002150F
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x2150f,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v15, v10                        // 000000000000: D76B0000 0002150F
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040a0f,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v15, v10, v4, v5 done vm          // 000000000010: F800180F 05040A0F
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=54,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:112,SAlu:23,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapPixelLightingFresnelNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0x3d, 0xbf, 0x7a, 0xc1, 0xa6, 0x94, 0x1c, 0x65,
  0x15, 0x3f, 0x63, 0xd2, 0x5c, 0x18, 0xc9, 0x21, 0x01, 0x00, 0x00, 0x00,
  0x6c, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xd8, 0x02, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00,
  0x88, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xa4, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46,
  0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
  0x74, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50,
  0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x50, 0x69, 0x78, 0x65, 0x6c,
  0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x73,
  0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64, 0x62,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2b, 0xf0, 0xbc, 0xe8, 0x1b, 0x8c, 0x8f, 0xb3,
  0x1a, 0xab, 0xf8, 0x1c, 0x4c, 0x39, 0x64, 0x2b, 0x44, 0x58, 0x49, 0x4c,
  0xdc, 0x11, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x20, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x38, 0x0d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x98, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xac, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xbc, 0x0d, 0x00, 0x00,
  0x0d, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xcc, 0x11, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x20, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x45, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x6a, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb0, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x62, 0x20, 0x86, 0x81, 0xa6, 0xa3, 0x86,
  0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x50, 0x88, 0x8a, 0x60, 0x08, 0xb2,
  0x4a, 0x31, 0x10, 0xc3, 0x30, 0x10, 0x36, 0x47, 0x10, 0x14, 0x83, 0x21,
  0x0a, 0x82, 0xd0, 0x68, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x99, 0xda,
  0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc,
  0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc,
  0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e, 0xe6,
  0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x40, 0xcc, 0x24,
  0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50,
  0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x48, 0xf0, 0x3e, 0x02, 0x67, 0x22, 0x83, 0x71,
  0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x18, 0x85, 0x7a, 0x10, 0x87, 0x72,
  0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e,
  0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a,
  0xf0, 0x03, 0x30, 0xf0, 0x03, 0x14, 0x78, 0x24, 0x0e, 0x23, 0x0c, 0x43,
  0x0e, 0x90, 0x49, 0xe0, 0x5d, 0x75, 0x38, 0xd2, 0xb4, 0x00, 0x98, 0x43,
  0x4d, 0x7e, 0x0a, 0x44, 0x00, 0x43, 0x4c, 0x44, 0x24, 0xa1, 0x86, 0x1c,
  0x06, 0x8f, 0x2c, 0x4b, 0x92, 0xf4, 0xcc, 0xd2, 0xa4, 0xf3, 0x26, 0x69,
  0x8a, 0x28, 0x61, 0xf2, 0x59, 0x80, 0x79, 0x16, 0x22, 0x62, 0x27, 0x60,
  0x22, 0x50, 0x40, 0x50, 0x9a, 0x12, 0x04, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xc1, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08,
  0x4a, 0xa2, 0x14, 0x0a, 0xd0, 0xa0, 0x0c, 0xca, 0xa1, 0x3c, 0xa8, 0x28,
  0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32, 0x28, 0x10, 0x0a, 0x67, 0x00,
  0x68, 0x9c, 0x01, 0x20, 0x74, 0x06, 0x80, 0xd4, 0x19, 0x00, 0x5a, 0xc7,
  0x92, 0x20, 0xe2, 0x79, 0x00, 0xe0, 0x38, 0x0e, 0xe0, 0x38, 0x0e, 0x20,
  0x10, 0x88, 0x07, 0x00, 0x79, 0x18, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x61, 0xb0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78,
  0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90,
  0x26, 0x08, 0x63, 0xc0, 0x4d, 0x10, 0x08, 0x68, 0x43, 0x62, 0x50, 0xcf,
  0x61, 0x18, 0xd5, 0x21, 0x6d, 0x10, 0x26, 0x6b, 0x82, 0x80, 0x06, 0xdd,
  0x04, 0x81, 0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c, 0x87, 0x91, 0x01, 0x1b,
  0x02, 0x6d, 0x82, 0xa0, 0x06, 0xde, 0x06, 0xe4, 0xe0, 0x9e, 0xe3, 0x30,
  0x0e, 0x60, 0x03, 0x62, 0x70, 0xcf, 0x61, 0x18, 0x07, 0xb0, 0x41, 0xe8,
  0xbc, 0x0d, 0xc4, 0x05, 0x6c, 0xdf, 0x04, 0x61, 0x0d, 0xbe, 0x0d, 0x41,
  0x18, 0x4c, 0x10, 0x04, 0x80, 0x61, 0x00, 0x35, 0x55, 0xe4, 0x66, 0xd7,
  0x14, 0x06, 0x07, 0x95, 0x86, 0x57, 0xc6, 0xc6, 0x94, 0x76, 0x86, 0x46,
  0x97, 0xe6, 0x76, 0x66, 0x24, 0x57, 0x36, 0xe7, 0x56, 0xc6, 0xe6, 0xf4,
  0x66, 0xf4, 0x76, 0x46, 0x84, 0xaa, 0x08, 0x6b, 0xe8, 0xe9, 0x49, 0x8a,
  0x68, 0x82, 0x50, 0x54, 0x13, 0x84, 0xc2, 0xda, 0x10, 0x1c, 0x13, 0x84,
  0xe2, 0x9a, 0x20, 0x10, 0xd2, 0x06, 0x41, 0x0d, 0xd4, 0x60, 0xc3, 0x72,
  0x94, 0x81, 0x19, 0x9c, 0x01, 0x1a, 0xa4, 0x81, 0x91, 0x06, 0xc7, 0x19,
  0xac, 0xc1, 0x86, 0xc0, 0x98, 0x20, 0x14, 0xd8, 0x04, 0x81, 0x98, 0x36,
  0x08, 0x6a, 0xf0, 0x06, 0x1b, 0x16, 0xa3, 0x0c, 0xcc, 0xe0, 0x0c, 0xda,
  0x20, 0x0d, 0x0c, 0x37, 0x30, 0xce, 0x00, 0x0e, 0x36, 0x04, 0xd0, 0x04,
  0xa1, 0xc8, 0x36, 0x2c, 0x50, 0x19, 0x98, 0xc1, 0x19, 0xc8, 0x41, 0x1a,
  0x18, 0x73, 0x00, 0x9d, 0x01, 0x1c, 0xb0, 0x18, 0x7a, 0x62, 0x7a, 0x92,
  0x9a, 0x20, 0x10, 0xd4, 0x06, 0x41, 0x0d, 0xec, 0x60, 0xc3, 0xa2, 0x06,
  0x75, 0x60, 0x06, 0x67, 0x80, 0x06, 0x69, 0x60, 0xb8, 0x81, 0x1a, 0x9c,
  0xc1, 0x1d, 0x6c, 0x20, 0xd8, 0x20, 0x0e, 0xe8, 0x00, 0x0f, 0x98, 0x4c,
  0x59, 0x7d, 0x51, 0x85, 0xc9, 0x9d, 0x95, 0xd1, 0x4d, 0x10, 0x0a, 0x6d,
  0xc3, 0x72, 0xe8, 0x81, 0x19, 0xec, 0x01, 0x1a, 0x9c, 0x81, 0xe1, 0x06,
  0xc7, 0x19, 0xdc, 0xc1, 0x86, 0x80, 0x0f, 0x36, 0x0c, 0x79, 0xd0, 0x07,
  0xc0, 0x86, 0x62, 0x0c, 0xc8, 0xc0, 0x0f, 0xc0, 0x00, 0x68, 0x85, 0x27,
  0xf6, 0x86, 0xe7, 0x32, 0xf6, 0xd6, 0x06, 0x97, 0xc6, 0x56, 0x26, 0xe7,
  0xf2, 0x06, 0x47, 0x97, 0xf6, 0xe6, 0x36, 0x37, 0x25, 0x10, 0xaa, 0xb0,
  0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95, 0xb9, 0xd1, 0x4d, 0x09, 0x88,
  0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
  0x82, 0xa3, 0x09, 0x19, 0x9e, 0x8b, 0x5d, 0x18, 0x9b, 0x5d, 0x99, 0xdc,
  0x94, 0x20, 0xa9, 0x43, 0x86, 0xe7, 0x32, 0x87, 0x16, 0x46, 0x56, 0x26,
  0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25, 0x60, 0xca, 0x90, 0xe1, 0xb9,
  0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d, 0x95, 0xcd, 0x4d, 0x09, 0xbe,
  0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x53, 0x74,
  0x61, 0x74, 0x65, 0x53, 0x82, 0x30, 0xa8, 0x43, 0x86, 0xe7, 0x52, 0xe6,
  0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37, 0x25, 0xf0,
  0x03, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x2b, 0x00, 0x00, 0x00, 0x06, 0x10, 0x06, 0x29, 0xeb, 0x35, 0x95, 0x09,
  0x3c, 0x29, 0x72, 0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84, 0x34, 0xc6, 0x17,
  0x11, 0x52, 0x43, 0x2c, 0xa7, 0xf3, 0x39, 0x86, 0x19, 0x40, 0xc3, 0xe5,
  0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x76, 0xb0,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03,
  0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xd2, 0x70,
  0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42,
  0x18, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71,
  0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8,
  0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9, 0xce, 0xe3,
  0x4b, 0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54, 0xc3, 0xe5,
  0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f,
  0xdc, 0xb6, 0x21, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84,
  0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9, 0xce, 0xe3,
  0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x46, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0xa4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x4a, 0xb9, 0x94, 0xd1, 0x0c, 0x40, 0x21, 0x14, 0x57, 0xd9, 0x95, 0x5c,
  0xb9, 0x15, 0x5e, 0xc9, 0x14, 0x05, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82,
  0x20, 0x18, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2, 0xdf, 0x0c, 0xc0, 0x08,
  0xc0, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x0a, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xa9, 0x81, 0xd2, 0xa5, 0x41,
  0x1a, 0x4c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xad, 0xc1, 0xe2,
  0xa5, 0x41, 0x1a, 0x50, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xb1,
  0x01, 0xc3, 0xad, 0xc1, 0x1a, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0xb0, 0xb5, 0x41, 0xd3, 0xad, 0xc1, 0x1a, 0x58, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xb0, 0xb9, 0x81, 0x03, 0x06, 0x6c, 0xc0, 0x06, 0xd7, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x77, 0x20, 0x99, 0x41, 0x1b, 0x88,
  0xc1, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1e, 0x4c, 0x67,
  0xe0, 0x06, 0x18, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1e,
  0x50, 0x68, 0xf0, 0x06, 0x63, 0x50, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xa1, 0x07, 0x55, 0x1a, 0xc0, 0x81, 0x18, 0x58, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xec, 0x81, 0xe5, 0x06, 0x71, 0x60, 0x06, 0xd7,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7c, 0x70, 0xbd, 0x81, 0x1c,
  0x70, 0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7d, 0x80, 0xc1,
  0xc1, 0x1c, 0x9c, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86,
  0x1f, 0x64, 0x75, 0x40, 0x07, 0x69, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0xf1, 0x07, 0x9a, 0x1d, 0xd4, 0xc1, 0xb7, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x01, 0x0a, 0xdb, 0x1d, 0xd8, 0x81, 0x1a, 0x70,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x84, 0x02, 0x77, 0x07, 0x77,
  0xc0, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa2, 0xd0,
  0xe1, 0x01, 0x1e, 0x88, 0x81, 0x37, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06,
  0x4d, 0x28, 0x64, 0x90, 0x23, 0x04, 0x14, 0x95, 0x07, 0x79, 0xf0, 0x51,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a,
  0x40, 0x0c, 0x46, 0x44, 0xf2, 0x31, 0x22, 0x92, 0x8f, 0x11, 0x91, 0x7c,
  0x8c, 0x88, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x96, 0x29,
  0x94, 0x81, 0x05, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x60, 0x83, 0x14, 0x1f, 0x1b, 0xa4, 0xf8, 0xd8, 0x20, 0xc5,
  0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x1e, 0x58, 0x50, 0x83, 0x41,
  0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x08, 0x16,
  0xd2, 0x20, 0xb0, 0x22, 0x90, 0x8f, 0x15, 0x82, 0x7c, 0xac, 0x18, 0xe4,
  0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x4f, 0x2d, 0xbc, 0x41, 0xc7,
  0x6d, 0x1d, 0xb7, 0x8d, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x54, 0x0b,
  0x6e, 0x10, 0x58, 0xf0, 0xc9, 0xc7, 0x84, 0x4f, 0x3e, 0x36, 0x7c, 0xf2,
  0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xeb, 0x16, 0xec, 0xe0, 0x0c,
  0xf0, 0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0xda, 0x05, 0x3d, 0x58, 0x83,
  0x57, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0x7e, 0xc1, 0x0f, 0xde, 0xc0,
  0x16, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xac, 0x71, 0x10, 0x85, 0x39, 0xf0,
  0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xeb, 0x1c, 0x4c, 0xe1, 0x0e, 0xc2,
  0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x5a, 0x07, 0x55, 0xd8, 0x83, 0x71,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x23,
  0x05, 0x2b, 0x3e, 0x56, 0x0a, 0x56, 0x7c, 0xcc, 0x14, 0xa0, 0xf8, 0xd8,
  0x29, 0x40, 0xf1, 0x31, 0x54, 0x50, 0xe2, 0x63, 0xa9, 0xa0, 0xc4, 0xc7,
  0xc2, 0xa0, 0x93, 0x8f, 0xad, 0x42, 0x10, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc0, 0xec, 0xe1, 0x16, 0x10, 0x31, 0x08, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x00, 0xbb, 0x07, 0x5c, 0x40, 0xc4, 0x20, 0xb0, 0x32,
  0xc8, 0xe4, 0x63, 0xaf, 0x10, 0xc4, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x30, 0x7d, 0xd8, 0x05, 0xc5, 0x0c, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc0, 0xf6, 0x81, 0x17, 0x14, 0x33, 0x08, 0x2c, 0x0d, 0x2a,
  0xf9, 0xd8, 0x2c, 0x04, 0xf1, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0xcc, 0x1f, 0x7e, 0x81, 0x51, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb0, 0x7f, 0x00, 0x07, 0x46, 0x0d, 0x82, 0xe1, 0x88, 0xe4, 0x16,
  0x88, 0x6f, 0x38, 0xc2, 0xc0, 0x05, 0xe2, 0x1b, 0x8e, 0x18, 0x72, 0x81,
  0xf8, 0xa6, 0x1b, 0x74, 0x81, 0x17, 0x86, 0xe9, 0x86, 0x5d, 0xe8, 0x85,
  0x61, 0xba, 0x81, 0x17, 0x7c, 0x61, 0xb0, 0xe1, 0x91, 0x8f, 0x0d, 0x8c,
  0x7c, 0x6c, 0x48, 0xe4, 0x63, 0x83, 0x1b, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x30, 0x95, 0x58, 0x87, 0xe1, 0x0c, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc0, 0x56, 0x82, 0x1d, 0x06, 0x30, 0x08, 0xcc,
  0x80, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0xd6, 0x12,
  0xee, 0x60, 0xa4, 0x41, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x98,
  0x4b, 0xbc, 0x83, 0x21, 0x06, 0x81, 0x25, 0x72, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc0, 0x60, 0x22, 0x1e, 0x92, 0x35, 0x08, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0x8b, 0x09, 0x79, 0x48, 0xc8, 0x20,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x6b, 0x26, 0xe4, 0x61, 0x1c,
  0x58, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x6c, 0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0x81, 0xa5, 0x13, 0xf9, 0xa0, 0x0e, 0x2f, 0x31,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76, 0x0c,
  0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0xec, 0x17, 0x06, 0xf9,
  0xd8, 0x2f, 0x0c, 0xf2, 0xb1, 0x5f, 0x18, 0xe4, 0x63, 0xf9, 0x50, 0x0b,
  0xf1, 0x31, 0x7d, 0xa8, 0x85, 0xf8, 0xd8, 0x3e, 0xd4, 0x42, 0x7c, 0x46,
  0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0x51, 0x0b, 0x92, 0x18, 0x84, 0x60,
  0x16, 0x64, 0x21, 0x16, 0x2c, 0x08, 0x09, 0xf9, 0x58, 0x50, 0x0b, 0xf2,
  0x31, 0xa1, 0x16, 0xe4, 0x63, 0x43, 0x2d, 0xc8, 0xc7, 0x90, 0x21, 0x3e,
  0x86, 0x0c, 0xf1, 0x31, 0x64, 0x88, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20,
  0x18, 0x34, 0x73, 0xb1, 0x12, 0x23, 0x11, 0x12, 0x83, 0x10, 0x98, 0x44,
  0x4c, 0xc4, 0x44, 0x4c, 0x98, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x11, 0xef, 0x20, 0x1f,
  0x23, 0xe0, 0x41, 0x3e, 0x46, 0xc4, 0x83, 0x7c, 0x8c, 0x90, 0x07, 0xf9,
  0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0xb3, 0x17, 0x35, 0x91, 0x0e,
  0xe8, 0x70, 0x0e, 0xe4, 0x30, 0x0e, 0xe2, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x56, 0x5e, 0xe0, 0x44, 0x4a, 0xd8, 0xc5, 0x68, 0x42, 0x10,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xd4, 0x17, 0x75, 0x31, 0x18,
  0x4d, 0x04, 0xf1, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xc9, 0x2f,
  0xc0, 0x22, 0x98, 0x89, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x40,
  0x43, 0x2c, 0x02, 0x0b, 0x0a, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0x24, 0x1a, 0x65, 0x11, 0x8c, 0x26, 0x20, 0x80, 0x05, 0x82, 0x7c,
  0xec, 0x11, 0x83, 0xf8, 0xd8, 0x23, 0x06, 0xf1, 0xb1, 0x47, 0x0c, 0xe2,
  0x63, 0xc4, 0x20, 0x1f, 0x2b, 0x06, 0xf9, 0x98, 0x31, 0xc8, 0xc7, 0x06,
  0x34, 0x80, 0x8f, 0x0d, 0x68, 0x00, 0x1f, 0x1b, 0xd0, 0x00, 0x3e, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x60, 0xb1, 0xc6, 0x5a, 0xf0, 0x04, 0x6a,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d,
  0x99, 0x7c, 0x6c, 0xd0, 0xe4, 0x63, 0xc3, 0x26, 0x1f, 0x53, 0x06, 0xf8,
  0x98, 0x32, 0xc0, 0xc7, 0x94, 0x01, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x80, 0xec, 0x46, 0x6b, 0xc8, 0x86, 0x6c, 0x9c, 0xc6, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0xc8, 0x6e, 0xb4, 0x86, 0x6c, 0xc8, 0x06,
  0x5f, 0x08, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xec, 0x46, 0x6b,
  0xc8, 0x86, 0x6c, 0x98, 0x46, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0xc8, 0x6e, 0xb4, 0x86, 0x6c, 0xc8, 0x06, 0x69, 0xc4, 0x04, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c,
  0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xf5, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x14, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0xcd, 0x6b, 0x1b, 0x57,
  0x10, 0x9f, 0xf7, 0xde, 0x6a, 0xf5, 0xf6, 0xeb, 0xad, 0xb4, 0x59, 0xa9,
  0xf2, 0x4a, 0x56, 0x6c, 0xb0, 0x8d, 0xe2, 0x8f, 0x8d, 0x5b, 0x28, 0xc4,
  0xd0, 0xe6, 0x03, 0x12, 0x17, 0x1a, 0xe7, 0x03, 0x0c, 0x7b, 0x4b, 0x48,
  0xa1, 0xc6, 0x56, 0x12, 0x9c, 0xd0, 0x96, 0xd2, 0x83, 0x51, 0x55, 0x30,
  0xb4, 0xa5, 0x86, 0xba, 0x7f, 0x41, 0x73, 0xd0, 0xa1, 0x4d, 0x5a, 0x08,
  0x0d, 0x85, 0x1e, 0xc2, 0xda, 0xbd, 0xbd, 0x4b, 0x0f, 0x3d, 0x88, 0xdc,
  0xf2, 0x2f, 0x34, 0x04, 0x1d, 0x4c, 0x28, 0x56, 0x67, 0x57, 0x52, 0x2d,
  0xc5, 0x31, 0x76, 0x7b, 0x52, 0x8b, 0x06, 0x46, 0xf3, 0xde, 0xcc, 0x6f,
  0xde, 0xcc, 0x7b, 0x23, 0x24, 0x66, 0xe6, 0x17, 0x17, 0x2f, 0x11, 0x02,
  0x60, 0xb9, 0x10, 0x93, 0xda, 0x12, 0xf0, 0x47, 0xf8, 0xe3, 0xd3, 0xa3,
  0xf0, 0xc3, 0x7f, 0x88, 0xef, 0x30, 0x6d, 0xfb, 0x9d, 0x87, 0x7f, 0x47,
  0x9d, 0x73, 0x76, 0x44, 0x6b, 0xbf, 0xcd, 0xba, 0xad, 0x62, 0x1f, 0xfe,
  0x17, 0xa7, 0x25, 0x0b, 0xc7, 0x5a, 0x32, 0xd1, 0x61, 0x42, 0x61, 0xbb,
  0x0b, 0x97, 0x83, 0x1b, 0x8c, 0x74, 0xed, 0xab, 0x6d, 0x7c, 0xa4, 0x7b,
  0x13, 0xf9, 0xe7, 0xf6, 0x5e, 0x85, 0x38, 0x20, 0x55, 0x89, 0x8d, 0x26,
  0x42, 0x55, 0x9a, 0xc4, 0x2b, 0x51, 0xaa, 0x32, 0x1b, 0x0d, 0x8c, 0xc2,
  0xff, 0x9c, 0x14, 0xe4, 0x42, 0xd7, 0x3a, 0xba, 0x70, 0x0a, 0xd9, 0xee,
  0xc2, 0x44, 0xdf, 0xa5, 0xc7, 0xf1, 0xaa, 0xba, 0xd5, 0xcd, 0x9b, 0x39,
  0xd8, 0x79, 0xf5, 0xa9, 0xbd, 0x38, 0x82, 0x38, 0xfb, 0x08, 0x38, 0x16,
  0xe1, 0xf4, 0x23, 0xe2, 0x12, 0x07, 0xe3, 0xec, 0x0c, 0x5c, 0x57, 0x0c,
  0x7a, 0xdd, 0x2e, 0x60, 0x7e, 0xe4, 0x55, 0xb8, 0xf2, 0x13, 0x3b, 0x43,
  0xd1, 0x54, 0x7e, 0x82, 0x38, 0x38, 0x18, 0xb7, 0xd2, 0xc6, 0xad, 0x1c,
  0x82, 0xbb, 0xd9, 0xc6, 0xdd, 0x3c, 0x04, 0x77, 0xab, 0x8d, 0xbb, 0x75,
  0x08, 0xae, 0xf7, 0xbe, 0x76, 0xfc, 0x2e, 0xca, 0xbe, 0x1b, 0x37, 0x91,
  0x60, 0x40, 0x7d, 0x45, 0x83, 0x9a, 0xf4, 0x1f, 0x0d, 0x6a, 0xd2, 0x7f,
  0x34, 0xa8, 0x49, 0xff, 0xd1, 0xa0, 0x26, 0xfd, 0x47, 0x83, 0x9a, 0xf4,
  0x1f, 0x0d, 0x6a, 0xd2, 0xbf, 0x34, 0xf5, 0xac, 0x5a, 0x7f, 0xfc, 0x7b,
  0x93, 0xe5, 0x37, 0xbe, 0x7e, 0xe4, 0x3d, 0xa8, 0xd6, 0x77, 0xe6, 0x76,
  0xd9, 0xc2, 0xdc, 0xfb, 0x53, 0x0c, 0xee, 0x6d, 0x55, 0x94, 0x87, 0x61,
  0x45, 0xdf, 0x0d, 0x35, 0xb6, 0x19, 0x56, 0xd9, 0x97, 0xc8, 0xdf, 0x84,
  0x06, 0xfb, 0x09, 0xe5, 0x57, 0xa1, 0x02, 0x66, 0x03, 0xdd, 0x5f, 0x70,
  0x95, 0xc7, 0x52, 0xb0, 0x3f, 0xc3, 0x04, 0x6f, 0xe9, 0x00, 0xb8, 0x04,
  0x62, 0x4a, 0xab, 0x79, 0xe2, 0x8b, 0xa8, 0x3b, 0x32, 0xd9, 0x77, 0xe1,
  0xaf, 0xec, 0x7e, 0x48, 0x40, 0x93, 0x84, 0x58, 0xb2, 0xc9, 0x1e, 0x84,
  0x3f, 0x5c, 0x21, 0x69, 0xd0, 0x72, 0xd2, 0x35, 0x4a, 0x8d, 0x7b, 0x91,
  0x0f, 0x2f, 0x48, 0xd0, 0x47, 0x24, 0x24, 0x4a, 0x92, 0x68, 0x43, 0x12,
  0x94, 0x69, 0x49, 0xf8, 0xb0, 0x24, 0xfa, 0xa8, 0xfc, 0x74, 0x7b, 0x63,
  0x8b, 0xdb, 0xd5, 0x67, 0x94, 0x6e, 0x83, 0x6a, 0x39, 0x82, 0x24, 0x4e,
  0x48, 0x50, 0x67, 0x25, 0x51, 0x66, 0xa4, 0x0b, 0xb3, 0x8d, 0x11, 0xf4,
  0x4f, 0xda, 0x4e, 0xe0, 0x2a, 0xb3, 0x8d, 0x1b, 0xb8, 0x26, 0xea, 0xeb,
  0x12, 0xcc, 0xb7, 0x24, 0x58, 0x67, 0x25, 0x4f, 0x3b, 0xc1, 0x8c, 0xeb,
  0xf2, 0xe9, 0x6c, 0x96, 0xfb, 0xb9, 0x1c, 0x07, 0x71, 0x4a, 0x6a, 0xd7,
  0x9c, 0x8a, 0x9e, 0xf1, 0x04, 0x36, 0x6d, 0x92, 0x98, 0x6f, 0x4b, 0x62,
  0x9d, 0x93, 0x44, 0xcc, 0x49, 0xe3, 0x35, 0x2f, 0xc0, 0xb6, 0x56, 0x56,
  0xd9, 0xa3, 0xd0, 0x35, 0xc6, 0x1a, 0xd8, 0xd7, 0xbd, 0xd0, 0x6c, 0x21,
  0xcc, 0x21, 0x2f, 0xd0, 0x2c, 0x5f, 0x68, 0xe9, 0x94, 0x68, 0xd2, 0xc9,
  0x0a, 0x76, 0xdd, 0x67, 0xe2, 0x9c, 0xc4, 0x98, 0xb0, 0xae, 0x79, 0x15,
  0x53, 0x38, 0x22, 0x25, 0xf0, 0x13, 0x2e, 0xd6, 0x35, 0xff, 0xdd, 0x1a,
  0x41, 0x69, 0xf9, 0x13, 0x35, 0x0d, 0x65, 0xda, 0xf7, 0x6a, 0x0e, 0x4c,
  0xd5, 0xf5, 0x14, 0x1d, 0xd1, 0xf3, 0xae, 0x20, 0xb8, 0x16, 0xb8, 0x36,
  0xf2, 0x59, 0x61, 0xe6, 0x73, 0xa2, 0x3a, 0xc6, 0xd7, 0xf4, 0x93, 0x13,
  0x42, 0x43, 0xbd, 0x83, 0xfa, 0x21, 0xd6, 0x7a, 0x4f, 0x97, 0x96, 0x62,
  0x69, 0x01, 0xa9, 0x3f, 0x87, 0xef, 0x49, 0x95, 0xf2, 0x35, 0x6b, 0xdc,
  0x13, 0x77, 0xcf, 0x6c, 0x6c, 0x29, 0xc3, 0x5c, 0x08, 0x3c, 0xdb, 0xb0,
  0x2f, 0xd7, 0xe8, 0x71, 0x45, 0xd8, 0x1d, 0x8c, 0xc3, 0xd7, 0xd8, 0xa8,
  0x8a, 0xb6, 0xa9, 0xba, 0x99, 0xa6, 0xa5, 0x04, 0xd1, 0x85, 0xcd, 0x4a,
  0xc2, 0xf5, 0x8a, 0x22, 0xd5, 0xc6, 0xa8, 0xe8, 0x27, 0x4e, 0x4e, 0xd6,
  0x32, 0x9e, 0x2b, 0xb2, 0x9e, 0x2f, 0xd2, 0xd1, 0xde, 0xf6, 0x6b, 0x10,
  0xc9, 0xf4, 0x1b, 0xb5, 0xd4, 0x31, 0x47, 0xe4, 0x4a, 0xc5, 0x60, 0xa8,
  0xe4, 0x06, 0x5e, 0xc9, 0x0f, 0x52, 0xf0, 0x4e, 0x3d, 0x6d, 0x51, 0xc5,
  0x85, 0x0b, 0xb1, 0x2c, 0x38, 0xc5, 0x60, 0xd8, 0x71, 0x83, 0xa2, 0xe3,
  0x07, 0x0e, 0xb9, 0x5f, 0x4f, 0x91, 0xa8, 0xc2, 0xf3, 0xb1, 0xcd, 0xc6,
  0x33, 0xa0, 0xe8, 0x80, 0x8e, 0x92, 0xb8, 0x59, 0xb0, 0x50, 0x52, 0xdf,
  0x83, 0x2c, 0x9c, 0x8f, 0xed, 0xf4, 0x78, 0x51, 0xb0, 0x8c, 0x2b, 0x94,
  0x3c, 0x17, 0x2e, 0x9c, 0xab, 0xbb, 0xe3, 0x81, 0x92, 0x1a, 0x9f, 0x3c,
  0x5d, 0x99, 0xdd, 0xfd, 0x3c, 0x7a, 0xcf, 0x1c, 0xd6, 0xd8, 0x85, 0x15,
  0x30, 0xec, 0x89, 0xc0, 0x4c, 0x4f, 0x04, 0x2a, 0x55, 0xea, 0xcf, 0x27,
  0x28, 0x54, 0x4d, 0x73, 0x44, 0xbd, 0x62, 0x56, 0x66, 0x4c, 0x53, 0xa8,
  0x17, 0xcd, 0xca, 0xb4, 0x29, 0xe2, 0x77, 0x88, 0x72, 0x06, 0xe3, 0xf4,
  0x7a, 0xf4, 0xde, 0xc4, 0x98, 0x5c, 0xa7, 0x51, 0x3c, 0xc3, 0x59, 0x67,
  0x86, 0x23, 0x92, 0xa4, 0x18, 0x24, 0x99, 0x1b, 0x24, 0x13, 0x3c, 0xe0,
  0x98, 0xb3, 0x86, 0x39, 0xeb, 0x0e, 0x0f, 0x0e, 0xee, 0x79, 0x3f, 0x43,
  0xfd, 0xb7, 0xff, 0x39, 0xee, 0x8c, 0x7f, 0x3a, 0x6d, 0x31, 0x47, 0x7e,
  0x59, 0xa7, 0x91, 0x5e, 0x5d, 0xc4, 0x3a, 0xdd, 0xaf, 0x33, 0xd8, 0x9e,
  0x4f, 0x67, 0x90, 0x63, 0x2a, 0x5d, 0x07, 0x42, 0x6b, 0xe6, 0xc1, 0x31,
  0x08, 0x61, 0xbd, 0xbf, 0x23, 0x4a, 0x57, 0x10, 0xd2, 0xc1, 0x61, 0x10,
  0xc2, 0x7a, 0x73, 0x51, 0x30, 0x08, 0x7d, 0xa9, 0x87, 0x57, 0xe2, 0x20,
  0x2d, 0xda, 0xfb, 0xaf, 0x18, 0x85, 0xab, 0x8b, 0x17, 0x56, 0x3f, 0xbe,
  0xf4, 0xde, 0xdd, 0xab, 0xe5, 0x4f, 0x96, 0x6e, 0x2f, 0x94, 0x97, 0x57,
  0x3e, 0x2a, 0xaf, 0x2e, 0xcf, 0x7f, 0xb0, 0xf4, 0xe1, 0xea, 0xd2, 0xed,
  0xcb, 0x77, 0xe6, 0xef, 0x2c, 0x77, 0x86, 0x61, 0xbf, 0xb5, 0x87, 0x53,
  0x67, 0x91, 0x93, 0xc8, 0xa7, 0xe2, 0x80, 0x7b, 0xb3, 0xa8, 0x48, 0x4f,
  0xd8, 0xde, 0x70, 0x6c, 0x21, 0xb6, 0x27, 0xfe, 0x4e, 0x6a, 0x93, 0xb4,
  0xec, 0xad, 0x3d, 0xc0, 0x5f, 0xf6, 0x22, 0xb6, 0x44, 0x00, 0x00, 0x00,
  0x2b, 0xf0, 0xbc, 0xe8, 0x1b, 0x8c, 0x8f, 0xb3, 0x1a, 0xab, 0xf8, 0x1c,
  0x4c, 0x39, 0x64, 0x2b
};
