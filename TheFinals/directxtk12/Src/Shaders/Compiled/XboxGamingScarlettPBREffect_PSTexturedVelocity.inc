#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
; SV_Position              0   xyzw        4      POS   float   xyz 
; TEXCOORD                 4   xyzw        5     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   x           1   TARGET    uint   x   
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_PSTexturedVelocity.pdb
; shader hash: beb43f15eeb8e3320abe81edbee003f3
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 6
; SigOutputElements: 2
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 6
; SigOutputVectors[0]: 2
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSTexturedVelocity
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
; TEXCOORD                 4                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;                                   texture     f32        cube      T3             t4     1
;                                   texture     f32        cube      T4             t5     1
;
;
; ViewId state:
;
; Number of inputs: 24, outputs: 5
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 1 }
;   output 4 depends on inputs: { 16, 17, 18, 20, 21, 22, 23 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSTexturedVelocity() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = fsub fast float %21, %15
  %25 = fsub fast float %22, %16
  %26 = fsub fast float %23, %17
  %27 = call float @dx.op.dot3.f32(i32 55, float %24, float %25, float %26, float %24, float %25, float %26)  ; Dot3(ax,ay,az,bx,by,bz)
  %28 = call float @dx.op.unary.f32(i32 25, float %27)  ; Rsqrt(value)
  %29 = fmul fast float %24, %28
  %30 = fmul fast float %25, %28
  %31 = fmul fast float %26, %28
  %32 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %4, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %33 = extractvalue %dx.types.ResRet.f32 %32, 0
  %34 = extractvalue %dx.types.ResRet.f32 %32, 1
  %35 = fmul fast float %33, 2.000000e+00
  %36 = fmul fast float %34, 2.000000e+00
  %37 = fadd fast float %35, -1.000000e+00
  %38 = fadd fast float %36, -1.000000e+00
  %39 = call float @dx.op.dot2.f32(i32 54, float %37, float %38, float %37, float %38)  ; Dot2(ax,ay,bx,by)
  %40 = fsub fast float 1.000000e+00, %39
  %41 = call float @dx.op.unary.f32(i32 24, float %40)  ; Sqrt(value)
  %42 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %43 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %44 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %45 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %46 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %47 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %48 = call float @dx.op.unary.f32(i32 83, float %18)  ; DerivCoarseX(value)
  %49 = call float @dx.op.unary.f32(i32 83, float %19)  ; DerivCoarseX(value)
  %50 = call float @dx.op.unary.f32(i32 84, float %18)  ; DerivCoarseY(value)
  %51 = call float @dx.op.unary.f32(i32 84, float %19)  ; DerivCoarseY(value)
  %52 = fmul fast float %47, %43
  %53 = fmul fast float %46, %44
  %54 = fsub fast float %52, %53
  %55 = fmul fast float %45, %44
  %56 = fmul fast float %47, %42
  %57 = fsub fast float %55, %56
  %58 = fmul fast float %46, %42
  %59 = fmul fast float %45, %43
  %60 = fsub fast float %58, %59
  %61 = fmul fast float %60, %46
  %62 = fmul fast float %57, %47
  %63 = fsub fast float %61, %62
  %64 = fmul fast float %54, %47
  %65 = fmul fast float %60, %45
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %57, %45
  %68 = fmul fast float %54, %46
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %57, %44
  %71 = fmul fast float %60, %43
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %60, %42
  %74 = fmul fast float %54, %44
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %54, %43
  %77 = fmul fast float %57, %42
  %78 = fsub fast float %76, %77
  %79 = fmul fast float %63, %48
  %80 = call float @dx.op.tertiary.f32(i32 46, float %50, float %72, float %79)  ; FMad(a,b,c)
  %81 = fmul fast float %66, %48
  %82 = call float @dx.op.tertiary.f32(i32 46, float %50, float %75, float %81)  ; FMad(a,b,c)
  %83 = fmul fast float %69, %48
  %84 = call float @dx.op.tertiary.f32(i32 46, float %50, float %78, float %83)  ; FMad(a,b,c)
  %85 = call float @dx.op.dot3.f32(i32 55, float %80, float %82, float %84, float %80, float %82, float %84)  ; Dot3(ax,ay,az,bx,by,bz)
  %86 = call float @dx.op.unary.f32(i32 25, float %85)  ; Rsqrt(value)
  %87 = fmul fast float %63, %49
  %88 = call float @dx.op.tertiary.f32(i32 46, float %51, float %72, float %87)  ; FMad(a,b,c)
  %89 = fmul fast float %66, %49
  %90 = call float @dx.op.tertiary.f32(i32 46, float %51, float %75, float %89)  ; FMad(a,b,c)
  %91 = fmul fast float %69, %49
  %92 = call float @dx.op.tertiary.f32(i32 46, float %51, float %78, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.dot3.f32(i32 55, float %88, float %90, float %92, float %88, float %90, float %92)  ; Dot3(ax,ay,az,bx,by,bz)
  %94 = call float @dx.op.unary.f32(i32 25, float %93)  ; Rsqrt(value)
  %95 = fmul fast float %94, %88
  %96 = fmul fast float %94, %90
  %97 = fmul fast float %94, %92
  %98 = fmul fast float %80, %37
  %99 = fmul fast float %98, %86
  %100 = call float @dx.op.tertiary.f32(i32 46, float %38, float %95, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %41, float %12, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %82, %37
  %103 = fmul fast float %102, %86
  %104 = call float @dx.op.tertiary.f32(i32 46, float %38, float %96, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %41, float %13, float %104)  ; FMad(a,b,c)
  %106 = fmul fast float %84, %37
  %107 = fmul fast float %106, %86
  %108 = call float @dx.op.tertiary.f32(i32 46, float %38, float %97, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %41, float %14, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.dot3.f32(i32 55, float %101, float %105, float %109, float %101, float %105, float %109)  ; Dot3(ax,ay,az,bx,by,bz)
  %111 = call float @dx.op.unary.f32(i32 25, float %110)  ; Rsqrt(value)
  %112 = fmul fast float %111, %101
  %113 = fmul fast float %111, %105
  %114 = fmul fast float %111, %109
  %115 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %5, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %116 = extractvalue %dx.types.ResRet.f32 %115, 0
  %117 = extractvalue %dx.types.ResRet.f32 %115, 1
  %118 = extractvalue %dx.types.ResRet.f32 %115, 2
  %119 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %7, float %18, float %19, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %120 = extractvalue %dx.types.ResRet.f32 %119, 0
  %121 = extractvalue %dx.types.ResRet.f32 %119, 1
  %122 = extractvalue %dx.types.ResRet.f32 %119, 2
  %123 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %29, float %30, float %31)  ; Dot3(ax,ay,az,bx,by,bz)
  %124 = call float @dx.op.unary.f32(i32 7, float %123)  ; Saturate(value)
  %125 = fmul fast float %121, %121
  %126 = fmul fast float %122, %116
  %127 = fmul fast float %122, %117
  %128 = fmul fast float %122, %118
  %129 = fsub fast float %116, %126
  %130 = fsub fast float %117, %127
  %131 = fsub fast float %118, %128
  %132 = fmul fast float %129, %120
  %133 = fmul fast float %130, %120
  %134 = fmul fast float %131, %120
  %135 = fadd fast float %116, 0xBFA47AE140000000
  %136 = fadd fast float %117, 0xBFA47AE140000000
  %137 = fadd fast float %118, 0xBFA47AE140000000
  %138 = fmul fast float %122, %135
  %139 = fmul fast float %122, %136
  %140 = fmul fast float %122, %137
  %141 = fadd fast float %138, 0x3FA47AE140000000
  %142 = fadd fast float %139, 0x3FA47AE140000000
  %143 = fadd fast float %140, 0x3FA47AE140000000
  %144 = fmul fast float %141, %120
  %145 = fmul fast float %142, %120
  %146 = fmul fast float %143, %120
  br label %147

; <label>:147                                     ; preds = %147, %0
  %148 = phi float [ 0.000000e+00, %0 ], [ %244, %147 ]
  %149 = phi float [ 0.000000e+00, %0 ], [ %245, %147 ]
  %150 = phi float [ 0.000000e+00, %0 ], [ %246, %147 ]
  %151 = phi i32 [ 0, %0 ], [ %247, %147 ]
  %152 = add nuw nsw i32 %151, 16
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %152)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = fsub fast float -0.000000e+00, %154
  %158 = fsub fast float -0.000000e+00, %155
  %159 = fsub fast float -0.000000e+00, %156
  %160 = call float @dx.op.dot3.f32(i32 55, float %157, float %158, float %159, float %157, float %158, float %159)  ; Dot3(ax,ay,az,bx,by,bz)
  %161 = call float @dx.op.unary.f32(i32 25, float %160)  ; Rsqrt(value)
  %162 = fmul fast float %161, %157
  %163 = fmul fast float %161, %158
  %164 = fmul fast float %161, %159
  %165 = fadd fast float %162, %29
  %166 = fadd fast float %163, %30
  %167 = fadd fast float %164, %31
  %168 = call float @dx.op.dot3.f32(i32 55, float %165, float %166, float %167, float %165, float %166, float %167)  ; Dot3(ax,ay,az,bx,by,bz)
  %169 = call float @dx.op.unary.f32(i32 25, float %168)  ; Rsqrt(value)
  %170 = fmul fast float %165, %169
  %171 = fmul fast float %166, %169
  %172 = fmul fast float %167, %169
  %173 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %162, float %163, float %164)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = call float @dx.op.unary.f32(i32 7, float %173)  ; Saturate(value)
  %175 = call float @dx.op.dot3.f32(i32 55, float %162, float %163, float %164, float %170, float %171, float %172)  ; Dot3(ax,ay,az,bx,by,bz)
  %176 = call float @dx.op.unary.f32(i32 7, float %175)  ; Saturate(value)
  %177 = call float @dx.op.dot3.f32(i32 55, float %112, float %113, float %114, float %170, float %171, float %172)  ; Dot3(ax,ay,az,bx,by,bz)
  %178 = call float @dx.op.unary.f32(i32 7, float %177)  ; Saturate(value)
  %179 = fmul fast float %121, 2.000000e+00
  %180 = fmul fast float %176, %176
  %181 = fmul fast float %180, %179
  %182 = fadd fast float %181, -5.000000e-01
  %183 = fsub fast float 1.000000e+00, %174
  %184 = fmul fast float %183, %183
  %185 = fmul fast float %184, %184
  %186 = fmul fast float %185, %183
  %187 = fmul fast float %186, %182
  %188 = fadd fast float %187, 1.000000e+00
  %189 = fsub fast float 1.000000e+00, %124
  %190 = fmul fast float %189, %189
  %191 = fmul fast float %190, %190
  %192 = fmul fast float %191, %189
  %193 = fmul fast float %192, %182
  %194 = fadd fast float %193, 1.000000e+00
  %195 = fmul fast float %188, %194
  %196 = fmul fast float %125, %125
  %197 = fadd fast float %196, -1.000000e+00
  %198 = fmul fast float %178, %178
  %199 = fmul fast float %198, %197
  %200 = fadd fast float %199, 1.000000e+00
  %201 = fmul fast float %200, %200
  %202 = fmul fast float %201, 0x400921FB60000000
  %203 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %202)  ; FMax(a,b)
  %204 = fdiv fast float %196, %203
  %205 = fsub fast float 1.000000e+00, %144
  %206 = fsub fast float 1.000000e+00, %145
  %207 = fsub fast float 1.000000e+00, %146
  %208 = fsub fast float 1.000000e+00, %176
  %209 = fmul fast float %208, %208
  %210 = fmul fast float %209, %209
  %211 = fmul fast float %210, %208
  %212 = fmul fast float %211, %205
  %213 = fmul fast float %211, %206
  %214 = fmul fast float %211, %207
  %215 = fadd fast float %212, %144
  %216 = fadd fast float %213, %145
  %217 = fadd fast float %214, %146
  %218 = fsub fast float 1.000000e+00, %180
  %219 = fmul fast float %196, 2.500000e-01
  %220 = fmul fast float %219, %218
  %221 = fadd fast float %220, %180
  %222 = fdiv fast float 1.000000e+00, %221
  %223 = fmul fast float %222, %204
  %224 = fmul fast float %223, %215
  %225 = fmul fast float %223, %216
  %226 = fmul fast float %223, %217
  %227 = add nuw nsw i32 %151, 19
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %227)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = extractvalue %dx.types.CBufRet.f32 %228, 1
  %231 = extractvalue %dx.types.CBufRet.f32 %228, 2
  %232 = fmul fast float %229, %174
  %233 = fmul fast float %230, %174
  %234 = fmul fast float %231, %174
  %235 = fmul fast float %195, %132
  %236 = fmul fast float %195, %133
  %237 = fmul fast float %195, %134
  %238 = fadd fast float %224, %235
  %239 = fadd fast float %225, %236
  %240 = fadd fast float %226, %237
  %241 = fmul fast float %232, %238
  %242 = fmul fast float %233, %239
  %243 = fmul fast float %234, %240
  %244 = fadd fast float %241, %148
  %245 = fadd fast float %242, %149
  %246 = fadd fast float %243, %150
  %247 = add nuw nsw i32 %151, 1
  %248 = icmp eq i32 %247, 3
  br i1 %248, label %249, label %147

; <label>:249                                     ; preds = %147
  %250 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %251 = call float @dx.op.loadInput.f32(i32 4, i32 5, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %252 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %253 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %254 = extractvalue %dx.types.ResRet.f32 %115, 3
  %255 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %6, float %112, float %113, float %114, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %256 = extractvalue %dx.types.ResRet.f32 %255, 0
  %257 = extractvalue %dx.types.ResRet.f32 %255, 1
  %258 = extractvalue %dx.types.ResRet.f32 %255, 2
  %259 = fmul fast float %256, %132
  %260 = fmul fast float %257, %133
  %261 = fmul fast float %258, %134
  %262 = fadd fast float %259, %244
  %263 = fadd fast float %260, %245
  %264 = fadd fast float %261, %246
  %265 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.i32 %265, 2
  %267 = sitofp i32 %266 to float
  %268 = fmul fast float %267, %121
  %269 = fsub fast float -0.000000e+00, %29
  %270 = fsub fast float -0.000000e+00, %30
  %271 = fsub fast float -0.000000e+00, %31
  %272 = call float @dx.op.dot3.f32(i32 55, float %269, float %270, float %271, float %112, float %113, float %114)  ; Dot3(ax,ay,az,bx,by,bz)
  %273 = fmul fast float %272, 2.000000e+00
  %274 = fmul fast float %273, %112
  %275 = fmul fast float %273, %113
  %276 = fmul fast float %273, %114
  %277 = fsub fast float %269, %274
  %278 = fsub fast float %270, %275
  %279 = fsub fast float %271, %276
  %280 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %6, float %277, float %278, float %279, float undef, i32 undef, i32 undef, i32 undef, float %268)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %281 = extractvalue %dx.types.ResRet.f32 %280, 0
  %282 = extractvalue %dx.types.ResRet.f32 %280, 1
  %283 = extractvalue %dx.types.ResRet.f32 %280, 2
  %284 = fmul fast float %281, %144
  %285 = fmul fast float %282, %145
  %286 = fmul fast float %283, %146
  %287 = fadd fast float %262, %284
  %288 = fadd fast float %263, %285
  %289 = fadd fast float %264, %286
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 3
  %292 = fmul fast float %291, %254
  %293 = fdiv fast float %250, %10
  %294 = fdiv fast float %9, %10
  %295 = fdiv fast float %251, %10
  %296 = fmul fast float %293, 5.000000e-01
  %297 = fmul fast float %294, 5.000000e-01
  %298 = fadd fast float %296, 5.000000e-01
  %299 = fsub fast float 5.000000e-01, %297
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 3
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = fmul fast float %301, %298
  %305 = fmul fast float %303, %299
  %306 = fsub fast float %304, %252
  %307 = fsub fast float %305, %11
  %308 = fsub fast float %295, %253
  %309 = bitcast float %306 to i32
  %310 = lshr i32 %309, 31
  %311 = fmul fast float %306, 0x3F00000000000000
  %312 = call float @dx.op.unary.f32(i32 6, float %311)  ; FAbs(value)
  %313 = call float @xbox.Med3_F32(i32 10, float %312, float 0.000000e+00, float 0x3F7FFC0000000000)
  %314 = call i32 @dx.op.legacyF32ToF16(i32 130, float %313)  ; LegacyF32ToF16(value)
  %315 = add i32 %314, 8
  %316 = lshr i32 %315, 4
  %317 = shl nuw nsw i32 %310, 9
  %318 = or i32 %316, %317
  %319 = bitcast float %307 to i32
  %320 = lshr i32 %319, 31
  %321 = fmul fast float %307, 0x3F00000000000000
  %322 = call float @dx.op.unary.f32(i32 6, float %321)  ; FAbs(value)
  %323 = call float @xbox.Med3_F32(i32 10, float %322, float 0.000000e+00, float 0x3F7FFC0000000000)
  %324 = call i32 @dx.op.legacyF32ToF16(i32 130, float %323)  ; LegacyF32ToF16(value)
  %325 = add i32 %324, 8
  %326 = lshr i32 %325, 4
  %327 = shl nuw nsw i32 %320, 9
  %328 = or i32 %326, %327
  %329 = shl i32 %328, 10
  %330 = or i32 %318, %329
  %331 = bitcast float %308 to i32
  %332 = lshr i32 %331, 31
  %333 = fmul fast float %308, 7.812500e-03
  %334 = call float @dx.op.unary.f32(i32 6, float %333)  ; FAbs(value)
  %335 = call float @xbox.Med3_F32(i32 10, float %334, float 0.000000e+00, float 0x3F7FFC0000000000)
  %336 = call i32 @dx.op.legacyF32ToF16(i32 130, float %335)  ; LegacyF32ToF16(value)
  %337 = add i32 %336, 2
  %338 = lshr i32 %337, 2
  %339 = shl nuw nsw i32 %332, 11
  %340 = or i32 %338, %339
  %341 = shl i32 %340, 20
  %342 = or i32 %330, %341
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %289)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %292)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 0, i32 %342)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @xbox.Med3_F32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!18}
!dx.entryPoints = !{!19}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !13, !15}
!6 = !{!7, !9, !10, !11, !12}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !8}
!11 = !{i32 3, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !8}
!12 = !{i32 4, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !8}
!13 = !{!14}
!14 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!15 = !{!16, !17}
!16 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!17 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!18 = !{[26 x i32] [i32 24, i32 5, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 0, i32 16, i32 16, i32 16, i32 16]}
!19 = !{void ()* @PSTexturedVelocity, !"PSTexturedVelocity", !20, !5, null}
!20 = !{!21, !35, null}
!21 = !{!22, !25, !28, !30, !31, !32}
!22 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 2, i32 0, i8 0, !24}
!23 = !{i32 0}
!24 = !{i32 3, i32 3}
!25 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 4, i32 1, i8 0, !27}
!26 = !{i32 1}
!27 = !{i32 3, i32 7}
!28 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !29, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!29 = !{i32 2}
!30 = !{i32 3, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!31 = !{i32 4, !"SV_Position", i8 9, i8 3, !23, i8 4, i32 1, i8 4, i32 4, i8 0, !27}
!32 = !{i32 5, !"TEXCOORD", i8 9, i8 0, !33, i8 2, i32 1, i8 4, i32 5, i8 0, !34}
!33 = !{i32 4}
!34 = !{i32 3, i32 15}
!35 = !{!36, !37}
!36 = !{i32 0, !"SV_Target", i8 9, i8 16, !23, i8 0, i32 1, i8 4, i32 0, i8 0, !34}
!37 = !{i32 1, !"SV_Target", i8 5, i8 16, !26, i8 0, i32 1, i8 1, i32 1, i8 0, !38}
!38 = !{i32 3, i32 1}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 38
;   num_shared_vgprs: 0
;   num_sgprs: 62
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 2880
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x153fb4be, 0x32e3b8ee                // 000000000000: D580B4BE 03FE2B3F 32E3B8EE
;   v_nop_xbox_data 0xed81be0a, 0xf303e0be                // 00000000000C: D580BE0A 03FFDB81 F303E0BE
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[22:23], exec                          // 00000000001C: BE96047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s18, s15                                // 000000000024: BE92030F
;   s_mov_b32     s2, s13                                 // 000000000028: BE82030D
;   s_mov_b32     s40, s9                                 // 00000000002C: BEA80309
;   s_mov_b32     s9, 0                                   // 000000000030: BE890380
;   s_mov_b32     s41, 0                                  // 000000000034: BEA90380
;   s_mov_b32     s11, 0                                  // 000000000038: BE8B0380
;   s_mov_b32     s13, 0                                  // 00000000003C: BE8D0380
;   s_mov_b32     s3, 0                                   // 000000000040: BE830380
;   s_mov_b32     s15, 0                                  // 000000000044: BE8F0380
;   s_mov_b32     s19, 0                                  // 000000000048: BE930380
;   s_load_dwordx8  s[32:39], s[2:3], null                // 00000000004C: F40C0801 FA000000
;   s_load_dwordx8  s[24:31], s[12:13], null              // 000000000054: F40C0606 FA000000
;   s_load_dwordx8  s[0:7], s[10:11], null                // 00000000005C: F40C0005 FA000000
;   s_load_dwordx8  s[48:55], s[40:41], null              // 000000000064: F40C0C14 FA000000
;   s_load_dwordx8  s[40:47], s[8:9], null                // 00000000006C: F40C0A04 FA000000
;   s_load_dwordx4  s[56:59], s[18:19], null              // 000000000074: F4080E09 FA000000
;   s_load_dwordx4  s[8:11], s[14:15], null               // 00000000007C: F4080207 FA000000
;   s_bitset1_b32  s17, 20                                // 000000000084: BE911D94
;   s_mov_b32     s18, -1                                 // 000000000088: BE9203C1
;   s_mov_b32     s19, lit(0x11014fac)                    // 00000000008C: BE9303FF 11014FAC
;   s_mov_b32     m0, s20                                 // 000000000094: BEFC0314
;   s_buffer_load_dwordx4  s[12:15], s[16:19], null       // 000000000098: F4280308 FA000000
;   v_interp_p1_f32  v11, v0, attr1.y                     // 0000000000A0: C82C0500
;   v_interp_p1_f32  v10, v0, attr1.x                     // 0000000000A4: C8280400
;   v_interp_p1_f32  v12, v0, attr1.z                     // 0000000000A8: C8300600
;   v_interp_p1_f32  v13, v0, attr0.x                     // 0000000000AC: C8340000
;   v_interp_p1_f32  v14, v0, attr0.y                     // 0000000000B0: C8380100
;   v_interp_p2_f32  v11, v1, attr1.y                     // 0000000000B4: C82D0501
;   v_interp_p2_f32  v10, v1, attr1.x                     // 0000000000B8: C8290401
;   v_interp_p2_f32  v12, v1, attr1.z                     // 0000000000BC: C8310601
;   v_interp_p2_f32  v13, v1, attr0.x                     // 0000000000C0: C8350001
;   v_interp_p2_f32  v14, v1, attr0.y                     // 0000000000C4: C8390101
;   ds_swizzle_b32  v21, v11 offset:32768                 // 0000000000C8: D8D48000 1500000B
;   ds_swizzle_b32  v22, v11 offset:32853                 // 0000000000D0: D8D48055 1600000B
;   ds_swizzle_b32  v19, v10 offset:32768                 // 0000000000D8: D8D48000 1300000A
;   ds_swizzle_b32  v20, v10 offset:32853                 // 0000000000E0: D8D48055 1400000A
;   ds_swizzle_b32  v23, v12 offset:32768                 // 0000000000E8: D8D48000 1700000C
;   ds_swizzle_b32  v24, v12 offset:32853                 // 0000000000F0: D8D48055 1800000C
;   ds_swizzle_b32  v26, v13 offset:32938                 // 0000000000F8: D8D480AA 1A00000D
;   ds_swizzle_b32  v25, v14 offset:32853                 // 000000000100: D8D48055 1900000E
;   v_interp_p1_f32  v7, v0, attr2.x                      // 000000000108: C81C0800
;   s_waitcnt     lgkmcnt(0)                              // 00000000010C: BF8CC07F
;   v_sub_f32     v6, s13, v11                            // 000000000110: 080C160D
;   v_sub_f32     v5, s12, v10                            // 000000000114: 080A140C
;   v_sub_f32     v15, s14, v12                           // 000000000118: 081E180E
;   ds_swizzle_b32  v10, v10 offset:32938                 // 00000000011C: D8D480AA 0A00000A
;   ds_swizzle_b32  v11, v11 offset:32938                 // 000000000124: D8D480AA 0B00000B
;   v_mul_legacy_f32  v16, v6, v6                         // 00000000012C: 0E200D06
;   ds_swizzle_b32  v12, v12 offset:32938                 // 000000000130: D8D480AA 0C00000C
;   v_interp_p2_f32  v7, v1, attr2.x                      // 000000000138: C81D0801
;   v_interp_p1_f32  v8, v0, attr2.y                      // 00000000013C: C8200900
;   v_interp_p1_f32  v9, v0, attr2.z                      // 000000000140: C8240A00
;   v_fmac_f32    v16, v5, v5                             // 000000000144: 56200B05
;   v_sub_f32     v22, v22, v21                           // 000000000148: 082C2B16
;   v_interp_p2_f32  v8, v1, attr2.y                      // 00000000014C: C8210901
;   v_sub_f32     v20, v20, v19                           // 000000000150: 08282714
;   v_fmac_f32    v16, v15, v15                           // 000000000154: 56201F0F
;   v_sub_f32     v24, v24, v23                           // 000000000158: 08302F18
;   v_interp_p2_f32  v9, v1, attr2.z                      // 00000000015C: C8250A01
;   v_rsq_f32     v16, v16                                // 000000000160: 7E205D10
;   s_waitcnt     lgkmcnt(2)                              // 000000000164: BF8CC27F
;   v_sub_f32     v10, v10, v19                           // 000000000168: 0814270A
;   s_waitcnt     lgkmcnt(1)                              // 00000000016C: BF8CC17F
;   v_sub_f32     v11, v11, v21                           // 000000000170: 08162B0B
;   ds_swizzle_b32  v19, v13 offset:32768                 // 000000000174: D8D48000 1300000D
;   ds_swizzle_b32  v21, v13 offset:32853                 // 00000000017C: D8D48055 1500000D
;   s_waitcnt     lgkmcnt(2)                              // 000000000184: BF8CC27F
;   v_sub_f32     v12, v12, v23                           // 000000000188: 08182F0C
;   ds_swizzle_b32  v23, v14 offset:32768                 // 00000000018C: D8D48000 1700000E
;   v_mul_legacy_f32  v28, v10, v22                       // 000000000194: 0E382D0A
;   v_mul_legacy_f32  v17, v5, v16                        // 000000000198: 0E222105
;   v_mul_legacy_f32  v18, v6, v16                        // 00000000019C: 0E242106
;   image_sample  v[5:6], v[13:14], s[48:55], s[8:11] dmask:0x3 dim:SQ_RSRC_IMG_2D // 0000000001A0: F0800308 004C050D
;   v_mul_legacy_f32  v27, v12, v20                       // 0000000001A8: 0E36290C
;   v_fma_f32     v28, v11, v20, -v28                     // 0000000001AC: D54B001C 8472290B
;   v_mul_legacy_f32  v15, v15, v16                       // 0000000001B4: 0E1E210F
;   v_fma_f32     v27, v10, v24, -v27                     // 0000000001B8: D54B001B 846E310A
;   v_mul_legacy_f32  v30, v28, v10                       // 0000000001C0: 0E3C151C
;   v_mul_legacy_f32  v29, v27, v12                       // 0000000001C4: 0E3A191B
;   s_waitcnt     lgkmcnt(1)                              // 0000000001C8: BF8CC17F
;   v_sub_f32     v21, v21, v19                           // 0000000001CC: 082A2715
;   v_sub_f32     v19, v26, v19                           // 0000000001D0: 0826271A
;   ds_swizzle_b32  v26, v14 offset:32938                 // 0000000001D4: D8D480AA 1A00000E
;   s_waitcnt     lgkmcnt(1)                              // 0000000001DC: BF8CC17F
;   v_sub_f32     v25, v25, v23                           // 0000000001E0: 08322F19
;   v_fma_f32     v29, v28, v11, -v29                     // 0000000001E4: D54B001D 8476171C
;   s_waitcnt     lgkmcnt(0)                              // 0000000001EC: BF8CC07F
;   v_sub_f32     v23, v26, v23                           // 0000000001F0: 082E2F1A
;   v_mul_legacy_f32  v26, v11, v24                       // 0000000001F4: 0E34310B
;   v_fma_f32     v26, v12, v22, -v26                     // 0000000001F8: D54B001A 846A2D0C
;   v_mul_legacy_f32  v11, v26, v11                       // 000000000200: 0E16171A
;   v_fma_f32     v12, v26, v12, -v30                     // 000000000204: D54B000C 847A191A
;   v_fma_f32     v10, v27, v10, -v11                     // 00000000020C: D54B000A 842E151B
;   v_mul_legacy_f32  v11, v28, v22                       // 000000000214: 0E162D1C
;   v_fma_f32     v11, v27, v24, -v11                     // 000000000218: D54B000B 842E311B
;   v_mul_legacy_f32  v24, v26, v24                       // 000000000220: 0E30311A
;   v_fma_f32     v24, v28, v20, -v24                     // 000000000224: D54B0018 8462291C
;   v_mul_legacy_f32  v20, v27, v20                       // 00000000022C: 0E28291B
;   v_mul_legacy_f32  v27, v29, v25                       // 000000000230: 0E36331D
;   v_fma_f32     v20, v26, v22, -v20                     // 000000000234: D54B0014 84522D1A
;   v_mul_legacy_f32  v22, v29, v21                       // 00000000023C: 0E2C2B1D
;   v_fmac_f32    v27, v23, v11                           // 000000000240: 56361717
;   v_mul_legacy_f32  v26, v12, v21                       // 000000000244: 0E342B0C
;   v_mul_legacy_f32  v21, v10, v21                       // 000000000248: 0E2A2B0A
;   v_mul_legacy_f32  v10, v10, v25                       // 00000000024C: 0E14330A
;   v_fmac_f32    v22, v19, v11                           // 000000000250: 562C1713
;   v_mul_legacy_f32  v11, v12, v25                       // 000000000254: 0E16330C
;   v_fmac_f32    v26, v19, v24                           // 000000000258: 56343113
;   v_fmac_f32    v21, v19, v20                           // 00000000025C: 562A2913
;   v_fmac_f32    v10, v23, v20                           // 000000000260: 56142917
;   v_fmac_f32    v11, v23, v24                           // 000000000264: 56163117
;   v_mul_legacy_f32  v19, v26, v26                       // 000000000268: 0E26351A
;   v_mul_legacy_f32  v12, v11, v11                       // 00000000026C: 0E18170B
;   v_fmac_f32    v19, v22, v22                           // 000000000270: 56262D16
;   v_fmac_f32    v12, v27, v27                           // 000000000274: 5618371B
;   v_fmac_f32    v19, v21, v21                           // 000000000278: 56262B15
;   v_fmac_f32    v12, v10, v10                           // 00000000027C: 5618150A
;   v_rsq_f32     v19, v19                                // 000000000280: 7E265D13
;   v_rsq_f32     v12, v12                                // 000000000284: 7E185D0C
;   v_mul_legacy_f32  v20, v12, v27                       // 000000000288: 0E28370C
;   v_mul_legacy_f32  v11, v12, v11                       // 00000000028C: 0E16170C
;   v_mul_legacy_f32  v10, v12, v10                       // 000000000290: 0E14150C
;   s_waitcnt     vmcnt(0)                                // 000000000294: BF8C3F70
;   v_fma_f32     v6, v6, 2.0, -1.0                       // 000000000298: D54B0006 03CDE906
;   v_fma_f32     v5, v5, 2.0, -1.0                       // 0000000002A0: D54B0005 03CDE905
;   v_fma_f32     v16, -v6, v6, 1.0                       // 0000000002A8: D54B0010 23CA0D06
;   v_mul_legacy_f32  v12, v22, v5                        // 0000000002B0: 0E180B16
;   v_mul_legacy_f32  v22, v26, v5                        // 0000000002B4: 0E2C0B1A
;   v_fmac_f32    v16, -v5, v5                            // 0000000002B8: D52B0010 20020B05
;   v_mul_legacy_f32  v23, v12, v19                       // 0000000002C0: 0E2E270C
;   v_mul_legacy_f32  v5, v21, v5                         // 0000000002C4: 0E0A0B15
;   v_sqrt_f32    v16, v16                                // 0000000002C8: 7E206710
;   v_fmac_f32    v23, v6, v20                            // 0000000002CC: 562E2906
;   v_fmac_f32    v23, v16, v7                            // 0000000002D0: 562E0F10
;   v_mul_legacy_f32  v7, v22, v19                        // 0000000002D4: 0E0E2716
;   v_fmac_f32    v7, v6, v11                             // 0000000002D8: 560E1706
;   v_mul_legacy_f32  v11, v5, v19                        // 0000000002DC: 0E162705
;   v_fmac_f32    v7, v16, v8                             // 0000000002E0: 560E1110
;   v_fmac_f32    v11, v6, v10                            // 0000000002E4: 56161506
;   v_mul_legacy_f32  v6, v7, v7                          // 0000000002E8: 0E0C0F07
;   v_fmac_f32    v11, v16, v9                            // 0000000002EC: 56161310
;   v_fmac_f32    v6, v23, v23                            // 0000000002F0: 560C2F17
;   v_fmac_f32    v6, v11, v11                            // 0000000002F4: 560C170B
;   v_rsq_f32     v6, v6                                  // 0000000002F8: 7E0C5D06
;   v_mul_legacy_f32  v12, v6, v23                        // 0000000002FC: 0E182F06
;   v_mul_legacy_f32  v16, v6, v7                         // 000000000300: 0E200F06
;   v_mul_legacy_f32  v19, v6, v11                        // 000000000304: 0E261706
;   image_sample  v[5:8], v[13:14], s[40:47], s[8:11] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000308: F0800F08 004A050D
;   image_sample  v[9:11], v[13:14], s[0:7], s[8:11] dmask:0x7 dim:SQ_RSRC_IMG_2D // 000000000310: F0800708 0040090D
;   v_nop                                                 // 000000000318: 7E000000
;   s_buffer_load_dwordx16  s[0:15], s[16:19], 0x000100   // 00000000031C: F4300008 FA000100
;   v_mul_legacy_f32  v13, v16, v18                       // 000000000324: 0E1A2510
;   v_fma_f32     v14, v12, v17, v13                      // 000000000328: D54B000E 0436230C
;   v_fmac_f32    v14, v19, v15                           // 000000000330: 561C1F13
;   v_sub_f32     v14, 1.0, v14 clamp                     // 000000000334: D504800E 00021CF2
;   s_waitcnt     vmcnt(0)                                // 00000000033C: BF8C3F70
;   v_fma_f32     v20, v5, -v11, v5                       // 000000000340: D54B0014 44161705
;   v_fma_f32     v22, v7, -v11, v7                       // 000000000348: D54B0016 441E1707
;   v_fma_f32     v23, v6, -v11, v6                       // 000000000350: D54B0017 441A1706
;   v_add_f32     v5, lit(0xbd23d70a), v5                 // 000000000358: 060A0AFF BD23D70A
;   v_add_f32     v6, lit(0xbd23d70a), v6                 // 000000000360: 060C0CFF BD23D70A
;   v_add_f32     v7, lit(0xbd23d70a), v7                 // 000000000368: 060E0EFF BD23D70A
;   v_mul_legacy_f32  v20, v20, v9                        // 000000000370: 0E281314
;   v_mul_legacy_f32  v21, v23, v9                        // 000000000374: 0E2A1317
;   v_fma_f32     v5, v11, v5, lit(0x3d23d70a)            // 000000000378: D54B0005 03FE0B0B 3D23D70A
;   v_fma_f32     v6, v11, v6, lit(0x3d23d70a)            // 000000000384: D54B0006 03FE0D0B 3D23D70A
;   v_fma_f32     v7, v11, v7, lit(0x3d23d70a)            // 000000000390: D54B0007 03FE0F0B 3D23D70A
;   s_waitcnt     lgkmcnt(0)                              // 00000000039C: BF8CC07F
;   v_mul_legacy_f32  v11, s0, s0                         // 0000000003A0: D507000B 00000000
;   v_mul_legacy_f32  v22, v22, v9                        // 0000000003A8: 0E2C1316
;   v_mul_legacy_f32  v23, v5, v9                         // 0000000003AC: 0E2E1305
;   v_mul_legacy_f32  v24, v6, v9                         // 0000000003B0: 0E301306
;   v_mul_legacy_f32  v25, v7, v9                         // 0000000003B4: 0E321307
;   v_fmac_f32    v11, s1, s1                             // 0000000003B8: D52B000B 00000201
;   v_fma_f32     v5, -v5, v9, 1.0                        // 0000000003C0: D54B0005 23CA1305
;   v_fma_f32     v6, -v6, v9, 1.0                        // 0000000003C8: D54B0006 23CA1306
;   v_fma_f32     v7, -v7, v9, 1.0                        // 0000000003D0: D54B0007 23CA1307
;   v_fmac_f32    v11, s2, s2                             // 0000000003D8: D52B000B 00000402
;   v_rsq_f32     v11, v11                                // 0000000003E0: 7E165D0B
;   v_fma_f32     v30, -s1, v11, v18                      // 0000000003E4: D54B001E 244A1601
;   v_fma_f32     v29, -s0, v11, v17                      // 0000000003EC: D54B001D 24461600
;   v_mul_legacy_f32  v26, v11, -s0                       // 0000000003F4: D507001A 4000010B
;   v_mul_legacy_f32  v27, v11, -s1                       // 0000000003FC: D507001B 4000030B
;   v_mul_legacy_f32  v28, v11, -s2                       // 000000000404: D507001C 4000050B
;   v_mul_legacy_f32  v31, v30, v30                       // 00000000040C: 0E3E3D1E
;   v_fma_f32     v11, -s2, v11, v15                      // 000000000410: D54B000B 243E1602
;   v_fmac_f32    v31, v29, v29                           // 000000000418: 563E3B1D
;   v_fmac_f32    v31, v11, v11                           // 00000000041C: 563E170B
;   v_rsq_f32     v31, v31                                // 000000000420: 7E3E5D1F
;   v_mul_legacy_f32  v29, v29, v31                       // 000000000424: 0E3A3F1D
;   v_mul_legacy_f32  v30, v30, v31                       // 000000000428: 0E3C3F1E
;   v_mul_legacy_f32  v11, v11, v31                       // 00000000042C: 0E163F0B
;   v_mul_legacy_f32  v31, v16, v27                       // 000000000430: 0E3E3710
;   v_mul_legacy_f32  v27, v27, v30                       // 000000000434: 0E363D1B
;   v_fmac_f32    v31, v12, v26                           // 000000000438: 563E350C
;   v_fmac_f32    v27, v26, v29                           // 00000000043C: 56363B1A
;   v_fmac_f32    v31, v19, v28                           // 000000000440: 563E3913
;   v_fmac_f32    v27, v28, v11                           // 000000000444: 5636171C
;   v_mul_legacy_f32  v28, v16, v30                       // 000000000448: 0E383D10
;   v_max_f32     v32, v31, v31 clamp                     // 00000000044C: D5108020 00023F1F
;   v_sub_f32     v31, 1.0, v31 clamp                     // 000000000454: D504801F 00023EF2
;   v_max_f32     v26, v27, v27 clamp                     // 00000000045C: D510801A 0002371B
;   v_fmac_f32    v28, v12, v29                           // 000000000464: 56383B0C
;   v_add_f32     v29, v10, v10                           // 000000000468: 063A150A
;   v_mul_legacy_f32  v33, v31, v31                       // 00000000046C: 0E423F1F
;   v_sub_f32     v9, 1.0, v27 clamp                      // 000000000470: D5048009 000236F2
;   v_fmac_f32    v28, v19, v11 clamp                     // 000000000478: D52B801C 00021713
;   v_mul_legacy_f32  v11, v26, v26                       // 000000000480: 0E16351A
;   v_mul_legacy_f32  v33, v33, v33                       // 000000000484: 0E424321
;   v_fma_f32     v26, -v26, v26, 1.0                     // 000000000488: D54B001A 23CA351A
;   v_mul_legacy_f32  v27, v9, v9                         // 000000000490: 0E361309
;   v_mul_legacy_f32  v28, v28, v28                       // 000000000494: 0E38391C
;   v_fma_f32     v30, v11, v29, -0.5                     // 000000000498: D54B001E 03C63B0B
;   v_mul_legacy_f32  v31, v33, v31                       // 0000000004A0: 0E3E3F21
;   v_mul_legacy_f32  v33, v14, v14                       // 0000000004A4: 0E421D0E
;   v_mul_legacy_f32  v27, v27, v27                       // 0000000004A8: 0E36371B
;   v_fma_f32     v31, v31, v30, 1.0                      // 0000000004AC: D54B001F 03CA3D1F
;   v_mul_legacy_f32  v33, v33, v33                       // 0000000004B4: 0E424321
;   v_mul_legacy_f32  v9, v27, v9                         // 0000000004B8: 0E12131B
;   v_mul_legacy_f32  v14, v33, v14                       // 0000000004BC: 0E1C1D21
;   v_fma_f32     v27, v9, v5, v23                        // 0000000004C0: D54B001B 045E0B09
;   v_fma_f32     v34, v9, v6, v24                        // 0000000004C8: D54B0022 04620D09
;   v_fma_f32     v9, v9, v7, v25                         // 0000000004D0: D54B0009 04660F09
;   v_fma_f32     v30, v14, v30, 1.0                      // 0000000004D8: D54B001E 03CA3D0E
;   v_mul_legacy_f32  v30, v31, v30                       // 0000000004E0: 0E3C3D1F
;   v_mul_legacy_f32  v31, v10, v10                       // 0000000004E4: 0E3E150A
;   v_mul_legacy_f32  v36, v30, v20                       // 0000000004E8: 0E48291E
;   v_mul_legacy_f32  v33, v31, v31                       // 0000000004EC: 0E423F1F
;   v_fma_f32     v31, v31, v31, -1.0                     // 0000000004F0: D54B001F 03CE3F1F
;   v_mul_legacy_f32  v37, v30, v21                       // 0000000004F8: 0E4A2B1E
;   v_mul_legacy_f32  v30, v30, v22                       // 0000000004FC: 0E3C2D1E
;   v_mul_legacy_f32  v35, lit(0x3e800000), v33           // 000000000500: 0E4642FF 3E800000
;   v_fma_f32     v28, v28, v31, 1.0                      // 000000000508: D54B001C 03CA3F1C
;   v_fmac_f32    v11, v35, v26                           // 000000000510: 56163523
;   v_mul_legacy_f32  v28, v28, v28                       // 000000000514: 0E38391C
;   v_mul_legacy_f32  v26, s12, v32                       // 000000000518: 0E34400C
;   v_rcp_f32     v11, v11                                // 00000000051C: 7E16550B
;   v_mul_legacy_f32  v28, lit(0x40490fdb), v28           // 000000000520: 0E3838FF 40490FDB
;   v_max_f32     v28, lit(0x358637bd), v28               // 000000000528: 203838FF 358637BD
;   v_rcp_f32     v28, v28                                // 000000000530: 7E38551C
;   v_mul_legacy_f32  v28, v33, v28                       // 000000000534: 0E383921
;   v_mul_legacy_f32  v11, v11, v28                       // 000000000538: 0E16390B
;   v_mul_legacy_f32  v28, s13, v32                       // 00000000053C: 0E38400D
;   v_mul_legacy_f32  v32, s14, v32                       // 000000000540: 0E40400E
;   v_fmac_f32    v30, v11, v9                            // 000000000544: 563C130B
;   v_mul_legacy_f32  v9, s4, s4                          // 000000000548: D5070009 00000804
;   v_fmac_f32    v36, v11, v27                           // 000000000550: 5648370B
;   v_fmac_f32    v37, v11, v34                           // 000000000554: 564A450B
;   v_fmac_f32    v9, s5, s5                              // 000000000558: D52B0009 00000A05
;   v_mul_legacy_f32  v26, v26, v36                       // 000000000560: 0E34491A
;   v_mul_legacy_f32  v27, v28, v37                       // 000000000564: 0E364B1C
;   v_mul_legacy_f32  v28, v32, v30                       // 000000000568: 0E383D20
;   v_fmac_f32    v9, s6, s6                              // 00000000056C: D52B0009 00000C06
;   v_rsq_f32     v9, v9                                  // 000000000574: 7E125D09
;   v_fma_f32     v36, -s5, v9, v18                       // 000000000578: D54B0024 244A1205
;   v_fma_f32     v34, -s4, v9, v17                       // 000000000580: D54B0022 24461204
;   v_mul_legacy_f32  v11, v9, -s4                        // 000000000588: D507000B 40000909
;   v_mul_legacy_f32  v30, v9, -s5                        // 000000000590: D507001E 40000B09
;   v_mul_legacy_f32  v32, v9, -s6                        // 000000000598: D5070020 40000D09
;   v_mul_legacy_f32  v37, v36, v36                       // 0000000005A0: 0E4A4924
;   v_fma_f32     v9, -s6, v9, v15                        // 0000000005A4: D54B0009 243E1206
;   s_buffer_load_dwordx8  s[0:7], s[16:19], 0x000140     // 0000000005AC: F42C0008 FA000140
;   v_fmac_f32    v37, v34, v34                           // 0000000005B4: 564A4522
;   v_fmac_f32    v37, v9, v9                             // 0000000005B8: 564A1309
;   v_rsq_f32     v37, v37                                // 0000000005BC: 7E4A5D25
;   v_mul_legacy_f32  v36, v36, v37                       // 0000000005C0: 0E484B24
;   v_mul_legacy_f32  v34, v34, v37                       // 0000000005C4: 0E444B22
;   v_mul_legacy_f32  v9, v9, v37                         // 0000000005C8: 0E124B09
;   v_mul_legacy_f32  v37, v16, v30                       // 0000000005CC: 0E4A3D10
;   v_mul_legacy_f32  v30, v30, v36                       // 0000000005D0: 0E3C491E
;   v_fmac_f32    v37, v12, v11                           // 0000000005D4: 564A170C
;   v_fmac_f32    v30, v11, v34                           // 0000000005D8: 563C450B
;   v_fmac_f32    v37, v19, v32                           // 0000000005DC: 564A4113
;   v_fmac_f32    v30, v32, v9                            // 0000000005E0: 563C1320
;   v_mul_legacy_f32  v32, v16, v36                       // 0000000005E4: 0E404910
;   v_max_f32     v36, v37, v37 clamp                     // 0000000005E8: D5108024 00024B25
;   v_max_f32     v11, v30, v30 clamp                     // 0000000005F0: D510800B 00023D1E
;   v_fmac_f32    v32, v12, v34                           // 0000000005F8: 5640450C
;   v_sub_f32     v34, 1.0, v37 clamp                     // 0000000005FC: D5048022 00024AF2
;   v_sub_f32     v30, 1.0, v30 clamp                     // 000000000604: D504801E 00023CF2
;   v_fmac_f32    v32, v19, v9 clamp                      // 00000000060C: D52B8020 00021313
;   v_mul_legacy_f32  v37, v34, v34                       // 000000000614: 0E4A4522
;   v_mul_legacy_f32  v9, v11, v11                        // 000000000618: 0E12170B
;   v_fma_f32     v11, -v11, v11, 1.0                     // 00000000061C: D54B000B 23CA170B
;   v_mul_legacy_f32  v32, v32, v32                       // 000000000624: 0E404120
;   v_mul_legacy_f32  v37, v37, v37                       // 000000000628: 0E4A4B25
;   v_fma_f32     v29, v9, v29, -0.5                      // 00000000062C: D54B001D 03C63B09
;   v_fmac_f32    v9, v35, v11                            // 000000000634: 56121723
;   s_waitcnt     lgkmcnt(0)                              // 000000000638: BF8CC07F
;   v_mul_legacy_f32  v11, s0, v36                        // 00000000063C: 0E164800
;   v_fma_f32     v31, v32, v31, 1.0                      // 000000000640: D54B001F 03CA3F20
;   v_mul_legacy_f32  v34, v37, v34                       // 000000000648: 0E444525
;   v_mul_legacy_f32  v32, v30, v30                       // 00000000064C: 0E403D1E
;   v_rcp_f32     v9, v9                                  // 000000000650: 7E125509
;   v_mul_legacy_f32  v31, v31, v31                       // 000000000654: 0E3E3F1F
;   v_fma_f32     v34, v34, v29, 1.0                      // 000000000658: D54B0022 03CA3B22
;   v_fma_f32     v29, v14, v29, 1.0                      // 000000000660: D54B001D 03CA3B0E
;   v_mul_legacy_f32  v32, v32, v32                       // 000000000668: 0E404120
;   v_mul_legacy_f32  v31, lit(0x40490fdb), v31           // 00000000066C: 0E3E3EFF 40490FDB
;   v_mul_legacy_f32  v29, v34, v29                       // 000000000674: 0E3A3B22
;   v_mul_legacy_f32  v30, v32, v30                       // 000000000678: 0E3C3D20
;   v_mul_legacy_f32  v34, s2, v36                        // 00000000067C: 0E444802
;   v_max_f32     v31, lit(0x358637bd), v31               // 000000000680: 203E3EFF 358637BD
;   v_mul_legacy_f32  v35, v29, v20                       // 000000000688: 0E46291D
;   v_mul_legacy_f32  v37, v29, v21                       // 00000000068C: 0E4A2B1D
;   v_fma_f32     v32, v30, v5, v23                       // 000000000690: D54B0020 045E0B1E
;   v_rcp_f32     v31, v31                                // 000000000698: 7E3E551F
;   v_mul_legacy_f32  v29, v29, v22                       // 00000000069C: 0E3A2D1D
;   v_mul_legacy_f32  v31, v33, v31                       // 0000000006A0: 0E3E3F21
;   v_fma_f32     v33, v30, v6, v24                       // 0000000006A4: D54B0021 04620D1E
;   v_fma_f32     v30, v30, v7, v25                       // 0000000006AC: D54B001E 04660F1E
;   v_mul_legacy_f32  v9, v9, v31                         // 0000000006B4: 0E123F09
;   v_mul_legacy_f32  v31, s1, v36                        // 0000000006B8: 0E3E4801
;   v_fmac_f32    v35, v9, v32                            // 0000000006BC: 56464109
;   v_fmac_f32    v37, v9, v33                            // 0000000006C0: 564A4309
;   v_fmac_f32    v29, v9, v30                            // 0000000006C4: 563A3D09
;   v_mul_legacy_f32  v9, s8, s8                          // 0000000006C8: D5070009 00001008
;   v_fmac_f32    v26, v11, v35                           // 0000000006D0: 5634470B
;   v_fmac_f32    v27, v31, v37                           // 0000000006D4: 56364B1F
;   v_fmac_f32    v28, v34, v29                           // 0000000006D8: 56383B22
;   v_fmac_f32    v9, s9, s9                              // 0000000006DC: D52B0009 00001209
;   v_fmac_f32    v9, s10, s10                            // 0000000006E4: D52B0009 0000140A
;   v_rsq_f32     v9, v9                                  // 0000000006EC: 7E125D09
;   v_fma_f32     v32, -s9, v9, v18                       // 0000000006F0: D54B0020 244A1209
;   v_fma_f32     v31, -s8, v9, v17                       // 0000000006F8: D54B001F 24461208
;   v_mul_legacy_f32  v11, v9, -s8                        // 000000000700: D507000B 40001109
;   v_mul_legacy_f32  v29, v9, -s9                        // 000000000708: D507001D 40001309
;   v_mul_legacy_f32  v30, v9, -s10                       // 000000000710: D507001E 40001509
;   v_mul_legacy_f32  v33, v32, v32                       // 000000000718: 0E424120
;   v_fma_f32     v9, -s10, v9, v15                       // 00000000071C: D54B0009 243E120A
;   v_fmac_f32    v33, v31, v31                           // 000000000724: 56423F1F
;   v_fmac_f32    v33, v9, v9                             // 000000000728: 56421309
;   v_rsq_f32     v33, v33                                // 00000000072C: 7E425D21
;   v_mul_legacy_f32  v31, v31, v33                       // 000000000730: 0E3E431F
;   v_mul_legacy_f32  v32, v32, v33                       // 000000000734: 0E404320
;   v_mul_legacy_f32  v9, v9, v33                         // 000000000738: 0E124309
;   v_mul_legacy_f32  v33, v16, v29                       // 00000000073C: 0E423B10
;   v_mul_legacy_f32  v29, v29, v32                       // 000000000740: 0E3A411D
;   v_fmac_f32    v33, v12, v11                           // 000000000744: 5642170C
;   v_fmac_f32    v29, v11, v31                           // 000000000748: 563A3F0B
;   v_fmac_f32    v33, v19, v30                           // 00000000074C: 56423D13
;   v_fmac_f32    v29, v30, v9                            // 000000000750: 563A131E
;   v_mul_legacy_f32  v30, v16, v32                       // 000000000754: 0E3C4110
;   v_sub_f32     v32, 1.0, v33 clamp                     // 000000000758: D5048020 000242F2
;   v_max_f32     v34, v33, v33 clamp                     // 000000000760: D5108022 00024321
;   v_max_f32     v11, v29, v29 clamp                     // 000000000768: D510800B 00023B1D
;   v_fmac_f32    v30, v12, v31                           // 000000000770: 563C3F0C
;   v_mul_legacy_f32  v33, v32, v32                       // 000000000774: 0E424120
;   v_add_f32     v31, v10, v10                           // 000000000778: 063E150A
;   v_sub_f32     v29, 1.0, v29 clamp                     // 00000000077C: D504801D 00023AF2
;   v_fmac_f32    v30, v19, v9 clamp                      // 000000000784: D52B801E 00021313
;   v_mul_legacy_f32  v9, v11, v11                        // 00000000078C: 0E12170B
;   v_mul_legacy_f32  v33, v33, v33                       // 000000000790: 0E424321
;   v_fma_f32     v11, -v11, v11, 1.0                     // 000000000794: D54B000B 23CA170B
;   v_mul_legacy_f32  v30, v30, v30                       // 00000000079C: 0E3C3D1E
;   v_fma_f32     v31, v9, v31, -0.5                      // 0000000007A0: D54B001F 03C63F09
;   v_mul_legacy_f32  v32, v33, v32                       // 0000000007A8: 0E404121
;   v_fma_f32     v14, v14, v31, 1.0                      // 0000000007AC: D54B000E 03CA3F0E
;   v_fma_f32     v32, v32, v31, 1.0                      // 0000000007B4: D54B0020 03CA3F20
;   v_mul_legacy_f32  v31, v10, v10                       // 0000000007BC: 0E3E150A
;   v_mul_legacy_f32  v14, v32, v14                       // 0000000007C0: 0E1C1D20
;   v_fma_f32     v31, v31, v31, -1.0                     // 0000000007C4: D54B001F 03CE3F1F
;   v_mul_legacy_f32  v32, v14, v21                       // 0000000007CC: 0E402B0E
;   v_fma_f32     v30, v30, v31, 1.0                      // 0000000007D0: D54B001E 03CA3F1E
;   v_mul_legacy_f32  v31, v10, v10                       // 0000000007D8: 0E3E150A
;   v_mul_legacy_f32  v30, v30, v30                       // 0000000007DC: 0E3C3D1E
;   v_mul_legacy_f32  v31, v31, v31                       // 0000000007E0: 0E3E3F1F
;   v_mul_legacy_f32  v30, lit(0x40490fdb), v30           // 0000000007E4: 0E3C3CFF 40490FDB
;   v_max_f32     v30, lit(0x358637bd), v30               // 0000000007EC: 203C3CFF 358637BD
;   v_rcp_f32     v30, v30                                // 0000000007F4: 7E3C551E
;   v_mul_legacy_f32  v30, v31, v30                       // 0000000007F8: 0E3C3D1F
;   v_mul_legacy_f32  v31, v29, v29                       // 0000000007FC: 0E3E3B1D
;   v_mul_legacy_f32  v31, v31, v31                       // 000000000800: 0E3E3F1F
;   v_mul_legacy_f32  v29, v31, v29                       // 000000000804: 0E3A3B1F
;   v_mul_legacy_f32  v31, v14, v20                       // 000000000808: 0E3E290E
;   v_mul_legacy_f32  v14, v14, v22                       // 00000000080C: 0E1C2D0E
;   v_fma_f32     v5, v29, v5, v23                        // 000000000810: D54B0005 045E0B1D
;   v_fma_f32     v6, v29, v6, v24                        // 000000000818: D54B0006 04620D1D
;   v_fma_f32     v7, v29, v7, v25                        // 000000000820: D54B0007 04660F1D
;   v_mul_legacy_f32  v29, v10, v10                       // 000000000828: 0E3A150A
;   v_mul_legacy_f32  v29, v29, v29                       // 00000000082C: 0E3A3B1D
;   v_mul_legacy_f32  v29, lit(0x3e800000), v29           // 000000000830: 0E3A3AFF 3E800000
;   v_fmac_f32    v9, v29, v11                            // 000000000838: 5612171D
;   v_mul_legacy_f32  v29, s5, v34                        // 00000000083C: 0E3A4405
;   v_mul_legacy_f32  v11, s4, v34                        // 000000000840: 0E164404
;   v_rcp_f32     v9, v9                                  // 000000000844: 7E125509
;   v_mul_legacy_f32  v9, v9, v30                         // 000000000848: 0E123D09
;   v_mul_legacy_f32  v30, s6, v34                        // 00000000084C: 0E3C4406
;   v_fmac_f32    v32, v9, v6                             // 000000000850: 56400D09
;   v_fmac_f32    v14, v9, v7                             // 000000000854: 561C0F09
;   v_interp_p1_f32  v7, v0, attr3.w                      // 000000000858: C81C0F00
;   v_fmac_f32    v31, v9, v5                             // 00000000085C: 563E0B09
;   v_cubesc_f32  v6, v12, v16, v19                       // 000000000860: D5450006 044E210C
;   v_fmac_f32    v27, v29, v32                           // 000000000868: 5636411D
;   v_interp_p1_f32  v29, v0, attr3.y                     // 00000000086C: C8740D00
;   v_fmac_f32    v28, v30, v14                           // 000000000870: 56381D1E
;   v_interp_p1_f32  v30, v0, attr3.x                     // 000000000874: C8780C00
;   v_interp_p1_f32  v0, v0, attr3.z                      // 000000000878: C8000E00
;   v_interp_p2_f32  v7, v1, attr3.w                      // 00000000087C: C81D0F01
;   v_interp_p2_f32  v29, v1, attr3.y                     // 000000000880: C8750D01
;   v_fmac_f32    v26, v11, v31                           // 000000000884: 56343F0B
;   v_interp_p2_f32  v30, v1, attr3.x                     // 000000000888: C8790C01
;   v_interp_p2_f32  v0, v1, attr3.z                      // 00000000088C: C8010E01
;   v_cubema_f32  v1, v12, v16, v19                       // 000000000890: D5470001 044E210C
;   v_mov_b32     v9, lit(0x3fc00000)                     // 000000000898: 7E1202FF 3FC00000
;   v_rcp_f32     v14, v7                                 // 0000000008A0: 7E1C5507
;   v_cubeid_f32  v7, v12, v16, v19                       // 0000000008A4: D5440007 044E210C
;   v_rcp_f32     v11, abs(v1)                            // 0000000008AC: D5AA010B 00000101
;   v_mad_f32     v5, v6, v11, v9                         // 0000000008B4: D5410005 04261706
;   v_cubetc_f32  v6, v12, v16, v19                       // 0000000008BC: D5460006 044E210C
;   v_mad_f32     v6, v6, v11, v9                         // 0000000008C4: D5410006 04261706
;   s_and_b64     exec, exec, s[22:23]                    // 0000000008CC: 87FE167E
;   v_fma_f32     v1, -v17, v12, -v13                     // 0000000008D0: D54B0001 A4361911
;   s_buffer_load_dwordx4  s[0:3], s[16:19], 0x000178     // 0000000008D8: F4280008 FA000178
;   image_sample  v[5:7], v[5:7], s[32:39], s[56:59] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 0000000008E0: F0800718 01C80505
;   v_fma_f32     v0, v0, v14, -v4                        // 0000000008E8: D54B0000 84121D00
;   v_mul_legacy_f32  v4, v30, v14                        // 0000000008F0: 0E081D1E
;   v_fmac_f32    v1, -v15, v19 mul:2                     // 0000000008F4: D52B0001 2802270F
;   v_fma_f32     v4, v4, 0.5, 0.5                        // 0000000008FC: D54B0004 03C1E104
;   v_fma_f32     v11, -v1, v12, -v17                     // 000000000904: D54B000B A4461901
;   v_fma_f32     v12, -v1, v16, -v18                     // 00000000090C: D54B000C A44A2101
;   v_fma_f32     v1, -v1, v19, -v15                      // 000000000914: D54B0001 A43E2701
;   v_cubema_f32  v13, v11, v12, v1                       // 00000000091C: D547000D 0406190B
;   v_cubesc_f32  v16, v11, v12, v1                       // 000000000924: D5450010 0406190B
;   v_cubetc_f32  v18, v11, v12, v1                       // 00000000092C: D5460012 0406190B
;   v_cubeid_f32  v12, v11, v12, v1                       // 000000000934: D544000C 0406190B
;   s_waitcnt     lgkmcnt(0)                              // 00000000093C: BF8CC07F
;   v_cvt_f32_i32  v15, s0                                // 000000000940: 7E1E0A00
;   v_rcp_f32     v19, abs(v13)                           // 000000000944: D5AA0113 0000010D
;   v_mul_legacy_f32  v1, v29, v14                        // 00000000094C: 0E021D1D
;   v_fma_f32     v2, s1, v4, -v2                         // 000000000950: D54B0002 840A0801
;   v_mov_b32     v13, 8                                  // 000000000958: 7E1A0288
;   v_mul_legacy_f32  v10, v15, v10                       // 00000000095C: 0E14150F
;   s_buffer_load_dword  s0, s[16:19], 0x00016c           // 000000000960: F4200008 FA00016C
;   v_fma_f32     v1, v1, -0.5, 0.5                       // 000000000968: D54B0001 03C1E301
;   v_mad_f32     v11, v16, v19, v9                       // 000000000970: D541000B 04262710
;   v_mac_f32     v9, v18, v19                            // 000000000978: 3E122712
;   v_fma_f32     v1, s2, v1, -v3                         // 00000000097C: D54B0001 840E0202
;   image_sample_l  v[9:11], [v11,v9,v12,v10], s[24:31], s[56:59] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 000000000984: F090071A 01C6090B 000A0C09
;   v_mul_legacy_f32  v12, lit(0x3c000000), abs(v0)       // 000000000990: D507020C 000200FF 3C000000
;   v_mul_legacy_f32  v4, lit(0x38000000), abs(v1)        // 00000000099C: D5070204 000202FF 38000000
;   v_lshrrev_b32  v0, 20, v0                             // 0000000009A8: 2C000094
;   v_lshrrev_b32  v1, 22, v1                             // 0000000009AC: 2C020296
;   v_med3_f32    v3, v12, 0, lit(0x3bffe000)             // 0000000009B0: D5570003 03FD010C 3BFFE000
;   v_mul_legacy_f32  v12, lit(0x38000000), abs(v2)       // 0000000009BC: D507020C 000204FF 38000000
;   v_med3_f32    v4, v4, 0, lit(0x3bffe000)              // 0000000009C8: D5570004 03FD0104 3BFFE000
;   v_lshrrev_b32  v2, 22, v2                             // 0000000009D4: 2C040496
;   v_cvt_f16_f32  v3, v3                                 // 0000000009D8: 7E061503
;   v_med3_f32    v12, v12, 0, lit(0x3bffe000)            // 0000000009DC: D557000C 03FD010C 3BFFE000
;   v_cvt_f16_f32  v4, v4                                 // 0000000009E8: 7E081504
;   v_add_nc_u32  v3, 2, v3                               // 0000000009EC: 4A060682
;   v_cvt_f16_f32  v12, v12                               // 0000000009F0: 7E18150C
;   v_add_nc_u32  v4, v4, v13 src0_sel:WORD_0             // 0000000009F4: 4A081AF9 06040604
;   v_lshrrev_b32  v3, 2, v3                              // 0000000009FC: 2C060682
;   v_lshrrev_b32  v4, 4, v4                              // 000000000A00: 2C080884
;   v_and_or_b32  v0, v0, lit(0x00000800), v3             // 000000000A04: D7710000 040DFF00 00000800
;   v_add_nc_u32  v3, v12, v13 src0_sel:WORD_0            // 000000000A10: 4A061AF9 0604060C
;   v_and_or_b32  v1, v1, lit(0x00000200), v4             // 000000000A18: D7710001 0411FF01 00000200
;   v_lshlrev_b32  v0, 20, v0                             // 000000000A24: 34000094
;   v_lshrrev_b32  v3, 4, v3                              // 000000000A28: 2C060684
;   v_lshlrev_b32  v1, 10, v1                             // 000000000A2C: 3402028A
;   v_and_or_b32  v2, v2, lit(0x00000200), v3             // 000000000A30: D7710002 040DFF02 00000200
;   s_waitcnt     vmcnt(1)                                // 000000000A3C: BF8C3F71
;   v_fmac_f32    v26, v5, v20                            // 000000000A40: 56342905
;   v_fmac_f32    v27, v6, v21                            // 000000000A44: 56362B06
;   v_fmac_f32    v28, v7, v22                            // 000000000A48: 56382D07
;   v_or3_b32     v5, v2, v1, v0                          // 000000000A4C: D7720005 04020302
;   s_waitcnt     vmcnt(0)                                // 000000000A54: BF8C3F70
;   v_fmac_f32    v26, v9, v23                            // 000000000A58: 56342F09
;   v_fmac_f32    v27, v10, v24                           // 000000000A5C: 5636310A
;   v_fmac_f32    v28, v11, v25                           // 000000000A60: 5638330B
;   s_waitcnt     lgkmcnt(0)                              // 000000000A64: BF8CC07F
;   v_mul_legacy_f32  v9, s0, v8                          // 000000000A68: 0E121000
;   s_nop         0x0000                                  // 000000000A6C: BF800000
;   s_nop         0x0000                                  // 000000000A70: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v26, v27                     // 000000000A74: 5E00371A
;   v_cvt_pkrtz_f16_f32  v1, v28, v9                      // 000000000A78: 5E02131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000A7C: F800040F 00000100
;   s_nop         0x0000                                  // 000000000A84: BF800000
;   s_nop         0x0000                                  // 000000000A88: BF800000
;   v_cvt_pkrtz_f16_f32  v2, v5, v5                       // 000000000A8C: 5E040B05
;   s_nop         0x0000                                  // 000000000A90: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000A94: F8001C13 00000002
;   s_endpgm                                              // 000000000A9C: BF810000
;   s_code_end                                            // 000000000AA0: BF9F0000
;   s_code_end                                            // 000000000AA4: BF9F0000
;   s_code_end                                            // 000000000AA8: BF9F0000
;   s_code_end                                            // 000000000AAC: BF9F0000
;   s_code_end                                            // 000000000AB0: BF9F0000
;   s_code_end                                            // 000000000AB4: BF9F0000
;   s_code_end                                            // 000000000AB8: BF9F0000
;   s_code_end                                            // 000000000ABC: BF9F0000
;   s_code_end                                            // 000000000AC0: BF9F0000
;   s_code_end                                            // 000000000AC4: BF9F0000
;   s_code_end                                            // 000000000AC8: BF9F0000
;   s_code_end                                            // 000000000ACC: BF9F0000
;   s_code_end                                            // 000000000AD0: BF9F0000
;   s_code_end                                            // 000000000AD4: BF9F0000
;   s_code_end                                            // 000000000AD8: BF9F0000
;   s_code_end                                            // 000000000ADC: BF9F0000
;   s_code_end                                            // 000000000AE0: BF9F0000
;   s_code_end                                            // 000000000AE4: BF9F0000
;   s_code_end                                            // 000000000AE8: BF9F0000
;   s_code_end                                            // 000000000AEC: BF9F0000
;   s_code_end                                            // 000000000AF0: BF9F0000
;   s_code_end                                            // 000000000AF4: BF9F0000
;   s_code_end                                            // 000000000AF8: BF9F0000
;   s_code_end                                            // 000000000AFC: BF9F0000
;   s_code_end                                            // 000000000B00: BF9F0000
;   s_code_end                                            // 000000000B04: BF9F0000
;   s_code_end                                            // 000000000B08: BF9F0000
;   s_code_end                                            // 000000000B0C: BF9F0000
;   s_code_end                                            // 000000000B10: BF9F0000
;   s_code_end                                            // 000000000B14: BF9F0000
;   s_code_end                                            // 000000000B18: BF9F0000
;   s_code_end                                            // 000000000B1C: BF9F0000
;   s_code_end                                            // 000000000B20: BF9F0000
;   s_code_end                                            // 000000000B24: BF9F0000
;   s_code_end                                            // 000000000B28: BF9F0000
;   s_code_end                                            // 000000000B2C: BF9F0000
;   s_code_end                                            // 000000000B30: BF9F0000
;   s_code_end                                            // 000000000B34: BF9F0000
;   s_code_end                                            // 000000000B38: BF9F0000
;   s_code_end                                            // 000000000B3C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 76, resource_class: 0 (SRV), index: 5, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[1] {  instr_offset: 84, resource_class: 0 (SRV), index: 4, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[2] {  instr_offset: 92, resource_class: 0 (SRV), index: 2, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 100, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[4] {  instr_offset: 108, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[5] {  instr_offset: 116, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[6] {  instr_offset: 124, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 8
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 2
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 4
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 5
;       allocated_offset : 13
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[5] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 14
;       orig_rootsig_slot_id: 6
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[6] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 15
;       orig_rootsig_slot_id: 7
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[7] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 38
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSTexturedVelocity)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 5
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 5
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 1794 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 1
;     pos_y_float_ena: 1
;     pos_z_float_ena: 1
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 255 {
;     output0_enable: 15
;     output1_enable: 15
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 667
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001090,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off vm             // 000000000010: F8001090 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8000001,
;        0x1a,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v26, off, off, off                // 000000000010: F8000001 0000001A
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8000003,
;        0x1b1a,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v26, v27, off, off                // 000000000010: F8000003 00001B1A
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8000003,
;        0x91a,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v26, v9, off, off                 // 000000000010: F8000003 0000091A
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e00371a,
;        0x5e02131c,
;        0xf800040f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v26, v27                     // 000000000008: 5E00371A
;   v_cvt_pkrtz_f16_f32  v1, v28, v9                      // 00000000000C: 5E02131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000010: F800040F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x2371a,
;        0xd7690001,
;        0x2131c,
;        0xf800040f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v26, v27                    // 000000000000: D7690000 0002371A
;   v_cvt_pknorm_u16_f32  v1, v28, v9                     // 000000000008: D7690001 0002131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000010: F800040F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x2371a,
;        0xd7680001,
;        0x2131c,
;        0xf800040f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v26, v27                    // 000000000000: D7680000 0002371A
;   v_cvt_pknorm_i16_f32  v1, v28, v9                     // 000000000008: D7680001 0002131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000010: F800040F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x2371a,
;        0xd76a0001,
;        0x2131c,
;        0xf800040f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v26, v27                        // 000000000000: D76A0000 0002371A
;   v_cvt_pk_u16_u32  v1, v28, v9                         // 000000000008: D76A0001 0002131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000010: F800040F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x2371a,
;        0xd76b0001,
;        0x2131c,
;        0xf800040f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v26, v27                        // 000000000000: D76B0000 0002371A
;   v_cvt_pk_i16_i32  v1, v28, v9                         // 000000000008: D76B0001 0002131C
;   exp           mrt0, v0, v0, v1, v1 compr              // 000000000010: F800040F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800000f,
;        0x91c1b1a,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v26, v27, v28, v9                 // 000000000010: F800000F 091C1B1A
; end
;      }
;   }
;   export_patch[1] {
;     offset: 673
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001811,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v5, off, off, off done vm         // 000000000010: F8001811 00000005
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001811,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v5, off, off, off done vm         // 000000000010: F8001811 00000005
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001811,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v5, off, off, off done vm         // 000000000010: F8001811 00000005
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e040b05,
;        0xbf800000,
;        0xf8001c13,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v2, v5, v5                       // 000000000008: 5E040B05
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000010: F8001C13 00000002
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xbf800000,
;        0xd7690002,
;        0x20b05,
;        0xbf800000,
;        0xf8001c13,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   v_cvt_pknorm_u16_f32  v2, v5, v5                      // 000000000004: D7690002 00020B05
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000010: F8001C13 00000002
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xbf800000,
;        0xd7680002,
;        0x20b05,
;        0xbf800000,
;        0xf8001c13,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   v_cvt_pknorm_i16_f32  v2, v5, v5                      // 000000000004: D7680002 00020B05
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000010: F8001C13 00000002
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xbf800000,
;        0xd76a0002,
;        0x20b05,
;        0xbf800000,
;        0xf8001c13,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   v_cvt_pk_u16_u32  v2, v5, v5                          // 000000000004: D76A0002 00020B05
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000010: F8001C13 00000002
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xbf800000,
;        0xd76b0002,
;        0x20b05,
;        0xbf800000,
;        0xf8001c13,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   v_cvt_pk_i16_i32  v2, v5, v5                          // 000000000004: D76B0002 00020B05
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v2, v2, off, off done compr vm    // 000000000010: F8001C13 00000002
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001811,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt1, v5, off, off, off done vm         // 000000000010: F8001811 00000005
; end
;      }
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=38,NumSGPR=62,LDS=0,Scratch=0,WaveSize=64,Occupancy=12
; VAlu:414,SAlu:39,VMem:5,SMem:12,LDS:15,WaitCntOnVMem:4,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char PBREffect_PSTexturedVelocity[] = {
  0x44, 0x58, 0x42, 0x43, 0xb3, 0xaa, 0x96, 0xb0, 0x98, 0xba, 0xd4, 0x8c,
  0x38, 0x92, 0xaf, 0x10, 0x52, 0x51, 0x10, 0x41, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x24, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00,
  0xdc, 0x03, 0x00, 0x00, 0x8c, 0x05, 0x00, 0x00, 0x1c, 0x06, 0x00, 0x00,
  0x38, 0x06, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xe4, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x54, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x3c, 0x02, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x2b, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x50,
  0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56, 0x65, 0x6c,
  0x6f, 0x63, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x05, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x41, 0x10,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x78, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x88, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x82, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
  0x65, 0x64, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x3f, 0x15, 0xee, 0xb8, 0xe3, 0x32,
  0x0a, 0xbe, 0x81, 0xed, 0xbe, 0xe0, 0x03, 0xf3, 0x44, 0x58, 0x49, 0x4c,
  0xc4, 0x1d, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x71, 0x07, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x88, 0x13, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xa0, 0x13, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x14, 0x14, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x24, 0x14, 0x00, 0x00,
  0x90, 0x09, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb4, 0x1d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe8, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x88, 0x13, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xdf, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x97, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xe4, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0x05, 0x41, 0x4a, 0x41, 0x06,
  0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c, 0xe4, 0xdc,
  0x34, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0xaf, 0x84, 0xb4, 0x12, 0x93,
  0x5f, 0xdc, 0x36, 0x2a, 0x86, 0x61, 0x18, 0x08, 0x2a, 0xee, 0x19, 0x2e,
  0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0x43, 0xa0, 0x19, 0x16, 0x02, 0x05, 0x51,
  0x61, 0x20, 0x42, 0x92, 0x86, 0x61, 0x18, 0x08, 0x82, 0x18, 0x68, 0x2a,
  0xc6, 0x40, 0x0c, 0xc3, 0x30, 0x50, 0x55, 0x88, 0x81, 0x18, 0x06, 0xba,
  0x4a, 0x31, 0x10, 0xc3, 0x30, 0x50, 0x56, 0x06, 0x82, 0x18, 0x68, 0x3b,
  0x6a, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89,
  0xc9, 0x47, 0x6e, 0x1b, 0x11, 0x04, 0x41, 0x10, 0x85, 0xe8, 0x08, 0x89,
  0x20, 0xef, 0xa8, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8,
  0x62, 0x25, 0x26, 0xbf, 0xb8, 0x6d, 0x44, 0x0c, 0xc3, 0x30, 0x14, 0x02,
  0x24, 0x24, 0x82, 0xc2, 0x39, 0x82, 0xa0, 0x18, 0x12, 0x51, 0x10, 0xc4,
  0x48, 0xe4, 0x40, 0xc0, 0x30, 0x02, 0x31, 0xcc, 0xd4, 0x06, 0xe3, 0xc0,
  0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50,
  0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0,
  0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40,
  0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x02, 0x62, 0x26, 0x31, 0x18, 0x07,
  0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07,
  0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87,
  0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87,
  0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03,
  0x3f, 0x40, 0xc2, 0x89, 0x52, 0x3a, 0x8c, 0x30, 0x0c, 0x33, 0xb5, 0xc1,
  0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03,
  0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81,
  0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03,
  0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0xc1, 0x1c, 0xf8, 0x01,
  0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3,
  0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c,
  0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c,
  0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f,
  0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c,
  0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe6, 0xc0, 0x0f,
  0xc0, 0xc0, 0x0f, 0x90, 0xb0, 0xb2, 0xd4, 0xce, 0x44, 0x06, 0xe3, 0xc0,
  0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x30, 0x0a, 0xf5, 0x20, 0x0e, 0xe5, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x73, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x28, 0x58, 0xe9, 0x4d, 0x82, 0x33, 0x07, 0xd6,
  0xa3, 0x0e, 0x47, 0x9a, 0x16, 0x00, 0x73, 0xa8, 0xc9, 0xe7, 0x9c, 0x46,
  0x9a, 0x80, 0x66, 0x92, 0x90, 0xb3, 0xc6, 0x72, 0x1c, 0xcb, 0xf2, 0x3a,
  0x0c, 0x03, 0x31, 0x0c, 0x34, 0xdf, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e,
  0x0b, 0x30, 0xcf, 0x42, 0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x08, 0xaa,
  0x53, 0x83, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb9, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x93, 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x67, 0x02, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0xcf, 0x06, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x0f, 0x08, 0x80, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x61, 0x00, 0x04, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0c, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x64,
  0x00, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59,
  0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x0c, 0x0a,
  0xa1, 0x14, 0x0a, 0xd1, 0xa0, 0x1c, 0xca, 0x83, 0x8a, 0x92, 0x18, 0x01,
  0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0x29, 0x85, 0x12, 0x20, 0x75, 0x06,
  0x80, 0xdc, 0x19, 0x00, 0x82, 0x67, 0x00, 0x88, 0x9e, 0x01, 0x20, 0x7b,
  0x06, 0x80, 0xee, 0xb1, 0x34, 0xac, 0x78, 0x1e, 0x00, 0x38, 0x8e, 0x03,
  0x38, 0x8e, 0x03, 0x00, 0x00, 0x00, 0x80, 0x20, 0x08, 0x80, 0x20, 0x08,
  0x02, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x40,
  0x13, 0x04, 0x22, 0xda, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x90, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x4c, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x6a, 0x40, 0x06, 0x04, 0x26, 0x08, 0x04, 0x35, 0x41, 0x20,
  0xaa, 0x0d, 0xc2, 0x11, 0x6d, 0x48, 0x0e, 0xe7, 0x39, 0x0e, 0x03, 0x3a,
  0xa4, 0x09, 0x82, 0x1b, 0x94, 0xc1, 0x86, 0xc4, 0xa0, 0x9e, 0xc3, 0x30,
  0xa0, 0x43, 0xda, 0x90, 0x40, 0xd4, 0x73, 0x40, 0x06, 0x74, 0x48, 0x13,
  0x04, 0xc2, 0x9a, 0x20, 0xc0, 0x81, 0x19, 0x4c, 0x10, 0x88, 0x6b, 0x82,
  0x40, 0x60, 0x1b, 0x92, 0x0b, 0x7b, 0x8e, 0xcc, 0xd0, 0x0e, 0x69, 0x43,
  0x92, 0x61, 0xcf, 0xa1, 0x19, 0xda, 0x21, 0x6d, 0x28, 0xa6, 0xca, 0xda,
  0xb8, 0x09, 0x02, 0x1d, 0x9c, 0xc1, 0x04, 0x81, 0xc8, 0x36, 0x20, 0x87,
  0xf7, 0x1c, 0x87, 0xf1, 0x01, 0x1b, 0x02, 0x30, 0x98, 0x20, 0xd8, 0x01,
  0x1a, 0x6c, 0x40, 0x0e, 0x31, 0x78, 0x8e, 0xc3, 0x38, 0x80, 0x0d, 0x88,
  0x21, 0x06, 0xcf, 0x61, 0x18, 0x07, 0xb0, 0x41, 0x18, 0x03, 0x32, 0xd8,
  0x40, 0x74, 0x40, 0x18, 0x94, 0xc1, 0x04, 0xe1, 0x0e, 0xd2, 0x60, 0x43,
  0x70, 0x06, 0x13, 0x04, 0x01, 0xa0, 0x04, 0x35, 0x45, 0x55, 0x86, 0x47,
  0x57, 0x27, 0x57, 0x46, 0x66, 0x55, 0xc6, 0xf6, 0x36, 0x96, 0x46, 0x97,
  0x47, 0x84, 0xaa, 0x08, 0x6b, 0xe8, 0xe9, 0x49, 0x8a, 0x68, 0x82, 0x50,
  0x70, 0x13, 0x84, 0xa2, 0xdb, 0x10, 0x1c, 0x13, 0x84, 0xc2, 0xdb, 0x20,
  0x5c, 0xd7, 0x86, 0xe5, 0x58, 0x03, 0x36, 0x68, 0x03, 0x37, 0x78, 0x03,
  0xe3, 0x0d, 0x8e, 0x36, 0x80, 0x83, 0x0d, 0x81, 0x31, 0x41, 0x28, 0xbe,
  0x09, 0x02, 0xa1, 0x6d, 0x10, 0x2e, 0x3a, 0xd8, 0xb0, 0x18, 0x6b, 0xc0,
  0x06, 0x6d, 0x20, 0x07, 0x6f, 0x60, 0xcc, 0x81, 0xd1, 0x06, 0x75, 0xb0,
  0x21, 0x80, 0x26, 0x08, 0x05, 0x18, 0x6c, 0x58, 0xa0, 0x35, 0x60, 0x83,
  0x36, 0xb8, 0x83, 0x37, 0x30, 0xf0, 0x00, 0x6a, 0x83, 0x3a, 0x60, 0x31,
  0xf4, 0xc4, 0xf4, 0x24, 0xb5, 0x61, 0xb9, 0xf4, 0x80, 0x0d, 0xda, 0xc0,
  0x0d, 0xde, 0xc0, 0x98, 0x83, 0xab, 0x0d, 0x00, 0x2e, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1b, 0x96, 0x8c, 0x0f,
  0xd8, 0x00, 0x0f, 0xdc, 0x60, 0x0e, 0x8c, 0x39, 0xc8, 0xda, 0xa0, 0x0e,
  0x36, 0x04, 0xd9, 0x04, 0x81, 0xd8, 0x36, 0x08, 0xd7, 0x1f, 0x6c, 0x58,
  0xb4, 0x35, 0x60, 0x83, 0x36, 0xf0, 0x83, 0x37, 0x30, 0xe6, 0x40, 0x6b,
  0x03, 0x50, 0xd8, 0x60, 0xc4, 0x81, 0x1d, 0xe4, 0xc1, 0x1e, 0xf4, 0x41,
  0x28, 0x30, 0x99, 0xb2, 0xfa, 0xa2, 0x0a, 0x93, 0x3b, 0x2b, 0xa3, 0x9b,
  0x20, 0x14, 0x61, 0xb0, 0x61, 0x39, 0x46, 0x81, 0x0d, 0x48, 0xc1, 0x0d,
  0xda, 0xc0, 0x98, 0x83, 0xa3, 0x0d, 0x40, 0x61, 0x82, 0x50, 0x88, 0xc1,
  0x04, 0xa1, 0x18, 0x83, 0x0d, 0xc2, 0x65, 0x6c, 0x58, 0x8c, 0x51, 0x30,
  0x05, 0x52, 0x90, 0x83, 0x36, 0x30, 0x4e, 0xc1, 0x68, 0x03, 0x54, 0xd8,
  0x20, 0x94, 0x42, 0x2a, 0x6c, 0x18, 0x44, 0x41, 0x15, 0x80, 0x0d, 0x45,
  0x1a, 0xa8, 0xc1, 0x2a, 0x98, 0x01, 0xd0, 0x0a, 0x4f, 0xec, 0x0d, 0xcf,
  0x65, 0xec, 0xad, 0x0d, 0x2e, 0x8d, 0xad, 0x4c, 0xce, 0xe5, 0x0d, 0x8e,
  0x2e, 0xed, 0xcd, 0x6d, 0x6e, 0x4a, 0x20, 0x54, 0x61, 0x63, 0xb3, 0x6b,
  0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x10, 0x55, 0xc8, 0xf0,
  0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x47, 0x13,
  0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x41, 0x52,
  0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d,
  0xac, 0x8c, 0x6d, 0x4a, 0xc0, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b,
  0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0x94, 0x41, 0x1d, 0x32,
  0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba,
  0xb2, 0x29, 0xc1, 0x19, 0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93,
  0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xac, 0x02, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81,
  0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d,
  0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x41, 0x00, 0x00, 0x00, 0x06, 0x20, 0xa5, 0x6c, 0x4b, 0x5c, 0x13, 0x15,
  0x11, 0xc3, 0x4b, 0x2c, 0x8e, 0x80, 0x4c, 0x98, 0x21, 0x40, 0xc3, 0xe5,
  0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0xd6, 0xb0,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03,
  0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x0c, 0xdb, 0x70,
  0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50,
  0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb, 0xf6, 0x20, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x1d,
  0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d,
  0x04, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d,
  0xdb, 0x02, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x0b, 0x61, 0x00, 0x02, 0xf6,
  0xdd, 0x76, 0xeb, 0x7c, 0xb5, 0x6e, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3,
  0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x66, 0x00,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5, 0x6d,
  0x9b, 0x42, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b, 0x51,
  0x12, 0x15, 0xb1, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3,
  0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d,
  0xdb, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a,
  0x4d, 0x0f, 0x35, 0xf9, 0xc8, 0x6d, 0x9b, 0x83, 0x34, 0x5c, 0xbe, 0xf3,
  0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x56, 0xf0,
  0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d,
  0x09, 0xcd, 0x15, 0x38, 0x97, 0x6f, 0x12, 0xc3, 0xfd, 0x7f, 0xb7, 0x0d,
  0x61, 0x20, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x13, 0x04, 0x43, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x34, 0x8e, 0x00, 0x10,
  0x51, 0x28, 0x65, 0x51, 0x2c, 0xc5, 0x57, 0x26, 0x65, 0x54, 0x20, 0xc5,
  0x56, 0x2e, 0x05, 0x53, 0x84, 0x02, 0xe5, 0x53, 0x14, 0x85, 0x57, 0xa8,
  0x01, 0x33, 0x00, 0xc5, 0x55, 0x6e, 0x25, 0x57, 0x76, 0x25, 0x53, 0xa6,
  0x01, 0x34, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xde, 0x18, 0x01, 0x08,
  0x82, 0x20, 0xfa, 0x8d, 0x11, 0xf4, 0x7d, 0xcb, 0xe2, 0xda, 0x18, 0xc1,
  0xee, 0x8f, 0x32, 0x09, 0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x2f,
  0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xdc, 0x18, 0x01, 0x08, 0xe2, 0xff,
  0xdf, 0x8d, 0x11, 0xa8, 0x78, 0x7d, 0xca, 0xde, 0x18, 0x81, 0x8a, 0xd7,
  0xa7, 0xec, 0x0b, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11,
  0x80, 0x20, 0x08, 0xc2, 0xdf, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06,
  0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x8c, 0x00, 0x8c, 0x11, 0x80,
  0x20, 0x08, 0xe2, 0xdf, 0x0c, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x40, 0x06, 0xa2, 0x40, 0xd1, 0x81, 0x1e, 0xe4, 0xc1, 0x19,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x19, 0x8c, 0x42, 0x55, 0x07,
  0x7c, 0xb0, 0x07, 0x68, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x64,
  0x40, 0x0a, 0x96, 0x1d, 0xfc, 0xc1, 0x1f, 0xa4, 0xc1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x90, 0x41, 0x29, 0x5c, 0x77, 0x40, 0x0a, 0xa4, 0xa0,
  0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x40, 0x06, 0xa6, 0x80, 0xe1,
  0x01, 0x29, 0x90, 0xc2, 0x1a, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x19, 0x9c, 0x42, 0x66, 0x07, 0xa6, 0x60, 0x0a, 0x6c, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x64, 0x80, 0x0a, 0xda, 0x1d, 0x98, 0x82, 0x29,
  0xb4, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x90, 0x41, 0x2a, 0x6c,
  0x7a, 0x70, 0x0a, 0xa7, 0xe0, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xe0, 0x82, 0x28, 0x84, 0x02, 0x2a, 0xd8, 0xc1, 0x37, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x46, 0x2e, 0x8c, 0x82, 0x28, 0xa4, 0x82, 0x1e,
  0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xba, 0x40, 0x0a,
  0xa4, 0xa0, 0x0a, 0x78, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xec, 0x42, 0x29, 0xa0, 0xc2, 0x2a, 0xfc, 0x81, 0x18, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0xc1, 0x0b, 0xa6, 0x90, 0x0a, 0xac, 0xa0,
  0x07, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x2f, 0x9c,
  0x82, 0x2a, 0xb4, 0x02, 0x28, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xbe, 0x80, 0x0a, 0xaf, 0xe0, 0x0a, 0xa2, 0x50, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x42, 0x2a, 0xc0, 0xc2, 0x2b,
  0xf4, 0x81, 0x19, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x01, 0x0e,
  0xaa, 0x10, 0x0b, 0xb0, 0x30, 0x0a, 0x67, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x46, 0x38, 0xac, 0x42, 0x2c, 0xc4, 0x42, 0x29, 0xa0, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xe2, 0xc0, 0x0a, 0xb2, 0x20,
  0x0b, 0xa0, 0x90, 0x06, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x10, 0x06,
  0xb7, 0x60, 0x06, 0xcc, 0x2c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x49, 0x7c, 0x6c, 0x48, 0xe2, 0x63, 0x43,
  0x12, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x60, 0xce, 0xe1, 0x0d,
  0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c,
  0x73, 0x68, 0x83, 0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62,
  0x90, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x4c, 0xea, 0x80, 0x07,
  0x5c, 0xe6, 0x34, 0x60, 0x00, 0x06, 0xbf, 0xf0, 0x0b, 0x76, 0x00, 0x06,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0x26, 0x9c, 0x81, 0x7c, 0x4c,
  0x40, 0x03, 0xf9, 0x98, 0xb0, 0x06, 0xf0, 0x31, 0x81, 0x0d, 0xe0, 0x33,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x15, 0x3c, 0x94, 0x82, 0x10, 0x08,
  0x81, 0xa5, 0x41, 0x10, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70,
  0xe8, 0xa1, 0x14, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xea,
  0x41, 0x0f, 0xb6, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xec, 0x61,
  0x0f, 0xb6, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xee, 0x81, 0x0f,
  0xb6, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xf0, 0x81, 0x14, 0xbc,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xf2, 0xa1, 0x14, 0xbc, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xf4, 0xc1, 0x14, 0xbc, 0x11, 0x03,
  0x03, 0x00, 0x41, 0x30, 0x70, 0xf6, 0x01, 0x14, 0xbc, 0x11, 0x03, 0x03,
  0x00, 0x41, 0x30, 0x70, 0xf8, 0x21, 0x14, 0xbc, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x70, 0xfa, 0x21, 0x15, 0xc0, 0x60, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x1c, 0x7f, 0x50, 0x05, 0x30, 0xb0, 0x22, 0x91, 0x8f, 0x1d,
  0x89, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xca, 0x22, 0x1f, 0x4b, 0x1c, 0xf9,
  0x98, 0x10, 0xc4, 0xc7, 0x18, 0x48, 0x3e, 0xe6, 0x40, 0xf2, 0x31, 0x21,
  0x88, 0x8f, 0x05, 0x8f, 0x7c, 0xac, 0x78, 0xe4, 0x63, 0x42, 0x10, 0x1f,
  0x53, 0x22, 0xf9, 0x58, 0x41, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0xa6, 0x58,
  0xf2, 0x31, 0xc7, 0x92, 0x8f, 0x09, 0x41, 0x7c, 0xac, 0xd1, 0xe4, 0x63,
  0x0b, 0x27, 0x1f, 0x13, 0x82, 0xf8, 0x58, 0xf3, 0xc9, 0xc7, 0x28, 0x4f,
  0x3e, 0x26, 0x04, 0xf1, 0x31, 0x2b, 0x0c, 0xe4, 0x63, 0xd4, 0x18, 0xc8,
  0xc7, 0x84, 0x20, 0x3e, 0x06, 0x7d, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x4c, 0x26, 0xca, 0xc1, 0x43, 0x02, 0x7b, 0xc2, 0x40, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xd1, 0xc4, 0x39, 0x80, 0xc1,
  0x11, 0x98, 0x33, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xcc, 0x26, 0xd2, 0x41, 0x0c, 0x8c, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0x98, 0xb0, 0x48, 0x87, 0x62, 0x08, 0x8a, 0x21, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x27, 0x2c, 0xce, 0x21, 0x30, 0xcc, 0x0c, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0x4e, 0xb4, 0x43, 0x19,
  0x40, 0x81, 0x5d, 0x68, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0x78, 0xe2, 0x1d, 0xce, 0xe0, 0x09, 0xcc, 0x52, 0x03, 0xf9, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xe6, 0x13, 0xf1, 0x90, 0x06, 0x4e,
  0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x5a, 0xc4, 0x43, 0x31,
  0x04, 0xc5, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x93, 0x16,
  0xef, 0x10, 0x58, 0x70, 0xc8, 0xc7, 0x04, 0x43, 0x3e, 0x36, 0x14, 0xf2,
  0x31, 0xa9, 0x0f, 0xe4, 0x63, 0x41, 0x23, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc8, 0xcc, 0x22, 0x1f, 0xfc, 0xa0, 0x08, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x20, 0x3b, 0x0b, 0x7d, 0xe0, 0x83, 0x5c, 0x08, 0x8c,
  0x0a, 0x05, 0xf9, 0x58, 0x10, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x32, 0xb5, 0xe8, 0x07, 0x51, 0x40, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc8, 0xd6, 0xc2, 0x1f, 0x40, 0x81, 0x17, 0x02, 0xb3, 0x4a,
  0x41, 0x3e, 0x16, 0x54, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xcc, 0x2d, 0x42, 0xc2, 0x14, 0x96, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0xb7, 0x10, 0x09, 0x52, 0xf8, 0x85, 0x60, 0xc4, 0x60, 0x01,
  0x40, 0x10, 0x0c, 0x18, 0xbd, 0x10, 0x89, 0xa4, 0x08, 0x92, 0x22, 0x18,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x47, 0x2f, 0x40, 0x22, 0xb0, 0x60,
  0x91, 0x8f, 0x09, 0x88, 0x7c, 0x6c, 0x28, 0xe4, 0x33, 0x62, 0xf0, 0x00,
  0x20, 0x08, 0x06, 0x53, 0x5f, 0xac, 0x84, 0x3b, 0xb0, 0x43, 0x38, 0x80,
  0xc3, 0x3c, 0xcc, 0x83, 0x5c, 0xc8, 0x45, 0x4a, 0xcc, 0xc3, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x3c, 0x00,
  0x08, 0x82, 0xc1, 0x14, 0x1a, 0x2f, 0x41, 0x0f, 0xf0, 0x50, 0x0e, 0xe4,
  0x70, 0x0f, 0xf7, 0x60, 0x17, 0x76, 0xd1, 0x12, 0xf7, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xc0, 0x9c, 0xc6, 0x4b, 0x2c, 0x4a, 0xe2, 0x0b, 0xbd, 0xc0,
  0x0b, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0x9c, 0x86, 0x5c, 0x04,
  0x46, 0x10, 0xf2, 0x31, 0x42, 0x91, 0x8f, 0x15, 0x8a, 0x7c, 0xcc, 0x50,
  0xe4, 0x63, 0xcd, 0x10, 0x1f, 0x6b, 0x86, 0xf8, 0x58, 0x33, 0xc4, 0xc7,
  0x06, 0x46, 0x3e, 0x36, 0x34, 0xf2, 0xb1, 0xc1, 0x91, 0x8f, 0x4d, 0x2e,
  0x01, 0x1f, 0x9b, 0x5e, 0x02, 0x3e, 0x36, 0xc1, 0x04, 0x7c, 0x0c, 0x1a,
  0xe4, 0x63, 0xd1, 0x20, 0x1f, 0x93, 0x06, 0xf9, 0xd8, 0x50, 0x13, 0xf0,
  0xb1, 0xc1, 0x26, 0xe0, 0x63, 0xc3, 0x4d, 0xc0, 0xc7, 0x06, 0x4c, 0x3e,
  0x36, 0x64, 0xf2, 0xb1, 0x41, 0x93, 0xcf, 0x2c, 0x41, 0x30, 0x50, 0x31,
  0xa8, 0x09, 0x10, 0x1a, 0xc1, 0x40, 0xc5, 0xc0, 0x26, 0x40, 0x68, 0x04,
  0x03, 0x15, 0x83, 0x9b, 0x00, 0xa1, 0x11, 0x0c, 0x54, 0x10, 0x6a, 0x03,
  0x84, 0x46, 0x60, 0x81, 0x5d, 0xc0, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10,
  0x0c, 0xc2, 0x60, 0x37, 0xd4, 0x02, 0x26, 0x82, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x9f, 0x18, 0xe2, 0x63, 0x60,
  0x31, 0xc4, 0xc7, 0xc2, 0x62, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20,
  0x18, 0x30, 0xeb, 0x31, 0x17, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0xce, 0x7a, 0xc4, 0x45, 0x60, 0x41, 0x21, 0x1f,
  0x13, 0x0a, 0xf9, 0xd8, 0x50, 0xc8, 0xc7, 0x86, 0x93, 0x80, 0x8f, 0x0d,
  0x27, 0x01, 0x1f, 0x1b, 0x4e, 0x02, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82,
  0x60, 0xc0, 0xcc, 0xc7, 0x5e, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x38, 0xf3, 0x91, 0x17, 0x81, 0x15, 0x81, 0x7c,
  0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41,
  0x30, 0x60, 0xf0, 0x03, 0x34, 0xf8, 0x60, 0x0f, 0xf4, 0x60, 0x51, 0x92,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xf0, 0x63, 0x3c, 0x82, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x60, 0xf4, 0x43, 0x34, 0x1a, 0x66, 0x29,
  0x88, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xfd, 0x28, 0x8f,
  0x60, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x18, 0xfe, 0x20, 0x0d, 0x50,
  0xf8, 0x03, 0x3f, 0x38, 0x8c, 0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x1c, 0xfe, 0x38, 0x8f, 0xc0, 0xf2, 0xc0, 0x2e, 0xe4, 0x63, 0x04, 0x21,
  0x1f, 0x0b, 0x04, 0xf9, 0x58, 0x00, 0x1a, 0xf0, 0xb1, 0xbb, 0x48, 0xe2,
  0x63, 0x41, 0x20, 0x1f, 0x0b, 0x02, 0xf9, 0x58, 0x30, 0xc8, 0xc7, 0x82,
  0x42, 0x3e, 0x16, 0xf0, 0x05, 0x7c, 0xac, 0x2f, 0x40, 0x21, 0x3e, 0x16,
  0x04, 0xf2, 0xb1, 0x20, 0x90, 0x8f, 0x05, 0x83, 0x7c, 0x2c, 0x58, 0xe4,
  0x63, 0x81, 0x68, 0xc0, 0xc7, 0x8e, 0x40, 0x3e, 0x66, 0x0a, 0xa6, 0x20,
  0x1f, 0x0b, 0x54, 0x03, 0x3e, 0x46, 0x51, 0xf2, 0xb1, 0x40, 0x90, 0x8f,
  0x05, 0xa8, 0x01, 0x1f, 0x0b, 0x02, 0xf9, 0x58, 0x50, 0x1b, 0xf2, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x46, 0xd4, 0xe3, 0x36, 0x02,
  0x43, 0x02, 0xfa, 0x58, 0x6b, 0xf0, 0x41, 0x7c, 0xcc, 0x35, 0xf8, 0x20,
  0x3e, 0xf6, 0x1a, 0x7c, 0x10, 0x1f, 0x83, 0x0d, 0x30, 0x88, 0x8f, 0x05,
  0x81, 0x7c, 0x2c, 0x08, 0xe4, 0x63, 0xc1, 0x20, 0x1f, 0x0b, 0x0e, 0xf9,
  0x98, 0x70, 0xc8, 0xc7, 0x86, 0x43, 0x3e, 0x36, 0x98, 0x02, 0x7c, 0x6c,
  0x30, 0x05, 0xf8, 0xd8, 0x60, 0x0a, 0xf0, 0x31, 0xdd, 0x30, 0x83, 0xf8,
  0xd8, 0x85, 0x1e, 0xf2, 0xb1, 0x40, 0x90, 0x8f, 0x05, 0x69, 0x00, 0x1f,
  0xf3, 0x8d, 0x80, 0x3e, 0x16, 0x4c, 0xf2, 0xb1, 0x20, 0x91, 0x8f, 0x09,
  0x89, 0x7c, 0x6c, 0x48, 0xe4, 0x63, 0xac, 0x30, 0x22, 0x30, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0x30, 0x30, 0x93, 0xfa, 0xd8, 0x8d, 0x60,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0xd0,
  0x03, 0xf9, 0xd8, 0xb0, 0x07, 0xf2, 0xb1, 0x81, 0x0f, 0xe4, 0x63, 0x68,
  0x60, 0x0e, 0xf2, 0xb1, 0x34, 0x30, 0x07, 0xf9, 0x98, 0x1a, 0x98, 0x83,
  0x7c, 0xcc, 0x19, 0xe0, 0x63, 0xce, 0x00, 0x1f, 0x73, 0x06, 0xf8, 0x58,
  0x32, 0xc8, 0xc7, 0x92, 0x41, 0x3e, 0x96, 0x0c, 0xf2, 0xb1, 0x01, 0x1c,
  0xe0, 0x63, 0x03, 0x38, 0xc0, 0xc7, 0x06, 0x70, 0x80, 0x8f, 0x81, 0x83,
  0x9d, 0xc0, 0x60, 0xb8, 0x21, 0x88, 0x13, 0x30, 0x98, 0x65, 0x10, 0x82,
  0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x8c, 0x53, 0x89, 0x13, 0x38,
  0xb9, 0x93, 0x35, 0x71, 0x91, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x30,
  0x50, 0x45, 0x4e, 0xe2, 0x04, 0x4f, 0xd6, 0xe4, 0x45, 0x46, 0x0c, 0x12,
  0x00, 0x04, 0xc1, 0xc0, 0x48, 0x95, 0x39, 0x99, 0x93, 0x3c, 0x69, 0x13,
  0x18, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x43, 0x55, 0xe8, 0x84,
  0x4e, 0xf4, 0xa4, 0x4d, 0x62, 0x64, 0x34, 0x21, 0x25, 0x86, 0x11, 0x83,
  0x07, 0x00, 0x41, 0x30, 0x98, 0x4e, 0xa5, 0x46, 0xf8, 0xe3, 0x3e, 0x5a,
  0x82, 0x25, 0x56, 0xa2, 0x3f, 0x66, 0x64, 0x46, 0x66, 0xa4, 0x3f, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x7e,
  0x90, 0x8f, 0x0d, 0xfd, 0x20, 0x1f, 0x1b, 0xfa, 0x41, 0x3e, 0x36, 0x44,
  0xf0, 0xb1, 0x21, 0x82, 0x8f, 0x0d, 0x11, 0x7c, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xc0, 0x5b, 0x95, 0x1c, 0xf9, 0x0f, 0x32, 0x19, 0x4d, 0x08,
  0x84, 0x0b, 0x06, 0xb3, 0x20, 0x26, 0xe4, 0x63, 0x2e, 0xe2, 0x1e, 0xf1,
  0xb1, 0x17, 0x71, 0x8f, 0xf8, 0x18, 0x8c, 0xb8, 0x47, 0x7c, 0x46, 0x0c,
  0x16, 0x00, 0x04, 0xc1, 0x80, 0xd1, 0x15, 0x31, 0x19, 0x84, 0xc0, 0x27,
  0x7a, 0x82, 0x27, 0x2c, 0x98, 0x11, 0xf9, 0x58, 0x00, 0x16, 0xf2, 0x31,
  0x01, 0x2c, 0xe4, 0x63, 0x03, 0x58, 0xc8, 0xc7, 0x90, 0x21, 0x3e, 0x86,
  0x0c, 0xf1, 0x31, 0x64, 0x88, 0xcf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18,
  0x4c, 0xbc, 0x82, 0x27, 0x34, 0x02, 0x23, 0x83, 0x10, 0xd8, 0x08, 0x9b,
  0xb0, 0x09, 0x9b, 0x30, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x60, 0x83, 0x4a, 0xc8, 0xc7, 0x06, 0x95, 0x90, 0x8f, 0x0d,
  0x2a, 0x21, 0x1f, 0xcb, 0x06, 0xf8, 0x58, 0x36, 0xc0, 0xc7, 0xb2, 0x01,
  0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x10, 0x06, 0xe3, 0x22, 0x27,
  0x38, 0x32, 0x2a, 0xa3, 0x09, 0xc1, 0x60, 0x81, 0x19, 0xc8, 0xc7, 0xd6,
  0x20, 0x47, 0xe8, 0x63, 0x3b, 0xa2, 0x23, 0xf4, 0x31, 0x36, 0xd8, 0x11,
  0xfa, 0xd8, 0xb0, 0x26, 0xf2, 0xb1, 0x81, 0x4d, 0xe4, 0x63, 0x42, 0x9b,
  0xc0, 0xc7, 0xdc, 0x44, 0x88, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x84, 0x41, 0xbb, 0xf0, 0x89, 0x98, 0x9c, 0xca, 0x68, 0x42, 0x30, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x18, 0xbc, 0x8b, 0x9f, 0x90, 0x09,
  0xaa, 0x8c, 0x26, 0x04, 0x80, 0x0d, 0x86, 0x7c, 0x4c, 0x30, 0xe4, 0x63,
  0x82, 0x1d, 0xc4, 0xc7, 0x04, 0x33, 0x89, 0x8f, 0x35, 0x77, 0x10, 0x9f,
  0x1b, 0x88, 0xad, 0xc0, 0x55, 0xd0, 0x8a, 0x3f, 0x91, 0xcf, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x38, 0x21, 0x33, 0x2f, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0xfe, 0x02, 0x2b, 0x41, 0x9e, 0x80, 0xca, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x6c, 0xfd, 0x32, 0x2b, 0x41, 0x05, 0xf7,
  0x02, 0x15, 0xcc, 0x0b, 0xda, 0x61, 0x2f, 0x37, 0x28, 0x21, 0xd8, 0x63,
  0x88, 0xad, 0x00, 0x57, 0xd0, 0x9c, 0x54, 0x91, 0xcf, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x38, 0x2b, 0xd3, 0x2f, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x64, 0x28, 0xa3, 0x2b, 0xc1, 0xa8, 0xa8, 0xca, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x6c, 0x27, 0xd3, 0x2b, 0x41, 0x05, 0x21, 0x03,
  0x15, 0xf4, 0x0b, 0xda, 0x01, 0x32, 0x37, 0x28, 0x21, 0xd8, 0x0a, 0xc0,
  0xe5, 0x8a, 0x09, 0xf6, 0x2e, 0x62, 0x2b, 0x20, 0x17, 0xb4, 0x4c, 0x57,
  0xe4, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xce, 0xcd, 0xa4, 0x4c,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0xcd, 0x98, 0x4b, 0xf0,
  0x2a, 0xb6, 0x32, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xdb, 0xcc, 0xa4,
  0x4b, 0x50, 0xc1, 0xca, 0x40, 0x05, 0x2c, 0x83, 0x76, 0xd4, 0xcb, 0x0d,
  0x4a, 0x08, 0xb6, 0x02, 0x7c, 0xb9, 0x62, 0x82, 0x1d, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x64, 0x6c, 0x5a, 0x86, 0x66, 0x68, 0x06, 0x65, 0xf0,
  0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0xb1, 0x69, 0x19, 0x9a,
  0xa1, 0x19, 0x91, 0xb9, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40,
  0xc6, 0xa6, 0x65, 0x68, 0x86, 0x66, 0x4e, 0xc6, 0x0e, 0x46, 0x0c, 0x12,
  0x00, 0x04, 0xc1, 0x00, 0x19, 0x9b, 0x96, 0xa1, 0x19, 0x9a, 0x29, 0x99,
  0x39, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x45, 0x6c, 0x5a, 0xa6,
  0x66, 0x68, 0x06, 0x65, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x70, 0x4a, 0x17, 0x2a,
  0x02, 0x52, 0xcb, 0xce, 0xe4, 0xcd, 0xb0, 0xbb, 0xe3, 0xc7, 0xad, 0x6a,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x78, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x5e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xed, 0x59, 0x4d, 0x6c, 0x1b, 0xc7, 0x15, 0x9e, 0xfd, 0xe5,
  0xfe, 0xf1, 0x91, 0xe6, 0x92, 0x4b, 0x6a, 0xc5, 0xe5, 0x8f, 0x24, 0xeb,
  0xc7, 0xd4, 0x8f, 0x15, 0x4b, 0x14, 0x4d, 0x51, 0x24, 0x25, 0xcb, 0x8a,
  0x4d, 0xa5, 0x69, 0xd1, 0x44, 0xd3, 0x4b, 0xe5, 0x43, 0x9a, 0xb4, 0x89,
  0x13, 0xb4, 0x49, 0xe0, 0x14, 0x49, 0x51, 0x6c, 0x94, 0x94, 0xe8, 0xaf,
  0x83, 0xa6, 0x6d, 0xe0, 0x4b, 0x0f, 0x4d, 0x01, 0x1f, 0x5a, 0xa3, 0x05,
  0x7a, 0xe8, 0xa1, 0x97, 0xc8, 0x49, 0x0f, 0x06, 0x21, 0xa0, 0x3d, 0x95,
  0x70, 0x81, 0x00, 0x81, 0x8b, 0x9c, 0x7a, 0x69, 0x83, 0xd6, 0x07, 0x27,
  0x68, 0xcd, 0xbe, 0xb7, 0x24, 0x13, 0xaa, 0x89, 0x61, 0xb5, 0x87, 0x42,
  0x28, 0x3c, 0xc0, 0xe0, 0x9b, 0x79, 0xf3, 0xed, 0xcc, 0x9b, 0xef, 0xbd,
  0xd9, 0xe5, 0x2e, 0x37, 0x1e, 0x7a, 0xe8, 0x53, 0x82, 0xc0, 0xd8, 0x83,
  0x69, 0x16, 0x14, 0xb5, 0x0b, 0xec, 0xaf, 0xbb, 0xbf, 0x7c, 0xe7, 0x20,
  0xf5, 0x57, 0xff, 0x21, 0xbf, 0x5f, 0xc5, 0xde, 0x75, 0xeb, 0xec, 0xbf,
  0x2b, 0xfd, 0x79, 0x6e, 0x41, 0xb7, 0x5f, 0x37, 0x07, 0x47, 0xe3, 0x1f,
  0xe3, 0x97, 0xdc, 0x5e, 0x63, 0xb8, 0x0b, 0x06, 0x56, 0x0d, 0xab, 0x22,
  0x88, 0xec, 0xcd, 0x01, 0xde, 0x38, 0xbb, 0x21, 0x09, 0x03, 0xfd, 0xd7,
  0x7b, 0x7c, 0x21, 0x18, 0x63, 0xec, 0x5a, 0xaf, 0xaf, 0x32, 0x89, 0x40,
  0x54, 0x85, 0x08, 0x0e, 0x09, 0xa2, 0x2a, 0x86, 0x70, 0x4b, 0xa2, 0xa8,
  0x2a, 0x11, 0x1c, 0x50, 0x44, 0xf6, 0x7f, 0x5e, 0x64, 0xac, 0x93, 0x03,
  0x6d, 0x31, 0xc4, 0x58, 0x14, 0xb1, 0x33, 0xc0, 0xa1, 0x5c, 0xfa, 0x71,
  0xa0, 0xc4, 0xce, 0xd5, 0xc1, 0xfa, 0x6a, 0x94, 0xdd, 0xfa, 0xe4, 0x59,
  0xf7, 0xf3, 0x50, 0xd8, 0x5b, 0xee, 0x01, 0x78, 0x12, 0xf1, 0x86, 0x0f,
  0xc8, 0xd3, 0xef, 0xcc, 0x73, 0x97, 0xd8, 0xb9, 0xb4, 0x2d, 0x9e, 0x8b,
  0xc8, 0xe8, 0x9f, 0xf0, 0x49, 0xbc, 0x27, 0xae, 0xbb, 0x4b, 0x22, 0x0e,
  0x3d, 0x71, 0x1d, 0x79, 0xec, 0xce, 0xbc, 0xc7, 0x7b, 0xbc, 0xc7, 0xef,
  0xc2, 0x3b, 0xdf, 0xe3, 0x9d, 0xbf, 0x0b, 0xef, 0xc9, 0x1e, 0xef, 0xc9,
  0xbb, 0xf0, 0xf6, 0xef, 0x37, 0x12, 0xe8, 0x92, 0xfe, 0xd8, 0x8e, 0x7f,
  0xfa, 0x49, 0x31, 0x49, 0x1d, 0x2c, 0x26, 0x47, 0x90, 0xa7, 0xfc, 0x0f,
  0x79, 0x8a, 0x29, 0x9f, 0x23, 0xb4, 0xd3, 0xec, 0x96, 0x78, 0x07, 0x9e,
  0x88, 0xf1, 0x50, 0x4c, 0x91, 0xdd, 0x9d, 0xf7, 0xf8, 0x01, 0x79, 0xe7,
  0x0f, 0xc8, 0x7b, 0xf2, 0x40, 0xbc, 0x83, 0xec, 0xb7, 0x83, 0x85, 0xdd,
  0x2b, 0x87, 0xaa, 0xdc, 0x8b, 0xc9, 0xe1, 0x2b, 0xf7, 0x62, 0x72, 0xf8,
  0xca, 0xbd, 0x98, 0x1c, 0xbe, 0x72, 0x2f, 0x26, 0x87, 0xaf, 0xdc, 0x8b,
  0xc9, 0xe1, 0x2d, 0xbb, 0xbf, 0xde, 0x69, 0xd7, 0x0a, 0xb7, 0xa5, 0xbf,
  0xfc, 0xe6, 0xdd, 0xfb, 0x8c, 0xdd, 0x9d, 0xf6, 0x4b, 0x6f, 0x77, 0xa4,
  0xdd, 0x1b, 0xd2, 0xdf, 0x25, 0xf6, 0xfa, 0x55, 0x5f, 0xbe, 0xb4, 0xeb,
  0x1b, 0xb7, 0x77, 0x23, 0xd2, 0x0f, 0x77, 0xc3, 0xd2, 0xcb, 0xbb, 0xba,
  0xf4, 0xb3, 0xdd, 0x1d, 0xe9, 0x3b, 0x58, 0x7f, 0x8e, 0xf5, 0x7b, 0x58,
  0x5f, 0xc1, 0xfa, 0x0d, 0xac, 0xdf, 0xc7, 0xfa, 0xa3, 0x5d, 0x41, 0xb3,
  0x6e, 0xe2, 0x94, 0x1f, 0xa8, 0x6a, 0x17, 0x15, 0xd6, 0xc5, 0xb8, 0xd5,
  0x45, 0xd9, 0xe8, 0xa2, 0x0e, 0x5a, 0x80, 0x21, 0xb1, 0x8b, 0xaf, 0x79,
  0x3f, 0xd8, 0x7d, 0x0b, 0xd7, 0xe8, 0xe0, 0x1c, 0xbf, 0xf8, 0xb4, 0x70,
  0x24, 0x2e, 0xfd, 0x63, 0x57, 0x93, 0x26, 0x83, 0x31, 0xa6, 0x4c, 0xb7,
  0x98, 0x3c, 0xd9, 0x62, 0xea, 0xf1, 0x16, 0x63, 0x0b, 0x2d, 0x26, 0x94,
  0x5a, 0x82, 0x32, 0xd3, 0x12, 0xe4, 0xa9, 0x96, 0xa0, 0xce, 0xb7, 0x04,
  0xb6, 0xd8, 0x12, 0x84, 0x93, 0x2d, 0xb6, 0xf3, 0x87, 0x3f, 0xe2, 0xab,
  0x70, 0x62, 0xab, 0x8b, 0x0e, 0xf5, 0xf1, 0x5d, 0xd7, 0xde, 0xea, 0x62,
  0x9c, 0xfa, 0x16, 0x63, 0xc9, 0xad, 0x2e, 0xa6, 0xae, 0x20, 0x86, 0x19,
  0x73, 0xa9, 0x8f, 0xaf, 0xd2, 0x43, 0x4c, 0x4b, 0xb7, 0x5e, 0x7c, 0xf3,
  0xe2, 0xd5, 0xb0, 0x63, 0x69, 0x56, 0xdc, 0xd0, 0x20, 0x95, 0xd1, 0xae,
  0x74, 0xaf, 0x35, 0xae, 0x74, 0xe7, 0x34, 0xd5, 0x70, 0x0e, 0xae, 0x74,
  0xaf, 0xb7, 0x04, 0xcd, 0x6b, 0x31, 0x3d, 0xd7, 0x62, 0xc6, 0x58, 0x4b,
  0x31, 0x73, 0xdc, 0x29, 0x4c, 0x6b, 0x82, 0x9e, 0x6f, 0xc5, 0x27, 0x26,
  0xb5, 0x48, 0x36, 0xc7, 0x53, 0x73, 0xc7, 0x35, 0xc1, 0x38, 0xda, 0x8a,
  0x6e, 0xe7, 0xfc, 0x17, 0x7f, 0x7b, 0xf1, 0xaa, 0x31, 0x11, 0xd7, 0x5e,
  0x7c, 0xeb, 0xe2, 0x55, 0xb3, 0xe0, 0x68, 0xac, 0xbb, 0x76, 0xe0, 0x1b,
  0x62, 0x82, 0xc6, 0xad, 0xb9, 0x54, 0x60, 0x47, 0x5f, 0x92, 0xc6, 0x4c,
  0x09, 0x94, 0xfc, 0x08, 0xa8, 0xf9, 0x31, 0xd0, 0xa4, 0x9d, 0xf7, 0xc2,
  0xca, 0x03, 0xcc, 0x9a, 0x2a, 0x42, 0x9a, 0x6d, 0xb6, 0xcd, 0xa9, 0x67,
  0x9b, 0x91, 0x7c, 0x06, 0x86, 0xb1, 0x6d, 0xcc, 0x7f, 0xb9, 0x99, 0x4e,
  0x54, 0x60, 0x78, 0xa8, 0x0c, 0x34, 0x77, 0x62, 0xe2, 0x98, 0xe6, 0x4e,
  0x8c, 0x07, 0x7e, 0xe3, 0x3c, 0x2e, 0xd9, 0x86, 0xe6, 0xee, 0xd3, 0x3c,
  0xe4, 0xa6, 0x93, 0x5f, 0x6d, 0xd2, 0xfe, 0xdc, 0xb9, 0x59, 0xcd, 0x9c,
  0x5f, 0x00, 0x17, 0x6d, 0xd6, 0xcc, 0xf9, 0xa6, 0x9b, 0x74, 0xc0, 0xc2,
  0xb6, 0x3b, 0xf4, 0xb5, 0xa6, 0x81, 0x38, 0x9c, 0x98, 0x6d, 0xa6, 0x67,
  0x1c, 0x30, 0xa9, 0x3d, 0x3f, 0xdb, 0x74, 0xe7, 0x8f, 0x43, 0x8a, 0xae,
  0x9f, 0x7a, 0xa4, 0x39, 0x3c, 0x35, 0x09, 0xde, 0x89, 0x22, 0xc4, 0x89,
  0x3f, 0xf3, 0xd9, 0xa6, 0x57, 0x98, 0x86, 0x64, 0xb2, 0xc8, 0xad, 0xc2,
  0x02, 0x18, 0x85, 0x63, 0x60, 0x9c, 0x88, 0x83, 0x9d, 0x9c, 0xe6, 0xd6,
  0x09, 0x07, 0xec, 0xf9, 0x05, 0x6e, 0x4f, 0x1d, 0xe3, 0xc9, 0xa9, 0x38,
  0x4f, 0xce, 0x3b, 0xdc, 0x5d, 0x1c, 0x07, 0x33, 0x99, 0x02, 0x67, 0x66,
  0x9c, 0x0f, 0x2f, 0xa5, 0x78, 0xa2, 0x30, 0xce, 0x8d, 0x44, 0x8a, 0xdb,
  0xdb, 0xe3, 0xbe, 0xb5, 0x9d, 0xf2, 0xad, 0xa5, 0x49, 0xb0, 0xc8, 0x97,
  0x44, 0x1c, 0x9e, 0xae, 0x5d, 0xbc, 0xaa, 0xe2, 0x1a, 0xea, 0x9f, 0x7f,
  0x27, 0x29, 0x88, 0x0a, 0x62, 0x94, 0xfa, 0xe1, 0xbd, 0x51, 0xc7, 0x4c,
  0x81, 0x6b, 0x4e, 0x43, 0x94, 0x15, 0xda, 0xf8, 0x0e, 0x92, 0xb3, 0x26,
  0x66, 0x21, 0x61, 0x1a, 0x10, 0xfd, 0x52, 0xce, 0x57, 0xa7, 0x66, 0x79,
  0x34, 0x32, 0xcb, 0x9d, 0x09, 0x00, 0x35, 0x09, 0x5c, 0x99, 0x70, 0x20,
  0x7a, 0x04, 0xb8, 0x9a, 0x70, 0x78, 0x28, 0x62, 0x41, 0xd4, 0x76, 0x78,
  0x72, 0xce, 0xe2, 0x66, 0xd2, 0xe2, 0xea, 0xb6, 0xe5, 0xab, 0x73, 0x29,
  0x50, 0x23, 0x39, 0xe4, 0x8e, 0x83, 0x16, 0x21, 0x9d, 0x1b, 0x4c, 0x0b,
  0x21, 0xea, 0x75, 0x3a, 0x1a, 0xbe, 0xc6, 0x8e, 0xdf, 0xc4, 0xf7, 0xcd,
  0x0f, 0xa2, 0x47, 0x5d, 0x00, 0xd2, 0x6b, 0xb4, 0x28, 0xdb, 0xd9, 0x34,
  0x87, 0x1d, 0xb9, 0xfd, 0xb7, 0xb4, 0xc8, 0xc8, 0x4f, 0xd2, 0x42, 0x49,
  0x3a, 0xeb, 0x0e, 0x62, 0x28, 0x99, 0x59, 0x4f, 0x92, 0x9f, 0x49, 0x77,
  0xbd, 0x63, 0x18, 0xaa, 0x71, 0x7d, 0xf4, 0x8d, 0x8e, 0x65, 0x75, 0x11,
  0x5d, 0x22, 0x8c, 0xdb, 0x93, 0x90, 0xb4, 0x8f, 0x01, 0xed, 0xcb, 0x34,
  0x6f, 0x4b, 0x68, 0x5b, 0xa1, 0xbd, 0x9a, 0xe1, 0x6e, 0x3b, 0x44, 0xed,
  0x48, 0xb7, 0x4d, 0xf1, 0x32, 0x59, 0xa8, 0x4d, 0xce, 0x38, 0xf6, 0x34,
  0x28, 0xf6, 0x2c, 0xa8, 0xf6, 0x71, 0x08, 0xd9, 0xf7, 0x61, 0x7c, 0x0a,
  0x6d, 0x01, 0x5f, 0xbc, 0x02, 0x7d, 0xec, 0xbd, 0xd1, 0x40, 0x2f, 0x44,
  0xba, 0x3e, 0x84, 0x48, 0xe3, 0xa2, 0x8c, 0x49, 0xbb, 0xed, 0xf8, 0x19,
  0xb4, 0x09, 0x4e, 0x63, 0x8c, 0xf2, 0x80, 0x39, 0x1b, 0x63, 0x2e, 0xce,
  0x69, 0x0a, 0xac, 0x3e, 0x4c, 0x28, 0xb1, 0x7a, 0x9a, 0x50, 0x61, 0xf5,
  0xcc, 0x4a, 0x35, 0x88, 0xbb, 0xe8, 0x54, 0xc7, 0xbc, 0xe5, 0x2a, 0xea,
  0x54, 0xe5, 0xd9, 0xed, 0xaa, 0xef, 0xd5, 0xca, 0x90, 0xa9, 0x55, 0xc0,
  0xac, 0xa1, 0x9e, 0x4b, 0x55, 0x18, 0x5e, 0x29, 0x82, 0xb5, 0x58, 0xe5,
  0xee, 0x72, 0x91, 0xdb, 0x27, 0xab, 0x3c, 0x8d, 0x39, 0x10, 0x5d, 0x29,
  0x41, 0x6e, 0x27, 0xda, 0xce, 0xd6, 0x44, 0x96, 0x25, 0x7d, 0xaa, 0x22,
  0x73, 0xb1, 0x3f, 0x8c, 0xef, 0xef, 0xd6, 0x72, 0x09, 0x63, 0x5d, 0x56,
  0xb3, 0xb5, 0x35, 0xd0, 0x69, 0xac, 0x28, 0xb2, 0xf4, 0x4e, 0xa1, 0x6d,
  0x27, 0x91, 0xb3, 0xe8, 0x40, 0xfe, 0xd4, 0x5a, 0x90, 0x8f, 0xee, 0xe2,
  0xde, 0xa8, 0x6e, 0x63, 0x9e, 0x9f, 0x2c, 0x01, 0xf9, 0x6c, 0x2e, 0x5f,
  0x93, 0xf2, 0xb5, 0x2a, 0x80, 0xb7, 0x06, 0xc3, 0x4b, 0x45, 0xc8, 0xa2,
  0x2d, 0xbb, 0xb2, 0x27, 0x11, 0x7f, 0xd8, 0x8e, 0x41, 0xde, 0x4b, 0x07,
  0xe7, 0x40, 0x37, 0xcf, 0xc9, 0x23, 0x84, 0xe1, 0x47, 0x64, 0x9d, 0x30,
  0xf2, 0x45, 0x99, 0xae, 0x07, 0xe4, 0x66, 0x57, 0x2a, 0x60, 0x24, 0xaa,
  0x90, 0x99, 0x3a, 0x03, 0xb4, 0x7e, 0x30, 0x47, 0xed, 0xf7, 0x52, 0xa6,
  0xd0, 0x80, 0xcc, 0x4c, 0x05, 0x3a, 0x6b, 0x1b, 0x78, 0x54, 0x76, 0xaa,
  0x74, 0xb6, 0xd2, 0xb5, 0x3d, 0x69, 0x74, 0xd1, 0xe1, 0xb4, 0xbe, 0x55,
  0x5f, 0x00, 0x73, 0xcb, 0xf1, 0x3b, 0xa5, 0x12, 0xbc, 0x1d, 0x39, 0x5b,
  0x47, 0xcc, 0xbd, 0xb1, 0xf4, 0xcd, 0xc5, 0xf4, 0x56, 0xc9, 0xcf, 0xe3,
  0xb8, 0x79, 0xd2, 0x81, 0x70, 0xbd, 0x04, 0x50, 0xaf, 0x83, 0x69, 0x57,
  0xb8, 0x8e, 0x1a, 0xca, 0x1a, 0xea, 0xbd, 0x74, 0x86, 0x9b, 0xa7, 0x1b,
  0xd8, 0xc7, 0xfc, 0xc4, 0x9b, 0x87, 0x7b, 0x76, 0x01, 0xd2, 0x9b, 0x45,
  0xc8, 0xa1, 0x3e, 0x64, 0x53, 0xf1, 0xe6, 0xa1, 0x6f, 0xc7, 0xfc, 0x31,
  0x8a, 0x5b, 0xac, 0x31, 0x46, 0x7e, 0xcb, 0xb1, 0x8d, 0x31, 0x8a, 0xb3,
  0xae, 0x63, 0x0c, 0x08, 0x4d, 0x56, 0xcf, 0x11, 0x86, 0x59, 0x7d, 0xec,
  0x6c, 0x03, 0x68, 0x4f, 0x6a, 0xac, 0x3a, 0xa6, 0xb1, 0xe9, 0x9b, 0x75,
  0xcc, 0xc7, 0x11, 0x9a, 0xdf, 0x6e, 0xf0, 0xa3, 0xdb, 0x0d, 0x7f, 0x6c,
  0xf3, 0x0c, 0x8c, 0x6c, 0xae, 0x83, 0xbe, 0x19, 0x83, 0xe8, 0x0a, 0xee,
  0xe9, 0x6c, 0x05, 0xcf, 0x51, 0x03, 0x7d, 0xa8, 0x70, 0x7b, 0xb5, 0xc1,
  0x73, 0xe8, 0x5b, 0xf4, 0x6c, 0x1d, 0xc6, 0x30, 0x16, 0x47, 0x37, 0x45,
  0x66, 0x22, 0x66, 0x56, 0x30, 0x26, 0xa7, 0xeb, 0x7c, 0x84, 0x62, 0xd1,
  0x10, 0x59, 0x86, 0xb0, 0x22, 0xb2, 0x1c, 0xc5, 0xc4, 0x16, 0x19, 0xce,
  0x8f, 0x67, 0x35, 0x16, 0xe4, 0x82, 0x99, 0xdc, 0x1b, 0xcd, 0xad, 0xd6,
  0xe1, 0xe8, 0x66, 0x03, 0x28, 0x7f, 0x74, 0x8c, 0xc9, 0x68, 0x32, 0xc6,
  0x29, 0x37, 0xd9, 0x19, 0x27, 0xd0, 0x33, 0x87, 0xba, 0x1d, 0x3d, 0xbd,
  0x0e, 0x99, 0x95, 0x3a, 0xe8, 0x5b, 0x31, 0x3f, 0x8b, 0x31, 0xa3, 0x7d,
  0x8d, 0x2c, 0xef, 0x49, 0x74, 0x0d, 0x20, 0xd2, 0x1c, 0x9d, 0x6a, 0x35,
  0xd0, 0x72, 0x64, 0xb9, 0x8c, 0x7a, 0x54, 0x40, 0x3c, 0xb3, 0x4e, 0xb6,
  0x40, 0x57, 0x6f, 0x6a, 0x03, 0x3c, 0x8c, 0x49, 0x0e, 0xf9, 0x19, 0x8c,
  0x67, 0x76, 0x0b, 0xf3, 0x6e, 0xa6, 0x0c, 0x14, 0xff, 0x3c, 0xd9, 0x30,
  0xb6, 0x14, 0xd3, 0x0c, 0xc6, 0x56, 0xaf, 0xc5, 0x40, 0x38, 0x53, 0x05,
  0x7d, 0x75, 0x83, 0xeb, 0xa7, 0x50, 0x8b, 0x95, 0x72, 0xa0, 0xbf, 0x16,
  0x45, 0xfd, 0xef, 0x5f, 0xe0, 0xd9, 0xcd, 0x22, 0x1f, 0xc1, 0x9c, 0x23,
  0xbd, 0xf5, 0x18, 0xea, 0x8d, 0x68, 0xc4, 0xbb, 0xba, 0xd3, 0xfc, 0x3a,
  0xea, 0x4e, 0x7e, 0x6b, 0x7d, 0xdd, 0x8f, 0xb0, 0xba, 0x47, 0x68, 0xf7,
  0xf4, 0x4f, 0xa0, 0xfe, 0xab, 0x6b, 0x81, 0xee, 0x06, 0xea, 0x8e, 0x79,
  0x83, 0x7a, 0xaf, 0xf1, 0xfc, 0xf6, 0x9a, 0x9f, 0x3d, 0x55, 0x85, 0xdc,
  0x29, 0xdc, 0xe7, 0x29, 0xd4, 0x7b, 0x79, 0x0d, 0xbc, 0xd5, 0x32, 0xea,
  0xbd, 0xc6, 0xcd, 0x5a, 0x99, 0xdb, 0x2b, 0x6b, 0x3c, 0x63, 0x97, 0x79,
  0x74, 0xb5, 0x82, 0x67, 0x01, 0x35, 0x5d, 0x43, 0x2d, 0x51, 0xef, 0xfc,
  0xa9, 0xae, 0xee, 0xde, 0x32, 0xea, 0x5e, 0xab, 0x70, 0x9a, 0x1b, 0x73,
  0x52, 0xf5, 0x88, 0x53, 0x26, 0xfd, 0xbb, 0xba, 0x93, 0xe6, 0x94, 0xdb,
  0x7d, 0xdd, 0x33, 0xa8, 0x11, 0xf9, 0xa9, 0xd7, 0xf0, 0x1c, 0xa0, 0x7e,
  0x74, 0x0f, 0x02, 0xd4, 0x3a, 0xd7, 0xd3, 0x9c, 0xf2, 0x3a, 0x87, 0x67,
  0xa0, 0x9f, 0xd3, 0x50, 0xa8, 0x07, 0xe7, 0x26, 0xd3, 0x1b, 0x0b, 0xae,
  0x47, 0xfd, 0x3a, 0x95, 0x4a, 0x37, 0x87, 0x2b, 0x95, 0x40, 0xeb, 0xcc,
  0x56, 0xc5, 0xa7, 0x73, 0x81, 0x67, 0x3c, 0x18, 0xcf, 0x62, 0x3c, 0x60,
  0x0a, 0xcf, 0xd9, 0x4c, 0x3a, 0xb8, 0x2f, 0x79, 0xa8, 0x3f, 0xdd, 0x4f,
  0x3c, 0xd4, 0x9c, 0xee, 0x27, 0x1e, 0x6a, 0x8e, 0xe7, 0x17, 0xf9, 0x65,
  0xe8, 0x94, 0xcb, 0xc1, 0x79, 0xf1, 0x30, 0x07, 0x94, 0xf5, 0x32, 0xc8,
  0xeb, 0x4e, 0x10, 0x73, 0x7d, 0x25, 0x06, 0xea, 0x7a, 0x05, 0xf4, 0x70,
  0x9d, 0xeb, 0x91, 0x34, 0x67, 0x91, 0x74, 0x4b, 0x37, 0xab, 0x5c, 0x65,
  0xa7, 0xdb, 0x56, 0xfe, 0x41, 0xd9, 0x5b, 0x2d, 0x72, 0x16, 0xbe, 0xd0,
  0xca, 0x78, 0x25, 0xce, 0xac, 0xe7, 0x5b, 0x0c, 0x58, 0x4b, 0x88, 0x78,
  0x2d, 0x21, 0xfc, 0x5c, 0xcb, 0xac, 0x2d, 0x70, 0xc1, 0x7a, 0xa1, 0x25,
  0x80, 0x80, 0xcf, 0xf3, 0xfb, 0x03, 0x7e, 0x47, 0x8c, 0xf9, 0x8c, 0xbd,
  0x59, 0x0b, 0x6d, 0xa5, 0xfd, 0x10, 0x5b, 0x0f, 0x6c, 0xa6, 0x70, 0xa5,
  0x4d, 0xdf, 0xec, 0x15, 0xb6, 0x8a, 0xf7, 0xd8, 0x71, 0xf4, 0x71, 0x23,
  0xb0, 0xab, 0xbd, 0xbe, 0xef, 0xdc, 0xfe, 0x96, 0x80, 0xfe, 0x1e, 0x19,
  0x2a, 0x5e, 0xd6, 0xd8, 0xe4, 0xcd, 0xe7, 0xf1, 0xac, 0xa4, 0xf0, 0x7e,
  0xae, 0x28, 0x38, 0x2d, 0xdd, 0xfb, 0xbc, 0x58, 0x33, 0xe3, 0x69, 0x20,
  0x60, 0x3e, 0x44, 0x26, 0xc4, 0x49, 0x99, 0xce, 0xde, 0x9f, 0xde, 0x92,
  0x48, 0x6f, 0x61, 0x68, 0xe3, 0x32, 0x3d, 0x07, 0x85, 0x7c, 0xe3, 0x32,
  0xcd, 0x21, 0x4c, 0x54, 0x2f, 0x87, 0xd1, 0x17, 0x73, 0x48, 0x95, 0xa3,
  0xb8, 0x07, 0xc2, 0x18, 0xae, 0x47, 0x68, 0xa1, 0x3f, 0x84, 0xc1, 0x19,
  0x30, 0x32, 0xbe, 0x8d, 0x7e, 0x85, 0x71, 0x05, 0xcf, 0x13, 0x41, 0xa4,
  0x6b, 0x35, 0xa3, 0xf9, 0x6d, 0xd1, 0xf5, 0x23, 0xf8, 0x2c, 0xd3, 0x58,
  0xee, 0xe6, 0x53, 0xe8, 0x47, 0x30, 0xe7, 0xbb, 0xb4, 0xd6, 0x6a, 0x3b,
  0x3a, 0x31, 0x2e, 0xc7, 0x26, 0x62, 0x55, 0xb2, 0x89, 0x22, 0x34, 0xdd,
  0xd0, 0xab, 0xef, 0x99, 0xfa, 0x35, 0x41, 0xb7, 0x0c, 0x66, 0x89, 0xa1,
  0x76, 0x87, 0x05, 0x5f, 0xd4, 0x2a, 0x32, 0xb5, 0xc5, 0xa0, 0x5d, 0x7a,
  0x8d, 0xb1, 0xe9, 0x4b, 0xa2, 0x38, 0x2d, 0xb1, 0xcf, 0xb5, 0x2d, 0xe1,
  0x9f, 0x12, 0xbb, 0xd1, 0x59, 0x0e, 0xb8, 0x72, 0x77, 0x5c, 0x46, 0xbb,
  0xdc, 0xb3, 0x5f, 0x92, 0xe5, 0x69, 0x29, 0xa1, 0xfa, 0xd6, 0x00, 0x57,
  0x4e, 0x68, 0xfe, 0xcb, 0xaa, 0xda, 0xb0, 0x12, 0x29, 0xff, 0x7d, 0x57,
  0x6b, 0xc8, 0xaa, 0xac, 0x62, 0x7f, 0xba, 0xa9, 0x69, 0xd3, 0x8c, 0x3d,
  0x73, 0x9d, 0x75, 0xc2, 0x32, 0xfd, 0x31, 0xf0, 0xbe, 0x8b, 0x1c, 0x1c,
  0x13, 0xd0, 0x26, 0x74, 0x8e, 0xc8, 0xe4, 0x0a, 0xae, 0xbd, 0xd0, 0x44,
  0xee, 0x77, 0x45, 0x71, 0x41, 0x44, 0xbb, 0x48, 0x5c, 0xb4, 0x3f, 0x83,
  0xcf, 0x3f, 0x65, 0x6a, 0x81, 0xab, 0x85, 0x22, 0x0f, 0xcd, 0x94, 0xb8,
  0xc2, 0x9e, 0xbd, 0x2e, 0x4a, 0xa2, 0x4c, 0xcf, 0x45, 0x7d, 0x6e, 0x81,
  0x1b, 0xf3, 0x45, 0x6e, 0x9e, 0x28, 0x75, 0xef, 0x15, 0xd1, 0x18, 0xdc,
  0xf9, 0x7b, 0xf3, 0x9d, 0xbe, 0x79, 0xbe, 0x84, 0xf6, 0x9f, 0x1c, 0xea,
  0x2a, 0xf5, 0x7e, 0x47, 0xf7, 0x3f, 0x4b, 0xd3, 0x7f, 0x2b, 0x83, 0x36,
  0xaa, 0xba, 0xb0, 0xdf, 0x46, 0x7b, 0x33, 0xc4, 0xfd, 0x36, 0x6a, 0xe3,
  0xb3, 0x78, 0x9f, 0x8d, 0xfe, 0x5f, 0xb0, 0xe4, 0xfd, 0x36, 0xfa, 0x86,
  0x1a, 0x56, 0xf6, 0xdb, 0xa8, 0x80, 0xfa, 0xf1, 0x75, 0x23, 0xa1, 0x8f,
  0xc6, 0xfb, 0xdf, 0x68, 0xa3, 0xda, 0x7e, 0x1b, 0xb5, 0x63, 0xfa, 0x80,
  0xd3, 0xbd, 0x75, 0xb5, 0x81, 0x8d, 0xf4, 0x7d, 0xd1, 0x06, 0x36, 0x22,
  0xf6, 0x6d, 0x03, 0x1b, 0x91, 0xfb, 0xb6, 0x01, 0xa7, 0x95, 0xbe, 0x0d,
  0x9d, 0x16, 0x06, 0xd6, 0x08, 0xf8, 0xe8, 0xb4, 0x20, 0xed, 0xdf, 0x87,
  0x8c, 0x4e, 0x8b, 0xff, 0xf6, 0x8d, 0x5f, 0x26, 0xa7, 0x7b, 0xe5, 0xa3,
  0x77, 0xc9, 0x18, 0xfb, 0xcc, 0x43, 0x0f, 0x3f, 0xf6, 0xfc, 0x85, 0xe7,
  0x9e, 0x7d, 0xec, 0x51, 0xfe, 0xd8, 0x53, 0x5f, 0xf9, 0xc2, 0x13, 0x17,
  0x5e, 0xe8, 0xff, 0x3b, 0xf6, 0x4e, 0xef, 0x5f, 0x91, 0xa7, 0xb1, 0xa2,
  0x08, 0xec, 0x81, 0x60, 0x05, 0x85, 0xf5, 0xbf, 0x40, 0x3f, 0xdc, 0xeb,
  0xcb, 0xbd, 0xfe, 0xe7, 0x83, 0xbe, 0xf8, 0xa1, 0x4a, 0x8f, 0xf6, 0xfa,
  0x7d, 0x47, 0x9e, 0xea, 0xf5, 0xfb, 0xe5, 0x02, 0xf5, 0x25, 0xf8, 0x70,
  0xfc, 0xeb, 0xbd, 0x7e, 0xb7, 0x30, 0xf6, 0x2f, 0x1d, 0x8f, 0xa8, 0x43,
  0xbe, 0xb4, 0x3f, 0x15, 0xee, 0xb8, 0xe3, 0x32, 0x0a, 0xbe, 0x81, 0xed,
  0xbe, 0xe0, 0x03, 0xf3
};
