#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; TEXCOORD                 1   xyz         3     NONE   float   xyz 
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_VSEnvMapFresnelBn.pdb
; shader hash: 072b856a363065af261cf8b7073e4405
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 5
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 5
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSEnvMapFresnelBn
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 10, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 16 depends on inputs: { 0, 1, 2, 3 }
;   output 17 depends on inputs: { 0, 1, 2, 3 }
;   output 18 depends on inputs: { 0, 1, 2, 3 }
;   output 19 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSEnvMapFresnelBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = fmul fast float %4, 2.000000e+00
  %12 = fmul fast float %5, 2.000000e+00
  %13 = fmul fast float %6, 2.000000e+00
  %14 = fadd fast float %11, -1.000000e+00
  %15 = fadd fast float %12, -1.000000e+00
  %16 = fadd fast float %13, -1.000000e+00
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = extractvalue %dx.types.CBufRet.f32 %17, 3
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = fmul fast float %18, %7
  %33 = call float @dx.op.tertiary.f32(i32 46, float %8, float %19, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %9, float %20, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %10, float %21, float %34)  ; FMad(a,b,c)
  %36 = fmul fast float %23, %7
  %37 = call float @dx.op.tertiary.f32(i32 46, float %8, float %24, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %9, float %25, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %10, float %26, float %38)  ; FMad(a,b,c)
  %40 = fmul fast float %28, %7
  %41 = call float @dx.op.tertiary.f32(i32 46, float %8, float %29, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %9, float %30, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %10, float %31, float %42)  ; FMad(a,b,c)
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = fsub fast float %45, %35
  %49 = fsub fast float %46, %39
  %50 = fsub fast float %47, %43
  %51 = call float @dx.op.dot3.f32(i32 55, float %48, float %49, float %50, float %48, float %49, float %50)  ; Dot3(ax,ay,az,bx,by,bz)
  %52 = call float @dx.op.unary.f32(i32 25, float %51)  ; Rsqrt(value)
  %53 = fmul fast float %48, %52
  %54 = fmul fast float %49, %52
  %55 = fmul fast float %50, %52
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = fmul fast float %57, %14
  %69 = call float @dx.op.tertiary.f32(i32 46, float %15, float %58, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %16, float %59, float %69)  ; FMad(a,b,c)
  %71 = fmul fast float %61, %14
  %72 = call float @dx.op.tertiary.f32(i32 46, float %15, float %62, float %71)  ; FMad(a,b,c)
  %73 = call float @dx.op.tertiary.f32(i32 46, float %16, float %63, float %72)  ; FMad(a,b,c)
  %74 = fmul fast float %65, %14
  %75 = call float @dx.op.tertiary.f32(i32 46, float %15, float %66, float %74)  ; FMad(a,b,c)
  %76 = call float @dx.op.tertiary.f32(i32 46, float %16, float %67, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.dot3.f32(i32 55, float %70, float %73, float %76, float %70, float %73, float %76)  ; Dot3(ax,ay,az,bx,by,bz)
  %78 = call float @dx.op.unary.f32(i32 25, float %77)  ; Rsqrt(value)
  %79 = fmul fast float %78, %70
  %80 = fmul fast float %78, %73
  %81 = fmul fast float %78, %76
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.f32 %90, 1
  %93 = extractvalue %dx.types.CBufRet.f32 %90, 2
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = fsub fast float -0.000000e+00, %84
  %107 = fsub fast float -0.000000e+00, %85
  %108 = fsub fast float -0.000000e+00, %92
  %109 = fsub fast float -0.000000e+00, %93
  %110 = fsub fast float -0.000000e+00, %100
  %111 = fsub fast float -0.000000e+00, %101
  %112 = fmul fast float %79, %83
  %113 = fsub fast float -0.000000e+00, %112
  %114 = call float @dx.op.tertiary.f32(i32 46, float %106, float %80, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %107, float %81, float %114)  ; FMad(a,b,c)
  %116 = fmul fast float %79, %91
  %117 = fsub fast float -0.000000e+00, %116
  %118 = call float @dx.op.tertiary.f32(i32 46, float %108, float %80, float %117)  ; FMad(a,b,c)
  %119 = call float @dx.op.tertiary.f32(i32 46, float %109, float %81, float %118)  ; FMad(a,b,c)
  %120 = fmul fast float %79, %99
  %121 = fsub fast float -0.000000e+00, %120
  %122 = call float @dx.op.tertiary.f32(i32 46, float %110, float %80, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %111, float %81, float %122)  ; FMad(a,b,c)
  %124 = fcmp fast olt float %115, 0.000000e+00
  %125 = fcmp fast olt float %119, 0.000000e+00
  %126 = fcmp fast olt float %123, 0.000000e+00
  %127 = select i1 %124, float 0.000000e+00, float 1.000000e+00
  %128 = select i1 %125, float 0.000000e+00, float 1.000000e+00
  %129 = select i1 %126, float 0.000000e+00, float 1.000000e+00
  %130 = fmul fast float %127, %115
  %131 = fmul fast float %128, %119
  %132 = fmul fast float %129, %123
  %133 = fmul fast float %130, %87
  %134 = call float @dx.op.tertiary.f32(i32 46, float %131, float %95, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %132, float %103, float %134)  ; FMad(a,b,c)
  %136 = fmul fast float %130, %88
  %137 = call float @dx.op.tertiary.f32(i32 46, float %131, float %96, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %132, float %104, float %137)  ; FMad(a,b,c)
  %139 = fmul fast float %130, %89
  %140 = call float @dx.op.tertiary.f32(i32 46, float %131, float %97, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %132, float %105, float %140)  ; FMad(a,b,c)
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = extractvalue %dx.types.CBufRet.f32 %142, 2
  %146 = fmul fast float %143, %135
  %147 = fmul fast float %144, %138
  %148 = fmul fast float %145, %141
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = fadd fast float %146, %150
  %154 = fadd fast float %147, %151
  %155 = fadd fast float %148, %152
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = extractvalue %dx.types.CBufRet.f32 %161, 3
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = extractvalue %dx.types.CBufRet.f32 %166, 3
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = extractvalue %dx.types.CBufRet.f32 %171, 3
  %176 = fmul fast float %157, %7
  %177 = call float @dx.op.tertiary.f32(i32 46, float %8, float %158, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %9, float %159, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %10, float %160, float %178)  ; FMad(a,b,c)
  %180 = fmul fast float %162, %7
  %181 = call float @dx.op.tertiary.f32(i32 46, float %8, float %163, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %9, float %164, float %181)  ; FMad(a,b,c)
  %183 = call float @dx.op.tertiary.f32(i32 46, float %10, float %165, float %182)  ; FMad(a,b,c)
  %184 = fmul fast float %167, %7
  %185 = call float @dx.op.tertiary.f32(i32 46, float %8, float %168, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %9, float %169, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %10, float %170, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %172, %7
  %189 = call float @dx.op.tertiary.f32(i32 46, float %8, float %173, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %9, float %174, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %10, float %175, float %190)  ; FMad(a,b,c)
  %192 = extractvalue %dx.types.CBufRet.f32 %142, 3
  %193 = call float @dx.op.dot3.f32(i32 55, float %53, float %54, float %55, float %79, float %80, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %196 = call float @dx.op.unary.f32(i32 6, float %193)  ; FAbs(value)
  %197 = fsub fast float 1.000000e+00, %196
  %198 = call float @dx.op.binary.f32(i32 35, float %197, float 0.000000e+00)  ; FMax(a,b)
  %199 = call float @dx.op.unary.f32(i32 23, float %198)  ; Log(value)
  %200 = fmul fast float %199, %195
  %201 = call float @dx.op.unary.f32(i32 21, float %200)  ; Exp(value)
  %202 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %203 = fmul fast float %202, %201
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = extractvalue %dx.types.CBufRet.f32 %204, 3
  %209 = call float @dx.op.dot4.f32(i32 56, float %7, float %8, float %9, float %10, float %205, float %206, float %207, float %208)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %210 = call float @dx.op.unary.f32(i32 7, float %209)  ; Saturate(value)
  %211 = fsub fast float -0.000000e+00, %53
  %212 = fsub fast float -0.000000e+00, %54
  %213 = fsub fast float -0.000000e+00, %55
  %214 = call float @dx.op.dot3.f32(i32 55, float %211, float %212, float %213, float %79, float %80, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %215 = fmul fast float %214, 2.000000e+00
  %216 = fmul fast float %215, %79
  %217 = fmul fast float %215, %80
  %218 = fmul fast float %215, %81
  %219 = fsub fast float %211, %216
  %220 = fsub fast float %212, %217
  %221 = fsub fast float %213, %218
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %153)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %154)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %155)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %192)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %210)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %219)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %220)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %221)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %179)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %183)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %187)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %191)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!8 = !{[12 x i32] [i32 10, i32 20, i32 1011952, i32 1011952, i32 1011952, i32 1011952, i32 28791, i32 28791, i32 28791, i32 0, i32 256, i32 512]}
!9 = !{void ()* @VSEnvMapFresnelBn, !"VSEnvMapFresnelBn", !10, !5, null}
!10 = !{!11, !19, null}
!11 = !{!12, !15, !17}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{!20, !21, !23, !24, !25}
!20 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!21 = !{i32 1, !"COLOR", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!22 = !{i32 1}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 2, i8 0, !18}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 3, i32 3, i8 0, !16}
!25 = !{i32 4, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 4, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 86
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 832
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0x6a852b07, 0xaf653036                // 000000000000: D5802B07 03FED585 AF653036
;   v_nop_xbox_data 0xb7f81c26, 0x05443e07                // 00000000000C: D5801C26 03FF6FF8 05443E07
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_or_b32      s73, s13, lit(0x00100000)               // 000000000020: 8849FF0D 00100000
;   s_mov_b32     s72, s12                                // 000000000028: BEC8030C
;   s_mov_b32     s74, -1                                 // 00000000002C: BECA03C1
;   s_mov_b32     s75, lit(0x11014fac)                    // 000000000030: BECB03FF 11014FAC
;   s_waitcnt     vmcnt(0)                                // 000000000038: BF8C3F70
;   v_fma_f32     v0, v8, 2.0, -1.0                       // 00000000003C: D54B0000 03CDE908
;   s_buffer_load_dwordx16  s[0:15], s[72:75], 0x0000c0   // 000000000044: F4300024 FA0000C0
;   s_buffer_load_dwordx16  s[48:63], s[72:75], 0x000110  // 00000000004C: F4300C24 FA000110
;   s_buffer_load_dwordx4  s[80:83], s[72:75], 0x0000a0   // 000000000054: F4281424 FA0000A0
;   v_fma_f32     v1, v9, 2.0, -1.0                       // 00000000005C: D54B0001 03CDE909
;   v_fma_f32     v9, v10, 2.0, -1.0                      // 000000000064: D54B0009 03CDE90A
;   s_buffer_load_dwordx16  s[16:31], s[72:75], 0x000020  // 00000000006C: F4300424 FA000020
;   s_buffer_load_dwordx16  s[32:47], s[72:75], 0x000060  // 000000000074: F4300824 FA000060
;   s_buffer_load_dwordx8  s[64:71], s[72:75], 0x000150   // 00000000007C: F42C1024 FA000150
;   s_buffer_load_dwordx4  s[76:79], s[72:75], 0x000170   // 000000000084: F4281324 FA000170
;   v_mov_b32     v18, 0                                  // 00000000008C: 7E240280
;   s_waitcnt     lgkmcnt(0)                              // 000000000090: BF8CC07F
;   v_mul_legacy_f32  v16, s8, v4                         // 000000000094: 0E200808
;   v_mul_legacy_f32  v8, s4, v4                          // 000000000098: 0E100804
;   v_mul_legacy_f32  v20, s12, v4                        // 00000000009C: 0E28080C
;   v_mul_legacy_f32  v11, s52, v0                        // 0000000000A0: 0E160034
;   v_mul_legacy_f32  v10, s48, v0                        // 0000000000A4: 0E140030
;   v_fmac_f32    v16, s9, v5                             // 0000000000A8: 56200A09
;   v_fmac_f32    v8, s5, v5                              // 0000000000AC: 56100A05
;   v_mul_legacy_f32  v0, s56, v0                         // 0000000000B0: 0E000038
;   v_fmac_f32    v20, s13, v5                            // 0000000000B4: 56280A0D
;   v_fmac_f32    v11, s53, v1                            // 0000000000B8: 56160235
;   v_fmac_f32    v16, s10, v6                            // 0000000000BC: 56200C0A
;   v_fmac_f32    v8, s6, v6                              // 0000000000C0: 56100C06
;   v_fmac_f32    v10, s49, v1                            // 0000000000C4: 56140231
;   v_fmac_f32    v0, s57, v1                             // 0000000000C8: 56000239
;   v_fmac_f32    v20, s14, v6                            // 0000000000CC: 56280C0E
;   v_fmac_f32    v16, s11, v7                            // 0000000000D0: 56200E0B
;   v_fmac_f32    v8, s7, v7                              // 0000000000D4: 56100E07
;   v_fmac_f32    v11, s54, v9                            // 0000000000D8: 56161236
;   v_fmac_f32    v10, s50, v9                            // 0000000000DC: 56141232
;   v_fmac_f32    v20, s15, v7                            // 0000000000E0: 56280E0F
;   v_sub_f32     v1, s81, v16                            // 0000000000E4: 08022051
;   v_sub_f32     v8, s80, v8                             // 0000000000E8: 08101050
;   v_mul_legacy_f32  v3, v11, v11                        // 0000000000EC: 0E06170B
;   v_fmac_f32    v0, s58, v9                             // 0000000000F0: 5600123A
;   v_sub_f32     v2, s82, v20                            // 0000000000F4: 08042852
;   v_mul_legacy_f32  v15, v1, v1                         // 0000000000F8: 0E1E0301
;   v_mul_legacy_f32  v14, s60, v4                        // 0000000000FC: 0E1C083C
;   v_fmac_f32    v3, v10, v10                            // 000000000100: 5606150A
;   v_mul_legacy_f32  v16, s64, v4                        // 000000000104: 0E200840
;   v_mul_legacy_f32  v23, s68, v4                        // 000000000108: 0E2E0844
;   v_fmac_f32    v15, v8, v8                             // 00000000010C: 561E1108
;   v_mul_legacy_f32  v17, s76, v4                        // 000000000110: 0E22084C
;   v_fmac_f32    v3, v0, v0                              // 000000000114: 56060100
;   v_fmac_f32    v14, s61, v5                            // 000000000118: 561C0A3D
;   v_fmac_f32    v16, s65, v5                            // 00000000011C: 56200A41
;   v_fmac_f32    v15, v2, v2                             // 000000000120: 561E0502
;   v_fmac_f32    v23, s69, v5                            // 000000000124: 562E0A45
;   v_rsq_f32     v9, v3                                  // 000000000128: 7E125D03
;   v_fmac_f32    v17, s77, v5                            // 00000000012C: 56220A4D
;   v_fmac_f32    v14, s62, v6                            // 000000000130: 561C0C3E
;   v_fmac_f32    v16, s66, v6                            // 000000000134: 56200C42
;   v_fmac_f32    v23, s70, v6                            // 000000000138: 562E0C46
;   v_rsq_f32     v15, v15                                // 00000000013C: 7E1E5D0F
;   v_fmac_f32    v17, s78, v6                            // 000000000140: 56220C4E
;   v_fmac_f32    v14, s63, v7                            // 000000000144: 561C0E3F
;   v_fmac_f32    v16, s67, v7                            // 000000000148: 56200E43
;   v_fmac_f32    v23, s71, v7                            // 00000000014C: 562E0E47
;   v_mul_legacy_f32  v20, v9, v11                        // 000000000150: 0E281709
;   v_mul_legacy_f32  v10, v9, v10                        // 000000000154: 0E141509
;   v_fmac_f32    v17, s79, v7                            // 000000000158: 56220E4F
;   v_mul_legacy_f32  v0, v9, v0                          // 00000000015C: 0E000109
;   v_mul_legacy_f32  v5, s1, v5                          // 000000000160: 0E0A0A01
;   v_mul_legacy_f32  v1, v1, v15                         // 000000000164: 0E021F01
;   v_mul_legacy_f32  v3, s24, v10                        // 000000000168: 0E061418
;   v_mul_legacy_f32  v8, v8, v15                         // 00000000016C: 0E101F08
;   exp           pos0, v14, v16, v23, v17 done           // 000000000170: F80008CF 1117100E
;   s_waitcnt     expcnt(0)                               // 000000000178: BF8CFF0F
;   v_mul_legacy_f32  v14, s28, v10                       // 00000000017C: 0E1C141C
;   v_mul_legacy_f32  v19, v1, v20                        // 000000000180: 0E262901
;   v_fma_f32     v3, -s25, v20, -v3                      // 000000000184: D54B0003 A40E2819
;   v_mul_legacy_f32  v2, v2, v15                         // 00000000018C: 0E041F02
;   v_mul_legacy_f32  v15, s32, v10                       // 000000000190: 0E1E1420
;   v_fma_f32     v14, -s29, v20, -v14                    // 000000000194: D54B000E A43A281D
;   v_fma_f32     v9, v8, v10, v19                        // 00000000019C: D54B0009 044E1508
;   v_fmac_f32    v3, -s26, v0                            // 0000000001A4: D52B0003 2002001A
;   v_fmac_f32    v5, s0, v4                              // 0000000001AC: 560A0800
;   v_fma_f32     v15, -s33, v20, -v15                    // 0000000001B0: D54B000F A43E2821
;   s_buffer_load_dwordx2  s[4:5], s[72:75], 0x000010     // 0000000001B8: F4240124 FA000010
;   v_fmac_f32    v9, v2, v0                              // 0000000001C0: 56120102
;   v_fmac_f32    v14, -s30, v0                           // 0000000001C4: D52B000E 2002001E
;   v_cmp_gt_f32  vcc, 0, v3                              // 0000000001CC: 7C080680
;   v_fmac_f32    v15, -s34, v0                           // 0000000001D0: D52B000F 20020022
;   v_fma_f32     v19, -v8, v10, -v19                     // 0000000001D8: D54B0013 A44E1508
;   v_sub_f32     v4, 1.0, abs(v9)                        // 0000000001E0: D5040204 000212F2
;   v_fmac_f32    v5, s3, v7                              // 0000000001E8: 560A0E03
;   v_cndmask_b32  v9, 1.0, 0, vcc                        // 0000000001EC: D5010009 01A900F2
;   v_cmp_gt_f32  vcc, 0, v14                             // 0000000001F4: 7C081C80
;   v_fmac_f32    v19, -v2, v0 mul:2                      // 0000000001F8: D52B0013 28020102
;   v_max_f32     v4, 0, v4                               // 000000000200: 20080880
;   v_fmac_f32    v5, v6, s2 clamp                        // 000000000204: D52B8005 00000506
;   v_mul_legacy_f32  v3, v9, v3                          // 00000000020C: 0E060709
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 000000000210: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v15                             // 000000000218: 7C081E80
;   v_log_f32     v4, v4                                  // 00000000021C: 7E084F04
;   v_mov_b32     v11, 1.0                                // 000000000220: 7E1602F2
;   v_mov_b32     v7, s19                                 // 000000000224: 7E0E0213
;   v_mul_legacy_f32  v14, v16, v14                       // 000000000228: 0E1C1D10
;   v_cndmask_b32  v17, 1.0, 0, vcc                       // 00000000022C: D5010011 01A900F2
;   v_mul_legacy_f32  v16, s36, v3                        // 000000000234: 0E200624
;   v_fma_f32     v6, -v19, v10, -v8                      // 000000000238: D54B0006 A4221513
;   v_fma_f32     v1, -v19, v20, -v1                      // 000000000240: D54B0001 A4062913
;   v_fma_f32     v0, -v19, v0, -v2                       // 000000000248: D54B0000 A40A0113
;   v_mul_legacy_f32  v22, v17, v15                       // 000000000250: 0E2C1F11
;   v_mul_legacy_f32  v17, s37, v3                        // 000000000254: 0E220625
;   v_mul_legacy_f32  v3, s38, v3                         // 000000000258: 0E060626
;   s_waitcnt     lgkmcnt(0)                              // 00000000025C: BF8CC07F
;   v_mul_legacy_f32  v4, s5, v4                          // 000000000260: 0E080805
;   v_fmac_f32    v16, s40, v14                           // 000000000264: 56201C28
;   v_fmac_f32    v17, s41, v14                           // 000000000268: 56221C29
;   v_fmac_f32    v3, s42, v14                            // 00000000026C: 56061C2A
;   v_exp_f32     v4, v4                                  // 000000000270: 7E084B04
;   v_fmac_f32    v16, s44, v22                           // 000000000274: 56202C2C
;   v_fmac_f32    v17, s45, v22                           // 000000000278: 56222C2D
;   v_fmac_f32    v3, s46, v22                            // 00000000027C: 56062C2E
;   v_fma_f32     v8, s16, v16, s20                       // 000000000280: D54B0008 00522010
;   v_fma_f32     v10, s17, v17, s21                      // 000000000288: D54B000A 00562211
;   v_fma_f32     v17, s18, v3, s22                       // 000000000290: D54B0011 005A0612
;   v_mul_legacy_f32  v4, s4, v4                          // 000000000298: 0E080804
;   exp           param0, v8, v10, v17, v7                // 00000000029C: F800020F 07110A08
;   exp           param1, v4, v4, v4, v5                  // 0000000002A4: F800021F 05040404
;   exp           param2, v12, v13, v18, v11              // 0000000002AC: F800022F 0B120D0C
;   exp           param3, v6, v1, v0, v11                 // 0000000002B4: F800023F 0B000106
;   s_endpgm                                              // 0000000002BC: BF810000
;   s_code_end                                            // 0000000002C0: BF9F0000
;   s_code_end                                            // 0000000002C4: BF9F0000
;   s_code_end                                            // 0000000002C8: BF9F0000
;   s_code_end                                            // 0000000002CC: BF9F0000
;   s_code_end                                            // 0000000002D0: BF9F0000
;   s_code_end                                            // 0000000002D4: BF9F0000
;   s_code_end                                            // 0000000002D8: BF9F0000
;   s_code_end                                            // 0000000002DC: BF9F0000
;   s_code_end                                            // 0000000002E0: BF9F0000
;   s_code_end                                            // 0000000002E4: BF9F0000
;   s_code_end                                            // 0000000002E8: BF9F0000
;   s_code_end                                            // 0000000002EC: BF9F0000
;   s_code_end                                            // 0000000002F0: BF9F0000
;   s_code_end                                            // 0000000002F4: BF9F0000
;   s_code_end                                            // 0000000002F8: BF9F0000
;   s_code_end                                            // 0000000002FC: BF9F0000
;   s_code_end                                            // 000000000300: BF9F0000
;   s_code_end                                            // 000000000304: BF9F0000
;   s_code_end                                            // 000000000308: BF9F0000
;   s_code_end                                            // 00000000030C: BF9F0000
;   s_code_end                                            // 000000000310: BF9F0000
;   s_code_end                                            // 000000000314: BF9F0000
;   s_code_end                                            // 000000000318: BF9F0000
;   s_code_end                                            // 00000000031C: BF9F0000
;   s_code_end                                            // 000000000320: BF9F0000
;   s_code_end                                            // 000000000324: BF9F0000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 37
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSEnvMapFresnelBn)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
; 
;   num_output_semantics: 4
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       param_idx: 3
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 6 {
;     vs_export_count: 3
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 16
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000011000000110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000000000011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=24,NumSGPR=86,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:108,SAlu:11,VMem:0,SMem:8,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char EnvironmentMapEffect_VSEnvMapFresnelBn[] = {
  0x44, 0x58, 0x42, 0x43, 0xc4, 0x16, 0xe3, 0xb7, 0x2c, 0xc4, 0x90, 0x70,
  0x71, 0xb2, 0x2b, 0x5e, 0x5a, 0x68, 0xf9, 0xc2, 0x01, 0x00, 0x00, 0x00,
  0x34, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00,
  0x1c, 0x03, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
  0xbc, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xc4, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xae, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x6c, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x05, 0x00, 0x03,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52,
  0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x56, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x46, 0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x42, 0x6e,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0xf0, 0x70, 0x0f, 0x00, 0xf0, 0x70, 0x0f, 0x00,
  0xf0, 0x70, 0x0f, 0x00, 0xf0, 0x70, 0x0f, 0x00, 0x77, 0x70, 0x00, 0x00,
  0x77, 0x70, 0x00, 0x00, 0x77, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x46, 0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x42, 0x6e,
  0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x2b, 0x85, 0x6a,
  0x36, 0x30, 0x65, 0xaf, 0x26, 0x1c, 0xf8, 0xb7, 0x07, 0x3e, 0x44, 0x05,
  0x44, 0x58, 0x49, 0x4c, 0x70, 0x12, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x9c, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x94, 0x0e, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xac, 0x0e, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x0c, 0x0f, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x20, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x30, 0x0f, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x60, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xab, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x94, 0x0e, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3,
  0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0,
  0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95,
  0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60,
  0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8,
  0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04,
  0x0c, 0x23, 0x0c, 0xc3, 0x30, 0x02, 0x31, 0xe4, 0x40, 0x97, 0x04, 0xde,
  0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04,
  0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0xba, 0x61, 0xf0, 0xba, 0xef, 0xeb,
  0x3a, 0x0f, 0xfc, 0x40, 0x0a, 0x93, 0x81, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x20, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb9, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xa3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x00,
  0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a, 0x81, 0x8a, 0x92, 0x18,
  0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0x12, 0x67, 0x00, 0x68, 0x1c, 0x8b,
  0x51, 0x28, 0xf8, 0xe4, 0x3d, 0xf8, 0xe4, 0x3d, 0xf8, 0xe4, 0x3d, 0xf8,
  0xe4, 0xbd, 0x7b, 0xe4, 0xee, 0x91, 0xbb, 0x47, 0x0e, 0x00, 0x11, 0x10,
  0x02, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x62, 0x90, 0x11, 0x98, 0x20, 0x10, 0xce, 0x06, 0xe4, 0x70,
  0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d, 0x20, 0x00, 0x40, 0x02,
  0x26, 0x08, 0x63, 0xa0, 0x6d, 0x08, 0xa8, 0x09, 0x82, 0x00, 0x30, 0xb2,
  0x9a, 0x2a, 0x72, 0xb3, 0x6b, 0x0a, 0x83, 0x33, 0x92, 0x2b, 0x9b, 0x73,
  0x2b, 0x63, 0x13, 0x72, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97,
  0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa8, 0x09, 0x42, 0x51, 0x6d,
  0x08, 0x8e, 0x09, 0x42, 0x61, 0x4d, 0x10, 0x88, 0x67, 0x82, 0x40, 0x40,
  0x1b, 0x84, 0xce, 0xdb, 0xb0, 0x1c, 0x58, 0xa6, 0x6d, 0x9a, 0xc1, 0x1d,
  0xda, 0x47, 0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x5c,
  0x13, 0x04, 0x22, 0xda, 0x20, 0x74, 0x63, 0xb0, 0x61, 0x31, 0xc2, 0x20,
  0xd3, 0x36, 0xcd, 0x10, 0x03, 0x43, 0x23, 0x83, 0x09, 0x02, 0x21, 0x11,
  0xa1, 0x2a, 0xc2, 0x1a, 0x7a, 0x7a, 0x92, 0x22, 0x9a, 0x20, 0x14, 0xd8,
  0x06, 0xa1, 0xeb, 0x36, 0x2c, 0x66, 0x70, 0x06, 0x99, 0xb6, 0x69, 0x06,
  0x1a, 0x98, 0x81, 0x96, 0x06, 0x1b, 0x06, 0x30, 0x28, 0x03, 0x35, 0x60,
  0x31, 0xf4, 0xc4, 0xf4, 0x24, 0xb5, 0x61, 0x39, 0xd8, 0x20, 0xd3, 0x36,
  0x34, 0x30, 0xb8, 0x43, 0xfb, 0x36, 0x04, 0xc6, 0x86, 0xc5, 0x60, 0x83,
  0x4c, 0x73, 0x03, 0x34, 0x30, 0x38, 0x43, 0xfb, 0x36, 0x2c, 0x66, 0x70,
  0x06, 0x99, 0xb6, 0xa1, 0x81, 0x81, 0x06, 0x66, 0xa0, 0xa5, 0xc1, 0x86,
  0xa5, 0x3b, 0x83, 0x4c, 0x73, 0x03, 0x34, 0x30, 0xc4, 0xa0, 0xd3, 0xc8,
  0x60, 0x82, 0x40, 0x4c, 0x1b, 0x16, 0x39, 0xc0, 0x32, 0x31, 0xd8, 0x38,
  0x83, 0x93, 0x03, 0xed, 0xdb, 0x50, 0xb4, 0xc1, 0x1b, 0xc0, 0x41, 0x1c,
  0xcc, 0xc1, 0x86, 0x61, 0x0d, 0xe8, 0x00, 0xd8, 0x50, 0x58, 0x57, 0x1d,
  0x4c, 0x40, 0x2b, 0x3c, 0xb1, 0x37, 0x3c, 0x97, 0xb1, 0xb7, 0x36, 0xb8,
  0x34, 0xb6, 0x32, 0x39, 0x97, 0x37, 0x38, 0xba, 0xb4, 0x37, 0xb7, 0xb9,
  0x29, 0x81, 0x50, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc,
  0x8d, 0x6e, 0x4a, 0x40, 0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b,
  0x4b, 0x7b, 0x73, 0x9b, 0x12, 0x1c, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2,
  0xd8, 0xec, 0xca, 0xe4, 0xa6, 0x04, 0x49, 0x1d, 0x32, 0x3c, 0x97, 0x39,
  0xb4, 0x30, 0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x01,
  0x53, 0x86, 0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac,
  0x6c, 0x6e, 0x4a, 0x20, 0xd5, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb,
  0x4b, 0x22, 0x9b, 0xa2, 0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x50, 0x75, 0xc8,
  0xf0, 0x5c, 0xca, 0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8,
  0xe6, 0xa6, 0x04, 0x75, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x10, 0xbd, 0xac,
  0xd7, 0x54, 0x26, 0xf0, 0x7c, 0x11, 0x21, 0x35, 0xc4, 0xb2, 0x35, 0x56,
  0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5,
  0x6d, 0xdb, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05,
  0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6,
  0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21,
  0xd0, 0x0c, 0x0b, 0x61, 0x03, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce,
  0x74, 0xfb, 0xc5, 0x6d, 0x9b, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83,
  0x33, 0xe1, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd5,
  0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4,
  0xe4, 0x17, 0xb7, 0x6d, 0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44,
  0x34, 0x21, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c, 0xbe,
  0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x14, 0x5c, 0x61, 0x94, 0x51, 0x71, 0x95, 0x5d, 0x29,
  0xcc, 0x00, 0x94, 0x5b, 0xc9, 0x94, 0x4a, 0xb9, 0x94, 0x5c, 0x69, 0x14,
  0x47, 0x51, 0x94, 0x48, 0x91, 0x94, 0x49, 0x49, 0x14, 0x4a, 0xb1, 0xd0,
  0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82,
  0x20, 0xfe, 0x8d, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x02, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xa0, 0xb9, 0xc1, 0xf3, 0xb1, 0x01, 0x1b, 0x70, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xdc, 0x41, 0x19, 0x98, 0x41, 0x1b, 0x8c,
  0x41, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1e, 0x98, 0xc1,
  0x19, 0xb8, 0x41, 0x67, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91,
  0x07, 0x67, 0x00, 0x07, 0x6f, 0x50, 0x06, 0xd7, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0x7a, 0x80, 0x06, 0x71, 0x00, 0x07, 0x1f, 0x36, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1e, 0xa4, 0x81, 0x1c, 0xc4, 0x01,
  0x19, 0x64, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf0, 0x81, 0x1a,
  0xc8, 0x81, 0x1c, 0xa0, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x1f, 0xac, 0xc1, 0x1c, 0xcc, 0x81, 0x18, 0x6c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf8, 0x01, 0x1b, 0xd0, 0x01, 0x1d, 0x9c, 0x01,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1f, 0xb4, 0x41, 0x1d,
  0xd4, 0x41, 0x1a, 0x74, 0x76, 0x34, 0xf2, 0xb1, 0xc3, 0x91, 0x8f, 0x1d,
  0x8f, 0x7c, 0x6c, 0x90, 0xe0, 0x63, 0xc3, 0x04, 0x1f, 0x1b, 0x28, 0xf8,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x05, 0x0a, 0x66, 0x00, 0x79,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a,
  0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0x95, 0xc2, 0x1a,
  0x54, 0x62, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x95,
  0x2a, 0xc0, 0x81, 0x16, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0xe6, 0x64, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x15, 0xee, 0x20, 0x73, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x60, 0x01, 0x0f, 0x32, 0x27, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x2b, 0x16, 0xf2, 0x20, 0x73, 0x02,
  0x6b, 0x3a, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x35, 0x0b,
  0x7b, 0xd0, 0x35, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xb4,
  0xc0, 0x07, 0x5d, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x55,
  0x0b, 0x7d, 0xd0, 0x35, 0x81, 0x31, 0x61, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0x6e, 0xe1, 0x0f, 0xc2, 0x80, 0x09, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xc2, 0x05, 0x50, 0x08, 0x03, 0x26, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x2b, 0x17, 0x42, 0x21, 0x0c, 0x98,
  0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0x5d, 0x08, 0x85, 0x35,
  0xb8, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0xa1, 0x89, 0x8f, 0x0d, 0x4a, 0x7c, 0x6c, 0x38, 0xe2, 0x33, 0x62,
  0xb0, 0x00, 0x20, 0x08, 0x06, 0x8a, 0x39, 0x94, 0xc2, 0x20, 0x04, 0x83,
  0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x63, 0x0e, 0xa5, 0x10,
  0x58, 0x11, 0xc8, 0xc7, 0x0a, 0x41, 0x3e, 0x56, 0x0c, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0xea, 0x1c, 0x5a, 0xe1, 0x0e, 0x44, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x5a, 0x87, 0x58, 0xd8, 0x83, 0x52, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0xde, 0xa1, 0x16, 0xfe, 0x00, 0x15, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x16, 0x3b,
  0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xf3, 0xb0, 0x0b,
  0x76, 0xb0, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xd1, 0x03,
  0x2f, 0xd8, 0xc1, 0x12, 0x98, 0x92, 0x07, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0xcb, 0x1e, 0x7c, 0x21, 0x0f, 0x94, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xae, 0x7b, 0xf8, 0x85, 0x3c, 0x50, 0x02, 0x4b,
  0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xe5, 0x43,
  0x38, 0xf0, 0x41, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xa5,
  0x0f, 0xe2, 0xc0, 0x07, 0x49, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06,
  0x0a, 0x48, 0xfc, 0xc2, 0x41, 0x04, 0x07, 0x11, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x01, 0x03, 0x12, 0xbf, 0x10, 0x58, 0x90, 0xc8, 0xc7, 0x84,
  0x43, 0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0x2a, 0x24, 0xce, 0x21, 0x16, 0xea, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0,
  0x2a, 0x89, 0x75, 0xa8, 0x85, 0x7d, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8,
  0x52, 0xe2, 0x1d, 0x72, 0xc1, 0x1d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa,
  0x96, 0x98, 0x87, 0x5e, 0x40, 0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x2a,
  0x26, 0xee, 0x21, 0x1c, 0x56, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xaa,
  0x89, 0x7d, 0x28, 0x87, 0x76, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x04, 0x53, 0x07, 0x2b, 0x3e, 0xb6, 0x0e, 0x56, 0x7c,
  0x8c, 0x1d, 0xa0, 0xf8, 0x58, 0x3b, 0x40, 0xf1, 0x31, 0x77, 0x50, 0xe2,
  0x63, 0xef, 0xa0, 0xc4, 0xc7, 0xc2, 0xa0, 0x93, 0x8f, 0xc5, 0x43, 0x10,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xc0, 0x02, 0x25, 0x10,
  0x31, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x0a, 0x8b, 0x94,
  0x40, 0xc4, 0x20, 0xb0, 0x32, 0xc8, 0xe4, 0x63, 0xf5, 0x10, 0xc4, 0x67,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xb2, 0x60, 0x09, 0xc5, 0x0c,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xca, 0xa2, 0x25, 0x14,
  0x33, 0x08, 0x2c, 0x0d, 0x2a, 0xf9, 0x58, 0x3e, 0x04, 0xf1, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x0b, 0x2d, 0x60, 0x82, 0x51, 0x83, 0x60,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae, 0xb4, 0x88, 0x09, 0x46, 0x0d,
  0x82, 0xe1, 0x88, 0xa4, 0x1f, 0x88, 0x6f, 0x38, 0xc2, 0xf0, 0x07, 0xe2,
  0x1b, 0x8e, 0x18, 0xfe, 0x81, 0xf8, 0xa6, 0x1b, 0x40, 0x42, 0x24, 0x86,
  0xe9, 0x86, 0x90, 0x18, 0x89, 0x61, 0xba, 0x41, 0x24, 0x48, 0x62, 0xb0,
  0xe1, 0x91, 0x8f, 0x0d, 0x8c, 0x7c, 0x6c, 0x48, 0xe4, 0x63, 0x83, 0x1b,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xba, 0xe0, 0x89,
  0xe1, 0x0c, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xea, 0xa2,
  0x27, 0x06, 0x30, 0x08, 0xcc, 0x80, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0xc1, 0x75, 0x17, 0x3f, 0x61, 0xa4, 0x41, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x17, 0x5e, 0x80, 0x85, 0x21, 0x06, 0x81, 0x25,
  0x72, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xf4, 0x42,
  0x2c, 0x92, 0x35, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xda,
  0x8b, 0xb1, 0x48, 0xc8, 0x20, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0xaa, 0x2f, 0xc6, 0xa2, 0x25, 0xe4, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f,
  0x1b, 0x0e, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x45, 0x1a,
  0x6a, 0x41, 0x13, 0x7c, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0x76, 0x0c, 0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03,
  0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x5a, 0x8d, 0xb8, 0xd8,
  0x09, 0xb1, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18,
  0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x0a,
  0x36, 0xec, 0x02, 0x2c, 0xe2, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xaa, 0xda, 0xd8, 0x8b, 0xb2, 0x58, 0x8b, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x74, 0x03, 0x34, 0xd4, 0x42, 0x2f,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34,
  0x81, 0x18, 0x6c, 0x4a, 0x0b, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0xf5, 0x1b, 0xa7, 0x91, 0x16, 0x53, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x78, 0xa0, 0x46, 0x5a, 0x4c, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xe1, 0x91, 0x1a, 0x69, 0x31, 0x05, 0x26, 0xb5,
  0x85, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x1a, 0x8f, 0xd5,
  0x68, 0x0b, 0x29, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8b, 0x3c,
  0x58, 0xa3, 0x2d, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae,
  0xf2, 0x68, 0x8d, 0xb6, 0x90, 0x02, 0x8b, 0xe2, 0x42, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0x9d, 0xc7, 0x6b, 0xc4, 0x45, 0x14, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x85, 0x1e, 0xb0, 0x11, 0x17, 0x51,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x7a, 0xc4, 0x46, 0x5c,
  0x44, 0x81, 0x41, 0x75, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xb8, 0xd6, 0x63, 0x36, 0xea, 0x02, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xe0, 0x62, 0x0f, 0xda, 0xa8, 0x0b, 0x28, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0xab, 0x3d, 0x6a, 0xa3, 0x2e, 0xa0, 0x60, 0x34, 0x41,
  0x0e, 0x86, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xe8, 0x63, 0x36,
  0x58, 0x62, 0x25, 0x54, 0x42, 0x1e, 0xe2, 0x01, 0x1e, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0x8a, 0x8f, 0xdb, 0x08, 0x0d, 0xf7, 0x18, 0x4d,
  0x08, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xec, 0xa3, 0x3d,
  0x06, 0x43, 0x8d, 0x20, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0xe0,
  0xdc, 0x47, 0x6f, 0x04, 0xa7, 0x31, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x4c, 0x7e, 0xd8, 0x46, 0x60, 0x41, 0x21, 0x9f, 0x11, 0x03, 0x03, 0x00,
  0x41, 0x30, 0x60, 0xf6, 0x23, 0x37, 0x82, 0xd1, 0x04, 0x04, 0xb0, 0x40,
  0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xfb, 0x11, 0x1e,
  0xab, 0x41, 0x1e, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0x00,
  0x85, 0x88, 0x7a, 0xa8, 0x46, 0x6a, 0xa0, 0xc6, 0x69, 0x10, 0x83, 0x10,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x43, 0x22, 0xf7, 0x11, 0xd8,
  0x6c, 0xf8, 0x44, 0x7c, 0x8c, 0x36, 0x7c, 0x22, 0x3e, 0x56, 0x1b, 0x3e,
  0x11, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0x52, 0x04, 0x3d,
  0x06, 0x21, 0x38, 0x09, 0x93, 0x28, 0x09, 0x0b, 0x72, 0x43, 0x3e, 0x16,
  0xa4, 0x84, 0x7c, 0x4c, 0x48, 0x09, 0xf9, 0xd8, 0x90, 0x12, 0xf2, 0x31,
  0x64, 0x88, 0x8f, 0x21, 0x43, 0x7c, 0x0c, 0x19, 0xe2, 0x33, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x88, 0x8c, 0xc8, 0x47, 0x8a, 0xa4, 0xc8, 0x7f,
  0x94, 0xc2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x22, 0x1f,
  0x29, 0x92, 0x22, 0xf8, 0x41, 0x0a, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x80, 0xc8, 0x88, 0x7c, 0xa4, 0x48, 0x8a, 0xf0, 0xc7, 0x28, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x23, 0xf2, 0x91, 0x22, 0x29, 0xd2,
  0x1f, 0xde, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x22, 0x1f,
  0x2a, 0x92, 0x22, 0xff, 0x31, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x22, 0x23, 0xf2, 0xa1, 0x22, 0x29, 0x82, 0x1f, 0xd3, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x20, 0x32, 0x22, 0x1f, 0x2a, 0x92, 0x22, 0xfc, 0x31,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x23, 0xf2, 0xa1, 0x22,
  0x29, 0xd2, 0x1f, 0xcc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32,
  0x22, 0x1f, 0x22, 0x92, 0x22, 0xff, 0xc1, 0x1b, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0xc8, 0x88, 0x7c, 0x88, 0x48, 0x8a, 0xe0, 0xc7, 0x6e,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x22, 0x23, 0xf2, 0x51, 0x22,
  0x29, 0xf2, 0x1f, 0xc3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32,
  0x22, 0x1f, 0x25, 0x92, 0x22, 0xf8, 0x21, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x22, 0x23, 0xf2, 0x51, 0x22, 0x29, 0xc2, 0x1f, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x32, 0x22, 0x1f, 0x21, 0x92, 0x22,
  0xff, 0xb1, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xc8, 0x88,
  0x7c, 0x84, 0x48, 0x8a, 0xe0, 0xc7, 0x19, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x22, 0x23, 0xf2, 0x11, 0x22, 0x29, 0xc2, 0x1f, 0x63, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x88, 0x8c, 0xc8, 0x47, 0x88, 0xa4,
  0x48, 0x7f, 0x7c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c,
  0x44, 0x37, 0x6f, 0x3c, 0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe5, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x55,
  0xcf, 0x6f, 0x1b, 0x55, 0x10, 0x9e, 0xf7, 0xc3, 0xcf, 0xcf, 0xcf, 0x9b,
  0xf1, 0xae, 0xed, 0x24, 0x05, 0x6d, 0xed, 0xed, 0xca, 0x8d, 0x36, 0x8d,
  0x6b, 0x0c, 0x82, 0x52, 0x2a, 0x48, 0x4a, 0x49, 0x83, 0xaa, 0x36, 0x4d,
  0xdb, 0x48, 0x73, 0xa8, 0x54, 0xa9, 0x3d, 0xe4, 0x56, 0xa5, 0x51, 0x2b,
  0xf5, 0x14, 0x19, 0x23, 0x81, 0xc4, 0x21, 0x7f, 0x02, 0x12, 0x3d, 0xf8,
  0x82, 0x04, 0xa2, 0x7f, 0x81, 0x53, 0x6e, 0x08, 0x84, 0x38, 0xed, 0x95,
  0x3b, 0x27, 0x50, 0xe4, 0x43, 0xd4, 0x03, 0x66, 0xb6, 0xb1, 0x15, 0x37,
  0x55, 0x51, 0xc5, 0x05, 0x18, 0x69, 0xf4, 0xbd, 0x99, 0xf9, 0xe6, 0x8d,
  0x3d, 0x6f, 0x3c, 0x5e, 0x59, 0x5f, 0x5f, 0x15, 0x02, 0x20, 0x35, 0xf0,
  0x4c, 0x46, 0x00, 0xbf, 0xf7, 0xbf, 0xfd, 0xf5, 0xef, 0xf4, 0xf1, 0x2b,
  0xf2, 0x5e, 0xa6, 0x72, 0x94, 0xbf, 0x0c, 0xff, 0x4c, 0xc6, 0xf7, 0xec,
  0x8f, 0x2e, 0x3a, 0xaf, 0x0e, 0x63, 0x1a, 0x50, 0xeb, 0x23, 0xfc, 0xb3,
  0xa3, 0x2f, 0xf6, 0xe5, 0x08, 0x73, 0xac, 0xe2, 0x19, 0x57, 0xc2, 0x93,
  0x09, 0xde, 0x31, 0xb8, 0x9d, 0x13, 0x13, 0xf6, 0xe3, 0x11, 0x3f, 0xf3,
  0x9d, 0x9c, 0xa8, 0x6b, 0xa0, 0xa4, 0x95, 0x11, 0x79, 0x2b, 0x8d, 0x54,
  0x9e, 0x80, 0xff, 0x9a, 0x64, 0xed, 0x38, 0xf8, 0xe8, 0x26, 0x7b, 0x5e,
  0x30, 0x32, 0x6b, 0x94, 0x51, 0x0a, 0xfe, 0x3f, 0x92, 0xbd, 0x61, 0x38,
  0xa1, 0x66, 0xe4, 0x9b, 0x14, 0xff, 0x88, 0xdd, 0x6e, 0x3f, 0x6f, 0xff,
  0xf1, 0xee, 0xab, 0xd5, 0xca, 0x2f, 0x74, 0xd3, 0xcf, 0xd3, 0x3f, 0xd5,
  0x99, 0xf6, 0xc6, 0x77, 0x73, 0x61, 0x37, 0xdd, 0xbf, 0x37, 0x54, 0xf9,
  0xc5, 0xe5, 0x9c, 0x3e, 0xf1, 0x59, 0x5f, 0xc1, 0xa3, 0xdd, 0xa9, 0xe1,
  0xa5, 0x2f, 0xb2, 0x6a, 0x9e, 0xfa, 0xa1, 0xff, 0xbd, 0xfa, 0xb1, 0x3f,
  0x54, 0x3f, 0xf5, 0xbf, 0x59, 0x13, 0xc1, 0xd6, 0xd2, 0xce, 0x2e, 0xc0,
  0xe5, 0xd4, 0xfe, 0xf6, 0xb3, 0x6a, 0x40, 0x7b, 0xc0, 0xb3, 0xf4, 0xb4,
  0xe1, 0xb5, 0x07, 0xbe, 0x60, 0xac, 0x26, 0x83, 0x47, 0x6c, 0x0b, 0x8e,
  0x17, 0x38, 0x5e, 0x60, 0x74, 0x19, 0x4f, 0xb7, 0x07, 0x51, 0xc6, 0xb3,
  0xed, 0xc1, 0xed, 0x0c, 0xfd, 0xe6, 0xe0, 0x5a, 0xc6, 0xaf, 0x24, 0x83,
  0x2d, 0xc6, 0xae, 0x6c, 0x74, 0x3e, 0x79, 0xb2, 0xb3, 0x6b, 0x6d, 0x84,
  0xda, 0xfa, 0xe8, 0xd9, 0x04, 0xdf, 0x86, 0x19, 0x6c, 0x43, 0x15, 0x0b,
  0x2e, 0xa2, 0x9c, 0xf3, 0xe9, 0x2c, 0x00, 0x4e, 0xb9, 0x84, 0xde, 0x91,
  0x33, 0xe4, 0xbc, 0x88, 0x8c, 0xe7, 0xd3, 0x9b, 0xb2, 0x4a, 0xef, 0x49,
  0x20, 0xf4, 0x12, 0x2a, 0x62, 0x44, 0x79, 0xf4, 0xe9, 0x4c, 0x79, 0x86,
  0xde, 0x2a, 0x57, 0xa9, 0x84, 0x09, 0x5d, 0x8f, 0xa4, 0xbd, 0xe6, 0xfb,
  0xb6, 0x38, 0x6b, 0xf0, 0x5c, 0x19, 0xe8, 0x46, 0xa2, 0xad, 0x50, 0x35,
  0x7c, 0xdf, 0x86, 0xe8, 0xa6, 0x0d, 0x9d, 0xe7, 0x7a, 0xcb, 0xb6, 0x85,
  0x36, 0xa8, 0xd1, 0x15, 0x1b, 0x23, 0x08, 0x43, 0x1f, 0xb8, 0x90, 0x3e,
  0xe4, 0x9a, 0x32, 0x57, 0xa3, 0x8b, 0xae, 0x45, 0xea, 0x56, 0xb9, 0xb3,
  0xea, 0x62, 0x5a, 0xf4, 0x42, 0xba, 0xc0, 0x75, 0x57, 0xbc, 0x16, 0x95,
  0x6e, 0xd5, 0x3a, 0x57, 0xbd, 0x98, 0x96, 0x30, 0xa4, 0x8f, 0xb8, 0xee,
  0xc7, 0xd8, 0xa2, 0xc2, 0x6c, 0x82, 0x85, 0xe9, 0x2a, 0xae, 0x61, 0x4c,
  0x05, 0x01, 0x28, 0x9c, 0x43, 0x51, 0x97, 0x78, 0xac, 0x6a, 0xd0, 0xd6,
  0x7d, 0xfc, 0xc5, 0xc2, 0x3e, 0xfa, 0xb3, 0x41, 0x69, 0xb8, 0xb3, 0x1b,
  0x56, 0x43, 0x14, 0xf3, 0x73, 0xa8, 0xb8, 0x3f, 0xaf, 0x25, 0xd8, 0x93,
  0x75, 0x8d, 0x51, 0xb5, 0x86, 0xc8, 0xf6, 0xf1, 0xe4, 0x5c, 0x2f, 0xeb,
  0x9b, 0x9d, 0xbe, 0xaa, 0x15, 0x2c, 0xa4, 0xaf, 0x83, 0x8c, 0xc0, 0x3a,
  0x2a, 0xb1, 0xef, 0x44, 0xb2, 0xd8, 0x6b, 0x88, 0xc6, 0x80, 0x67, 0xe0,
  0xa9, 0x14, 0x65, 0x42, 0x8e, 0xd7, 0x38, 0xde, 0x35, 0x76, 0xbb, 0xc4,
  0xe7, 0x98, 0xcf, 0x95, 0x83, 0xdc, 0x9e, 0x96, 0x3a, 0xdd, 0x2b, 0x4b,
  0x50, 0xe8, 0xa8, 0x00, 0x22, 0xdd, 0x83, 0xaf, 0x45, 0x37, 0xb4, 0xdb,
  0x15, 0xe6, 0x49, 0x21, 0x93, 0x2e, 0x37, 0x3b, 0xd7, 0x5d, 0x48, 0x0d,
  0x2f, 0x86, 0x42, 0xde, 0xa0, 0x3f, 0xe6, 0xd4, 0xec, 0xb6, 0x5e, 0xb3,
  0x9d, 0x3d, 0x39, 0xd3, 0xa9, 0x48, 0xec, 0xf8, 0xc7, 0x43, 0x0c, 0x46,
  0xb1, 0x86, 0x89, 0xd0, 0xf0, 0xfd, 0x95, 0xe9, 0xb8, 0x97, 0xbd, 0x71,
  0x65, 0xde, 0xf4, 0xb2, 0x59, 0xa8, 0x08, 0xd7, 0x0b, 0xea, 0x4d, 0x3c,
  0x69, 0x62, 0x9c, 0x33, 0x06, 0xb3, 0xb7, 0xcc, 0x59, 0x8b, 0x49, 0x18,
  0xd1, 0x7c, 0x18, 0xd3, 0xa9, 0xd0, 0x90, 0xbe, 0x6c, 0x3b, 0xcd, 0x66,
  0x44, 0xa7, 0x9b, 0x31, 0xb5, 0x9a, 0x86, 0x2c, 0xe7, 0xf9, 0xd1, 0x0d,
  0x70, 0x8c, 0x41, 0x4c, 0x10, 0x30, 0x96, 0xcd, 0x4d, 0xd0, 0x9c, 0x57,
  0x92, 0xb0, 0x6f, 0x5d, 0x90, 0xaf, 0x33, 0x6a, 0xad, 0x73, 0x6f, 0x30,
  0x7a, 0x53, 0xe5, 0xe2, 0x12, 0xa3, 0x11, 0x50, 0x04, 0xf8, 0x94, 0x67,
  0xf0, 0xab, 0x7f, 0x55, 0xc7, 0x7b, 0x65, 0xbc, 0x09, 0x2d, 0x1c, 0xec,
  0xa0, 0x49, 0x1f, 0xcf, 0xc1, 0x73, 0xbe, 0x4c, 0x9d, 0x7c, 0xd1, 0x57,
  0x54, 0x87, 0x39, 0xe3, 0xff, 0x09, 0x8f, 0x7f, 0xf8, 0xf2, 0xc8, 0x9a,
  0xd5, 0xde, 0xe1, 0x36, 0x18, 0xb2, 0x1c, 0x9c, 0x02, 0xa0, 0xf5, 0x8b,
  0x9b, 0x0f, 0x57, 0xef, 0x6c, 0xad, 0xdc, 0xdf, 0x78, 0xb0, 0xb9, 0x71,
  0xf7, 0xc2, 0xe6, 0x5f, 0x1c, 0x33, 0x2e, 0x7c, 0x07, 0x2b, 0x85, 0x6a,
  0x36, 0x30, 0x65, 0xaf, 0x26, 0x1c, 0xf8, 0xb7, 0x07, 0x3e, 0x44, 0x05
};
