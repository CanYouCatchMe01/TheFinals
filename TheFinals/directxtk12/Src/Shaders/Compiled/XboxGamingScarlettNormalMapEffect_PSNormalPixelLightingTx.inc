#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettNormalMapEffect_PSNormalPixelLightingTx.pdb
; shader hash: 311f361f6562f1fa7cd5be33de627a34
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSNormalPixelLightingTx
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTx() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = extractvalue %dx.types.ResRet.f32 %19, 2
  %23 = extractvalue %dx.types.ResRet.f32 %19, 3
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = fmul fast float %23, %9
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = fsub fast float %31, %15
  %35 = call float @dx.op.dot3.f32(i32 55, float %32, float %33, float %34, float %32, float %33, float %34)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 25, float %35)  ; Rsqrt(value)
  %37 = fmul fast float %32, %36
  %38 = fmul fast float %33, %36
  %39 = fmul fast float %34, %36
  %40 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %41 = call float @dx.op.unary.f32(i32 25, float %40)  ; Rsqrt(value)
  %42 = fmul fast float %41, %10
  %43 = fmul fast float %41, %11
  %44 = fmul fast float %41, %12
  %45 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %46 = extractvalue %dx.types.ResRet.f32 %45, 0
  %47 = extractvalue %dx.types.ResRet.f32 %45, 1
  %48 = fmul fast float %46, 2.000000e+00
  %49 = fmul fast float %47, 2.000000e+00
  %50 = fadd fast float %48, -1.000000e+00
  %51 = fadd fast float %49, -1.000000e+00
  %52 = call float @dx.op.dot2.f32(i32 54, float %50, float %51, float %50, float %51)  ; Dot2(ax,ay,bx,by)
  %53 = fsub fast float 1.000000e+00, %52
  %54 = call float @dx.op.unary.f32(i32 24, float %53)  ; Sqrt(value)
  %55 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %57 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %59 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %60 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %61 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %62 = call float @dx.op.unary.f32(i32 83, float %18)  ; DerivCoarseX(value)
  %63 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %64 = call float @dx.op.unary.f32(i32 84, float %18)  ; DerivCoarseY(value)
  %65 = fmul fast float %60, %56
  %66 = fmul fast float %59, %57
  %67 = fsub fast float %65, %66
  %68 = fmul fast float %58, %57
  %69 = fmul fast float %60, %55
  %70 = fsub fast float %68, %69
  %71 = fmul fast float %59, %55
  %72 = fmul fast float %58, %56
  %73 = fsub fast float %71, %72
  %74 = fmul fast float %73, %59
  %75 = fmul fast float %70, %60
  %76 = fsub fast float %74, %75
  %77 = fmul fast float %67, %60
  %78 = fmul fast float %73, %58
  %79 = fsub fast float %77, %78
  %80 = fmul fast float %70, %58
  %81 = fmul fast float %67, %59
  %82 = fsub fast float %80, %81
  %83 = fmul fast float %70, %57
  %84 = fmul fast float %73, %56
  %85 = fsub fast float %83, %84
  %86 = fmul fast float %73, %55
  %87 = fmul fast float %67, %57
  %88 = fsub fast float %86, %87
  %89 = fmul fast float %67, %56
  %90 = fmul fast float %70, %55
  %91 = fsub fast float %89, %90
  %92 = fmul fast float %76, %61
  %93 = call float @dx.op.tertiary.f32(i32 46, float %63, float %85, float %92)  ; FMad(a,b,c)
  %94 = fmul fast float %79, %61
  %95 = call float @dx.op.tertiary.f32(i32 46, float %63, float %88, float %94)  ; FMad(a,b,c)
  %96 = fmul fast float %82, %61
  %97 = call float @dx.op.tertiary.f32(i32 46, float %63, float %91, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.dot3.f32(i32 55, float %93, float %95, float %97, float %93, float %95, float %97)  ; Dot3(ax,ay,az,bx,by,bz)
  %99 = call float @dx.op.unary.f32(i32 25, float %98)  ; Rsqrt(value)
  %100 = fmul fast float %76, %62
  %101 = call float @dx.op.tertiary.f32(i32 46, float %64, float %85, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %79, %62
  %103 = call float @dx.op.tertiary.f32(i32 46, float %64, float %88, float %102)  ; FMad(a,b,c)
  %104 = fmul fast float %82, %62
  %105 = call float @dx.op.tertiary.f32(i32 46, float %64, float %91, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.dot3.f32(i32 55, float %101, float %103, float %105, float %101, float %103, float %105)  ; Dot3(ax,ay,az,bx,by,bz)
  %107 = call float @dx.op.unary.f32(i32 25, float %106)  ; Rsqrt(value)
  %108 = fmul fast float %107, %101
  %109 = fmul fast float %107, %103
  %110 = fmul fast float %107, %105
  %111 = fmul fast float %93, %50
  %112 = fmul fast float %111, %99
  %113 = call float @dx.op.tertiary.f32(i32 46, float %51, float %108, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %54, float %42, float %113)  ; FMad(a,b,c)
  %115 = fmul fast float %95, %50
  %116 = fmul fast float %115, %99
  %117 = call float @dx.op.tertiary.f32(i32 46, float %51, float %109, float %116)  ; FMad(a,b,c)
  %118 = call float @dx.op.tertiary.f32(i32 46, float %54, float %43, float %117)  ; FMad(a,b,c)
  %119 = fmul fast float %97, %50
  %120 = fmul fast float %119, %99
  %121 = call float @dx.op.tertiary.f32(i32 46, float %51, float %110, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.tertiary.f32(i32 46, float %54, float %44, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.dot3.f32(i32 55, float %114, float %118, float %122, float %114, float %118, float %122)  ; Dot3(ax,ay,az,bx,by,bz)
  %124 = call float @dx.op.unary.f32(i32 25, float %123)  ; Rsqrt(value)
  %125 = fmul fast float %124, %114
  %126 = fmul fast float %124, %118
  %127 = fmul fast float %124, %122
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = fsub fast float %37, %129
  %141 = fsub fast float %38, %130
  %142 = fsub fast float %39, %131
  %143 = call float @dx.op.dot3.f32(i32 55, float %140, float %141, float %142, float %140, float %141, float %142)  ; Dot3(ax,ay,az,bx,by,bz)
  %144 = call float @dx.op.unary.f32(i32 25, float %143)  ; Rsqrt(value)
  %145 = fmul fast float %144, %141
  %146 = fmul fast float %144, %142
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = fsub fast float %37, %148
  %160 = fsub fast float %38, %149
  %161 = fsub fast float %39, %150
  %162 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %163 = call float @dx.op.unary.f32(i32 25, float %162)  ; Rsqrt(value)
  %164 = fmul fast float %163, %160
  %165 = fmul fast float %163, %161
  %166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %167 = extractvalue %dx.types.CBufRet.f32 %166, 0
  %168 = extractvalue %dx.types.CBufRet.f32 %166, 1
  %169 = extractvalue %dx.types.CBufRet.f32 %166, 2
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = extractvalue %dx.types.CBufRet.f32 %170, 1
  %173 = extractvalue %dx.types.CBufRet.f32 %170, 2
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %176 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %177 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %178 = fsub fast float %37, %167
  %179 = fsub fast float %38, %168
  %180 = fsub fast float %39, %169
  %181 = call float @dx.op.dot3.f32(i32 55, float %178, float %179, float %180, float %178, float %179, float %180)  ; Dot3(ax,ay,az,bx,by,bz)
  %182 = call float @dx.op.unary.f32(i32 25, float %181)  ; Rsqrt(value)
  %183 = fmul fast float %182, %179
  %184 = fmul fast float %182, %180
  %185 = fsub fast float -0.000000e+00, %130
  %186 = fsub fast float -0.000000e+00, %131
  %187 = fsub fast float -0.000000e+00, %149
  %188 = fsub fast float -0.000000e+00, %150
  %189 = fsub fast float -0.000000e+00, %168
  %190 = fsub fast float -0.000000e+00, %169
  %191 = fmul fast float %125, %129
  %192 = fsub fast float -0.000000e+00, %191
  %193 = call float @dx.op.tertiary.f32(i32 46, float %185, float %126, float %192)  ; FMad(a,b,c)
  %194 = call float @dx.op.tertiary.f32(i32 46, float %186, float %127, float %193)  ; FMad(a,b,c)
  %195 = fmul fast float %125, %148
  %196 = fsub fast float -0.000000e+00, %195
  %197 = call float @dx.op.tertiary.f32(i32 46, float %187, float %126, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %188, float %127, float %197)  ; FMad(a,b,c)
  %199 = fmul fast float %125, %167
  %200 = fsub fast float -0.000000e+00, %199
  %201 = call float @dx.op.tertiary.f32(i32 46, float %189, float %126, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %190, float %127, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %140, %125
  %204 = fmul fast float %203, %144
  %205 = call float @dx.op.tertiary.f32(i32 46, float %145, float %126, float %204)  ; FMad(a,b,c)
  %206 = call float @dx.op.tertiary.f32(i32 46, float %146, float %127, float %205)  ; FMad(a,b,c)
  %207 = fmul fast float %159, %125
  %208 = fmul fast float %207, %163
  %209 = call float @dx.op.tertiary.f32(i32 46, float %164, float %126, float %208)  ; FMad(a,b,c)
  %210 = call float @dx.op.tertiary.f32(i32 46, float %165, float %127, float %209)  ; FMad(a,b,c)
  %211 = fmul fast float %178, %125
  %212 = fmul fast float %211, %182
  %213 = call float @dx.op.tertiary.f32(i32 46, float %183, float %126, float %212)  ; FMad(a,b,c)
  %214 = call float @dx.op.tertiary.f32(i32 46, float %184, float %127, float %213)  ; FMad(a,b,c)
  %215 = fcmp fast olt float %194, 0.000000e+00
  %216 = fcmp fast olt float %198, 0.000000e+00
  %217 = fcmp fast olt float %202, 0.000000e+00
  %218 = select i1 %215, float 0.000000e+00, float 1.000000e+00
  %219 = select i1 %216, float 0.000000e+00, float 1.000000e+00
  %220 = select i1 %217, float 0.000000e+00, float 1.000000e+00
  %221 = fmul fast float %218, %194
  %222 = fmul fast float %219, %198
  %223 = fmul fast float %220, %202
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 3
  %226 = call float @dx.op.binary.f32(i32 35, float %206, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %210, float 0.000000e+00)  ; FMax(a,b)
  %228 = call float @dx.op.binary.f32(i32 35, float %214, float 0.000000e+00)  ; FMax(a,b)
  %229 = fmul fast float %226, %218
  %230 = fmul fast float %227, %219
  %231 = fmul fast float %228, %220
  %232 = call float @dx.op.unary.f32(i32 23, float %229)  ; Log(value)
  %233 = call float @dx.op.unary.f32(i32 23, float %230)  ; Log(value)
  %234 = call float @dx.op.unary.f32(i32 23, float %231)  ; Log(value)
  %235 = fmul fast float %232, %225
  %236 = fmul fast float %233, %225
  %237 = fmul fast float %234, %225
  %238 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
  %239 = call float @dx.op.unary.f32(i32 21, float %236)  ; Exp(value)
  %240 = call float @dx.op.unary.f32(i32 21, float %237)  ; Exp(value)
  %241 = fmul fast float %238, %194
  %242 = fmul fast float %239, %198
  %243 = fmul fast float %240, %202
  %244 = fmul fast float %221, %133
  %245 = call float @dx.op.tertiary.f32(i32 46, float %222, float %152, float %244)  ; FMad(a,b,c)
  %246 = call float @dx.op.tertiary.f32(i32 46, float %223, float %171, float %245)  ; FMad(a,b,c)
  %247 = fmul fast float %221, %134
  %248 = call float @dx.op.tertiary.f32(i32 46, float %222, float %153, float %247)  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %223, float %172, float %248)  ; FMad(a,b,c)
  %250 = fmul fast float %221, %135
  %251 = call float @dx.op.tertiary.f32(i32 46, float %222, float %154, float %250)  ; FMad(a,b,c)
  %252 = call float @dx.op.tertiary.f32(i32 46, float %223, float %173, float %251)  ; FMad(a,b,c)
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = fmul fast float %254, %246
  %258 = fmul fast float %255, %249
  %259 = fmul fast float %256, %252
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 2
  %264 = fadd fast float %257, %261
  %265 = fadd fast float %258, %262
  %266 = fadd fast float %259, %263
  %267 = fmul fast float %241, %137
  %268 = call float @dx.op.tertiary.f32(i32 46, float %242, float %156, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %243, float %175, float %268)  ; FMad(a,b,c)
  %270 = fmul fast float %241, %138
  %271 = call float @dx.op.tertiary.f32(i32 46, float %242, float %157, float %270)  ; FMad(a,b,c)
  %272 = call float @dx.op.tertiary.f32(i32 46, float %243, float %176, float %271)  ; FMad(a,b,c)
  %273 = fmul fast float %241, %139
  %274 = call float @dx.op.tertiary.f32(i32 46, float %242, float %158, float %273)  ; FMad(a,b,c)
  %275 = call float @dx.op.tertiary.f32(i32 46, float %243, float %177, float %274)  ; FMad(a,b,c)
  %276 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %224, 2
  %279 = fmul fast float %24, %264
  %280 = fmul fast float %25, %265
  %281 = fmul fast float %26, %266
  %282 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %283 = extractvalue %dx.types.ResRet.f32 %282, 0
  %284 = extractvalue %dx.types.ResRet.f32 %282, 1
  %285 = extractvalue %dx.types.ResRet.f32 %282, 2
  %286 = fmul fast float %269, %27
  %287 = fmul fast float %286, %276
  %288 = fmul fast float %287, %283
  %289 = fmul fast float %272, %27
  %290 = fmul fast float %289, %277
  %291 = fmul fast float %290, %284
  %292 = fmul fast float %275, %27
  %293 = fmul fast float %292, %278
  %294 = fmul fast float %293, %285
  %295 = fadd fast float %288, %279
  %296 = fadd fast float %291, %280
  %297 = fadd fast float %294, %281
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %301 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %302 = fmul fast float %299, %27
  %303 = fmul fast float %300, %27
  %304 = fmul fast float %301, %27
  %305 = fsub fast float %302, %295
  %306 = fsub fast float %303, %296
  %307 = fsub fast float %304, %297
  %308 = fmul fast float %305, %16
  %309 = fmul fast float %306, %16
  %310 = fmul fast float %307, %16
  %311 = fadd fast float %308, %295
  %312 = fadd fast float %309, %296
  %313 = fadd fast float %310, %297
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %311)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %312)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %313)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !11, !13}
!6 = !{!7, !9, !10}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !8}
!11 = !{!12}
!12 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!13 = !{!14}
!14 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSNormalPixelLightingTx, !"PSNormalPixelLightingTx", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !28}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!26 = !{i32 2}
!27 = !{i32 3, i32 7}
!28 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !24}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 32
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1600
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x1f361f31, 0xfaf16265                // 000000000000: D5801F31 03FE3F36 FAF16265
;   v_nop_xbox_data 0x33bed57c, 0x347a62de                // 00000000000C: D580D57C 03FE67BE 347A62DE
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[18:19], exec                          // 00000000001C: BE92047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s14, s15                                // 000000000024: BE8E030F
;   s_mov_b32     s20, s11                                // 000000000028: BE94030B
;   s_mov_b32     s2, s9                                  // 00000000002C: BE820309
;   s_mov_b32     s9, 0                                   // 000000000030: BE890380
;   s_mov_b32     s3, 0                                   // 000000000034: BE830380
;   s_mov_b32     s11, 0                                  // 000000000038: BE8B0380
;   s_mov_b32     s15, 0                                  // 00000000003C: BE8F0380
;   s_mov_b32     s21, s12                                // 000000000040: BE95030C
;   s_load_dwordx8  s[0:7], s[2:3], null                  // 000000000044: F40C0001 FA000000
;   s_load_dwordx4  s[60:63], s[10:11], null              // 00000000004C: F4080F05 FA000000
;   s_load_dwordx8  s[52:59], s[14:15], null              // 000000000054: F40C0D07 FA000000
;   s_load_dwordx8  s[8:15], s[8:9], null                 // 00000000005C: F40C0204 FA000000
;   s_mov_b32     m0, s16                                 // 000000000064: BEFC0310
;   s_bitset1_b32  s21, 20                                // 000000000068: BE951D94
;   v_interp_p1_f32  v8, v0, attr0.x                      // 00000000006C: C8200000
;   v_interp_p1_f32  v9, v0, attr0.y                      // 000000000070: C8240100
;   v_interp_p1_f32  v15, v0, attr2.y                     // 000000000074: C83C0900
;   s_mov_b32     s22, -1                                 // 000000000078: BE9603C1
;   s_mov_b32     s23, lit(0x11014fac)                    // 00000000007C: BE9703FF 11014FAC
;   v_interp_p2_f32  v8, v1, attr0.x                      // 000000000084: C8210001
;   v_interp_p2_f32  v9, v1, attr0.y                      // 000000000088: C8250101
;   v_interp_p1_f32  v14, v0, attr2.x                     // 00000000008C: C8380800
;   s_buffer_load_dwordx8  s[44:51], s[20:23], 0x0000c0   // 000000000090: F42C0B0A FA0000C0
;   v_interp_p2_f32  v15, v1, attr2.y                     // 000000000098: C83D0901
;   v_interp_p1_f32  v10, v0, attr3.x                     // 00000000009C: C8280C00
;   v_interp_p1_f32  v11, v0, attr3.y                     // 0000000000A0: C82C0D00
;   v_interp_p1_f32  v12, v0, attr3.z                     // 0000000000A4: C8300E00
;   v_interp_p1_f32  v13, v0, attr3.w                     // 0000000000A8: C8340F00
;   v_interp_p1_f32  v16, v0, attr2.z                     // 0000000000AC: C8400A00
;   v_interp_p1_f32  v17, v0, attr1.x                     // 0000000000B0: C8440400
;   v_interp_p1_f32  v18, v0, attr1.y                     // 0000000000B4: C8480500
;   s_waitcnt     lgkmcnt(0)                              // 0000000000B8: BF8CC07F
;   image_sample  v[2:5], v[8:9], s[8:15], s[60:63] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000BC: F0800F08 01E20208
;   image_sample  v[6:7], v[8:9], s[0:7], s[60:63] dmask:0x3 dim:SQ_RSRC_IMG_2D // 0000000000C4: F0800308 01E00608
;   v_interp_p1_f32  v19, v0, attr1.z                     // 0000000000CC: C84C0600
;   v_interp_p1_f32  v20, v0, attr1.w                     // 0000000000D0: C8500700
;   v_interp_p2_f32  v14, v1, attr2.x                     // 0000000000D4: C8390801
;   v_mul_legacy_f32  v0, v15, v15                        // 0000000000D8: 0E001F0F
;   v_interp_p2_f32  v16, v1, attr2.z                     // 0000000000DC: C8410A01
;   v_interp_p2_f32  v18, v1, attr1.y                     // 0000000000E0: C8490501
;   v_interp_p2_f32  v19, v1, attr1.z                     // 0000000000E4: C84D0601
;   v_interp_p2_f32  v10, v1, attr3.x                     // 0000000000E8: C8290C01
;   v_fmac_f32    v0, v14, v14                            // 0000000000EC: 56001D0E
;   v_interp_p2_f32  v17, v1, attr1.x                     // 0000000000F0: C8450401
;   v_interp_p2_f32  v11, v1, attr3.y                     // 0000000000F4: C82D0D01
;   v_interp_p2_f32  v12, v1, attr3.z                     // 0000000000F8: C8310E01
;   v_interp_p2_f32  v13, v1, attr3.w                     // 0000000000FC: C8350F01
;   v_fmac_f32    v0, v16, v16                            // 000000000100: 56002110
;   v_interp_p2_f32  v20, v1, attr1.w                     // 000000000104: C8510701
;   ds_swizzle_b32  v1, v17 offset:32768                  // 000000000108: D8D48000 01000011
;   ds_swizzle_b32  v21, v17 offset:32853                 // 000000000110: D8D48055 15000011
;   ds_swizzle_b32  v26, v17 offset:32938                 // 000000000118: D8D480AA 1A000011
;   v_rsq_f32     v0, v0                                  // 000000000120: 7E005D00
;   ds_swizzle_b32  v22, v18 offset:32768                 // 000000000124: D8D48000 16000012
;   ds_swizzle_b32  v23, v18 offset:32853                 // 00000000012C: D8D48055 17000012
;   ds_swizzle_b32  v27, v18 offset:32938                 // 000000000134: D8D480AA 1B000012
;   v_sub_f32     v18, s45, v18                           // 00000000013C: 0824242D
;   ds_swizzle_b32  v24, v19 offset:32768                 // 000000000140: D8D48000 18000013
;   ds_swizzle_b32  v25, v19 offset:32853                 // 000000000148: D8D48055 19000013
;   ds_swizzle_b32  v28, v19 offset:32938                 // 000000000150: D8D480AA 1C000013
;   ds_swizzle_b32  v29, v8 offset:32768                  // 000000000158: D8D48000 1D000008
;   ds_swizzle_b32  v30, v8 offset:32853                  // 000000000160: D8D48055 1E000008
;   v_sub_f32     v17, s44, v17                           // 000000000168: 0822222C
;   v_mul_legacy_f32  v31, v18, v18                       // 00000000016C: 0E3E2512
;   v_mul_legacy_f32  v14, v0, v14                        // 000000000170: 0E1C1D00
;   v_mul_legacy_f32  v15, v0, v15                        // 000000000174: 0E1E1F00
;   v_mul_legacy_f32  v16, v0, v16                        // 000000000178: 0E202100
;   v_fmac_f32    v31, v17, v17                           // 00000000017C: 563E2311
;   s_waitcnt     lgkmcnt(9)                              // 000000000180: BF8CC97F
;   v_sub_f32     v21, v21, v1                            // 000000000184: 082A0315
;   s_waitcnt     lgkmcnt(8)                              // 000000000188: BF8CC87F
;   v_sub_f32     v26, v26, v1                            // 00000000018C: 0834031A
;   s_waitcnt     lgkmcnt(6)                              // 000000000190: BF8CC67F
;   v_sub_f32     v23, v23, v22                           // 000000000194: 082E2D17
;   s_waitcnt     lgkmcnt(5)                              // 000000000198: BF8CC57F
;   v_sub_f32     v22, v27, v22                           // 00000000019C: 082C2D1B
;   s_waitcnt     lgkmcnt(3)                              // 0000000001A0: BF8CC37F
;   v_sub_f32     v25, v25, v24                           // 0000000001A4: 08323119
;   s_waitcnt     lgkmcnt(2)                              // 0000000001A8: BF8CC27F
;   v_sub_f32     v24, v28, v24                           // 0000000001AC: 0830311C
;   s_waitcnt     lgkmcnt(0)                              // 0000000001B0: BF8CC07F
;   v_sub_f32     v27, v30, v29                           // 0000000001B4: 08363B1E
;   s_waitcnt     vmcnt(1)                                // 0000000001B8: BF8C3F71
;   v_mul_legacy_f32  v10, v2, v10                        // 0000000001BC: 0E141502
;   v_mul_legacy_f32  v3, v3, v11                         // 0000000001C0: 0E061703
;   v_mul_legacy_f32  v4, v4, v12                         // 0000000001C4: 0E081904
;   ds_swizzle_b32  v12, v8 offset:32938                  // 0000000001C8: D8D480AA 0C000008
;   ds_swizzle_b32  v2, v9 offset:32768                   // 0000000001D0: D8D48000 02000009
;   ds_swizzle_b32  v11, v9 offset:32853                  // 0000000001D8: D8D48055 0B000009
;   s_waitcnt     vmcnt(0)                                // 0000000001E0: BF8C3F70
;   v_fma_f32     v7, v7, 2.0, -1.0                       // 0000000001E4: D54B0007 03CDE907
;   v_mul_legacy_f32  v5, v5, v13                         // 0000000001EC: 0E0A1B05
;   v_sub_f32     v13, s46, v19                           // 0000000001F0: 081A262E
;   v_fma_f32     v6, v6, 2.0, -1.0                       // 0000000001F4: D54B0006 03CDE906
;   ds_swizzle_b32  v19, v9 offset:32938                  // 0000000001FC: D8D480AA 13000009
;   v_fma_f32     v0, -v7, v7, 1.0                        // 000000000204: D54B0000 23CA0F07
;   v_fmac_f32    v31, v13, v13                           // 00000000020C: 563E1B0D
;   v_fmac_f32    v0, -v6, v6                             // 000000000210: D52B0000 20020D06
;   v_rsq_f32     v31, v31                                // 000000000218: 7E3E5D1F
;   v_sqrt_f32    v30, v0                                 // 00000000021C: 7E3C6700
;   s_waitcnt     lgkmcnt(3)                              // 000000000220: BF8CC37F
;   v_sub_f32     v12, v12, v29                           // 000000000224: 08183B0C
;   s_waitcnt     lgkmcnt(1)                              // 000000000228: BF8CC17F
;   v_sub_f32     v11, v11, v2                            // 00000000022C: 0816050B
;   s_and_b64     exec, exec, s[18:19]                    // 000000000230: 87FE127E
;   s_waitcnt     lgkmcnt(0)                              // 000000000234: BF8CC07F
;   v_sub_f32     v19, v19, v2                            // 000000000238: 08260513
;   image_sample  v[0:2], v[8:9], s[52:59], s[60:63] dmask:0x7 dim:SQ_RSRC_IMG_2D // 00000000023C: F0800708 01ED0008
;   v_mul_legacy_f32  v8, v26, v23                        // 000000000244: 0E102F1A
;   v_mul_legacy_f32  v9, v22, v25                        // 000000000248: 0E123316
;   v_mul_legacy_f32  v28, v24, v21                       // 00000000024C: 0E382B18
;   s_buffer_load_dwordx16  s[0:15], s[20:23], null       // 000000000250: F430000A FA000000
;   s_buffer_load_dwordx16  s[32:47], s[20:23], 0x000040  // 000000000258: F430080A FA000040
;   v_fma_f32     v8, v22, v21, -v8                       // 000000000260: D54B0008 84222B16
;   v_fma_f32     v9, v24, v23, -v9                       // 000000000268: D54B0009 84262F18
;   v_fma_f32     v28, v26, v25, -v28                     // 000000000270: D54B001C 8472331A
;   s_buffer_load_dwordx16  s[16:31], s[20:23], 0x000080  // 000000000278: F430040A FA000080
;   v_mul_legacy_f32  v29, v8, v26                        // 000000000280: 0E3A3508
;   v_fma_f32     v29, v9, v24, -v29                      // 000000000284: D54B001D 84763109
;   v_mul_legacy_f32  v24, v28, v24                       // 00000000028C: 0E30311C
;   v_fma_f32     v24, v8, v22, -v24                      // 000000000290: D54B0018 84622D08
;   v_mul_legacy_f32  v22, v9, v22                        // 000000000298: 0E2C2D09
;   v_fma_f32     v22, v28, v26, -v22                     // 00000000029C: D54B0016 845A351C
;   v_mul_legacy_f32  v26, v9, v25                        // 0000000002A4: 0E343309
;   v_fma_f32     v26, v8, v21, -v26                      // 0000000002A8: D54B001A 846A2B08
;   v_mul_legacy_f32  v21, v28, v21                       // 0000000002B0: 0E2A2B1C
;   v_mul_legacy_f32  v8, v8, v23                         // 0000000002B4: 0E102F08
;   v_fma_f32     v9, v9, v23, -v21                       // 0000000002B8: D54B0009 84562F09
;   v_mul_legacy_f32  v21, v29, v27                       // 0000000002C0: 0E2A371D
;   v_fma_f32     v8, v28, v25, -v8                       // 0000000002C4: D54B0008 8422331C
;   v_mul_legacy_f32  v25, v24, v27                       // 0000000002CC: 0E323718
;   v_mul_legacy_f32  v24, v24, v11                       // 0000000002D0: 0E301718
;   v_mul_legacy_f32  v23, v29, v11                       // 0000000002D4: 0E2E171D
;   v_fmac_f32    v21, v12, v26                           // 0000000002D8: 562A350C
;   v_mul_legacy_f32  v11, v22, v11                       // 0000000002DC: 0E161716
;   v_fmac_f32    v25, v12, v8                            // 0000000002E0: 5632110C
;   v_fmac_f32    v24, v19, v8                            // 0000000002E4: 56301113
;   v_mul_legacy_f32  v8, v22, v27                        // 0000000002E8: 0E103716
;   v_mul_legacy_f32  v22, v21, v21                       // 0000000002EC: 0E2C2B15
;   v_fmac_f32    v23, v19, v26                           // 0000000002F0: 562E3513
;   v_fmac_f32    v11, v19, v9                            // 0000000002F4: 56161313
;   v_mul_legacy_f32  v19, v25, v6                        // 0000000002F8: 0E260D19
;   v_fmac_f32    v8, v12, v9                             // 0000000002FC: 5610130C
;   v_fmac_f32    v22, v25, v25                           // 000000000300: 562C3319
;   v_mul_legacy_f32  v12, v21, v6                        // 000000000304: 0E180D15
;   v_mul_legacy_f32  v6, v8, v6                          // 000000000308: 0E0C0D08
;   v_fmac_f32    v22, v8, v8                             // 00000000030C: 562C1108
;   v_rsq_f32     v21, v22                                // 000000000310: 7E2A5D16
;   v_mul_legacy_f32  v22, v23, v23                       // 000000000314: 0E2C2F17
;   v_fmac_f32    v22, v24, v24                           // 000000000318: 562C3118
;   v_mul_legacy_f32  v9, v12, v21                        // 00000000031C: 0E122B0C
;   v_fmac_f32    v22, v11, v11                           // 000000000320: 562C170B
;   v_mul_legacy_f32  v12, v19, v21                       // 000000000324: 0E182B13
;   v_mul_legacy_f32  v6, v6, v21                         // 000000000328: 0E0C2B06
;   v_rsq_f32     v21, v22                                // 00000000032C: 7E2A5D16
;   v_mul_legacy_f32  v22, v21, v23                       // 000000000330: 0E2C2F15
;   v_mul_legacy_f32  v8, v21, v11                        // 000000000334: 0E101715
;   s_waitcnt     lgkmcnt(0)                              // 000000000338: BF8CC07F
;   v_fma_f32     v11, v17, v31, -s12                     // 00000000033C: D54B000B 80323F11
;   v_fmac_f32    v9, v7, v22                             // 000000000344: 56122D07
;   v_mul_legacy_f32  v22, v21, v24                       // 000000000348: 0E2C3115
;   v_fmac_f32    v6, v7, v8                              // 00000000034C: 560C1107
;   v_fma_f32     v8, v18, v31, -s13                      // 000000000350: D54B0008 80363F12
;   v_fmac_f32    v9, v30, v15                            // 000000000358: 56121F1E
;   v_fmac_f32    v12, v7, v22                            // 00000000035C: 56182D07
;   v_fmac_f32    v6, v30, v16                            // 000000000360: 560C211E
;   v_fma_f32     v15, v18, v31, -s33                     // 000000000364: D54B000F 80863F12
;   v_fma_f32     v16, v18, v31, -s37                     // 00000000036C: D54B0010 80963F12
;   v_mul_legacy_f32  v7, v9, v9                          // 000000000374: 0E0E1309
;   v_fmac_f32    v12, v30, v14                           // 000000000378: 56181D1E
;   v_mul_legacy_f32  v14, v8, v8                         // 00000000037C: 0E1C1108
;   v_fma_f32     v18, v13, v31, -s34                     // 000000000380: D54B0012 808A3F0D
;   v_fmac_f32    v7, v12, v12                            // 000000000388: 560E190C
;   v_fmac_f32    v14, v11, v11                           // 00000000038C: 561C170B
;   v_fmac_f32    v7, v6, v6                              // 000000000390: 560E0D06
;   v_rsq_f32     v7, v7                                  // 000000000394: 7E0E5D07
;   v_mul_legacy_f32  v12, v7, v12                        // 000000000398: 0E181907
;   v_mul_legacy_f32  v9, v7, v9                          // 00000000039C: 0E121307
;   v_mul_legacy_f32  v6, v7, v6                          // 0000000003A0: 0E0C0D07
;   v_fma_f32     v7, v13, v31, -s14                      // 0000000003A4: D54B0007 803A3F0D
;   v_fma_f32     v13, v13, v31, -s38                     // 0000000003AC: D54B000D 809A3F0D
;   v_mul_legacy_f32  v11, v11, v12                       // 0000000003B4: 0E16190B
;   v_mul_legacy_f32  v19, s12, v12                       // 0000000003B8: 0E26180C
;   v_fmac_f32    v14, v7, v7                             // 0000000003BC: 561C0F07
;   v_rsq_f32     v14, v14                                // 0000000003C0: 7E1C5D0E
;   v_mul_legacy_f32  v8, v14, v8                         // 0000000003C4: 0E10110E
;   v_mul_legacy_f32  v11, v11, v14                       // 0000000003C8: 0E161D0B
;   v_mul_legacy_f32  v21, v14, v7                        // 0000000003CC: 0E2A0F0E
;   v_fma_f32     v14, v17, v31, -s32                     // 0000000003D0: D54B000E 80823F11
;   v_fma_f32     v17, v17, v31, -s36                     // 0000000003D8: D54B0011 80923F11
;   v_fmac_f32    v11, v8, v9                             // 0000000003E0: 56161308
;   v_mul_legacy_f32  v8, v15, v15                        // 0000000003E4: 0E101F0F
;   v_fmac_f32    v11, v21, v6                            // 0000000003E8: 56160D15
;   v_fmac_f32    v8, v14, v14                            // 0000000003EC: 56101D0E
;   v_mul_legacy_f32  v14, v14, v12                       // 0000000003F0: 0E1C190E
;   v_fmac_f32    v8, v18, v18                            // 0000000003F4: 56102512
;   v_rsq_f32     v8, v8                                  // 0000000003F8: 7E105D08
;   v_mul_legacy_f32  v15, v8, v15                        // 0000000003FC: 0E1E1F08
;   v_mul_legacy_f32  v7, v8, v18                         // 000000000400: 0E0E2508
;   v_mul_legacy_f32  v8, v14, v8                         // 000000000404: 0E10110E
;   v_mul_legacy_f32  v14, v16, v16                       // 000000000408: 0E1C2110
;   v_fmac_f32    v8, v15, v9                             // 00000000040C: 5610130F
;   v_fmac_f32    v14, v17, v17                           // 000000000410: 561C2311
;   v_mul_legacy_f32  v17, v17, v12                       // 000000000414: 0E221911
;   v_mul_legacy_f32  v15, s32, v12                       // 000000000418: 0E1E1820
;   v_mul_legacy_f32  v12, s36, v12                       // 00000000041C: 0E181824
;   v_fmac_f32    v8, v7, v6                              // 000000000420: 56100D07
;   v_fmac_f32    v14, v13, v13                           // 000000000424: 561C1B0D
;   v_fma_f32     v15, -s33, v9, -v15                     // 000000000428: D54B000F A43E1221
;   v_fma_f32     v12, -s37, v9, -v12                     // 000000000430: D54B000C A4321225
;   v_max_f32     v8, 0, v8                               // 000000000438: 20101080
;   v_rsq_f32     v14, v14                                // 00000000043C: 7E1C5D0E
;   v_fmac_f32    v15, -s34, v6                           // 000000000440: D52B000F 20020C22
;   v_fmac_f32    v12, -s38, v6                           // 000000000448: D52B000C 20020C26
;   v_mul_legacy_f32  v23, v17, v14                       // 000000000450: 0E2E1D11
;   v_fma_f32     v17, -s13, v9, -v19                     // 000000000454: D54B0011 A44E120D
;   v_mul_legacy_f32  v16, v14, v16                       // 00000000045C: 0E20210E
;   v_mul_legacy_f32  v13, v14, v13                       // 000000000460: 0E1A1B0E
;   v_fmac_f32    v17, -s14, v6                           // 000000000464: D52B0011 20020C0E
;   v_fmac_f32    v23, v16, v9                            // 00000000046C: 562E1310
;   v_max_f32     v9, 0, v11                              // 000000000470: 20121680
;   v_cmp_gt_f32  vcc, 0, v17                             // 000000000474: 7C082280
;   v_fmac_f32    v23, v13, v6                            // 000000000478: 562E0D0D
;   v_cndmask_b32  v7, 1.0, 0, vcc                        // 00000000047C: D5010007 01A900F2
;   v_cmp_gt_f32  vcc, 0, v15                             // 000000000484: 7C081E80
;   v_max_f32     v13, 0, v23                             // 000000000488: 201A2E80
;   v_mul_legacy_f32  v9, v9, v7                          // 00000000048C: 0E120F09
;   v_cndmask_b32  v6, 1.0, 0, vcc                        // 000000000490: D5010006 01A900F2
;   v_cmp_gt_f32  vcc, 0, v12                             // 000000000498: 7C081880
;   v_mul_legacy_f32  v7, v7, v17                         // 00000000049C: 0E0E2307
;   v_log_f32     v9, v9                                  // 0000000004A0: 7E124F09
;   v_mul_legacy_f32  v8, v8, v6                          // 0000000004A4: 0E100D08
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 0000000004A8: D501000B 01A900F2
;   v_mul_legacy_f32  v21, v6, v15                        // 0000000004B0: 0E2A1F06
;   v_mul_legacy_f32  v14, s40, v7                        // 0000000004B4: 0E1C0E28
;   v_mul_legacy_f32  v16, s41, v7                        // 0000000004B8: 0E200E29
;   v_log_f32     v8, v8                                  // 0000000004BC: 7E104F08
;   v_mul_legacy_f32  v13, v13, v11                       // 0000000004C0: 0E1A170D
;   v_mul_legacy_f32  v18, s42, v7                        // 0000000004C4: 0E240E2A
;   v_mul_legacy_f32  v11, v11, v12                       // 0000000004C8: 0E16190B
;   v_mul_legacy_f32  v9, s11, v9                         // 0000000004CC: 0E12120B
;   v_fmac_f32    v14, s44, v21                           // 0000000004D0: 561C2A2C
;   v_log_f32     v13, v13                                // 0000000004D4: 7E1A4F0D
;   v_fmac_f32    v16, s45, v21                           // 0000000004D8: 56202A2D
;   v_fmac_f32    v18, s46, v21                           // 0000000004DC: 56242A2E
;   v_mul_legacy_f32  v8, s11, v8                         // 0000000004E0: 0E10100B
;   v_exp_f32     v19, v9                                 // 0000000004E4: 7E264B09
;   v_fmac_f32    v14, s16, v11                           // 0000000004E8: 561C1610
;   v_fmac_f32    v18, s18, v11                           // 0000000004EC: 56241612
;   v_fmac_f32    v16, s17, v11                           // 0000000004F0: 56201611
;   v_mul_legacy_f32  v13, s11, v13                       // 0000000004F4: 0E1A1A0B
;   v_exp_f32     v8, v8                                  // 0000000004F8: 7E104B08
;   v_fma_f32     v11, s0, v14, s4                        // 0000000004FC: D54B000B 00121C00
;   v_fma_f32     v7, s2, v18, s6                         // 000000000504: D54B0007 001A2402
;   v_mul_legacy_f32  v9, v19, v17                        // 00000000050C: 0E122313
;   v_exp_f32     v13, v13                                // 000000000510: 7E1A4B0D
;   v_mul_legacy_f32  v4, v4, v7                          // 000000000514: 0E080F04
;   v_mul_legacy_f32  v19, s22, v9                        // 000000000518: 0E261216
;   v_mul_legacy_f32  v6, v8, v15                         // 00000000051C: 0E0C1F08
;   v_mul_legacy_f32  v8, s20, v9                         // 000000000520: 0E101214
;   v_mul_legacy_f32  v15, s21, v9                        // 000000000524: 0E1E1215
;   v_mul_legacy_f32  v22, v13, v12                       // 000000000528: 0E2C190D
;   v_fmac_f32    v8, s24, v6                             // 00000000052C: 56100C18
;   v_fmac_f32    v15, s25, v6                            // 000000000530: 561E0C19
;   v_fmac_f32    v19, s26, v6                            // 000000000534: 56260C1A
;   v_fma_f32     v12, s1, v16, s5                        // 000000000538: D54B000C 00162001
;   v_mul_legacy_f32  v6, v10, v11                        // 000000000540: 0E0C170A
;   v_fmac_f32    v8, s28, v22                            // 000000000544: 56102C1C
;   v_fmac_f32    v15, s29, v22                           // 000000000548: 561E2C1D
;   v_fmac_f32    v19, s30, v22                           // 00000000054C: 56262C1E
;   v_mul_legacy_f32  v3, v3, v12                         // 000000000550: 0E061903
;   v_mul_legacy_f32  v8, v8, v5                          // 000000000554: 0E100B08
;   v_mul_legacy_f32  v10, v15, v5                        // 000000000558: 0E140B0F
;   v_mul_legacy_f32  v9, v19, v5                         // 00000000055C: 0E120B13
;   v_mul_legacy_f32  v7, s8, v8                          // 000000000560: 0E0E1008
;   v_mul_legacy_f32  v8, s9, v10                         // 000000000564: 0E101409
;   v_mul_legacy_f32  v9, s10, v9                         // 000000000568: 0E12120A
;   s_waitcnt     vmcnt(0)                                // 00000000056C: BF8C3F70
;   v_fmac_f32    v6, v7, v0                              // 000000000570: 560C0107
;   v_fmac_f32    v3, v8, v1                              // 000000000574: 56060308
;   v_fmac_f32    v4, v9, v2                              // 000000000578: 56080509
;   v_fma_f32     v7, s48, v5, -v6                        // 00000000057C: D54B0007 841A0A30
;   v_fma_f32     v1, s49, v5, -v3                        // 000000000584: D54B0001 840E0A31
;   v_fma_f32     v2, s50, v5, -v4                        // 00000000058C: D54B0002 84120A32
;   v_fmac_f32    v6, v7, v20                             // 000000000594: 560C2907
;   v_fmac_f32    v3, v1, v20                             // 000000000598: 56062901
;   v_fmac_f32    v4, v2, v20                             // 00000000059C: 56082902
;   s_nop         0x0000                                  // 0000000005A0: BF800000
;   s_nop         0x0000                                  // 0000000005A4: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v6, v3                       // 0000000005A8: 5E000706
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000005AC: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000005B0: F8001C0F 00000100
;   s_endpgm                                              // 0000000005B8: BF810000
;   s_code_end                                            // 0000000005BC: BF9F0000
;   s_code_end                                            // 0000000005C0: BF9F0000
;   s_code_end                                            // 0000000005C4: BF9F0000
;   s_code_end                                            // 0000000005C8: BF9F0000
;   s_code_end                                            // 0000000005CC: BF9F0000
;   s_code_end                                            // 0000000005D0: BF9F0000
;   s_code_end                                            // 0000000005D4: BF9F0000
;   s_code_end                                            // 0000000005D8: BF9F0000
;   s_code_end                                            // 0000000005DC: BF9F0000
;   s_code_end                                            // 0000000005E0: BF9F0000
;   s_code_end                                            // 0000000005E4: BF9F0000
;   s_code_end                                            // 0000000005E8: BF9F0000
;   s_code_end                                            // 0000000005EC: BF9F0000
;   s_code_end                                            // 0000000005F0: BF9F0000
;   s_code_end                                            // 0000000005F4: BF9F0000
;   s_code_end                                            // 0000000005F8: BF9F0000
;   s_code_end                                            // 0000000005FC: BF9F0000
;   s_code_end                                            // 000000000600: BF9F0000
;   s_code_end                                            // 000000000604: BF9F0000
;   s_code_end                                            // 000000000608: BF9F0000
;   s_code_end                                            // 00000000060C: BF9F0000
;   s_code_end                                            // 000000000610: BF9F0000
;   s_code_end                                            // 000000000614: BF9F0000
;   s_code_end                                            // 000000000618: BF9F0000
;   s_code_end                                            // 00000000061C: BF9F0000
;   s_code_end                                            // 000000000620: BF9F0000
;   s_code_end                                            // 000000000624: BF9F0000
;   s_code_end                                            // 000000000628: BF9F0000
;   s_code_end                                            // 00000000062C: BF9F0000
;   s_code_end                                            // 000000000630: BF9F0000
;   s_code_end                                            // 000000000634: BF9F0000
;   s_code_end                                            // 000000000638: BF9F0000
;   s_code_end                                            // 00000000063C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 16
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 6
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 13
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 15
;       orig_rootsig_slot_id: 5
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 68, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 76, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 84, resource_class: 0 (SRV), index: 2, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 92, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 2
;       allocated_offset : 15
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 43
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSNormalPixelLightingTx)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 32 {
;     scratch_en: 0
;     user_sgpr: 16
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 360
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x6,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, off, off, off done vm         // 000000000010: F8001801 00000006
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x306,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v3, off, off done vm          // 000000000010: F8001803 00000306
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x506,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v5, off, off done vm          // 000000000010: F8001803 00000506
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000706,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v6, v3                       // 000000000008: 5E000706
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20706,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v6, v3                      // 000000000000: D7690000 00020706
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20706,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v6, v3                      // 000000000000: D7680000 00020706
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20706,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v6, v3                          // 000000000000: D76A0000 00020706
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20706,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v6, v3                          // 000000000000: D76B0000 00020706
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040306,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v3, v4, v5 done vm            // 000000000010: F800180F 05040306
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=32,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=16
; VAlu:235,SAlu:34,VMem:3,SMem:8,LDS:15,WaitCntOnVMem:3,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTx[] = {
  0x44, 0x58, 0x42, 0x43, 0x0a, 0xef, 0x62, 0x63, 0x73, 0x48, 0x22, 0xdb,
  0xf7, 0x4f, 0x46, 0xcb, 0x7f, 0xd6, 0xcc, 0xbd, 0x01, 0x00, 0x00, 0x00,
  0xf0, 0x1c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xd0, 0x02, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00,
  0x88, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x9c, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54,
  0x78, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x8d, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
  0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53,
  0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c,
  0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x2e, 0x70, 0x64,
  0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x31, 0x1f, 0x36, 0x1f, 0x65, 0x62, 0xf1, 0xfa,
  0x7c, 0xd5, 0xbe, 0x33, 0xde, 0x62, 0x7a, 0x34, 0x44, 0x58, 0x49, 0x4c,
  0x60, 0x18, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0xac, 0x11, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xc4, 0x11, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x24, 0x12, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x38, 0x12, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x48, 0x12, 0x00, 0x00,
  0x07, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x50, 0x18, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x71, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xac, 0x11, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x68, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x7e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a,
  0xc4, 0x40, 0x0c, 0x03, 0x55, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18,
  0x86, 0xa1, 0x10, 0x17, 0xc1, 0x10, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61,
  0x20, 0x6d, 0x8e, 0x20, 0x28, 0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37,
  0x10, 0x30, 0x8c, 0x40, 0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38,
  0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d,
  0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38,
  0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38,
  0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e,
  0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e,
  0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2,
  0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6,
  0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2,
  0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90,
  0x00, 0x86, 0x24, 0x0e, 0x23, 0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec,
  0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4,
  0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5,
  0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef,
  0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e,
  0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4,
  0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60,
  0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0,
  0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28,
  0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78,
  0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0,
  0x03, 0x24, 0x90, 0x25, 0x99, 0x39, 0x40, 0x26, 0x01, 0x78, 0xd5, 0xe1,
  0x48, 0xd3, 0x02, 0x60, 0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31,
  0x11, 0x91, 0x84, 0x1a, 0x90, 0x24, 0x07, 0x14, 0x45, 0x49, 0x12, 0x4c,
  0xd1, 0x94, 0xd4, 0x9b, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6,
  0x59, 0x88, 0x88, 0x9d, 0x80, 0x89, 0x40, 0x01, 0x41, 0x6c, 0x4a, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xa3,
  0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0xa7, 0x03, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x2c, 0x10, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d,
  0xca, 0xa0, 0x3c, 0xca, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42,
  0x28, 0x83, 0x02, 0xa1, 0x71, 0x06, 0x80, 0xce, 0x19, 0x00, 0x5a, 0x67,
  0x00, 0xa8, 0x9d, 0x01, 0x20, 0x77, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00,
  0x8e, 0xe3, 0x38, 0x8e, 0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa,
  0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a,
  0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa,
  0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2,
  0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63,
  0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34,
  0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37,
  0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x2c, 0x13, 0x04, 0x82, 0xd9,
  0x20, 0x18, 0xc7, 0x04, 0x81, 0x68, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e,
  0x6e, 0x82, 0x40, 0x38, 0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x63, 0xb0,
  0x11, 0x98, 0x20, 0x10, 0xcf, 0x04, 0x81, 0x80, 0x36, 0x08, 0x47, 0xb4,
  0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x67, 0xc0,
  0x6d, 0x48, 0x0c, 0xea, 0x39, 0x0c, 0x03, 0x3a, 0xa4, 0x0d, 0x09, 0x44,
  0x3d, 0x07, 0x64, 0x40, 0x87, 0xb4, 0x61, 0x98, 0x2a, 0x6b, 0x82, 0xb0,
  0x06, 0xdd, 0x04, 0x81, 0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c, 0x87, 0x91,
  0x01, 0x1b, 0x02, 0x6d, 0x82, 0xd0, 0x06, 0xde, 0x06, 0xe4, 0xe0, 0x9e,
  0xe3, 0x30, 0x0e, 0x60, 0x43, 0xd0, 0x6d, 0x20, 0x2e, 0x60, 0xf3, 0x26,
  0x08, 0x6e, 0xf0, 0x6d, 0x08, 0xc0, 0x60, 0x82, 0x20, 0x00, 0xbc, 0xa0,
  0xa6, 0x9c, 0xde, 0xe4, 0xda, 0xc2, 0xd8, 0xa0, 0xd2, 0xf0, 0xca, 0xd8,
  0x98, 0xd2, 0xce, 0xd0, 0xe8, 0xd2, 0xdc, 0xce, 0xa8, 0xf0, 0x88, 0x50,
  0x15, 0x61, 0x0d, 0x3d, 0x3d, 0x49, 0x11, 0x4d, 0x10, 0x8a, 0x6a, 0x82,
  0x50, 0x58, 0x1b, 0x82, 0x63, 0x82, 0x50, 0x5c, 0x13, 0x04, 0x42, 0xda,
  0x20, 0xa4, 0x41, 0x1a, 0x6c, 0x58, 0x0e, 0x32, 0x28, 0x03, 0x33, 0x38,
  0x03, 0x34, 0x30, 0xd0, 0xe0, 0x30, 0x03, 0x35, 0xd8, 0x10, 0x18, 0x13,
  0x84, 0x02, 0x9b, 0x20, 0x10, 0xd3, 0x06, 0x21, 0x0d, 0xdc, 0x60, 0xc3,
  0x62, 0x90, 0x41, 0x19, 0x98, 0x01, 0x1b, 0xa0, 0x81, 0xd1, 0x06, 0x86,
  0x19, 0xbc, 0xc1, 0x86, 0x00, 0x9a, 0x20, 0x14, 0xd9, 0x04, 0x81, 0xa0,
  0x36, 0x08, 0x69, 0x30, 0x07, 0x1b, 0x16, 0x88, 0x0c, 0xca, 0xc0, 0x0c,
  0xe2, 0x00, 0x0d, 0x0c, 0x39, 0x80, 0xcc, 0x80, 0x0e, 0x58, 0x0c, 0x3d,
  0x31, 0x3d, 0x49, 0x6d, 0x58, 0xd2, 0xc0, 0x0e, 0xca, 0xc0, 0x0c, 0xce,
  0x00, 0x0d, 0x8c, 0x36, 0x48, 0x03, 0x33, 0x78, 0x83, 0x0d, 0xc4, 0x1a,
  0xc0, 0x41, 0x1d, 0xdc, 0x01, 0x93, 0x29, 0xab, 0x2f, 0xaa, 0x30, 0xb9,
  0xb3, 0x32, 0xba, 0x09, 0x42, 0xa1, 0x6d, 0x58, 0x8e, 0x3c, 0x28, 0x03,
  0x3d, 0x38, 0x03, 0x33, 0x30, 0xda, 0xe0, 0x30, 0x83, 0x37, 0xd8, 0x10,
  0xec, 0xc1, 0x86, 0x01, 0x0f, 0xf8, 0x00, 0xd8, 0x50, 0x88, 0xc1, 0x18,
  0xf4, 0xc1, 0x07, 0xb4, 0xc2, 0x13, 0x7b, 0xc3, 0x73, 0x19, 0x7b, 0x6b,
  0x83, 0x4b, 0x63, 0x2b, 0x93, 0x73, 0x79, 0x83, 0xa3, 0x4b, 0x7b, 0x73,
  0x9b, 0x9b, 0x12, 0x08, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8,
  0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x44, 0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32,
  0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0xc1, 0xd1, 0x84, 0x0c, 0xcf, 0xc5,
  0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x90, 0xd4, 0x21, 0xc3, 0x73,
  0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b,
  0x12, 0x30, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4,
  0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x5e, 0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4,
  0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x01, 0x18,
  0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b,
  0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xf4, 0x01, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x06, 0x70, 0xa5, 0xec,
  0xe9, 0x44, 0x0c, 0xb0, 0xa4, 0xc8, 0x45, 0x2c, 0x25, 0x62, 0x1c, 0x13,
  0xd2, 0x18, 0xed, 0x65, 0x07, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48,
  0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x21, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f,
  0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80,
  0x80, 0xf9, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42,
  0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x66, 0xe0, 0x0c, 0x97,
  0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb6, 0x5f, 0xdc, 0xb6, 0x11, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3,
  0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e,
  0x71, 0xdb, 0x36, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf,
  0x42, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2,
  0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x5b, 0x82,
  0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e,
  0x71, 0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11,
  0xe6, 0x17, 0xb7, 0x0d, 0x61, 0x20, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xc4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x46, 0x59, 0x14, 0x45,
  0xc1, 0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0xb9, 0x95, 0x4c, 0xc9,
  0x95, 0x69, 0x40, 0xa1, 0x06, 0x94, 0x42, 0xe1, 0x95, 0x51, 0xb9, 0x94,
  0x4a, 0x61, 0x14, 0x1b, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f,
  0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x88, 0x7f, 0x23, 0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0xcc,
  0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xc9,
  0x01, 0x64, 0x06, 0x6d, 0xd0, 0x06, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x74, 0x73, 0x10, 0x9d, 0x81, 0x1c, 0xc8, 0x41, 0x37, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x1d, 0x1d, 0x48, 0x68, 0x20, 0x07, 0x72, 0xe0,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x57, 0x07, 0x93, 0x19, 0xcc,
  0xc1, 0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xd9, 0x01,
  0x95, 0x06, 0x74, 0x40, 0x07, 0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x06, 0x28, 0x64, 0x6f, 0x50, 0x07, 0x6b, 0xa0, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x11, 0x0a, 0x1a, 0x1c, 0xd8, 0x41, 0x18, 0x6c,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x88, 0xc2, 0x16, 0x07, 0x77,
  0xc0, 0x06, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa3, 0xc0,
  0xc9, 0x01, 0x1e, 0xac, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x29, 0x74, 0x76, 0x90, 0x07, 0x6f, 0xe0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x51, 0x0a, 0xde, 0x1d, 0xe8, 0x41, 0x19, 0x7c, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x98, 0xc2, 0x87, 0x07, 0x7b, 0x00,
  0x07, 0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x29, 0x80,
  0x41, 0x1f, 0xf0, 0x81, 0x1c, 0x84, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xa8, 0x10, 0x06, 0x7e, 0xd0, 0x07, 0x68, 0x20, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xa4, 0x82, 0x18, 0xfc, 0x81, 0x1f,
  0xcc, 0xc1, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x0a,
  0x63, 0x00, 0x0a, 0x7f, 0x20, 0x07, 0x64, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc6, 0x2a, 0x90, 0x01, 0x28, 0x80, 0x82, 0x1d, 0x94, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xac, 0x50, 0x06, 0xa1, 0x10,
  0x0a, 0x6c, 0x60, 0x06, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xd0, 0xac,
  0x82, 0x07, 0x3d, 0x42, 0x30, 0x4d, 0xa2, 0x20, 0x0a, 0x67, 0x30, 0x8d,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02,
  0x31, 0x18, 0x21, 0xc9, 0xc7, 0x08, 0x49, 0x3e, 0x46, 0x48, 0xf2, 0x31,
  0x42, 0x92, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xaf, 0xe0,
  0x06, 0xd7, 0x18, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0x82, 0x0d, 0x53, 0x7c, 0x6c, 0x98, 0xe2, 0x63, 0xc3, 0x14, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0x74, 0x81, 0x0e, 0x06, 0x21,
  0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x5d, 0xa0,
  0x83, 0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf,
  0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0xbf, 0x90, 0x07, 0x5e, 0xc7,
  0x79, 0x1d, 0x37, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0xd1, 0x2f, 0xe4,
  0x41, 0x60, 0x01, 0x18, 0xc8, 0xc7, 0x04, 0x30, 0x90, 0x8f, 0x0d, 0x60,
  0x20, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0x68, 0xca, 0x01, 0x0f,
  0xd6, 0x20, 0x0d, 0xb8, 0xad, 0x0d, 0xda, 0x80, 0x17, 0x78, 0x21, 0x14,
  0xda, 0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0xc0, 0x04, 0x3a, 0x90,
  0x8f, 0x09, 0x75, 0x20, 0x1f, 0x13, 0xee, 0x00, 0x3e, 0x26, 0xe0, 0x01,
  0x7c, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x60, 0x4a, 0x07, 0x3d, 0x10,
  0x02, 0x21, 0x30, 0x3c, 0x08, 0xe2, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x11, 0x3b, 0xb0, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x51, 0x3b, 0x94, 0x82, 0x1a, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41,
  0xe4, 0x0e, 0xa6, 0xa0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10,
  0xbd, 0xc3, 0x29, 0xa8, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44,
  0xf0, 0x70, 0x0a, 0x6d, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x51,
  0x3c, 0xa0, 0x42, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x24,
  0x0f, 0xa9, 0xd0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xcd,
  0xc3, 0x2a, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xf4,
  0xc0, 0x0a, 0x6c, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x51, 0x3d,
  0xb0, 0x82, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x64, 0x0f,
  0xad, 0xe0, 0x06, 0x56, 0x24, 0xf2, 0xb1, 0x23, 0x91, 0x8f, 0x09, 0x41,
  0x7c, 0x4c, 0x59, 0xe4, 0x63, 0x89, 0x23, 0x1f, 0x13, 0x82, 0xf8, 0x18,
  0x03, 0xc9, 0xc7, 0x1c, 0x48, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0xe0, 0x91,
  0x8f, 0x15, 0x8f, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0x4a, 0x24, 0x1f, 0x2b,
  0x28, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x14, 0x4b, 0x3e, 0xe6, 0x58, 0xf2,
  0x31, 0x21, 0x88, 0x8f, 0x35, 0x9a, 0x7c, 0x6c, 0xe1, 0xe4, 0x63, 0x42,
  0x10, 0x1f, 0x6b, 0x3e, 0xf9, 0x18, 0xe5, 0xc9, 0xc7, 0x84, 0x20, 0x3e,
  0x66, 0x85, 0x81, 0x7c, 0x8c, 0x1a, 0x03, 0xf9, 0x98, 0x10, 0xc4, 0xc7,
  0xa0, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xbd, 0x84,
  0x3c, 0x78, 0x48, 0x60, 0x4f, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xb4, 0x98, 0xa0, 0x07, 0x30, 0x38, 0x02, 0x73, 0xc6, 0x40,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xcd, 0x84, 0x3d, 0x88,
  0x81, 0x11, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0x93, 0x13, 0xf3,
  0x50, 0x0c, 0x41, 0x31, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10,
  0xe5, 0xc4, 0x3c, 0x04, 0x86, 0x99, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x40, 0xbb, 0x09, 0x7d, 0x28, 0x03, 0x28, 0xb0, 0x0b, 0x0d,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5a, 0x4e, 0xf0, 0xc3,
  0x19, 0x3c, 0x81, 0x59, 0x6a, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0x76, 0xc2, 0x1f, 0xd2, 0xc0, 0x09, 0x46, 0x0c, 0x16, 0x00,
  0x04, 0xc1, 0xe0, 0x09, 0x8b, 0x7d, 0x28, 0x86, 0xa0, 0x18, 0x82, 0x11,
  0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xc2, 0x62, 0x1f, 0x02, 0x0b, 0x0e,
  0xf9, 0x98, 0x60, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x26, 0xf5, 0x81, 0x7c,
  0x2c, 0x68, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda, 0x58,
  0x98, 0x84, 0x1f, 0x14, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0x64, 0x71, 0x12, 0x7c, 0x80, 0x0a, 0x81, 0x51, 0xa1, 0x20, 0x1f, 0x0b,
  0x22, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x76, 0x16, 0x2a,
  0x21, 0x0a, 0x48, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x5a,
  0xac, 0x04, 0x28, 0xac, 0x42, 0x60, 0x56, 0x29, 0xc8, 0xc7, 0x82, 0x4a,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xad, 0x85, 0x4b, 0x98,
  0xc2, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xc6, 0x16, 0x2f,
  0x41, 0x0a, 0xae, 0x10, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0x23,
  0x17, 0x2c, 0x91, 0x14, 0x41, 0x52, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82,
  0x60, 0x10, 0xc9, 0x05, 0x4b, 0x04, 0x16, 0x2c, 0xf2, 0x31, 0x01, 0x91,
  0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x9b,
  0x0b, 0x99, 0xd8, 0x87, 0xb4, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc0, 0xee,
  0xc2, 0x26, 0xfe, 0x21, 0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xb0, 0xbd,
  0xd0, 0x89, 0x91, 0x98, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0xb0, 0x73, 0x58, 0xe2, 0x63, 0xe7, 0xb0, 0xc4, 0xc7,
  0xce, 0x61, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0xa6,
  0x01, 0x16, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x91, 0x69, 0x80, 0x45, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x66, 0x1a, 0x65, 0xe1, 0x12,
  0x66, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xa9, 0x46, 0x5a, 0xc8, 0x84,
  0x5f, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xae, 0xd1, 0x16, 0x36, 0x21,
  0x17, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60,
  0xfa, 0xb0, 0xc4, 0xc7, 0xf4, 0x61, 0x89, 0x8f, 0xe9, 0xc3, 0x12, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0x72, 0x63, 0x2e, 0x06, 0x21,
  0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0xdc, 0x98,
  0x8b, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x03, 0x2c, 0x37, 0xf0, 0x22, 0x2c, 0xe4, 0x62, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x00, 0xeb, 0x0d, 0xbe, 0x28, 0x0b, 0xdc, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xc0, 0xc2, 0x03, 0x34, 0xd2, 0xc2, 0x34, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x5a, 0x62, 0x89, 0x8f,
  0xb5, 0xc4, 0x12, 0x1f, 0x6b, 0x89, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xf0, 0xb0, 0x87, 0x69, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xec, 0x61, 0x1a, 0x81, 0x05, 0x84,
  0x7c, 0x4c, 0x20, 0xe4, 0x63, 0x7a, 0x71, 0x07, 0xf1, 0xb1, 0xbd, 0xb8,
  0x83, 0xf8, 0x18, 0x5f, 0x98, 0x41, 0x7c, 0xac, 0x2f, 0xcc, 0x20, 0x3e,
  0xe6, 0x17, 0x55, 0x7c, 0xec, 0x2f, 0xaa, 0xf8, 0x98, 0x28, 0xf8, 0x81,
  0x7c, 0x2c, 0x34, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81,
  0x36, 0x1f, 0xb6, 0x81, 0x8c, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x1a, 0x7d, 0xdc, 0x06, 0x32, 0x0a, 0x81, 0x99, 0xc2, 0x1b, 0xc8,
  0xc7, 0x4a, 0x23, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0xf7, 0xa1, 0x1b, 0xca, 0x29, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xa0, 0xe1, 0xc7, 0x6e, 0x28, 0xa7, 0x10, 0x98, 0x2a, 0x80, 0x81, 0x7c,
  0x2c, 0x35, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xb6,
  0x1f, 0xbe, 0xc1, 0xac, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x1a, 0x7f, 0xfc, 0x06, 0xb3, 0x0a, 0x81, 0xfd, 0x81, 0x2b, 0xc8, 0xc7,
  0x02, 0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xff,
  0x21, 0x1e, 0x7c, 0xf0, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x68, 0x20, 0x32, 0x1e, 0x7c, 0xf0, 0x0a, 0x81, 0xc1, 0x81, 0x2c, 0xc8,
  0xc7, 0x82, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0x23, 0x62, 0x1e, 0x6d, 0x30, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x68, 0x24, 0x72, 0x1e, 0x6d, 0x30, 0x0b, 0x81, 0x85, 0x81, 0x2d,
  0xc8, 0xc7, 0x02, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0x9d, 0x88, 0x7a, 0x78, 0xb7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x81, 0x86, 0x22, 0xeb, 0xe1, 0xdd, 0x42, 0x30, 0x1c, 0x51, 0xe5, 0x06,
  0xf1, 0x0d, 0x47, 0x48, 0xba, 0x41, 0x7c, 0xc3, 0x11, 0xcf, 0x6e, 0x10,
  0xdf, 0x74, 0x03, 0x6f, 0xf4, 0xc6, 0x30, 0xdd, 0xd0, 0x1b, 0xbe, 0x31,
  0x4c, 0x37, 0xf8, 0xc6, 0x6f, 0x0c, 0x36, 0x6c, 0xf2, 0xb1, 0x01, 0x93,
  0x8f, 0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x9b,
  0x11, 0xf9, 0xd8, 0x0d, 0x16, 0x19, 0x4d, 0x08, 0x86, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0x6c, 0x84, 0x3d, 0x28, 0xf2, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0xea, 0x46, 0xda, 0x23, 0x2a, 0x8f, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0x70, 0xc4, 0x3d, 0x1c, 0xf3, 0xb0, 0x61,
  0x91, 0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x58, 0xe4, 0x33, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x91, 0x8f, 0xc4, 0xc7, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xd1, 0x8f, 0xc8, 0xc7, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x11, 0x98, 0xcc, 0xc7, 0x60, 0x83, 0x22, 0x1f, 0x1b, 0x16, 0xf9,
  0xd8, 0xc0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x32,
  0xb1, 0x8f, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x32, 0xb9,
  0x8f, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x33, 0xc1, 0x8f,
  0xc1, 0x86, 0x37, 0x90, 0x8f, 0x0d, 0x6c, 0x20, 0x1f, 0x1b, 0xd2, 0x40,
  0x3e, 0x76, 0xbd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40,
  0x3b, 0x13, 0x15, 0xb9, 0x7a, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0x0d, 0x4d, 0x56, 0xe4, 0x5a, 0x85, 0xc0, 0xb4, 0x78, 0x90, 0xcf,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x6a, 0xd2, 0x22, 0xda, 0x2f,
  0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xad, 0x89, 0x8b, 0x68,
  0xad, 0x10, 0x58, 0x37, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0xad, 0x4d, 0x60, 0xa4, 0x0b, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x34, 0x37, 0x89, 0x91, 0xee, 0x15, 0x82, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xc0, 0xe0, 0xe4, 0x45, 0xf0, 0x83, 0x4d, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x45, 0x3e,
  0x36, 0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x60, 0x77, 0x62, 0x23, 0xff, 0x41, 0x27, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f, 0x3b, 0x06,
  0xf8, 0xd8, 0x31, 0xc0, 0xc7, 0x34, 0x91, 0x90, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x68, 0x7e, 0x12, 0x26, 0x1a, 0x3c, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0xfd, 0x89, 0x98, 0x68, 0xbe, 0x10, 0x58,
  0x47, 0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x2d, 0x54,
  0xc8, 0xa4, 0x93, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x34,
  0x51, 0x29, 0x93, 0x0e, 0x1c, 0x02, 0x03, 0x03, 0x93, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xa4, 0x72, 0x26, 0x60, 0x40, 0x0f,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xa5, 0x82, 0x26, 0x60,
  0x20, 0x0e, 0xc1, 0x68, 0x02, 0x1d, 0x00, 0xa3, 0x09, 0x75, 0x10, 0x8c,
  0x26, 0xd8, 0x81, 0x60, 0xff, 0xf1, 0xc8, 0xc7, 0xfe, 0xe3, 0x91, 0x8f,
  0xfd, 0xc7, 0x23, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0x68, 0x64,
  0xa5, 0x4c, 0x72, 0xc4, 0x46, 0x52, 0x04, 0x45, 0x74, 0x44, 0x47, 0x52,
  0x25, 0x55, 0xdc, 0x44, 0x47, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0xc1, 0xa2, 0x11, 0x91, 0x8f, 0x05, 0x8b, 0x7c, 0x2c,
  0x28, 0xe4, 0x63, 0x91, 0x89, 0xc8, 0xc7, 0x82, 0x46, 0x3e, 0x16, 0x1c,
  0xf2, 0xb1, 0x28, 0x45, 0xe4, 0x63, 0xc1, 0x23, 0x1f, 0x0b, 0x12, 0xf9,
  0xd8, 0x01, 0xc1, 0xc7, 0x0a, 0x08, 0x3e, 0x36, 0x40, 0xf0, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x03, 0xac, 0x57, 0xf8, 0xa4, 0x4c, 0x46, 0x65,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x98,
  0x11, 0xf9, 0xd8, 0x40, 0x23, 0xf2, 0xb1, 0xa1, 0x46, 0xe4, 0x63, 0x83,
  0x12, 0x1f, 0x1b, 0x94, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x06, 0x32, 0x91,
  0x8f, 0x0d, 0x65, 0x22, 0x1f, 0x1b, 0xcc, 0x44, 0x3e, 0x36, 0x40, 0xf0,
  0xb1, 0x01, 0x82, 0x8f, 0x0d, 0x10, 0x7c, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0x99, 0x17, 0x53, 0x49, 0x97, 0x74, 0xf9, 0x95, 0x61, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x79, 0x31, 0x95, 0x74, 0x49, 0x17,
  0x5a, 0x11, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x99, 0x17, 0x53,
  0x49, 0x97, 0x74, 0xf1, 0x95, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x90, 0x79, 0x31, 0x95, 0x74, 0x49, 0x17, 0x5e, 0xf9, 0x11, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x12, 0x1c, 0x44, 0x47, 0x58, 0x43, 0x3f, 0x80, 0x0c, 0x69, 0x63, 0x1f,
  0x78, 0x6f, 0x51, 0xac, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xef, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x16, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0xdd, 0x8b, 0x1b, 0x55,
  0x14, 0xbf, 0x77, 0x26, 0x99, 0xb9, 0xc9, 0xcc, 0x9c, 0x99, 0x4c, 0x36,
  0x93, 0x49, 0x76, 0x92, 0xcd, 0x7e, 0x05, 0x37, 0x5f, 0xdd, 0x8f, 0x6e,
  0x5b, 0xb5, 0xee, 0x56, 0xa8, 0xa2, 0x6c, 0xed, 0x56, 0xea, 0x5e, 0x41,
  0xdc, 0x82, 0x85, 0xd2, 0x0f, 0xbf, 0x45, 0xa4, 0x48, 0xc9, 0x8e, 0x35,
  0x28, 0x6a, 0x50, 0x29, 0xda, 0x82, 0x2f, 0xfa, 0xd0, 0x17, 0x17, 0x05,
  0xff, 0x82, 0xc4, 0x0f, 0x94, 0x51, 0xf0, 0xcd, 0x45, 0x9f, 0x8a, 0xf8,
  0xe6, 0x83, 0xf8, 0xc1, 0x3e, 0x48, 0x91, 0xd5, 0x73, 0x33, 0x49, 0x77,
  0xb7, 0xb5, 0xb4, 0xfa, 0xe2, 0x22, 0x7b, 0xe0, 0xf0, 0xbb, 0xf7, 0x9c,
  0xdf, 0xdc, 0x73, 0xcf, 0xb9, 0x77, 0x42, 0xe6, 0xdc, 0x7d, 0xf8, 0xf0,
  0x7d, 0x94, 0x12, 0x72, 0xc1, 0x21, 0x1d, 0x51, 0x42, 0x20, 0x3f, 0xb7,
  0x3e, 0xbc, 0x74, 0x33, 0xfa, 0xd1, 0x3f, 0xe4, 0xf7, 0x54, 0xea, 0x3e,
  0xb7, 0x9f, 0xfc, 0x3b, 0xe9, 0xad, 0xf3, 0x3b, 0x84, 0xf3, 0x7d, 0xca,
  0x46, 0xaf, 0x75, 0x0d, 0x7f, 0x4f, 0x2a, 0xc4, 0x8f, 0xba, 0x28, 0xe8,
  0x51, 0xa1, 0x54, 0x22, 0x1f, 0x6f, 0xe0, 0x15, 0x48, 0x21, 0x42, 0x37,
  0xcc, 0xfb, 0xba, 0x75, 0x11, 0xb6, 0x32, 0xea, 0xec, 0x95, 0x3a, 0xc9,
  0x02, 0x24, 0x85, 0x9a, 0xe8, 0xa2, 0x92, 0x22, 0xa9, 0x98, 0x92, 0x24,
  0x29, 0xb2, 0x89, 0x0e, 0x59, 0x22, 0xff, 0x73, 0x89, 0x10, 0x51, 0xab,
  0xf5, 0xb1, 0x48, 0x58, 0x54, 0xdd, 0xdc, 0xc0, 0x11, 0x35, 0x3e, 0xd1,
  0x29, 0xa6, 0xdf, 0xde, 0xa8, 0x6f, 0xba, 0xe4, 0xf7, 0xbf, 0x5f, 0x75,
  0x33, 0x8f, 0x22, 0x4f, 0xb9, 0x09, 0x9e, 0x2c, 0x78, 0xf2, 0x4d, 0xf2,
  0xa2, 0xd7, 0xe7, 0x29, 0x2a, 0x39, 0x12, 0xd1, 0xa4, 0x23, 0xa6, 0x87,
  0xfb, 0xa3, 0x7f, 0xc7, 0x3b, 0xf9, 0xad, 0x82, 0xc7, 0x4c, 0x11, 0x91,
  0x47, 0xae, 0xcf, 0x3b, 0xd1, 0xe5, 0x9d, 0xb8, 0x01, 0xef, 0x54, 0x97,
  0x77, 0xea, 0x06, 0xbc, 0x47, 0xbb, 0xbc, 0x47, 0x6f, 0xc0, 0xdb, 0x9c,
  0xaf, 0xd9, 0xa9, 0x4b, 0xe4, 0x9a, 0x8c, 0xff, 0x44, 0x21, 0xdb, 0xb2,
  0xa5, 0x64, 0xfb, 0x4c, 0xb6, 0x9e, 0x6c, 0x9f, 0xc9, 0xd6, 0x93, 0xed,
  0x33, 0xd9, 0x7a, 0xb2, 0x7d, 0x26, 0x5b, 0x4f, 0xb6, 0xcf, 0x64, 0xeb,
  0xc9, 0xf6, 0x99, 0x6c, 0x5d, 0x99, 0x18, 0xf0, 0x57, 0x76, 0xcd, 0xae,
  0xc9, 0xc7, 0x8e, 0xfe, 0x7a, 0xf9, 0xcc, 0x8a, 0xbf, 0xd2, 0x3a, 0xbe,
  0x26, 0x5f, 0x3a, 0xfa, 0xfc, 0x4e, 0x99, 0xbc, 0xd7, 0xae, 0x47, 0xce,
  0xb5, 0xea, 0xf1, 0xb5, 0x96, 0x29, 0xbf, 0xde, 0xd2, 0xe4, 0xb7, 0x5a,
  0x31, 0xf9, 0x6c, 0xcb, 0x97, 0x5f, 0x41, 0x7d, 0x11, 0xf5, 0x35, 0xd4,
  0x37, 0x5a, 0xba, 0xfc, 0x76, 0x8b, 0x12, 0x7d, 0x15, 0x97, 0xba, 0x1c,
  0x35, 0x59, 0x07, 0x55, 0x23, 0x9c, 0x47, 0xa4, 0x10, 0x2d, 0xf9, 0x8f,
  0xd6, 0x5b, 0xb9, 0xb7, 0x5b, 0xf8, 0xe5, 0x14, 0x10, 0x3a, 0x12, 0x90,
  0xd8, 0xde, 0xe0, 0x13, 0xf9, 0x7c, 0xeb, 0x4f, 0xf9, 0x42, 0xeb, 0x83,
  0x79, 0x9a, 0xa0, 0x64, 0x30, 0xa0, 0x74, 0x34, 0x20, 0x6c, 0x4f, 0x10,
  0xd7, 0x2a, 0xab, 0xf8, 0x5d, 0x7a, 0x99, 0xc6, 0xee, 0x08, 0x88, 0x7e,
  0x4b, 0x40, 0x8c, 0x4a, 0x40, 0x60, 0x3c, 0x20, 0xe6, 0xce, 0x80, 0xc4,
  0xf7, 0x05, 0x24, 0xb2, 0x3f, 0x20, 0xd1, 0x7b, 0x82, 0xa5, 0x8f, 0x9b,
  0x6d, 0x66, 0xfa, 0xbf, 0x30, 0xe9, 0x07, 0xca, 0x64, 0x44, 0xe5, 0x7b,
  0x4a, 0x94, 0x03, 0x01, 0x51, 0x0f, 0x05, 0x94, 0xdd, 0x1a, 0x98, 0x03,
  0x04, 0x68, 0xfc, 0xce, 0x80, 0x46, 0xef, 0x0d, 0xa8, 0x72, 0x5f, 0x40,
  0xf5, 0xb1, 0x00, 0x72, 0x84, 0xd3, 0xc8, 0x5d, 0x01, 0x35, 0xaa, 0x01,
  0x85, 0x89, 0x80, 0x9a, 0xd3, 0x81, 0x35, 0x88, 0x36, 0xf5, 0xfe, 0x80,
  0xf8, 0xdf, 0x7c, 0x97, 0xc0, 0x0f, 0xda, 0x85, 0x10, 0x53, 0xcb, 0x21,
  0x66, 0xc9, 0x22, 0xa9, 0x0b, 0x9f, 0x4d, 0x88, 0xb3, 0x10, 0x62, 0x7a,
  0x39, 0xc4, 0xfe, 0xea, 0xc8, 0x08, 0x13, 0xbe, 0x24, 0x21, 0xee, 0x42,
  0x88, 0x99, 0xe5, 0x10, 0x3d, 0x61, 0x67, 0x84, 0xe4, 0x16, 0x42, 0xcc,
  0x57, 0x86, 0x86, 0x98, 0x3d, 0x3a, 0x03, 0x24, 0xe7, 0x01, 0x19, 0xc8,
  0x03, 0x19, 0x2c, 0x40, 0x62, 0x78, 0x86, 0x2f, 0x7d, 0xd9, 0x6c, 0xa7,
  0xe4, 0x12, 0x5b, 0x0a, 0x9a, 0xed, 0xac, 0xbc, 0x93, 0x2d, 0x7d, 0xd1,
  0x6c, 0xa7, 0xab, 0x35, 0xb6, 0xf4, 0x79, 0xb3, 0xdd, 0x5f, 0xad, 0xb0,
  0xa5, 0xcf, 0x9a, 0xed, 0xcc, 0xc4, 0x24, 0x5b, 0xfa, 0xb4, 0xd9, 0xf6,
  0x26, 0xc6, 0x99, 0xc8, 0x3b, 0x7f, 0xfb, 0x2e, 0xf6, 0xf4, 0x6c, 0xb3,
  0x2d, 0xa5, 0xfa, 0x40, 0x4e, 0x2b, 0x10, 0xc9, 0x30, 0x58, 0x0e, 0xe3,
  0xe8, 0x22, 0x6e, 0x0c, 0x3f, 0x4b, 0x17, 0x42, 0xd4, 0x9e, 0x42, 0x9e,
  0x4a, 0xe6, 0x56, 0xd4, 0x1f, 0xbf, 0x96, 0xa3, 0xfd, 0x71, 0xa8, 0x15,
  0xb3, 0x4c, 0xc1, 0xb9, 0x82, 0xf3, 0xe5, 0x90, 0x83, 0xdb, 0x45, 0xbf,
  0xf9, 0xd5, 0xb0, 0xd1, 0x3f, 0xc3, 0xf1, 0x6b, 0x7f, 0x45, 0x31, 0xa4,
  0xc2, 0xc0, 0xe2, 0x4c, 0x9d, 0x1c, 0xdf, 0x5b, 0x17, 0xf1, 0xf5, 0xdb,
  0x5d, 0xb6, 0xf4, 0x49, 0xb3, 0xad, 0x45, 0x1d, 0x56, 0xb7, 0xd7, 0x5e,
  0x16, 0x7b, 0x48, 0x46, 0x8b, 0x8c, 0xa9, 0x58, 0x77, 0xf2, 0x13, 0xcd,
  0xee, 0xb0, 0xc0, 0x99, 0xb2, 0xc1, 0x2d, 0xef, 0x81, 0x38, 0x19, 0xef,
  0x9c, 0x79, 0x9c, 0x8d, 0xaf, 0xee, 0x43, 0x64, 0xb8, 0xb6, 0x53, 0x1e,
  0x6a, 0xc4, 0x10, 0xdd, 0x1d, 0xc5, 0x86, 0x87, 0x98, 0x9d, 0x7a, 0xa6,
  0x11, 0x8f, 0x8c, 0xaf, 0xfa, 0xc2, 0x3f, 0x7d, 0x1b, 0x1e, 0xcb, 0xdc,
  0x4a, 0x6c, 0xe2, 0xb9, 0x06, 0xe6, 0x07, 0x2e, 0x8e, 0x59, 0xf5, 0x68,
  0x23, 0x56, 0xad, 0x80, 0x83, 0x63, 0x6f, 0xfa, 0xa1, 0x46, 0x6c, 0x6a,
  0x27, 0x64, 0x85, 0xbd, 0x7c, 0xaa, 0xe1, 0x95, 0x4b, 0xc0, 0x30, 0x9e,
  0x58, 0x2f, 0xb6, 0x83, 0x37, 0x72, 0xbb, 0x71, 0x2e, 0x78, 0x53, 0x43,
  0x0d, 0x77, 0xf7, 0x24, 0xb8, 0xe9, 0x71, 0xc8, 0xa5, 0x6b, 0xa0, 0x4f,
  0x97, 0xb8, 0x93, 0x76, 0x40, 0x4f, 0x4c, 0xf2, 0x64, 0x62, 0x9c, 0x3b,
  0xbb, 0x2d, 0x48, 0x95, 0x2b, 0x90, 0x9c, 0xae, 0xf1, 0x64, 0xd2, 0xe1,
  0x19, 0xa3, 0x08, 0x7a, 0xd2, 0xe2, 0x99, 0xa9, 0x0a, 0x4f, 0x19, 0x2e,
  0x30, 0x43, 0x07, 0x96, 0xa8, 0x70, 0x67, 0xb1, 0x54, 0x4f, 0xef, 0xa8,
  0x80, 0x3b, 0x51, 0xe1, 0x7a, 0xd9, 0x06, 0x2d, 0x5d, 0xe1, 0xc9, 0xb2,
  0x0b, 0x4a, 0x59, 0x07, 0xe1, 0x4b, 0xa1, 0x2f, 0x95, 0xb6, 0x40, 0xd4,
  0x40, 0xc3, 0xb8, 0x89, 0xd9, 0x49, 0x5f, 0xad, 0xda, 0x3c, 0x35, 0x51,
  0x01, 0x35, 0xa1, 0x73, 0xb1, 0x17, 0x7b, 0x76, 0x97, 0x9f, 0x1f, 0xb0,
  0xb9, 0x5a, 0x75, 0x79, 0x7e, 0x50, 0xe7, 0x66, 0xc7, 0xf6, 0x92, 0x6f,
  0x75, 0xf0, 0xbc, 0x1f, 0x4b, 0x02, 0xe4, 0x73, 0x2e, 0x67, 0x09, 0x0f,
  0x6c, 0xb4, 0x19, 0xb3, 0xaf, 0xfa, 0x7a, 0x06, 0xb8, 0x96, 0xf6, 0xb8,
  0x62, 0x00, 0x57, 0x17, 0xa1, 0xae, 0x66, 0x5c, 0x50, 0x93, 0x36, 0xe0,
  0xbb, 0x04, 0x6a, 0x87, 0x73, 0x9b, 0x6f, 0x74, 0xf0, 0x1d, 0x5f, 0xcb,
  0x60, 0x5e, 0x6e, 0x11, 0x54, 0xd3, 0xe3, 0xb0, 0xe8, 0xd5, 0x21, 0x61,
  0x81, 0x96, 0x73, 0x00, 0xcc, 0x12, 0x40, 0x67, 0x4f, 0x67, 0xfd, 0x44,
  0x07, 0xcf, 0xf9, 0x0c, 0x73, 0x35, 0x07, 0x30, 0x77, 0xc3, 0xe1, 0x90,
  0xb3, 0x38, 0x64, 0x30, 0xe6, 0xa8, 0xc5, 0xd9, 0xa2, 0x55, 0x67, 0x78,
  0x0f, 0xd9, 0x28, 0x80, 0x78, 0xde, 0x1a, 0xf4, 0xc0, 0xc4, 0x7a, 0x24,
  0x86, 0x3d, 0x9e, 0xc8, 0x0c, 0x41, 0xc1, 0xcd, 0xc3, 0x88, 0x8b, 0x7b,
  0x30, 0x2c, 0x6e, 0xf4, 0x7b, 0x9d, 0x1c, 0x06, 0xed, 0x99, 0x8b, 0x3a,
  0xe2, 0xa8, 0x3d, 0x79, 0xd1, 0xb7, 0xac, 0x82, 0x88, 0x6d, 0xe2, 0x7d,
  0x19, 0xd2, 0xa5, 0x82, 0x8e, 0x58, 0x44, 0x4c, 0xe4, 0x6a, 0x20, 0x62,
  0x1b, 0xf6, 0xc1, 0x8b, 0x80, 0x77, 0x1c, 0xfa, 0xb3, 0x38, 0x2f, 0xaf,
  0x00, 0xfa, 0xac, 0x64, 0x8d, 0xfb, 0x8e, 0x5d, 0xf0, 0x87, 0xd8, 0x19,
  0xc3, 0xa8, 0x71, 0x95, 0xd0, 0x95, 0xdf, 0xc8, 0xfb, 0xd4, 0xcf, 0xb3,
  0x33, 0x7e, 0x2d, 0x5b, 0x88, 0x99, 0x36, 0x28, 0x3d, 0x9b, 0xcb, 0xce,
  0xa8, 0xc3, 0x00, 0xb1, 0x79, 0xbb, 0xce, 0x0c, 0xcc, 0xaf, 0x6b, 0x57,
  0x06, 0x4a, 0x70, 0x0b, 0x78, 0x30, 0x06, 0x05, 0x60, 0xf3, 0x56, 0xdd,
  0x48, 0x67, 0xa1, 0x04, 0x23, 0x20, 0x6a, 0xa2, 0xd9, 0x36, 0x54, 0x4a,
  0x1e, 0x37, 0xe6, 0xb3, 0xf5, 0x6a, 0xa9, 0xc0, 0x6b, 0xa5, 0x11, 0xae,
  0x59, 0x78, 0x57, 0xe6, 0x8a, 0x75, 0xcb, 0xf1, 0xb8, 0xed, 0x8c, 0xf0,
  0x84, 0x53, 0xe0, 0x5a, 0x36, 0x0b, 0x6c, 0xce, 0xaa, 0x8b, 0xf3, 0x23,
  0x9e, 0x4d, 0x44, 0x7d, 0xa5, 0x91, 0x2c, 0x49, 0x0e, 0xdb, 0x60, 0xcc,
  0x65, 0xeb, 0x11, 0x93, 0x81, 0x63, 0x17, 0x81, 0x0d, 0xe8, 0xd0, 0x67,
  0x63, 0xed, 0xec, 0x3c, 0x18, 0x19, 0xbc, 0x13, 0x3a, 0xde, 0x17, 0x3d,
  0xcf, 0xb3, 0x7a, 0x91, 0x8b, 0x3a, 0xd0, 0x82, 0x43, 0xe2, 0x69, 0x1d,
  0xbc, 0x8a, 0xc5, 0x73, 0x95, 0x3c, 0xcf, 0x57, 0x8a, 0x5c, 0xce, 0x28,
  0xc0, 0x34, 0x0b, 0x4c, 0xad, 0x0f, 0x92, 0x9a, 0x0d, 0xcc, 0xc2, 0x1c,
  0xfa, 0x2c, 0x88, 0xe3, 0xde, 0x3a, 0xef, 0x22, 0xc5, 0x3b, 0x22, 0x2b,
  0x3c, 0x16, 0x65, 0x5c, 0xc4, 0x1d, 0x8f, 0x67, 0x1b, 0x14, 0x71, 0x22,
  0x0e, 0x0d, 0x09, 0x71, 0x32, 0x6e, 0x37, 0xd4, 0x31, 0x9d, 0xd3, 0x31,
  0x85, 0x4b, 0x63, 0x8c, 0x5f, 0xbf, 0x47, 0xf3, 0x02, 0xda, 0xdf, 0xfd,
  0xcf, 0xb5, 0xd7, 0x7e, 0xea, 0xb5, 0x65, 0xf0, 0x37, 0x88, 0x6c, 0xb4,
  0x09, 0x8d, 0xd1, 0xcd, 0x36, 0x21, 0x71, 0x69, 0x7d, 0xdc, 0x6b, 0x1a,
  0x6a, 0xf2, 0x66, 0x9b, 0x18, 0x1b, 0x91, 0xcd, 0xcf, 0x0a, 0xbb, 0x19,
  0xdd, 0x10, 0x84, 0x84, 0x7d, 0x38, 0xb6, 0x21, 0x30, 0xed, 0xd9, 0x30,
  0x30, 0xbd, 0xaa, 0x3f, 0x16, 0xc1, 0xc0, 0xd2, 0x55, 0x3d, 0xa4, 0x88,
  0x08, 0x2c, 0xaf, 0xc7, 0xed, 0x3c, 0x6b, 0xae, 0xb7, 0x8f, 0xd6, 0xff,
  0xbf, 0xa4, 0xc9, 0xa1, 0xc3, 0x07, 0x9f, 0x7c, 0xe6, 0xf1, 0x47, 0x1e,
  0x3b, 0x74, 0xf2, 0xf4, 0xb1, 0xc7, 0x0e, 0x9c, 0x3c, 0x7e, 0xe2, 0xd9,
  0x93, 0x4f, 0x1c, 0x7f, 0xe0, 0x74, 0xaf, 0x2d, 0xfb, 0x60, 0xb7, 0x4d,
  0x8a, 0x3f, 0x7d, 0x78, 0xad, 0xc2, 0x36, 0x2f, 0x25, 0xd2, 0x95, 0xb4,
  0x0e, 0x88, 0xb9, 0x0c, 0x57, 0x96, 0x7e, 0xa0, 0xeb, 0xef, 0x95, 0xe0,
  0xe1, 0xee, 0x3c, 0x14, 0x42, 0xfe, 0x02, 0xdf, 0xe9, 0x3d, 0x70, 0x00,
  0x31, 0x1f, 0x36, 0x1f, 0x65, 0x62, 0xf1, 0xfa, 0x7c, 0xd5, 0xbe, 0x33,
  0xde, 0x62, 0x7a, 0x34
};
