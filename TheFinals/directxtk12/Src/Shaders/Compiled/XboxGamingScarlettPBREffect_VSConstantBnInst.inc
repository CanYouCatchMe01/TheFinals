#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; InstMatrix               0   xyzw        3     NONE   float   xyzw
; InstMatrix               1   xyzw        4     NONE   float   xyzw
; InstMatrix               2   xyzw        5     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_VSConstantBnInst.pdb
; shader hash: a22493b430c2004d182b825fb162e48e
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 5
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 6
; SigOutputVectors[0]: 5
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSConstantBnInst
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; InstMatrix               0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 24, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 8 depends on inputs: { 4, 5, 6, 12, 13, 14, 16, 17, 18, 20, 21, 22 }
;   output 9 depends on inputs: { 4, 5, 6, 12, 13, 14, 16, 17, 18, 20, 21, 22 }
;   output 10 depends on inputs: { 4, 5, 6, 12, 13, 14, 16, 17, 18, 20, 21, 22 }
;   output 16 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 17 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 18 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;   output 19 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }

define void @VSConstantBnInst() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 1, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 2, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = fmul fast float %4, 2.000000e+00
  %24 = fmul fast float %5, 2.000000e+00
  %25 = fmul fast float %6, 2.000000e+00
  %26 = fadd fast float %23, -1.000000e+00
  %27 = fadd fast float %24, -1.000000e+00
  %28 = fadd fast float %25, -1.000000e+00
  %29 = fmul fast float %11, %7
  %30 = call float @dx.op.tertiary.f32(i32 46, float %8, float %12, float %29)  ; FMad(a,b,c)
  %31 = call float @dx.op.tertiary.f32(i32 46, float %9, float %13, float %30)  ; FMad(a,b,c)
  %32 = call float @dx.op.tertiary.f32(i32 46, float %10, float %14, float %31)  ; FMad(a,b,c)
  %33 = fmul fast float %15, %7
  %34 = call float @dx.op.tertiary.f32(i32 46, float %8, float %16, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %9, float %17, float %34)  ; FMad(a,b,c)
  %36 = call float @dx.op.tertiary.f32(i32 46, float %10, float %18, float %35)  ; FMad(a,b,c)
  %37 = fmul fast float %19, %7
  %38 = call float @dx.op.tertiary.f32(i32 46, float %8, float %20, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %9, float %21, float %38)  ; FMad(a,b,c)
  %40 = call float @dx.op.tertiary.f32(i32 46, float %10, float %22, float %39)  ; FMad(a,b,c)
  %41 = fmul fast float %11, %26
  %42 = call float @dx.op.tertiary.f32(i32 46, float %27, float %12, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %28, float %13, float %42)  ; FMad(a,b,c)
  %44 = fmul fast float %15, %26
  %45 = call float @dx.op.tertiary.f32(i32 46, float %27, float %16, float %44)  ; FMad(a,b,c)
  %46 = call float @dx.op.tertiary.f32(i32 46, float %28, float %17, float %45)  ; FMad(a,b,c)
  %47 = fmul fast float %19, %26
  %48 = call float @dx.op.tertiary.f32(i32 46, float %27, float %20, float %47)  ; FMad(a,b,c)
  %49 = call float @dx.op.tertiary.f32(i32 46, float %28, float %21, float %48)  ; FMad(a,b,c)
  %50 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.f32 %50, 0
  %52 = extractvalue %dx.types.CBufRet.f32 %50, 1
  %53 = extractvalue %dx.types.CBufRet.f32 %50, 2
  %54 = extractvalue %dx.types.CBufRet.f32 %50, 3
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.f32 %55, 2
  %59 = extractvalue %dx.types.CBufRet.f32 %55, 3
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %70 = fmul fast float %51, %32
  %71 = call float @dx.op.tertiary.f32(i32 46, float %36, float %52, float %70)  ; FMad(a,b,c)
  %72 = call float @dx.op.tertiary.f32(i32 46, float %40, float %53, float %71)  ; FMad(a,b,c)
  %73 = call float @dx.op.tertiary.f32(i32 46, float %10, float %54, float %72)  ; FMad(a,b,c)
  %74 = fmul fast float %56, %32
  %75 = call float @dx.op.tertiary.f32(i32 46, float %36, float %57, float %74)  ; FMad(a,b,c)
  %76 = call float @dx.op.tertiary.f32(i32 46, float %40, float %58, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.tertiary.f32(i32 46, float %10, float %59, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %61, %32
  %79 = call float @dx.op.tertiary.f32(i32 46, float %36, float %62, float %78)  ; FMad(a,b,c)
  %80 = call float @dx.op.tertiary.f32(i32 46, float %40, float %63, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.tertiary.f32(i32 46, float %10, float %64, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %66, %32
  %83 = call float @dx.op.tertiary.f32(i32 46, float %36, float %67, float %82)  ; FMad(a,b,c)
  %84 = call float @dx.op.tertiary.f32(i32 46, float %40, float %68, float %83)  ; FMad(a,b,c)
  %85 = call float @dx.op.tertiary.f32(i32 46, float %10, float %69, float %84)  ; FMad(a,b,c)
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %94 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %95 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = extractvalue %dx.types.CBufRet.f32 %96, 3
  %101 = fmul fast float %87, %32
  %102 = call float @dx.op.tertiary.f32(i32 46, float %36, float %88, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %40, float %89, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %10, float %90, float %103)  ; FMad(a,b,c)
  %105 = fmul fast float %92, %32
  %106 = call float @dx.op.tertiary.f32(i32 46, float %36, float %93, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %40, float %94, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %10, float %95, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %97, %32
  %110 = call float @dx.op.tertiary.f32(i32 46, float %36, float %98, float %109)  ; FMad(a,b,c)
  %111 = call float @dx.op.tertiary.f32(i32 46, float %40, float %99, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %10, float %100, float %111)  ; FMad(a,b,c)
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = fmul fast float %114, %43
  %126 = call float @dx.op.tertiary.f32(i32 46, float %46, float %115, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %49, float %116, float %126)  ; FMad(a,b,c)
  %128 = fmul fast float %118, %43
  %129 = call float @dx.op.tertiary.f32(i32 46, float %46, float %119, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %49, float %120, float %129)  ; FMad(a,b,c)
  %131 = fmul fast float %122, %43
  %132 = call float @dx.op.tertiary.f32(i32 46, float %46, float %123, float %131)  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float %49, float %124, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.dot3.f32(i32 55, float %127, float %130, float %133, float %127, float %130, float %133)  ; Dot3(ax,ay,az,bx,by,bz)
  %135 = call float @dx.op.unary.f32(i32 25, float %134)  ; Rsqrt(value)
  %136 = fmul fast float %135, %127
  %137 = fmul fast float %135, %130
  %138 = fmul fast float %135, %133
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %143 = extractvalue %dx.types.CBufRet.f32 %139, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %104)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %108)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %112)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %136)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %137)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %138)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %141)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %142)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %73)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %77)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %81)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %85)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!8 = !{[26 x i32] [i32 24, i32 20, i32 983152, i32 983152, i32 983152, i32 983152, i32 1792, i32 1792, i32 1792, i32 0, i32 1, i32 2, i32 0, i32 0, i32 984944, i32 984944, i32 984944, i32 983152, i32 984944, i32 984944, i32 984944, i32 983152, i32 984944, i32 984944, i32 984944, i32 983152]}
!9 = !{void ()* @VSConstantBnInst, !"VSConstantBnInst", !10, !5, null}
!10 = !{!11, !21, null}
!11 = !{!12, !15, !17, !19}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{i32 3, !"InstMatrix", i8 9, i8 0, !20, i8 0, i32 3, i8 4, i32 3, i8 0, !14}
!20 = !{i32 0, i32 1, i32 2}
!21 = !{!22, !23, !25, !27, !28}
!22 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 0, i8 0, !18}
!23 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!24 = !{i32 1}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !16}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 3, i8 0, !14}
!28 = !{i32 4, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 4, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 28
;   num_shared_vgprs: 0
;   num_sgprs: 34
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 640
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xb49324a2, 0x4d00c230                // 000000000000: D58024A2 03FF6993 4D00C230
;   v_nop_xbox_data 0x5f822b18, 0x8ee462b1                // 00000000000C: D5802B18 03FEBF82 8EE462B1
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_waitcnt     vmcnt(0)                                // 000000000020: BF8C3F70
;   v_mul_legacy_f32  v3, v16, v4                         // 000000000024: 0E060910
;   s_or_b32      s25, s17, lit(0x00100000)               // 000000000028: 8819FF11 00100000
;   s_mov_b32     s24, s16                                // 000000000030: BE980310
;   s_mov_b32     s26, -1                                 // 000000000034: BE9A03C1
;   s_mov_b32     s27, lit(0x11014fac)                    // 000000000038: BE9B03FF 11014FAC
;   v_fmac_f32    v3, v5, v17                             // 000000000040: 56062305
;   s_buffer_load_dwordx16  s[0:15], s[24:27], 0x000050   // 000000000044: F430000C FA000050
;   s_buffer_load_dwordx8  s[16:23], s[24:27], 0x000090   // 00000000004C: F42C040C FA000090
;   v_fma_f32     v11, v8, 2.0, -1.0                      // 000000000054: D54B000B 03CDE908
;   v_mul_legacy_f32  v8, v20, v4                         // 00000000005C: 0E100914
;   v_fmac_f32    v3, v6, v18                             // 000000000060: 56062506
;   v_mul_legacy_f32  v4, v24, v4                         // 000000000064: 0E080918
;   v_fma_f32     v14, v9, 2.0, -1.0                      // 000000000068: D54B000E 03CDE909
;   v_mul_legacy_f32  v0, v24, v11                        // 000000000070: 0E001718
;   v_fmac_f32    v8, v5, v21                             // 000000000074: 56102B05
;   v_fmac_f32    v3, v7, v19                             // 000000000078: 56062707
;   v_mul_legacy_f32  v19, v16, v11                       // 00000000007C: 0E261710
;   v_mul_legacy_f32  v16, v20, v11                       // 000000000080: 0E201714
;   v_fmac_f32    v4, v5, v25                             // 000000000084: 56083305
;   v_fmac_f32    v8, v6, v22                             // 000000000088: 56102D06
;   v_fma_f32     v1, v10, 2.0, -1.0                      // 00000000008C: D54B0001 03CDE90A
;   v_fmac_f32    v19, v14, v17                           // 000000000094: 5626230E
;   v_fmac_f32    v16, v14, v21                           // 000000000098: 56202B0E
;   v_fmac_f32    v0, v14, v25                            // 00000000009C: 5600330E
;   s_buffer_load_dwordx4  s[28:31], s[24:27], 0x0000b0   // 0000000000A0: F428070C FA0000B0
;   v_fmac_f32    v4, v6, v26                             // 0000000000A8: 56083506
;   v_fmac_f32    v19, v1, v18                            // 0000000000AC: 56262501
;   v_fmac_f32    v8, v7, v23                             // 0000000000B0: 56102F07
;   s_waitcnt     lgkmcnt(0)                              // 0000000000B4: BF8CC07F
;   v_mul_legacy_f32  v2, s16, v3                         // 0000000000B8: 0E040610
;   v_mul_legacy_f32  v9, s20, v3                         // 0000000000BC: 0E120614
;   v_fmac_f32    v16, v1, v22                            // 0000000000C0: 56202D01
;   v_fmac_f32    v0, v1, v26                             // 0000000000C4: 56003501
;   v_mul_legacy_f32  v1, s12, v3                         // 0000000000C8: 0E02060C
;   v_fmac_f32    v4, v7, v27                             // 0000000000CC: 56083707
;   v_fmac_f32    v2, s17, v8                             // 0000000000D0: 56041011
;   v_fmac_f32    v9, s21, v8                             // 0000000000D4: 56121015
;   v_mul_legacy_f32  v15, s0, v19                        // 0000000000D8: 0E1E2600
;   v_fmac_f32    v1, s13, v8                             // 0000000000DC: 5602100D
;   v_mul_legacy_f32  v5, s8, v19                         // 0000000000E0: 0E0A2608
;   v_fmac_f32    v2, s18, v4                             // 0000000000E4: 56040812
;   v_fmac_f32    v9, s22, v4                             // 0000000000E8: 56120816
;   v_fmac_f32    v15, s1, v16                            // 0000000000EC: 561E2001
;   v_fmac_f32    v1, s14, v4                             // 0000000000F0: 5602080E
;   v_fmac_f32    v5, s9, v16                             // 0000000000F4: 560A2009
;   v_fmac_f32    v2, s19, v7                             // 0000000000F8: 56040E13
;   v_fmac_f32    v9, s23, v7                             // 0000000000FC: 56120E17
;   v_mul_legacy_f32  v10, s28, v3                        // 000000000100: 0E14061C
;   v_fmac_f32    v1, s15, v7                             // 000000000104: 56020E0F
;   s_buffer_load_dwordx8  s[12:19], s[24:27], 0x000010   // 000000000108: F42C030C FA000010
;   s_buffer_load_dwordx4  s[20:23], s[24:27], 0x000030   // 000000000110: F428050C FA000030
;   v_fmac_f32    v15, s2, v0                             // 000000000118: 561E0002
;   v_fmac_f32    v10, s29, v8                            // 00000000011C: 5614101D
;   v_fmac_f32    v5, s10, v0                             // 000000000120: 560A000A
;   s_buffer_load_dwordx4  s[0:3], s[24:27], 0x000160     // 000000000124: F428000C FA000160
;   v_fmac_f32    v10, s30, v4                            // 00000000012C: 5614081E
;   v_fmac_f32    v10, s31, v7                            // 000000000130: 56140E1F
;   exp           pos0, v1, v2, v9, v10 done              // 000000000134: F80008CF 0A090201
;   s_waitcnt     expcnt(0)                               // 00000000013C: BF8CFF0F
;   v_mov_b32     v9, 1.0                                 // 000000000140: 7E1202F2
;   s_waitcnt     lgkmcnt(0)                              // 000000000144: BF8CC07F
;   v_mul_legacy_f32  v11, s12, v3                        // 000000000148: 0E16060C
;   v_mul_legacy_f32  v14, s16, v3                        // 00000000014C: 0E1C0610
;   v_mul_legacy_f32  v18, s20, v3                        // 000000000150: 0E240614
;   v_fmac_f32    v11, s13, v8                            // 000000000154: 5616100D
;   v_fmac_f32    v14, s17, v8                            // 000000000158: 561C1011
;   v_fmac_f32    v18, s21, v8                            // 00000000015C: 56241015
;   v_mov_b32     v22, s1                                 // 000000000160: 7E2C0201
;   v_mov_b32     v8, s2                                  // 000000000164: 7E100202
;   v_fmac_f32    v11, s14, v4                            // 000000000168: 5616080E
;   v_fmac_f32    v14, s18, v4                            // 00000000016C: 561C0812
;   v_fmac_f32    v18, s22, v4                            // 000000000170: 56240816
;   v_fmac_f32    v11, s15, v7                            // 000000000174: 56160E0F
;   v_fmac_f32    v14, s19, v7                            // 000000000178: 561C0E13
;   v_fmac_f32    v18, s23, v7                            // 00000000017C: 56240E17
;   v_mul_legacy_f32  v7, s4, v19                         // 000000000180: 0E0E2604
;   v_mov_b32     v19, 0                                  // 000000000184: 7E260280
;   v_fmac_f32    v7, s5, v16                             // 000000000188: 560E2005
;   exp           param0, v12, v13, v19, v9               // 00000000018C: F800020F 09130D0C
;   exp           param1, v11, v14, v18, v9               // 000000000194: F800021F 09120E0B
;   v_fmac_f32    v7, s6, v0                              // 00000000019C: 560E0006
;   v_mul_legacy_f32  v0, v7, v7                          // 0000000001A0: 0E000F07
;   v_fmac_f32    v0, v15, v15                            // 0000000001A4: 56001F0F
;   v_fmac_f32    v0, v5, v5                              // 0000000001A8: 56000B05
;   v_rsq_f32     v0, v0                                  // 0000000001AC: 7E005D00
;   v_mul_legacy_f32  v3, v0, v15                         // 0000000001B0: 0E061F00
;   v_mul_legacy_f32  v6, v0, v7                          // 0000000001B4: 0E0C0F00
;   v_mul_legacy_f32  v0, v0, v5                          // 0000000001B8: 0E000B00
;   v_mov_b32     v5, s0                                  // 0000000001BC: 7E0A0200
;   v_mov_b32     v15, s3                                 // 0000000001C0: 7E1E0203
;   exp           param2, v3, v6, v0, v9                  // 0000000001C4: F800022F 09000603
;   exp           param3, v5, v22, v8, v15                // 0000000001CC: F800023F 0F081605
;   s_endpgm                                              // 0000000001D4: BF810000
;   s_code_end                                            // 0000000001D8: BF9F0000
;   s_code_end                                            // 0000000001DC: BF9F0000
;   s_code_end                                            // 0000000001E0: BF9F0000
;   s_code_end                                            // 0000000001E4: BF9F0000
;   s_code_end                                            // 0000000001E8: BF9F0000
;   s_code_end                                            // 0000000001EC: BF9F0000
;   s_code_end                                            // 0000000001F0: BF9F0000
;   s_code_end                                            // 0000000001F4: BF9F0000
;   s_code_end                                            // 0000000001F8: BF9F0000
;   s_code_end                                            // 0000000001FC: BF9F0000
;   s_code_end                                            // 000000000200: BF9F0000
;   s_code_end                                            // 000000000204: BF9F0000
;   s_code_end                                            // 000000000208: BF9F0000
;   s_code_end                                            // 00000000020C: BF9F0000
;   s_code_end                                            // 000000000210: BF9F0000
;   s_code_end                                            // 000000000214: BF9F0000
;   s_code_end                                            // 000000000218: BF9F0000
;   s_code_end                                            // 00000000021C: BF9F0000
;   s_code_end                                            // 000000000220: BF9F0000
;   s_code_end                                            // 000000000224: BF9F0000
;   s_code_end                                            // 000000000228: BF9F0000
;   s_code_end                                            // 00000000022C: BF9F0000
;   s_code_end                                            // 000000000230: BF9F0000
;   s_code_end                                            // 000000000234: BF9F0000
;   s_code_end                                            // 000000000238: BF9F0000
;   s_code_end                                            // 00000000023C: BF9F0000
;   s_code_end                                            // 000000000240: BF9F0000
;   s_code_end                                            // 000000000244: BF9F0000
;   s_code_end                                            // 000000000248: BF9F0000
;   s_code_end                                            // 00000000024C: BF9F0000
;   s_code_end                                            // 000000000250: BF9F0000
;   s_code_end                                            // 000000000254: BF9F0000
;   s_code_end                                            // 000000000258: BF9F0000
;   s_code_end                                            // 00000000025C: BF9F0000
;   s_code_end                                            // 000000000260: BF9F0000
;   s_code_end                                            // 000000000264: BF9F0000
;   s_code_end                                            // 000000000268: BF9F0000
;   s_code_end                                            // 00000000026C: BF9F0000
;   s_code_end                                            // 000000000270: BF9F0000
;   s_code_end                                            // 000000000274: BF9F0000
;   s_code_end                                            // 000000000278: BF9F0000
;   s_code_end                                            // 00000000027C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 36
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSConstantBnInst)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 6
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       data_vgpr: 16
;       data_size: 3
;     }
;     input_semantic[4] {
;       usage: GENERIC
;       usage_idx: 4
;       channel_mask: 15
;       data_vgpr: 20
;       data_size: 3
;     }
;     input_semantic[5] {
;       usage: GENERIC
;       usage_idx: 5
;       channel_mask: 15
;       data_vgpr: 24
;       data_size: 3
;     }
; 
;   num_output_semantics: 4
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       param_idx: 3
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 6 {
;     vs_export_count: 3
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 16
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000110000000000110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00001111111111110011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=28,NumSGPR=34,LDS=0,Scratch=0,WaveSize=64,Occupancy=18
; VAlu:74,SAlu:11,VMem:0,SMem:6,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char PBREffect_VSConstantBnInst[] = {
  0x44, 0x58, 0x42, 0x43, 0x33, 0x8a, 0x51, 0xc0, 0x1d, 0xb9, 0x37, 0xc6,
  0xec, 0x4c, 0xe0, 0xa2, 0x7d, 0x5e, 0x3a, 0x36, 0x01, 0x00, 0x00, 0x00,
  0xa4, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00,
  0xdc, 0x03, 0x00, 0x00, 0x8c, 0x05, 0x00, 0x00, 0x1c, 0x06, 0x00, 0x00,
  0x38, 0x06, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xf0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x72,
  0x69, 0x78, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xc4, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xc0, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x04, 0x05, 0x00, 0x06,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52,
  0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x56, 0x53, 0x43,
  0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x6e, 0x49, 0x6e, 0x73,
  0x74, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x31, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0x70, 0x00, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00,
  0x70, 0x00, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00, 0x00, 0x07, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x00, 0x0f, 0x00, 0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x78, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x88, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
  0x6e, 0x74, 0x42, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x64, 0x62,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa2, 0x24, 0x93, 0xb4, 0x30, 0xc2, 0x00, 0x4d,
  0x18, 0x2b, 0x82, 0x5f, 0xb1, 0x62, 0xe4, 0x8e, 0x44, 0x58, 0x49, 0x4c,
  0x64, 0x10, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x19, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x14, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x2c, 0x0d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x8c, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xa0, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00,
  0xa2, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x54, 0x10, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x4b, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x14, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x42, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x2d, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x80, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94,
  0x61, 0x20, 0x06, 0x62, 0x8e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0xb9, 0x8d, 0x2a, 0x56, 0x62, 0xf2, 0x8b, 0xdb, 0x46, 0xc4, 0x30, 0x0c,
  0x03, 0x15, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0,
  0x0c, 0x0b, 0x81, 0x82, 0xa7, 0x10, 0x0e, 0x01, 0x11, 0x14, 0x95, 0x62,
  0x20, 0x86, 0x61, 0xa0, 0x69, 0x8e, 0x20, 0x28, 0x06, 0x44, 0x14, 0x04,
  0x51, 0x91, 0x35, 0x10, 0x30, 0x8c, 0x30, 0x0c, 0xc3, 0x08, 0xc4, 0x90,
  0x04, 0x5a, 0x0e, 0x64, 0x47, 0x1d, 0x8e, 0x34, 0x2d, 0x00, 0xe6, 0x50,
  0x93, 0xcf, 0x39, 0x8d, 0x34, 0x01, 0xcd, 0x24, 0x21, 0x27, 0xdb, 0xb8,
  0x6d, 0xe3, 0xb8, 0x6c, 0x18, 0x06, 0x62, 0x18, 0xa8, 0x4b, 0x0d, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x05, 0x02, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x10, 0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0xf2, 0x66,
  0x00, 0xe8, 0x1b, 0x4b, 0xc3, 0x28, 0x78, 0x04, 0x3d, 0x78, 0x04, 0x3d,
  0x78, 0x04, 0x3d, 0x78, 0x04, 0x3d, 0x10, 0x0f, 0x40, 0x3c, 0x00, 0xf1,
  0x00, 0x08, 0x04, 0x00, 0x80, 0xf7, 0xd0, 0x83, 0xf7, 0xd0, 0x83, 0xf7,
  0xd0, 0x83, 0x47, 0xd0, 0x83, 0xf7, 0xd0, 0x83, 0xf7, 0xd0, 0x83, 0xf7,
  0xd0, 0x83, 0x47, 0xd0, 0x83, 0xf7, 0xd0, 0x83, 0xf7, 0xd0, 0x83, 0xf7,
  0xd0, 0x83, 0x47, 0xd0, 0x03, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x8a, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x20, 0x13, 0x04, 0x22, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x50, 0x36, 0x08, 0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x2c,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0xde, 0x45, 0x60, 0x82, 0x40, 0x30,
  0x1b, 0x90, 0xc3, 0x79, 0x8e, 0xc3, 0x80, 0x80, 0x0d, 0x41, 0xb4, 0x81,
  0x00, 0x00, 0x09, 0x98, 0x20, 0x7c, 0xd8, 0x86, 0x80, 0x9a, 0x20, 0x08,
  0x00, 0x21, 0xab, 0xa9, 0xa1, 0x37, 0xb7, 0x39, 0xba, 0x30, 0x37, 0x3a,
  0x21, 0xb7, 0x24, 0xb7, 0x39, 0x3a, 0x2e, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x13, 0x84, 0x42, 0x9a, 0x20, 0x14,
  0xd3, 0x86, 0xe0, 0x98, 0x20, 0x14, 0xd4, 0x04, 0x81, 0x68, 0x26, 0x08,
  0x84, 0xb3, 0x41, 0xe8, 0xbc, 0x0d, 0xcb, 0x81, 0x65, 0xda, 0xa6, 0x19,
  0xdc, 0xa1, 0x7d, 0x34, 0x9c, 0x9e, 0xa4, 0x9a, 0x82, 0x98, 0x26, 0x08,
  0x45, 0x35, 0x41, 0x20, 0x9e, 0x0d, 0x42, 0x37, 0x06, 0x1b, 0x16, 0x23,
  0x0c, 0x32, 0x6d, 0xd3, 0x0c, 0x31, 0x30, 0x34, 0x32, 0x98, 0x20, 0x10,
  0x10, 0x11, 0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42,
  0x61, 0x6d, 0x10, 0xba, 0x6e, 0xc3, 0x62, 0x06, 0x67, 0x90, 0x69, 0x9b,
  0x66, 0xa0, 0x81, 0x19, 0x68, 0x69, 0x40, 0x25, 0xc9, 0x6d, 0x8e, 0xae,
  0x29, 0x8c, 0x4e, 0x2e, 0x0d, 0x6f, 0xc3, 0x70, 0x18, 0x66, 0xb0, 0x61,
  0xe9, 0xd6, 0x20, 0xd3, 0xd8, 0x40, 0xeb, 0xb8, 0x4e, 0xfb, 0x36, 0x10,
  0x60, 0x50, 0x06, 0x6a, 0xd0, 0x06, 0x1b, 0x96, 0xe3, 0x0c, 0x32, 0x6d,
  0x43, 0x03, 0x03, 0x0d, 0x0e, 0x2d, 0x0d, 0x36, 0x04, 0xc6, 0x86, 0xc5,
  0x38, 0x83, 0x4c, 0x83, 0x03, 0x34, 0x30, 0x38, 0x43, 0xfb, 0x36, 0x04,
  0x66, 0xb0, 0x61, 0x31, 0x83, 0x33, 0xc8, 0x34, 0x39, 0x40, 0x03, 0x43,
  0x0c, 0xcc, 0x40, 0x23, 0x03, 0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x1b,
  0x96, 0x8e, 0x0e, 0x32, 0x6d, 0x43, 0x03, 0x83, 0xeb, 0xb4, 0x6f, 0x82,
  0x40, 0x44, 0x1b, 0x16, 0x3b, 0xc0, 0x32, 0x31, 0xd8, 0x38, 0x83, 0xb3,
  0x03, 0xed, 0xdb, 0x50, 0xbc, 0x41, 0x1c, 0xcc, 0x41, 0x1d, 0xdc, 0xc1,
  0x86, 0xc1, 0x0d, 0xf0, 0x00, 0xd8, 0x50, 0x58, 0x57, 0x1e, 0x4c, 0x40,
  0x2b, 0x3c, 0xb1, 0x37, 0x3c, 0x97, 0xb1, 0xb7, 0x36, 0xb8, 0x34, 0xb6,
  0x32, 0x39, 0x97, 0x37, 0x38, 0xba, 0xb4, 0x37, 0xb7, 0xb9, 0x29, 0x81,
  0x50, 0x85, 0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e,
  0x4a, 0x40, 0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b,
  0x73, 0x9b, 0x12, 0x1c, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec,
  0xca, 0xe4, 0xa6, 0x04, 0x49, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30,
  0xb2, 0x32, 0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x01, 0x53, 0x86,
  0x0c, 0xcf, 0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e,
  0x4a, 0x20, 0xd5, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22,
  0x9b, 0xa2, 0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x50, 0x75, 0xc8, 0xf0, 0x5c,
  0xca, 0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6,
  0x04, 0x79, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
  0x06, 0x00, 0xbd, 0x2c, 0xe7, 0x34, 0xd2, 0x04, 0x34, 0xd3, 0xd6, 0x88,
  0x8d, 0x34, 0x59, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15,
  0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc,
  0xb6, 0x1d, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11,
  0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x03, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f,
  0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x5b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3, 0xf8,
  0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x09, 0x54,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50,
  0x93, 0x5f, 0xdc, 0xb6, 0x19, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11,
  0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x04, 0xcf, 0x70, 0xf9,
  0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x54, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x14, 0x4b, 0x71, 0xcd, 0x00, 0x94, 0x42, 0xd9, 0x95,
  0x5c, 0x49, 0x14, 0x45, 0x59, 0x94, 0x5b, 0xc9, 0xd0, 0x30, 0x46, 0x00,
  0x82, 0x20, 0x88, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c,
  0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0x89, 0x41, 0x32, 0x81, 0x01, 0x18, 0x40, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xa4, 0x41, 0xa6, 0x85, 0xc1, 0xd5, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x06, 0xda, 0x26, 0x06, 0x91,
  0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1a, 0x6c, 0x64, 0x30,
  0x06, 0xd9, 0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1b, 0x70,
  0x65, 0x40, 0x06, 0x13, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46,
  0x1b, 0x74, 0x66, 0x50, 0x06, 0x58, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x86, 0x1b, 0x78, 0x66, 0x60, 0x06, 0x9c, 0x34, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0xc6, 0x1b, 0x7c, 0x67, 0x70, 0x06, 0xd6, 0x34, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1c, 0x80, 0x01, 0x1a, 0xa0, 0xc1,
  0x46, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x11, 0x07, 0x61, 0x90,
  0x06, 0x69, 0xd0, 0x55, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xc8,
  0x81, 0x18, 0x98, 0x81, 0x1a, 0x80, 0x81, 0x35, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc6, 0x1c, 0x8c, 0xc1, 0x19, 0xac, 0x81, 0x76, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x41, 0x07, 0x64, 0x80, 0x06, 0x6c, 0xf0,
  0x61, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xd4, 0x41, 0x19, 0xa4,
  0x41, 0x1b, 0x84, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86,
  0x1d, 0x98, 0x81, 0x1a, 0xbc, 0x01, 0x19, 0x68, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xdc, 0xc1, 0x19, 0xac, 0x01, 0x1c, 0x78, 0xdb, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x78, 0x80, 0x06, 0x6c, 0x10, 0x07,
  0x63, 0xc0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x69,
  0xd0, 0x06, 0x72, 0x50, 0x06, 0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x7a, 0xa0, 0x06, 0x6e, 0xb0, 0x06, 0x68, 0xe0, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0xb1, 0x07, 0x6b, 0xf0, 0x06, 0x6c, 0x20, 0x06,
  0xdf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7c, 0xc0, 0x06, 0x70,
  0xd0, 0x06, 0x67, 0x00, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60,
  0xf4, 0x41, 0x1b, 0xc4, 0x81, 0x1b, 0xa4, 0x41, 0x18, 0xd8, 0x74, 0xc9,
  0xc7, 0x26, 0x4c, 0x3e, 0x36, 0x65, 0xf2, 0xb1, 0x61, 0x83, 0x8f, 0x0d,
  0x1c, 0x7c, 0x6c, 0xe8, 0xe0, 0x63, 0x92, 0x25, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0x98, 0x40, 0x41, 0x0d, 0x2c, 0x29, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x29, 0x14, 0xd6, 0xc0, 0x92, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0x98, 0x44, 0x81, 0x0d, 0x2c, 0x29, 0x30, 0x49,
  0x93, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c, 0xa4, 0xe0, 0x06,
  0x9a, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x54, 0x0a, 0x6f,
  0xa0, 0x49, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c, 0xa6, 0x00,
  0x07, 0x9a, 0x14, 0x98, 0xe4, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x26, 0x54, 0x90, 0x03, 0x4f, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x60, 0x4a, 0x85, 0x39, 0xf0, 0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x26, 0x55, 0xa0, 0x03, 0x4f, 0x0a, 0xcc, 0x7b, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x13, 0x2b, 0xd8, 0xc1, 0xe3, 0x05,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x30, 0xb5, 0xc2, 0x1d, 0x3c, 0x5e,
  0x60, 0x9d, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x98, 0x5e,
  0x21, 0x0f, 0xa4, 0x2e, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x09,
  0x16, 0xf4, 0x40, 0xea, 0x02, 0xe3, 0x2a, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0xc1, 0x24, 0x0b, 0x7c, 0x50, 0x71, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x4c, 0xb3, 0xd0, 0x07, 0x15, 0x17, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x41, 0x54, 0x0b, 0x7b, 0x10, 0x07, 0xb0, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x91, 0x2e, 0x80, 0x82, 0x1d,
  0xf8, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x44, 0xbf,
  0x50, 0x0a, 0x7b, 0x20, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x10, 0x91, 0x83, 0x2a, 0x80, 0x82, 0x29, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0xd8, 0x64,
  0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x29, 0x1d, 0x66,
  0x61, 0x0c, 0xa6, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x26, 0x75,
  0xa0, 0x05, 0x30, 0x98, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x98,
  0xd6, 0xa1, 0x16, 0xfe, 0x60, 0x0a, 0x4c, 0x52, 0x03, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0xc1, 0xd4, 0x0e, 0xb7, 0x70, 0x06, 0x52, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x93, 0x3b, 0xe0, 0x02, 0x19, 0x48,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c, 0xef, 0x90, 0x0b, 0xa3,
  0x20, 0x05, 0x16, 0xb9, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x60, 0x8a, 0x87, 0x5d, 0x58, 0x83, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x49, 0x1e, 0x78, 0x01, 0x0d, 0xa2, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xa6, 0x79, 0xe8, 0x85, 0x53, 0x88, 0x02, 0x83, 0xe4,
  0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x30, 0xd5, 0xc3, 0x2f,
  0xbc, 0x01, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x64, 0x0f,
  0xe0, 0xc0, 0x06, 0x50, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd3,
  0x3d, 0x84, 0xc3, 0x2a, 0x40, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x44, 0xf9, 0xf0, 0x0b, 0xb5, 0x60, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x10, 0xf9, 0x03, 0x39, 0xe8, 0xc2, 0x3c, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x34, 0x12, 0xe9, 0xf0, 0x0b,
  0xfb, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x60, 0x4e, 0x29, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x26, 0x94, 0x90, 0x07, 0x51, 0x70, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0x98, 0x52, 0x62, 0x1e, 0xfe, 0xc0, 0x09, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x60, 0x52, 0x09, 0x7a, 0xf0, 0x05, 0x27, 0xb0,
  0x26, 0x15, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x13, 0x4b,
  0xd8, 0x83, 0x29, 0x34, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c,
  0x2d, 0x71, 0x0f, 0xa3, 0xd0, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x30, 0xb9, 0x04, 0x3e, 0x88, 0x43, 0x13, 0x18, 0xd3, 0x0a, 0xf2, 0x19,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x09, 0x26, 0xf4, 0x41, 0x15, 0x98,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xa6, 0x98, 0xd8, 0x87, 0x53,
  0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0x98, 0x64, 0x82, 0x1f,
  0xcc, 0x81, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x20, 0xa2, 0x09,
  0x7d, 0x80, 0x87, 0x7d, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x88, 0x70, 0xc2,
  0x1f, 0xe8, 0x41, 0x26, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x9e, 0x10,
  0x09, 0x7c, 0x90, 0x89, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0xb0, 0x45, 0x16, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x13, 0x58, 0xa8, 0x04, 0x2c, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x4c, 0x61, 0xb1, 0x12, 0xae, 0xb0, 0x04, 0xa6, 0xd4, 0x82,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x60, 0x1a, 0x8b, 0x96, 0x98,
  0x05, 0x25, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x89, 0x2c, 0x5c,
  0x22, 0x16, 0x94, 0xc0, 0x12, 0x5c, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x4c, 0x66, 0x01, 0x13, 0xb6, 0x90, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x30, 0x9d, 0x45, 0x4c, 0xd0, 0x42, 0x12, 0x8c, 0x18,
  0x2c, 0x00, 0x08, 0x82, 0x81, 0xb2, 0x16, 0x2a, 0x71, 0x10, 0xc1, 0x41,
  0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0xac, 0x85, 0x4a, 0x04,
  0x16, 0x24, 0xf2, 0x31, 0xe1, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0x20, 0x72, 0x0b, 0x9a, 0x50, 0x09, 0x9c, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04,
  0x62, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc4, 0x2e, 0x74, 0xe2,
  0x2d, 0xde, 0xa2, 0x2c, 0x5c, 0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x10, 0xbb, 0xd0, 0x89, 0xb7, 0x78, 0x0b, 0x9f, 0x68, 0x89, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0xec, 0x42, 0x27, 0xe0, 0xe2, 0x2d, 0xca,
  0x02, 0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0xb1, 0x0b, 0x9d,
  0x80, 0x8b, 0xb7, 0xf0, 0x09, 0x32, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0xc4, 0x2e, 0x74, 0x02, 0x2e, 0xde, 0x42, 0x2c, 0xc0, 0x60, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0xbb, 0xd0, 0x09, 0xb8, 0x78, 0x8b,
  0xb1, 0x90, 0x89, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xec, 0x42,
  0x27, 0xd0, 0xe2, 0x2d, 0xca, 0x02, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0xc4, 0x2e, 0x74, 0x02, 0x2d, 0xde, 0xc2, 0x27, 0x8e, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0xec, 0x42, 0x27, 0xd0, 0xe2, 0x2d, 0xc4,
  0xc2, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc4, 0x2e, 0x74, 0x62,
  0x2d, 0xde, 0xa2, 0x2c, 0x88, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40,
  0xec, 0x42, 0x27, 0xd6, 0xe2, 0x2d, 0x7c, 0x62, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0xc4, 0x2e, 0x74, 0x62, 0x2d, 0xde, 0x42, 0x2c, 0x84,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xec, 0x42, 0x27, 0xd6, 0xe2,
  0x2d, 0xc6, 0x22, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc4, 0x2e,
  0x74, 0xe2, 0x2c, 0xde, 0xa2, 0x2c, 0x4e, 0x61, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x10, 0xbb, 0xd0, 0x89, 0xb3, 0x78, 0x0b, 0x9f, 0x18, 0x85,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0xec, 0x42, 0x27, 0xce, 0xe2,
  0x2d, 0xc4, 0xe2, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0xb1,
  0x0b, 0x9d, 0x38, 0x8b, 0xb7, 0x18, 0x8b, 0x3d, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x70, 0x4a, 0x17, 0x2a, 0x02, 0x52, 0xcb, 0xce, 0xe4, 0xcd, 0xb0, 0xbb,
  0xe3, 0xc7, 0xad, 0x6a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0x8a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x54, 0x41, 0x6b, 0x13, 0x41,
  0x14, 0x7e, 0x33, 0xb3, 0x3b, 0x99, 0xdd, 0x6c, 0xdf, 0x4e, 0xb7, 0x6b,
  0x12, 0x21, 0x26, 0x2b, 0x4d, 0x63, 0xa0, 0x2d, 0x0d, 0x94, 0xd2, 0x63,
  0x45, 0x45, 0x10, 0x29, 0x0a, 0x95, 0x77, 0x13, 0xd4, 0x9b, 0x97, 0x28,
  0x34, 0x87, 0x9e, 0x62, 0x14, 0x0f, 0x1e, 0x8a, 0x08, 0x5e, 0x44, 0x0f,
  0x8a, 0x67, 0x05, 0xfd, 0x03, 0x49, 0xf5, 0x2e, 0x9e, 0x7a, 0xf5, 0xe4,
  0xc5, 0x93, 0x22, 0x39, 0x94, 0x1e, 0x8c, 0x33, 0x75, 0x43, 0xb3, 0x15,
  0xa5, 0x78, 0x51, 0x3f, 0x78, 0xbc, 0x99, 0x6f, 0xbe, 0x99, 0xf7, 0xde,
  0xce, 0xbe, 0x39, 0xbb, 0xb6, 0xb6, 0xca, 0x18, 0xc0, 0x86, 0x84, 0x3d,
  0xa4, 0x0e, 0x3e, 0xf7, 0x5e, 0x7e, 0xf8, 0x9d, 0xbd, 0x3a, 0xa4, 0xee,
  0x57, 0xc6, 0xd3, 0xfd, 0x67, 0xe0, 0xcf, 0x30, 0x3a, 0x67, 0x27, 0x3d,
  0xa8, 0xcb, 0xf7, 0xd7, 0x1c, 0x88, 0x1d, 0xe7, 0x80, 0x7e, 0xc3, 0xfd,
  0xe1, 0x4f, 0xa6, 0x05, 0xfa, 0xc6, 0xd8, 0x9e, 0x96, 0xc3, 0xd6, 0x98,
  0xae, 0x0c, 0x09, 0x67, 0x63, 0xf3, 0x4b, 0xa9, 0xde, 0x72, 0xb5, 0xb1,
  0xb8, 0x12, 0x42, 0x47, 0x48, 0x96, 0x53, 0x5c, 0x72, 0x11, 0x30, 0x29,
  0x42, 0x2d, 0xa4, 0x13, 0xc6, 0x42, 0xba, 0x61, 0x49, 0xc0, 0x5f, 0x87,
  0x84, 0xd1, 0x5d, 0x4a, 0x7b, 0xbd, 0x20, 0xb9, 0xfd, 0x40, 0x52, 0xfc,
  0x03, 0xa9, 0x1d, 0x1a, 0xf6, 0x0e, 0x1b, 0x63, 0x26, 0x53, 0x6e, 0x1c,
  0xfa, 0xc0, 0xbc, 0x09, 0xd9, 0x0a, 0xbf, 0x2c, 0x0f, 0xc3, 0xc3, 0xc4,
  0x7a, 0x5e, 0xeb, 0x6e, 0x3f, 0xbc, 0x3e, 0x14, 0xcd, 0xb7, 0xb0, 0x5a,
  0x9a, 0xed, 0x6e, 0xdf, 0xe9, 0x7f, 0x13, 0xaf, 0xaf, 0x7d, 0xbc, 0xef,
  0x1c, 0xbf, 0xdb, 0x13, 0xf0, 0xac, 0x7f, 0x73, 0x65, 0xb3, 0xaf, 0x3d,
  0x89, 0x93, 0xc3, 0xa3, 0xf7, 0x6c, 0x54, 0x2d, 0x1e, 0xf5, 0xde, 0x88,
  0xc7, 0xbd, 0xa1, 0x78, 0xd2, 0x7b, 0x71, 0x81, 0x4d, 0xba, 0xd3, 0x92,
  0x02, 0x68, 0x0e, 0x2e, 0x02, 0xec, 0x06, 0xce, 0xdc, 0xe0, 0x81, 0xf1,
  0x79, 0x38, 0xbf, 0xad, 0x3e, 0xbd, 0x13, 0xb1, 0xa7, 0x51, 0xce, 0x48,
  0x2a, 0x79, 0x0a, 0xd1, 0x70, 0x9e, 0xe1, 0x4a, 0x45, 0x40, 0x77, 0x56,
  0x53, 0xee, 0x84, 0x24, 0x5d, 0xac, 0x63, 0x5c, 0x4c, 0xd0, 0x5d, 0x54,
  0x24, 0xe7, 0x35, 0x31, 0xa3, 0xf1, 0x8d, 0x06, 0xa7, 0xeb, 0x84, 0xb3,
  0x09, 0xe1, 0x22, 0x50, 0x90, 0x6b, 0x0c, 0x4c, 0xcf, 0xed, 0xca, 0x25,
  0x45, 0x6c, 0xa6, 0x4e, 0xb9, 0x05, 0x4d, 0xb7, 0xb6, 0x4c, 0x4e, 0xd2,
  0xc1, 0x58, 0x46, 0xc8, 0xe6, 0x13, 0x62, 0x4b, 0x46, 0x27, 0x39, 0xe6,
  0x96, 0x15, 0x4d, 0x6a, 0x87, 0x8e, 0xe8, 0x88, 0xa0, 0x5e, 0xc1, 0x09,
  0xcd, 0x49, 0xd5, 0x7d, 0x8c, 0x94, 0x43, 0x05, 0x15, 0x11, 0x4b, 0x2a,
  0x84, 0x8a, 0x93, 0x97, 0xf8, 0x34, 0x85, 0x0e, 0x15, 0x31, 0xa2, 0xb2,
  0x8c, 0x31, 0x44, 0x4e, 0x81, 0x98, 0x1b, 0x68, 0x5b, 0x83, 0xdb, 0x18,
  0x34, 0x8d, 0xe7, 0x50, 0xa1, 0x63, 0x3a, 0x26, 0x1f, 0x7c, 0x53, 0x5f,
  0x63, 0x70, 0x85, 0xc1, 0x6e, 0x45, 0xc5, 0x54, 0xc5, 0x98, 0xde, 0x2b,
  0xd8, 0x61, 0xdc, 0xf3, 0xc3, 0xe1, 0x66, 0xff, 0x2b, 0x8f, 0x3a, 0x36,
  0x9f, 0x40, 0x16, 0x50, 0xcb, 0xb2, 0xc9, 0xa9, 0x66, 0xe2, 0x16, 0x4c,
  0x1e, 0x65, 0x93, 0x47, 0x8d, 0x18, 0x9f, 0xeb, 0x70, 0xae, 0x3b, 0xa8,
  0x0a, 0x14, 0xa9, 0xb2, 0xc9, 0xa3, 0x46, 0x21, 0x16, 0x4c, 0xfc, 0xb2,
  0x89, 0x5f, 0x23, 0xa7, 0x8e, 0xd8, 0xe5, 0xf5, 0x8e, 0x9b, 0x20, 0x85,
  0x1c, 0x76, 0x82, 0x89, 0x29, 0xaf, 0x6a, 0x7c, 0x1e, 0x23, 0x4f, 0x02,
  0x52, 0x2e, 0x04, 0x0c, 0xab, 0x40, 0x6e, 0x1e, 0x08, 0x2e, 0x43, 0x07,
  0xaa, 0x12, 0x21, 0x0c, 0x10, 0xf2, 0x80, 0xc0, 0xfd, 0x8e, 0xe0, 0x95,
  0xce, 0x82, 0xd1, 0x0b, 0x09, 0xde, 0x8a, 0xf1, 0x6e, 0x41, 0x99, 0x7b,
  0xbf, 0xdd, 0x07, 0x78, 0xfa, 0x5f, 0xd8, 0xe8, 0xaf, 0x1d, 0xbd, 0x3d,
  0xca, 0xd8, 0x38, 0x67, 0xcd, 0x63, 0x59, 0xce, 0x76, 0xb4, 0xcf, 0xb3,
  0x9c, 0x1d, 0xe7, 0x45, 0x96, 0xb3, 0x3d, 0x13, 0x38, 0x59, 0xce, 0x3e,
  0x87, 0x13, 0x6e, 0x96, 0xb3, 0x40, 0xf9, 0x73, 0xdc, 0x30, 0xb7, 0xbf,
  0x3e, 0x7a, 0x66, 0xb5, 0xca, 0x72, 0x76, 0x1c, 0x79, 0x66, 0xcc, 0xb2,
  0x7d, 0xe5, 0x58, 0x61, 0x8a, 0xa1, 0x41, 0xba, 0x1b, 0x68, 0xed, 0xf4,
  0x8d, 0xd6, 0x7a, 0xfb, 0x6a, 0xab, 0x7d, 0xaa, 0x75, 0xae, 0xb5, 0xde,
  0xfe, 0x0e, 0xf4, 0xb4, 0x06, 0x73, 0x00, 0x00, 0xa2, 0x24, 0x93, 0xb4,
  0x30, 0xc2, 0x00, 0x4d, 0x18, 0x2b, 0x82, 0x5f, 0xb1, 0x62, 0xe4, 0x8e
};
