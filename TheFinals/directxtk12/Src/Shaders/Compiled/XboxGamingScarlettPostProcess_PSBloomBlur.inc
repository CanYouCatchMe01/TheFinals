#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float       
; TEXCOORD                 0   xy          1     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPostProcess_PSBloomBlur.pdb
; shader hash: dd3d04765870f90d9f1ed3ff9c2f47fc
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 2
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 2
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSBloomBlur
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; TEXCOORD                 0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [512 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;
;
; ViewId state:
;
; Number of inputs: 6, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;   output 3 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%Parameters = type { [16 x <4 x float>], [16 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSBloomBlur() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  br label %6

; <label>:6                                       ; preds = %6, %0
  %7 = phi float [ 0.000000e+00, %0 ], [ %32, %6 ]
  %8 = phi float [ 0.000000e+00, %0 ], [ %33, %6 ]
  %9 = phi float [ 0.000000e+00, %0 ], [ %34, %6 ]
  %10 = phi float [ 0.000000e+00, %0 ], [ %35, %6 ]
  %11 = phi i32 [ 0, %0 ], [ %36, %6 ]
  %12 = add nuw nsw i32 %11, 16
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %12)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = extractvalue %dx.types.CBufRet.f32 %13, 3
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 %11)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = fadd fast float %19, %4
  %22 = fadd fast float %20, %5
  %23 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %2, float %21, float %22, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %24 = extractvalue %dx.types.ResRet.f32 %23, 0
  %25 = extractvalue %dx.types.ResRet.f32 %23, 1
  %26 = extractvalue %dx.types.ResRet.f32 %23, 2
  %27 = extractvalue %dx.types.ResRet.f32 %23, 3
  %28 = fmul fast float %24, %14
  %29 = fmul fast float %25, %15
  %30 = fmul fast float %26, %16
  %31 = fmul fast float %27, %17
  %32 = fadd fast float %28, %7
  %33 = fadd fast float %29, %8
  %34 = fadd fast float %30, %9
  %35 = fadd fast float %31, %10
  %36 = add nuw nsw i32 %11, 1
  %37 = icmp eq i32 %36, 15
  br i1 %37, label %38, label %6

; <label>:38                                      ; preds = %6
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %32)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %33)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %34)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %35)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !9, !11}
!6 = !{!7}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10}
!10 = !{i32 0, %Parameters* undef, !"", i32 0, i32 0, i32 1, i32 512, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[8 x i32] [i32 6, i32 4, i32 0, i32 0, i32 0, i32 0, i32 15, i32 15]}
!14 = !{void ()* @PSBloomBlur, !"PSBloomBlur", !15, !5, null}
!15 = !{!16, !21, null}
!16 = !{!17, !19}
!17 = !{i32 0, !"SV_Position", i8 9, i8 3, !18, i8 4, i32 1, i8 4, i32 0, i8 0, null}
!18 = !{i32 0}
!19 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 1, i8 0, !20}
!20 = !{i32 3, i32 3}
!21 = !{!22}
!22 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !23}
!23 = !{i32 3, i32 15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 27
;   num_shared_vgprs: 0
;   num_sgprs: 46
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 640
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x76043ddd, 0x0df97058                // 000000000000: D5803DDD 03FEED04 0DF97058
;   v_nop_xbox_data 0xffd31e9f, 0xfc472f9c                // 00000000000C: D5801E9F 03FFFFD3 FC472F9C
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[32:33], exec                          // 00000000001C: BEA0047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s2, s9                                  // 000000000024: BE820309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     m0, s11                                 // 00000000002C: BEFC030B
;   s_load_dwordx8  s[16:23], s[8:9], null                // 000000000030: F40C0404 FA000000
;   v_mov_b32     v2, 0                                   // 000000000038: 7E040280
;   v_interp_p1_f32  v6, v0, attr0.y                      // 00000000003C: C8180100
;   v_interp_p1_f32  v0, v0, attr0.x                      // 000000000040: C8000000
;   s_mov_b32     s34, 0                                  // 000000000044: BEA20380
;   s_or_b32      s25, s10, lit(0x00100000)               // 000000000048: 8819FF0A 00100000
;   v_mov_b32     v3, v2                                  // 000000000050: 7E060302
;   v_mov_b32     v4, v2                                  // 000000000054: 7E080302
;   v_mov_b32     v5, v2                                  // 000000000058: 7E0A0302
;   v_interp_p2_f32  v6, v1, attr0.y                      // 00000000005C: C8190101
;   v_interp_p2_f32  v0, v1, attr0.x                      // 000000000060: C8010001
;   s_mov_b32     s24, s2                                 // 000000000064: BE980302
;   s_mov_b32     s26, -1                                 // 000000000068: BE9A03C1
;   s_mov_b32     s27, lit(0x11014fac)                    // 00000000006C: BE9B03FF 11014FAC
;   s_mov_b32     s42, lit(0x18500000)                    // 000000000074: BEAA03FF 18500000
;   s_mov_b32     s41, lit(0x00fff000)                    // 00000000007C: BEA903FF 00FFF000
;   s_movk_i32    s40, 0x3092                             // 000000000084: B0283092
;   s_brev_b32    s43, 1                                  // 000000000088: BEAB0B81
;   s_mov_b32     s3, s10                                 // 00000000008C: BE83030A
; label_0090:
;   s_lshl_b32    s0, s34, 4                              // 000000000090: 8F008422
;   s_add_i32     s2, s34, 1                              // 000000000094: 81028122
;   s_buffer_load_dwordx2  s[0:1], s[24:27], s0           // 000000000098: F424000C 00000000
;   s_lshl_b32    s2, s2, 4                               // 0000000000A0: 8F028402
;   s_add_i32     s28, s34, 20                            // 0000000000A4: 811C9422
;   s_buffer_load_dwordx2  s[4:5], s[24:27], s2           // 0000000000A8: F424010C 04000000
;   s_add_i32     s2, s34, 2                              // 0000000000B0: 81028222
;   s_lshl_b32    s28, s28, 4                             // 0000000000B4: 8F1C841C
;   s_lshl_b32    s2, s2, 4                               // 0000000000B8: 8F028402
;   s_buffer_load_dwordx4  s[28:31], s[24:27], s28        // 0000000000BC: F428070C 38000000
;   s_buffer_load_dwordx2  s[6:7], s[24:27], s2           // 0000000000C4: F424018C 04000000
;   s_add_i32     s2, s34, 3                              // 0000000000CC: 81028322
;   s_lshl_b32    s2, s2, 4                               // 0000000000D0: 8F028402
;   s_buffer_load_dwordx2  s[8:9], s[24:27], s2           // 0000000000D4: F424020C 04000000
;   s_add_i32     s2, s34, 4                              // 0000000000DC: 81028422
;   s_lshl_b32    s2, s2, 4                               // 0000000000E0: 8F028402
;   s_buffer_load_dwordx2  s[10:11], s[24:27], s2         // 0000000000E4: F424028C 04000000
;   s_waitcnt     lgkmcnt(0)                              // 0000000000EC: BF8CC07F
;   v_add_f32     v7, s0, v0                              // 0000000000F0: 060E0000
;   v_add_f32     v8, s1, v6                              // 0000000000F4: 06100C01
;   s_add_i32     s0, s34, 16                             // 0000000000F8: 81009022
;   v_add_f32     v12, s5, v6                             // 0000000000FC: 06180C05
;   v_add_f32     v11, s4, v0                             // 000000000100: 06160004
;   s_lshl_b32    s0, s0, 4                               // 000000000104: 8F008400
;   image_sample  v[7:10], v[7:8], s[16:23], s[40:43] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000108: F0800F08 01440707
;   s_add_i32     s34, s34, 5                             // 000000000110: 81228522
;   v_add_f32     v16, s7, v6                             // 000000000114: 06200C07
;   v_add_f32     v15, s6, v0                             // 000000000118: 061E0006
;   image_sample  v[11:14], v[11:12], s[16:23], s[40:43] dmask:0xf dim:SQ_RSRC_IMG_2D // 00000000011C: F0800F08 01440B0B
;   s_cmp_eq_u32  s34, 15                                 // 000000000124: BF068F22
;   v_add_f32     v20, s9, v6                             // 000000000128: 06280C09
;   v_add_f32     v19, s8, v0                             // 00000000012C: 06260008
;   image_sample  v[15:18], v[15:16], s[16:23], s[40:43] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000130: F0800F08 01440F0F
;   v_add_f32     v1, s11, v6                             // 000000000138: 06020C0B
;   v_add_f32     v23, s10, v0                            // 00000000013C: 062E000A
;   image_sample  v[19:22], v[19:20], s[16:23], s[40:43] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000140: F0800F08 01441313
;   s_buffer_load_dwordx16  s[0:15], s[24:27], s0         // 000000000148: F430000C 00000000
;   image_sample  v[23:26], [v23,v1], s[16:23], s[40:43] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000150: F0800F0A 01441717 00000001
;   s_waitcnt     vmcnt(4) & lgkmcnt(0)                   // 00000000015C: BF8C0074
;   v_fmac_f32    v2, s3, v10                             // 000000000160: 56041403
;   v_fmac_f32    v3, s2, v9                              // 000000000164: 56061202
;   v_fmac_f32    v4, s1, v8                              // 000000000168: 56081001
;   v_fmac_f32    v5, s0, v7                              // 00000000016C: 560A0E00
;   s_waitcnt     vmcnt(3)                                // 000000000170: BF8C3F73
;   v_fmac_f32    v2, s7, v14                             // 000000000174: 56041C07
;   v_fmac_f32    v3, s6, v13                             // 000000000178: 56061A06
;   v_fmac_f32    v4, s5, v12                             // 00000000017C: 56081805
;   v_fmac_f32    v5, s4, v11                             // 000000000180: 560A1604
;   s_waitcnt     vmcnt(2)                                // 000000000184: BF8C3F72
;   v_fmac_f32    v2, s11, v18                            // 000000000188: 5604240B
;   v_fmac_f32    v3, s10, v17                            // 00000000018C: 5606220A
;   v_fmac_f32    v4, s9, v16                             // 000000000190: 56082009
;   v_fmac_f32    v5, s8, v15                             // 000000000194: 560A1E08
;   s_waitcnt     vmcnt(1)                                // 000000000198: BF8C3F71
;   v_fmac_f32    v2, s15, v22                            // 00000000019C: 56042C0F
;   v_fmac_f32    v3, s14, v21                            // 0000000001A0: 56062A0E
;   v_fmac_f32    v4, s13, v20                            // 0000000001A4: 5608280D
;   v_fmac_f32    v5, s12, v19                            // 0000000001A8: 560A260C
;   s_waitcnt     vmcnt(0)                                // 0000000001AC: BF8C3F70
;   v_fmac_f32    v2, s31, v26                            // 0000000001B0: 5604341F
;   v_fmac_f32    v3, s30, v25                            // 0000000001B4: 5606321E
;   v_fmac_f32    v4, s29, v24                            // 0000000001B8: 5608301D
;   v_fmac_f32    v5, s28, v23                            // 0000000001BC: 560A2E1C
;   s_cbranch_scc0  label_0090                            // 0000000001C0: BF84FFB3
;   s_and_b64     exec, exec, s[32:33]                    // 0000000001C4: 87FE207E
;   s_nop         0x0000                                  // 0000000001C8: BF800000
;   s_nop         0x0000                                  // 0000000001CC: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v5, v4                       // 0000000001D0: 5E000905
;   v_cvt_pkrtz_f16_f32  v1, v3, v2                       // 0000000001D4: 5E020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000001D8: F8001C0F 00000100
;   s_endpgm                                              // 0000000001E0: BF810000
;   s_code_end                                            // 0000000001E4: BF9F0000
;   s_code_end                                            // 0000000001E8: BF9F0000
;   s_code_end                                            // 0000000001EC: BF9F0000
;   s_code_end                                            // 0000000001F0: BF9F0000
;   s_code_end                                            // 0000000001F4: BF9F0000
;   s_code_end                                            // 0000000001F8: BF9F0000
;   s_code_end                                            // 0000000001FC: BF9F0000
;   s_code_end                                            // 000000000200: BF9F0000
;   s_code_end                                            // 000000000204: BF9F0000
;   s_code_end                                            // 000000000208: BF9F0000
;   s_code_end                                            // 00000000020C: BF9F0000
;   s_code_end                                            // 000000000210: BF9F0000
;   s_code_end                                            // 000000000214: BF9F0000
;   s_code_end                                            // 000000000218: BF9F0000
;   s_code_end                                            // 00000000021C: BF9F0000
;   s_code_end                                            // 000000000220: BF9F0000
;   s_code_end                                            // 000000000224: BF9F0000
;   s_code_end                                            // 000000000228: BF9F0000
;   s_code_end                                            // 00000000022C: BF9F0000
;   s_code_end                                            // 000000000230: BF9F0000
;   s_code_end                                            // 000000000234: BF9F0000
;   s_code_end                                            // 000000000238: BF9F0000
;   s_code_end                                            // 00000000023C: BF9F0000
;   s_code_end                                            // 000000000240: BF9F0000
;   s_code_end                                            // 000000000244: BF9F0000
;   s_code_end                                            // 000000000248: BF9F0000
;   s_code_end                                            // 00000000024C: BF9F0000
;   s_code_end                                            // 000000000250: BF9F0000
;   s_code_end                                            // 000000000254: BF9F0000
;   s_code_end                                            // 000000000258: BF9F0000
;   s_code_end                                            // 00000000025C: BF9F0000
;   s_code_end                                            // 000000000260: BF9F0000
;   s_code_end                                            // 000000000264: BF9F0000
;   s_code_end                                            // 000000000268: BF9F0000
;   s_code_end                                            // 00000000026C: BF9F0000
;   s_code_end                                            // 000000000270: BF9F0000
;   s_code_end                                            // 000000000274: BF9F0000
;   s_code_end                                            // 000000000278: BF9F0000
;   s_code_end                                            // 00000000027C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 11
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_IMMEDIATE_SAMPLER
;       table_offset_dwords: 0
;       num_user_regs: 0
;       resource_base_register: 0
;       allocated_offset: 0
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[2] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 48, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
; 
;   // entry used resources info
;   used_resources_count: 3
;     used_resource[0] {
;       resource_type: SAMPLER
;       root_type: DX12_IMMEDIATE_SAMPLER
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 0
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 31
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSBloomBlur)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 1
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 22 {
;     scratch_en: 0
;     user_sgpr: 11
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 1 {
;     num_interp: 1
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 114
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, off, off, off done vm         // 000000000010: F8001801 00000005
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x405,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v4, off, off done vm          // 000000000010: F8001803 00000405
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x205,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v2, off, off done vm          // 000000000010: F8001803 00000205
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000905,
;        0x5e020503,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v5, v4                       // 000000000008: 5E000905
;   v_cvt_pkrtz_f16_f32  v1, v3, v2                       // 00000000000C: 5E020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20905,
;        0xd7690001,
;        0x20503,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v5, v4                      // 000000000000: D7690000 00020905
;   v_cvt_pknorm_u16_f32  v1, v3, v2                      // 000000000008: D7690001 00020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20905,
;        0xd7680001,
;        0x20503,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v5, v4                      // 000000000000: D7680000 00020905
;   v_cvt_pknorm_i16_f32  v1, v3, v2                      // 000000000008: D7680001 00020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20905,
;        0xd76a0001,
;        0x20503,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v5, v4                          // 000000000000: D76A0000 00020905
;   v_cvt_pk_u16_u32  v1, v3, v2                          // 000000000008: D76A0001 00020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20905,
;        0xd76b0001,
;        0x20503,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v5, v4                          // 000000000000: D76B0000 00020905
;   v_cvt_pk_i16_i32  v1, v3, v2                          // 000000000008: D76B0001 00020503
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x2030405,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v4, v3, v2 done vm            // 000000000010: F800180F 02030405
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=27,NumSGPR=46,LDS=0,Scratch=0,WaveSize=64,Occupancy=18
; VAlu:40,SAlu:41,VMem:5,SMem:8,LDS:0,WaitCntOnVMem:5,UncondBranch:0,CondBranch:1
; 

#endif

const unsigned char PostProcess_PSBloomBlur[] = {
  0x44, 0x58, 0x42, 0x43, 0xd2, 0x28, 0xe7, 0x68, 0x6f, 0x13, 0x55, 0x2f,
  0x66, 0x7f, 0xcf, 0x9d, 0xdd, 0xde, 0x49, 0x28, 0x01, 0x00, 0x00, 0x00,
  0xbc, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00,
  0xfc, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
  0x3c, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65,
  0x74, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x00, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x02,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x50, 0x53, 0x42, 0x6c, 0x6f, 0x6f,
  0x6d, 0x42, 0x6c, 0x75, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x90, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
  0x73, 0x5f, 0x50, 0x53, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x42, 0x6c, 0x75,
  0x72, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0x3d, 0x04, 0x76,
  0x58, 0x70, 0xf9, 0x0d, 0x9f, 0x1e, 0xd3, 0xff, 0x9c, 0x2f, 0x47, 0xfc,
  0x44, 0x58, 0x49, 0x4c, 0x78, 0x0b, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xde, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x78, 0x08, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x8c, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x9c, 0x08, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x68, 0x0b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x06, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x84, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec,
  0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31,
  0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92,
  0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33,
  0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0xcd, 0x51, 0xc3, 0xe5, 0x4f, 0xd8,
  0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5, 0x4a, 0x4c, 0x7e, 0x71, 0xdb, 0x88,
  0x18, 0x86, 0x61, 0x28, 0xc4, 0x43, 0x30, 0x04, 0x41, 0x73, 0x04, 0x41,
  0x31, 0x18, 0xa2, 0x20, 0x08, 0x89, 0xa6, 0x81, 0x80, 0x61, 0x04, 0x62,
  0x98, 0xa9, 0x0d, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d,
  0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e,
  0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e,
  0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c,
  0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0xf4, 0x40, 0x0f, 0xda, 0x21, 0x1d,
  0xe0, 0x61, 0x1e, 0x7e, 0x81, 0x1e, 0xf2, 0x01, 0x1e, 0xca, 0x01, 0x05,
  0xc4, 0x4c, 0x62, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e,
  0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72,
  0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2,
  0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60,
  0x40, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0x80, 0x04, 0xeb, 0x22, 0x2c, 0x21,
  0xac, 0x53, 0x52, 0x20, 0x02, 0x18, 0x62, 0x22, 0x22, 0x09, 0x09, 0x9a,
  0x46, 0xdb, 0x4d, 0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xb3, 0x00, 0xf3, 0x2c,
  0x44, 0xc4, 0x4e, 0xc0, 0x44, 0xa0, 0x80, 0xa0, 0x2e, 0x11, 0x88, 0x29,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x08, 0x08, 0x80, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x13, 0x10, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x00, 0x11, 0xca, 0xa0, 0x3c, 0xa8,
  0x28, 0x89, 0x32, 0x28, 0x84, 0x11, 0x80, 0x22, 0x28, 0x10, 0xca, 0x66,
  0x00, 0x88, 0x9b, 0x01, 0x20, 0x6f, 0x06, 0x80, 0xbe, 0xb1, 0x10, 0x83,
  0x00, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x78, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x18, 0x13, 0x04, 0xe2, 0xd8, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x40, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x24,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x59, 0x45, 0x60, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x1c, 0xd1, 0x86, 0xe4, 0x70, 0x9e, 0xe3,
  0x30, 0xa0, 0x43, 0xda, 0x10, 0x4c, 0x13, 0x04, 0xce, 0x9a, 0x20, 0x10,
  0xcc, 0x06, 0xe4, 0xa8, 0x9e, 0xe3, 0x30, 0x2c, 0x60, 0x43, 0x70, 0x4d,
  0x10, 0xbc, 0x6b, 0x03, 0x72, 0x64, 0xcf, 0x71, 0x18, 0x07, 0xb0, 0x21,
  0xd0, 0x36, 0x10, 0x14, 0x80, 0x6d, 0x13, 0x84, 0x0f, 0xdb, 0x10, 0x74,
  0x13, 0x04, 0x01, 0xe0, 0x02, 0x35, 0x25, 0xc4, 0xf6, 0xf6, 0xd6, 0x26,
  0xc4, 0x56, 0x27, 0xc7, 0x65, 0xca, 0xea, 0x0b, 0xea, 0x6d, 0x2e, 0x8d,
  0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x50, 0x3c, 0x13, 0x84, 0x02, 0xda, 0x10,
  0x1c, 0x13, 0x84, 0x22, 0x9a, 0x20, 0x14, 0xd2, 0x86, 0xe5, 0x08, 0x03,
  0x31, 0x18, 0x03, 0x32, 0x28, 0x03, 0xa3, 0x0c, 0x0e, 0x33, 0x00, 0x88,
  0x50, 0x15, 0x61, 0x0d, 0x3d, 0x3d, 0x49, 0x11, 0x4d, 0x10, 0x8a, 0x69,
  0x82, 0x40, 0x34, 0x1b, 0x04, 0x35, 0x50, 0x83, 0x0d, 0x8b, 0x81, 0x06,
  0x62, 0x60, 0x06, 0x64, 0x90, 0x06, 0x46, 0x1a, 0x18, 0x66, 0xb0, 0x06,
  0x1b, 0x84, 0x33, 0x60, 0x03, 0x26, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72,
  0x67, 0x65, 0x74, 0x13, 0x84, 0x82, 0x9a, 0x20, 0x10, 0xce, 0x06, 0x41,
  0x0d, 0xe0, 0x60, 0xc3, 0x72, 0xb8, 0x81, 0x18, 0xbc, 0x01, 0x19, 0x98,
  0x81, 0x51, 0x06, 0x87, 0x19, 0xc4, 0xc1, 0x86, 0x40, 0x0e, 0x36, 0x0c,
  0x6d, 0x30, 0x07, 0xc0, 0x86, 0xe2, 0x03, 0x03, 0x3a, 0xe0, 0x80, 0x56,
  0x78, 0x62, 0x6f, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
  0x72, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x02, 0xa1,
  0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94,
  0x80, 0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6,
  0x36, 0x25, 0x38, 0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95,
  0xc9, 0x4d, 0x09, 0x92, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64,
  0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x02, 0xa6, 0x0c, 0x19,
  0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94,
  0x60, 0xab, 0x43, 0x86, 0xe7, 0x62, 0x97, 0x56, 0x76, 0x97, 0x44, 0x36,
  0x45, 0x17, 0x46, 0x57, 0x36, 0x25, 0xe8, 0xea, 0x90, 0xe1, 0xb9, 0x94,
  0xb9, 0xd1, 0xc9, 0xe5, 0x41, 0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09,
  0xe8, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x06, 0xb0, 0xa4, 0xec,
  0xb6, 0x38, 0x0e, 0xb3, 0x2d, 0x54, 0x64, 0x04, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x7e, 0x71, 0xdb, 0x56, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x05, 0x4c, 0xc3,
  0xe5, 0x3b, 0x8f, 0xbf, 0x38, 0xc0, 0x20, 0x36, 0x0f, 0x35, 0xf9, 0xc5,
  0x6d, 0xdb, 0x00, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x12, 0xc0, 0x3c, 0x0b,
  0xe1, 0x17, 0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93,
  0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7, 0x0d, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x13, 0x04, 0x43, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x24, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x94, 0x42, 0xc9, 0xcd, 0x00, 0x14, 0x42, 0xd9, 0x15,
  0x48, 0xe1, 0xd1, 0x30, 0x03, 0x30, 0x02, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x30, 0x7d, 0x88, 0xd4, 0x75, 0xcb, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x4c, 0x60, 0x90, 0x54, 0x9e, 0xc7, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0xc1, 0x14, 0x06, 0xca, 0xf4, 0x7d, 0xcd, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x66, 0x90, 0x84, 0x01, 0x18, 0x54, 0xca, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x67, 0xa0, 0x88, 0x41, 0x18, 0x38,
  0xcb, 0x2c, 0x41, 0x30, 0x50, 0x31, 0x30, 0xc0, 0x1c, 0x04, 0x03, 0x15,
  0x83, 0x03, 0xcc, 0x41, 0x30, 0x50, 0x31, 0x40, 0xc0, 0x1c, 0x04, 0x03,
  0x15, 0x83, 0x04, 0xcc, 0x41, 0x30, 0x50, 0x41, 0xb0, 0x02, 0x30, 0x07,
  0x81, 0x05, 0x0e, 0x0c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x5a,
  0x03, 0x28, 0x09, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00,
  0x82, 0x83, 0xca, 0x39, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x4c,
  0x80, 0xe0, 0x63, 0x02, 0x04, 0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30,
  0x68, 0xec, 0x00, 0xab, 0x28, 0x21, 0xb8, 0x2e, 0x39, 0x90, 0x03, 0xee,
  0x1a, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1,
  0x04, 0x62, 0x30, 0xc2, 0x91, 0x8f, 0x11, 0x8e, 0x7c, 0x8c, 0x70, 0xe4,
  0x63, 0x84, 0x23, 0x1f, 0x23, 0x32, 0xf8, 0x18, 0x91, 0xc1, 0xc7, 0x88,
  0x0c, 0x3e, 0x46, 0x64, 0xf0, 0xb1, 0x0c, 0x14, 0x60, 0x30, 0xdc, 0x10,
  0xe4, 0x01, 0x18, 0xcc, 0x32, 0x08, 0x41, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x88, 0x29, 0xb4, 0x41, 0x28, 0x84, 0x82, 0x1d, 0x18, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x98, 0x42, 0x1b, 0x84, 0x42, 0x28,
  0xb8, 0x41, 0x31, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x88, 0x29, 0xb4,
  0x41, 0x28, 0x84, 0x42, 0x1d, 0x10, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x80, 0x98, 0x42, 0x1b, 0x84, 0x42, 0x28, 0xe0, 0xc1, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0xcd, 0x89, 0x4c, 0x6b, 0xf5, 0xb3, 0x0d, 0xd8, 0x24, 0x8a, 0xca, 0x1d,
  0x4d, 0x7d, 0xe6, 0xd1, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xb1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x12, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0xcb, 0x6b, 0x13, 0x41,
  0x18, 0xff, 0xe6, 0x91, 0xc9, 0xbe, 0x9a, 0xed, 0x43, 0xda, 0x54, 0x63,
  0x1a, 0x96, 0x52, 0x83, 0x48, 0x0d, 0x22, 0xe8, 0x45, 0x84, 0x12, 0xf4,
  0x24, 0x16, 0x0a, 0x83, 0xa7, 0x9e, 0xfb, 0x92, 0xd6, 0xaa, 0xe0, 0x29,
  0xee, 0xb6, 0x11, 0x15, 0x02, 0x29, 0xe2, 0x41, 0x54, 0x68, 0xf1, 0xe6,
  0x0b, 0x0a, 0x7a, 0x9e, 0xd4, 0x5b, 0xee, 0x52, 0x7a, 0x52, 0xfc, 0x07,
  0xc4, 0x1e, 0x3c, 0x54, 0x29, 0x5d, 0x67, 0x37, 0xbb, 0x74, 0xfb, 0xa2,
  0xd5, 0xd3, 0x82, 0xfb, 0x83, 0x1f, 0x33, 0xdf, 0x6f, 0x7e, 0xdf, 0xee,
  0xec, 0x7c, 0x21, 0xf0, 0xcd, 0x95, 0x91, 0x91, 0x6b, 0x08, 0x01, 0x5c,
  0xe8, 0x04, 0x1f, 0xac, 0x35, 0xc0, 0x0f, 0xf1, 0xfe, 0xeb, 0x51, 0xb8,
  0xfc, 0x97, 0xfe, 0x90, 0x38, 0xc8, 0x2b, 0xc3, 0xbf, 0x21, 0x7c, 0xce,
  0x46, 0xa6, 0x15, 0xdb, 0x38, 0xba, 0xaa, 0xef, 0xf1, 0xdf, 0xeb, 0x68,
  0x8d, 0x1f, 0x83, 0x91, 0x04, 0x4c, 0x21, 0x0c, 0x2b, 0x11, 0xdf, 0x09,
  0xf8, 0x86, 0x51, 0x24, 0x5e, 0x0f, 0xfc, 0x9e, 0xd6, 0x27, 0x69, 0x86,
  0xe7, 0x84, 0xbc, 0x6c, 0x84, 0xe1, 0x3f, 0x85, 0x77, 0x1e, 0xdd, 0x91,
  0xb9, 0x77, 0x10, 0xed, 0x92, 0x66, 0xc4, 0xe3, 0xfd, 0x96, 0x66, 0xfd,
  0x99, 0xdd, 0x88, 0x72, 0x21, 0x0b, 0x1b, 0xfb, 0x3f, 0x75, 0xa7, 0x0f,
  0x49, 0x5f, 0xea, 0x08, 0x3e, 0xe2, 0xf9, 0xe8, 0x11, 0x7d, 0xf8, 0x60,
  0x5f, 0x4a, 0x85, 0x51, 0x92, 0xc2, 0xa3, 0x66, 0x4e, 0xee, 0x0f, 0xed,
  0xe7, 0x1b, 0x5f, 0x4b, 0xa9, 0x58, 0x2e, 0x8d, 0xaf, 0x49, 0x1f, 0x1c,
  0xec, 0x1b, 0x0b, 0x7c, 0x63, 0x87, 0xf8, 0x26, 0x02, 0xdf, 0xc4, 0x21,
  0xbe, 0xc9, 0xc0, 0x37, 0x79, 0x88, 0x6f, 0xe7, 0xf7, 0x9a, 0xfe, 0xb9,
  0x90, 0x3d, 0x5f, 0xec, 0x4a, 0x40, 0x82, 0x58, 0x21, 0xa9, 0x49, 0xfc,
  0x90, 0xd4, 0x24, 0x7e, 0x48, 0x6a, 0x12, 0x3f, 0x24, 0x35, 0x89, 0x1f,
  0x92, 0x9a, 0xc4, 0x0f, 0x49, 0x4d, 0xe2, 0x8b, 0x2f, 0x97, 0xec, 0x55,
  0xfa, 0x7d, 0x8b, 0xdc, 0x98, 0xf9, 0xd5, 0xb6, 0x98, 0xb7, 0x57, 0x3f,
  0xbb, 0x2e, 0x79, 0x79, 0xf6, 0xea, 0x26, 0x81, 0xa5, 0x46, 0x85, 0x2e,
  0x89, 0x8a, 0xb6, 0x25, 0x54, 0x32, 0x27, 0x6c, 0xf2, 0x58, 0xe8, 0x64,
  0x53, 0x50, 0x6a, 0xfc, 0x94, 0x69, 0xbf, 0x6d, 0x4c, 0x2b, 0x80, 0xb2,
  0x4d, 0x39, 0x6f, 0xda, 0xe4, 0x95, 0xd0, 0xdc, 0xde, 0x47, 0x5e, 0x27,
  0x84, 0x09, 0xab, 0x60, 0xa2, 0x48, 0x6a, 0x15, 0x84, 0x7a, 0x9b, 0x08,
  0x50, 0x13, 0x93, 0x67, 0xe2, 0x13, 0x79, 0x2e, 0x5c, 0xf2, 0x42, 0xbc,
  0xbb, 0x8e, 0x3a, 0x5c, 0xf2, 0x46, 0x00, 0x0c, 0x67, 0x5d, 0xf2, 0x5a,
  0xc0, 0xba, 0x0b, 0x4f, 0x4a, 0xc5, 0x65, 0x47, 0x7f, 0x2b, 0x34, 0x32,
  0x2f, 0xac, 0x2a, 0xd4, 0x2d, 0x07, 0x3b, 0x06, 0xf4, 0x7b, 0xef, 0x01,
  0x5c, 0xc5, 0x75, 0xeb, 0x69, 0xce, 0x31, 0x90, 0x1f, 0x53, 0x6b, 0x0e,
  0x3b, 0xb9, 0x6a, 0xae, 0xee, 0xe9, 0x46, 0xba, 0xe8, 0x69, 0x17, 0x6b,
  0xe1, 0xda, 0x3c, 0x76, 0x7c, 0x1d, 0x07, 0x71, 0xb5, 0x15, 0xd7, 0x82,
  0xf8, 0xfe, 0x4a, 0x4d, 0xf6, 0x07, 0x19, 0x86, 0x8c, 0x76, 0x66, 0x2d,
  0x80, 0x93, 0x32, 0xb2, 0x8c, 0x42, 0x37, 0x03, 0xf9, 0x4e, 0xc5, 0xb4,
  0xd7, 0xd3, 0xe9, 0x32, 0xb2, 0x1e, 0x58, 0x4e, 0xda, 0x28, 0x30, 0x06,
  0x79, 0xe6, 0x69, 0xba, 0x2e, 0xb5, 0x3a, 0x6b, 0xa8, 0x46, 0x91, 0x29,
  0x30, 0xe0, 0x6b, 0xa6, 0x59, 0x46, 0xba, 0x81, 0x99, 0x06, 0x83, 0x7e,
  0xdc, 0xd5, 0x55, 0x46, 0x06, 0x94, 0xfc, 0xfd, 0x6a, 0x32, 0xee, 0xe9,
  0x29, 0x7b, 0x57, 0x0b, 0x70, 0x07, 0x6a, 0x0d, 0x72, 0x8c, 0x72, 0xdc,
  0xc9, 0x38, 0x6a, 0x57, 0x38, 0x64, 0x34, 0x7e, 0xfb, 0x72, 0xad, 0x91,
  0xce, 0x51, 0xce, 0x8e, 0x33, 0x9e, 0xca, 0x2a, 0x9c, 0x76, 0x6b, 0x7c,
  0x56, 0x6a, 0x7a, 0x3f, 0xe5, 0x9a, 0xc5, 0xb8, 0x5a, 0x50, 0xb8, 0x92,
  0xd7, 0xf8, 0x2d, 0xa9, 0x99, 0x67, 0x28, 0xcf, 0x9c, 0x66, 0xbc, 0xad,
  0xa8, 0x70, 0x63, 0x40, 0xe3, 0x33, 0x52, 0xeb, 0x3b, 0x4f, 0x79, 0xfe,
  0x1c, 0xe3, 0x27, 0x4b, 0x0a, 0xcf, 0x0d, 0x6a, 0xfc, 0x83, 0x5b, 0x6d,
  0x54, 0x0a, 0x5b, 0x0f, 0x0f, 0xee, 0xe5, 0x1c, 0xa9, 0x2f, 0xc6, 0x96,
  0xfb, 0xb5, 0xaf, 0x24, 0x18, 0xc3, 0x56, 0x4f, 0x89, 0xcc, 0xc3, 0xa6,
  0x4e, 0x95, 0x02, 0xda, 0x95, 0x4c, 0xa3, 0xc9, 0x41, 0xac, 0xc8, 0x64,
  0xbc, 0xab, 0x67, 0xa4, 0xea, 0xb6, 0xb0, 0xfd, 0xdf, 0xa4, 0xc3, 0xf0,
  0xc8, 0xd0, 0xd4, 0xf4, 0xf4, 0xcd, 0xa1, 0xa9, 0xbb, 0xb3, 0xe1, 0x35,
  0xcb, 0xa9, 0xe0, 0xda, 0xc3, 0x6b, 0xf1, 0xd3, 0x92, 0x25, 0x7f, 0x2b,
  0xe1, 0x26, 0x00, 0xfe, 0x00, 0x2e, 0x2f, 0x67, 0xff, 0x00, 0x00, 0x00,
  0xdd, 0x3d, 0x04, 0x76, 0x58, 0x70, 0xf9, 0x0d, 0x9f, 0x1e, 0xd3, 0xff,
  0x9c, 0x2f, 0x47, 0xfc
};
