#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingFresnelNoFog.pdb
; shader hash: b429d06f4e311cdc10842b2b6995f8ac
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapDualParabolaPixelLightingFresnelNoFog
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32     2darray      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<vector<float, 4> >" = type { <4 x float>, %"class.Texture2DArray<vector<float, 4> >::mips_type" }
%"class.Texture2DArray<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapDualParabolaPixelLightingFresnelNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = fmul fast float %22, %9
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = fsub fast float %30, %15
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = fmul fast float %31, %35
  %37 = fmul fast float %32, %35
  %38 = fmul fast float %33, %35
  %39 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %40 = call float @dx.op.unary.f32(i32 25, float %39)  ; Rsqrt(value)
  %41 = fmul fast float %40, %10
  %42 = fmul fast float %40, %11
  %43 = fmul fast float %40, %12
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %47 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = fsub fast float -0.000000e+00, %46
  %69 = fsub fast float -0.000000e+00, %47
  %70 = fsub fast float -0.000000e+00, %54
  %71 = fsub fast float -0.000000e+00, %55
  %72 = fsub fast float -0.000000e+00, %62
  %73 = fsub fast float -0.000000e+00, %63
  %74 = fmul fast float %41, %45
  %75 = fsub fast float -0.000000e+00, %74
  %76 = call float @dx.op.tertiary.f32(i32 46, float %68, float %42, float %75)  ; FMad(a,b,c)
  %77 = call float @dx.op.tertiary.f32(i32 46, float %69, float %43, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %41, %53
  %79 = fsub fast float -0.000000e+00, %78
  %80 = call float @dx.op.tertiary.f32(i32 46, float %70, float %42, float %79)  ; FMad(a,b,c)
  %81 = call float @dx.op.tertiary.f32(i32 46, float %71, float %43, float %80)  ; FMad(a,b,c)
  %82 = fmul fast float %41, %61
  %83 = fsub fast float -0.000000e+00, %82
  %84 = call float @dx.op.tertiary.f32(i32 46, float %72, float %42, float %83)  ; FMad(a,b,c)
  %85 = call float @dx.op.tertiary.f32(i32 46, float %73, float %43, float %84)  ; FMad(a,b,c)
  %86 = fcmp fast olt float %77, 0.000000e+00
  %87 = fcmp fast olt float %81, 0.000000e+00
  %88 = fcmp fast olt float %85, 0.000000e+00
  %89 = select i1 %86, float 0.000000e+00, float 1.000000e+00
  %90 = select i1 %87, float 0.000000e+00, float 1.000000e+00
  %91 = select i1 %88, float 0.000000e+00, float 1.000000e+00
  %92 = fmul fast float %89, %77
  %93 = fmul fast float %90, %81
  %94 = fmul fast float %91, %85
  %95 = fmul fast float %92, %49
  %96 = call float @dx.op.tertiary.f32(i32 46, float %93, float %57, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %94, float %65, float %96)  ; FMad(a,b,c)
  %98 = fmul fast float %92, %50
  %99 = call float @dx.op.tertiary.f32(i32 46, float %93, float %58, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %94, float %66, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %92, %51
  %102 = call float @dx.op.tertiary.f32(i32 46, float %93, float %59, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %94, float %67, float %102)  ; FMad(a,b,c)
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = fmul fast float %105, %97
  %109 = fmul fast float %106, %100
  %110 = fmul fast float %107, %103
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = fadd fast float %108, %112
  %116 = fadd fast float %109, %113
  %117 = fadd fast float %110, %114
  %118 = fmul fast float %23, %115
  %119 = fmul fast float %24, %116
  %120 = fmul fast float %25, %117
  %121 = fsub fast float -0.000000e+00, %36
  %122 = fsub fast float -0.000000e+00, %37
  %123 = fsub fast float -0.000000e+00, %38
  %124 = call float @dx.op.dot3.f32(i32 55, float %121, float %122, float %123, float %41, float %42, float %43)  ; Dot3(ax,ay,az,bx,by,bz)
  %125 = fmul fast float %124, 2.000000e+00
  %126 = fmul fast float %125, %41
  %127 = fmul fast float %125, %42
  %128 = fmul fast float %125, %43
  %129 = fsub fast float %121, %126
  %130 = fsub fast float %122, %127
  %131 = fsub fast float %123, %128
  %132 = call float @dx.op.unary.f32(i32 6, float %131)  ; FAbs(value)
  %133 = fadd fast float %132, 1.000000e+00
  %134 = fmul fast float %133, 2.000000e+00
  %135 = fdiv fast float %129, %134
  %136 = fadd fast float %135, 5.000000e-01
  %137 = fdiv fast float %130, %134
  %138 = fadd fast float %137, 5.000000e-01
  %139 = fcmp fast ogt float %131, 0.000000e+00
  %140 = select i1 %139, float 0.000000e+00, float 1.000000e+00
  %141 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %136, float %138, float %140, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %142 = extractvalue %dx.types.ResRet.f32 %141, 0
  %143 = extractvalue %dx.types.ResRet.f32 %141, 1
  %144 = extractvalue %dx.types.ResRet.f32 %141, 2
  %145 = extractvalue %dx.types.ResRet.f32 %141, 3
  %146 = fmul fast float %142, %26
  %147 = fmul fast float %143, %26
  %148 = fmul fast float %144, %26
  %149 = fmul fast float %145, %26
  %150 = call float @dx.op.dot3.f32(i32 55, float %36, float %37, float %38, float %41, float %42, float %43)  ; Dot3(ax,ay,az,bx,by,bz)
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %153 = call float @dx.op.unary.f32(i32 6, float %150)  ; FAbs(value)
  %154 = fsub fast float 1.000000e+00, %153
  %155 = call float @dx.op.binary.f32(i32 35, float %154, float 0.000000e+00)  ; FMax(a,b)
  %156 = call float @dx.op.unary.f32(i32 23, float %155)  ; Log(value)
  %157 = fmul fast float %156, %152
  %158 = call float @dx.op.unary.f32(i32 21, float %157)  ; Exp(value)
  %159 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %160 = fmul fast float %159, %158
  %161 = fsub fast float %146, %118
  %162 = fsub fast float %147, %119
  %163 = fsub fast float %148, %120
  %164 = fmul fast float %160, %161
  %165 = fmul fast float %160, %162
  %166 = fmul fast float %160, %163
  %167 = fadd fast float %164, %118
  %168 = fadd fast float %165, %119
  %169 = fadd fast float %166, %120
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = extractvalue %dx.types.CBufRet.f32 %170, 1
  %173 = extractvalue %dx.types.CBufRet.f32 %170, 2
  %174 = fmul fast float %171, %149
  %175 = fmul fast float %172, %149
  %176 = fmul fast float %173, %149
  %177 = fadd fast float %167, %174
  %178 = fadd fast float %168, %175
  %179 = fadd fast float %169, %176
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %177)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %178)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %179)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2DArray<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 7, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapDualParabolaPixelLightingFresnelNoFog, !"PSEnvMapDualParabolaPixelLightingFresnelNoFog", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !27}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 7}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !24}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !28}
!28 = !{i32 3, i32 15}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !28}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 54
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 896
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x6fd029b4, 0xdc1c314e                // 000000000000: D58029B4 03FEDFD0 DC1C314E
;   v_nop_xbox_data 0x2b2b8410, 0xacf89569                // 00000000000C: D5808410 03FE572B ACF89569
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[48:49], exec                          // 00000000001C: BEB0047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s16, s9                                 // 000000000024: BE900309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     s17, 0                                  // 00000000002C: BE910380
;   s_mov_b32     s50, s11                                // 000000000030: BEB2030B
;   s_mov_b32     s11, 0                                  // 000000000034: BE8B0380
;   s_load_dwordx8  s[0:7], s[8:9], null                  // 000000000038: F40C0004 FA000000
;   s_load_dwordx4  s[24:27], s[16:17], null              // 000000000040: F4080608 FA000000
;   s_mov_b32     m0, s14                                 // 000000000048: BEFC030E
;   s_load_dwordx8  s[32:39], s[10:11], null              // 00000000004C: F40C0805 FA000000
;   v_interp_p1_f32  v2, v0, attr0.x                      // 000000000054: C8080000
;   v_interp_p1_f32  v3, v0, attr0.y                      // 000000000058: C80C0100
;   v_interp_p1_f32  v6, v0, attr2.y                      // 00000000005C: C8180900
;   v_interp_p1_f32  v7, v0, attr2.x                      // 000000000060: C81C0800
;   v_interp_p1_f32  v8, v0, attr2.z                      // 000000000064: C8200A00
;   v_interp_p2_f32  v2, v1, attr0.x                      // 000000000068: C8090001
;   v_interp_p2_f32  v3, v1, attr0.y                      // 00000000006C: C80D0101
;   v_interp_p2_f32  v6, v1, attr2.y                      // 000000000070: C8190901
;   v_interp_p2_f32  v7, v1, attr2.x                      // 000000000074: C81D0801
;   v_interp_p2_f32  v8, v1, attr2.z                      // 000000000078: C8210A01
;   s_or_b32      s41, s13, lit(0x00100000)               // 00000000007C: 8829FF0D 00100000
;   s_mov_b32     s40, s12                                // 000000000084: BEA8030C
;   v_mul_legacy_f32  v9, v6, v6                          // 000000000088: 0E120D06
;   s_mov_b32     s42, -1                                 // 00000000008C: BEAA03C1
;   s_mov_b32     s43, lit(0x11014fac)                    // 000000000090: BEAB03FF 11014FAC
;   v_interp_p1_f32  v10, v0, attr1.y                     // 000000000098: C8280500
;   s_buffer_load_dwordx4  s[44:47], s[40:43], 0x0000a0   // 00000000009C: F4280B14 FA0000A0
;   s_waitcnt     lgkmcnt(0)                              // 0000000000A4: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000A8: F0800F08 00C00202
;   v_fmac_f32    v9, v7, v7                              // 0000000000B0: 56120F07
;   s_buffer_load_dwordx16  s[0:15], s[40:43], 0x000020   // 0000000000B4: F4300014 FA000020
;   s_buffer_load_dwordx16  s[16:31], s[40:43], 0x000060  // 0000000000BC: F4300414 FA000060
;   v_interp_p1_f32  v12, v0, attr1.x                     // 0000000000C4: C8300400
;   v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000C8: C8290501
;   v_fmac_f32    v9, v8, v8                              // 0000000000CC: 56121108
;   v_interp_p1_f32  v14, v0, attr1.z                     // 0000000000D0: C8380600
;   s_mov_b32     s51, 0                                  // 0000000000D4: BEB30380
;   v_interp_p2_f32  v12, v1, attr1.x                     // 0000000000D8: C8310401
;   v_interp_p1_f32  v11, v0, attr3.x                     // 0000000000DC: C82C0C00
;   v_rsq_f32     v9, v9                                  // 0000000000E0: 7E125D09
;   v_interp_p2_f32  v14, v1, attr1.z                     // 0000000000E4: C8390601
;   v_interp_p1_f32  v22, v0, attr3.y                     // 0000000000E8: C8580D00
;   v_interp_p1_f32  v15, v0, attr3.z                     // 0000000000EC: C83C0E00
;   v_interp_p1_f32  v0, v0, attr3.w                      // 0000000000F0: C8000F00
;   v_interp_p2_f32  v11, v1, attr3.x                     // 0000000000F4: C82D0C01
;   v_interp_p2_f32  v22, v1, attr3.y                     // 0000000000F8: C8590D01
;   v_sub_f32     v10, s45, v10                           // 0000000000FC: 0814142D
;   v_sub_f32     v23, s44, v12                           // 000000000100: 082E182C
;   v_mul_legacy_f32  v13, v9, v7                         // 000000000104: 0E1A0F09
;   v_mul_legacy_f32  v20, v9, v6                         // 000000000108: 0E280D09
;   v_mul_legacy_f32  v8, v9, v8                          // 00000000010C: 0E101109
;   v_mul_legacy_f32  v16, v10, v10                       // 000000000110: 0E20150A
;   v_sub_f32     v14, s46, v14                           // 000000000114: 081C1C2E
;   s_waitcnt     lgkmcnt(0)                              // 000000000118: BF8CC07F
;   v_mul_legacy_f32  v17, s8, v13                        // 00000000011C: 0E221A08
;   v_mul_legacy_f32  v9, s12, v13                        // 000000000120: 0E121A0C
;   v_mul_legacy_f32  v18, s16, v13                       // 000000000124: 0E241A10
;   v_fmac_f32    v16, v23, v23                           // 000000000128: 56202F17
;   v_interp_p2_f32  v15, v1, attr3.z                     // 00000000012C: C83D0E01
;   v_fma_f32     v17, -s9, v20, -v17                     // 000000000130: D54B0011 A4462809
;   v_fma_f32     v9, -s13, v20, -v9                      // 000000000138: D54B0009 A426280D
;   v_fma_f32     v18, -s17, v20, -v18                    // 000000000140: D54B0012 A44A2811
;   v_fmac_f32    v16, v14, v14                           // 000000000148: 56201D0E
;   v_interp_p2_f32  v0, v1, attr3.w                      // 00000000014C: C8010F01
;   v_fmac_f32    v17, -s10, v8                           // 000000000150: D52B0011 2002100A
;   v_fmac_f32    v9, -s14, v8                            // 000000000158: D52B0009 2002100E
;   v_fmac_f32    v18, -s18, v8                           // 000000000160: D52B0012 20021012
;   v_rsq_f32     v16, v16                                // 000000000168: 7E205D10
;   s_buffer_load_dwordx2  s[16:17], s[40:43], 0x000010   // 00000000016C: F4240414 FA000010
;   v_cmp_gt_f32  vcc, 0, v17                             // 000000000174: 7C082280
;   s_load_dwordx4  s[12:15], s[50:51], null              // 000000000178: F4080319 FA000000
;   s_buffer_load_dwordx4  s[8:11], s[40:43], null        // 000000000180: F4280214 FA000000
;   v_cndmask_b32  v19, 1.0, 0, vcc                       // 000000000188: D5010013 01A900F2
;   v_cmp_gt_f32  vcc, 0, v9                              // 000000000190: 7C081280
;   v_mul_legacy_f32  v10, v10, v16                       // 000000000194: 0E14210A
;   v_mul_legacy_f32  v12, v23, v16                       // 000000000198: 0E182117
;   v_mul_legacy_f32  v17, v19, v17                       // 00000000019C: 0E222313
;   v_cndmask_b32  v6, 1.0, 0, vcc                        // 0000000001A0: D5010006 01A900F2
;   v_cmp_gt_f32  vcc, 0, v18                             // 0000000001A8: 7C082480
;   v_mul_legacy_f32  v14, v14, v16                       // 0000000001AC: 0E1C210E
;   v_mul_legacy_f32  v16, s20, v17                       // 0000000001B0: 0E202214
;   v_mul_legacy_f32  v23, v6, v9                         // 0000000001B4: 0E2E1306
;   v_cndmask_b32  v19, 1.0, 0, vcc                       // 0000000001B8: D5010013 01A900F2
;   v_fmac_f32    v16, s24, v23                           // 0000000001C0: 56202E18
;   v_mul_legacy_f32  v7, v19, v18                        // 0000000001C4: 0E0E2513
;   v_mul_legacy_f32  v18, s21, v17                       // 0000000001C8: 0E242215
;   v_mul_legacy_f32  v17, s22, v17                       // 0000000001CC: 0E222216
;   v_mul_legacy_f32  v19, v10, v20                       // 0000000001D0: 0E26290A
;   v_fmac_f32    v16, s28, v7                            // 0000000001D4: 56200E1C
;   v_fmac_f32    v18, s25, v23                           // 0000000001D8: 56242E19
;   v_fmac_f32    v17, s26, v23                           // 0000000001DC: 56222E1A
;   v_fma_f32     v23, -v12, v13, -v19                    // 0000000001E0: D54B0017 A44E1B0C
;   v_fma_f32     v16, s0, v16, s4                        // 0000000001E8: D54B0010 00122000
;   v_fmac_f32    v18, s29, v7                            // 0000000001F0: 56240E1D
;   v_fmac_f32    v17, s30, v7                            // 0000000001F4: 56220E1E
;   v_fmac_f32    v23, -v14, v8 mul:2                     // 0000000001F8: D52B0017 2802110E
;   v_fma_f32     v18, s1, v18, s5                        // 000000000200: D54B0012 00162401
;   v_fma_f32     v17, s2, v17, s6                        // 000000000208: D54B0011 001A2202
;   v_fma_f32     v6, -v23, v20, -v10                     // 000000000210: D54B0006 A42A2917
;   v_fma_f32     v10, -v23, v8, -v14                     // 000000000218: D54B000A A43A1117
;   v_fma_f32     v7, -v23, v13, -v12                     // 000000000220: D54B0007 A4321B17
;   v_add_f32     v9, abs(v10), 1.0 mul:2                 // 000000000228: D5030109 0801E50A
;   v_cmp_lt_f32  vcc, 0, v10                             // 000000000230: 7C021480
;   v_rcp_f32     v9, v9                                  // 000000000234: 7E125509
;   v_cndmask_b32  v10, 1.0, 0, vcc                       // 000000000238: D501000A 01A900F2
;   v_fma_f32     v20, v7, v9, 0.5                        // 000000000240: D54B0014 03C21307
;   v_fma_f32     v21, v6, v9, 0.5                        // 000000000248: D54B0015 03C21306
;   s_waitcnt     vmcnt(0)                                // 000000000250: BF8C3F70
;   v_mul_legacy_f32  v4, v4, v15                         // 000000000254: 0E081F04
;   v_mul_legacy_f32  v2, v2, v11                         // 000000000258: 0E041702
;   v_mul_legacy_f32  v3, v3, v22                         // 00000000025C: 0E062D03
;   v_mul_legacy_f32  v5, v5, v0                          // 000000000260: 0E0A0105
;   v_rndne_f32   v22, v10                                // 000000000264: 7E2C470A
;   v_mul_legacy_f32  v4, v4, v17                         // 000000000268: 0E082304
;   v_mul_legacy_f32  v9, v2, v16                         // 00000000026C: 0E122102
;   v_mul_legacy_f32  v11, v3, v18                        // 000000000270: 0E162503
;   s_and_b64     exec, exec, s[48:49]                    // 000000000274: 87FE307E
;   s_waitcnt     lgkmcnt(0)                              // 000000000278: BF8CC07F
;   image_sample  v[0:3], v[20:22], s[32:39], s[12:15] dmask:0xf dim:SQ_RSRC_IMG_2D_ARRAY // 00000000027C: F0800F28 00680014
;   v_fmac_f32    v19, v12, v13                           // 000000000284: 56261B0C
;   v_fmac_f32    v19, v14, v8                            // 000000000288: 5626110E
;   v_sub_f32     v6, 1.0, abs(v19)                       // 00000000028C: D5040206 000226F2
;   v_max_f32     v6, 0, v6                               // 000000000294: 200C0C80
;   v_log_f32     v6, v6                                  // 000000000298: 7E0C4F06
;   v_mul_legacy_f32  v6, s17, v6                         // 00000000029C: 0E0C0C11
;   v_exp_f32     v6, v6                                  // 0000000002A0: 7E0C4B06
;   v_mul_legacy_f32  v6, s16, v6                         // 0000000002A4: 0E0C0C10
;   s_waitcnt     vmcnt(0)                                // 0000000002A8: BF8C3F70
;   v_fma_f32     v7, v2, v5, -v4                         // 0000000002AC: D54B0007 84120B02
;   v_fma_f32     v0, v0, v5, -v9                         // 0000000002B4: D54B0000 84260B00
;   v_fma_f32     v1, v1, v5, -v11                        // 0000000002BC: D54B0001 842E0B01
;   v_mul_legacy_f32  v2, v3, v5                          // 0000000002C4: 0E040B03
;   v_fmac_f32    v4, v6, v7                              // 0000000002C8: 56080F06
;   v_fmac_f32    v9, v6, v0                              // 0000000002CC: 56120106
;   v_fmac_f32    v11, v6, v1                             // 0000000002D0: 56160306
;   v_fmac_f32    v4, s10, v2                             // 0000000002D4: 5608040A
;   v_fmac_f32    v9, s8, v2                              // 0000000002D8: 56120408
;   v_fmac_f32    v11, s9, v2                             // 0000000002DC: 56160409
;   s_nop         0x0000                                  // 0000000002E0: BF800000
;   s_nop         0x0000                                  // 0000000002E4: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v9, v11                      // 0000000002E8: 5E001709
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000002EC: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002F0: F8001C0F 00000100
;   s_endpgm                                              // 0000000002F8: BF810000
;   s_code_end                                            // 0000000002FC: BF9F0000
;   s_code_end                                            // 000000000300: BF9F0000
;   s_code_end                                            // 000000000304: BF9F0000
;   s_code_end                                            // 000000000308: BF9F0000
;   s_code_end                                            // 00000000030C: BF9F0000
;   s_code_end                                            // 000000000310: BF9F0000
;   s_code_end                                            // 000000000314: BF9F0000
;   s_code_end                                            // 000000000318: BF9F0000
;   s_code_end                                            // 00000000031C: BF9F0000
;   s_code_end                                            // 000000000320: BF9F0000
;   s_code_end                                            // 000000000324: BF9F0000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 56, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 64, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 76, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 7 (Texture2DArray)  }
;   bound_descriptor_loads[3] {  instr_offset: 376, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 65
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapDualParabolaPixelLightingFresnelNoFog)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 184
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x9,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v9, off, off, off done vm         // 000000000010: F8001801 00000009
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xb09,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v9, v11, off, off done vm         // 000000000010: F8001803 00000B09
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x509,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v9, v5, off, off done vm          // 000000000010: F8001803 00000509
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e001709,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v9, v11                      // 000000000008: 5E001709
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x21709,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v9, v11                     // 000000000000: D7690000 00021709
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x21709,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v9, v11                     // 000000000000: D7680000 00021709
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x21709,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v9, v11                         // 000000000000: D76A0000 00021709
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x21709,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v9, v11                         // 000000000000: D76B0000 00021709
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040b09,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v9, v11, v4, v5 done vm           // 000000000010: F800180F 05040B09
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=54,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:111,SAlu:23,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingFresnelNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0xe1, 0x85, 0x11, 0x2f, 0xa8, 0xb7, 0x32, 0x17,
  0x06, 0x15, 0xb8, 0xde, 0x95, 0xaf, 0x6c, 0xc0, 0x01, 0x00, 0x00, 0x00,
  0x2c, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xe4, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x84, 0x04, 0x00, 0x00,
  0xa0, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xb0, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x44, 0x75,
  0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x61, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46,
  0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
  0x74, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50,
  0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x44, 0x75, 0x61, 0x6c, 0x50,
  0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x61, 0x50, 0x69, 0x78, 0x65, 0x6c,
  0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x73,
  0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64, 0x62,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb4, 0x29, 0xd0, 0x6f, 0x4e, 0x31, 0x1c, 0xdc,
  0x10, 0x84, 0x2b, 0x2b, 0x69, 0x95, 0xf8, 0xac, 0x44, 0x58, 0x49, 0x4c,
  0x84, 0x12, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xa1, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0xc4, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xdc, 0x0d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x3c, 0x0e, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x50, 0x0e, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x60, 0x0e, 0x00, 0x00,
  0x12, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x74, 0x12, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xc4, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x6e, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb4, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x62, 0x20, 0x86, 0x81, 0xa6, 0xa3, 0x86,
  0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x50, 0x88, 0x8a, 0x60, 0x08, 0xb2,
  0x4a, 0x31, 0x10, 0xc3, 0x30, 0x10, 0x36, 0x47, 0x10, 0x14, 0x83, 0x21,
  0x0a, 0x82, 0xd0, 0x68, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x99, 0xda,
  0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc,
  0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc,
  0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e, 0xe6,
  0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x40, 0xcc, 0x24,
  0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50,
  0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x48, 0xf0, 0x3e, 0x02, 0x67, 0x92, 0x83, 0x71,
  0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0x08, 0x05, 0x79,
  0x90, 0x87, 0x70, 0xc8, 0x07, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a,
  0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a,
  0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0xd0, 0x03, 0x3d,
  0x68, 0x87, 0x74, 0x80, 0x87, 0x79, 0xf8, 0x05, 0x7a, 0xc8, 0x07, 0x78,
  0x28, 0x07, 0x14, 0x10, 0x33, 0x9d, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc,
  0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8,
  0x43, 0x39, 0xc8, 0x01, 0x29, 0x84, 0x82, 0x3c, 0xc8, 0x43, 0x38, 0xe4,
  0x03, 0x1f, 0xd8, 0x43, 0x39, 0x8c, 0x03, 0x3d, 0xbc, 0x83, 0x3c, 0xf0,
  0x81, 0x39, 0xb0, 0xc3, 0x3b, 0x84, 0x03, 0x3d, 0xb0, 0x01, 0x18, 0xd0,
  0x81, 0x1f, 0x80, 0x81, 0x1f, 0x20, 0xc1, 0x13, 0x69, 0x1c, 0x46, 0x18,
  0x86, 0x1c, 0x28, 0x93, 0xc0, 0xbb, 0xea, 0x70, 0xa4, 0x69, 0x01, 0x30,
  0x87, 0x9a, 0xfc, 0x14, 0x88, 0x00, 0x86, 0x98, 0x88, 0x48, 0x42, 0x4d,
  0x39, 0x0c, 0x5e, 0x69, 0x9a, 0x65, 0xe9, 0x9d, 0xe6, 0x49, 0xe8, 0x4d,
  0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xb3, 0x00, 0xf3, 0x2c, 0x44, 0xc4, 0x4e,
  0xc0, 0x44, 0xa0, 0x80, 0x20, 0x35, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x1c, 0x0a, 0xd0, 0xa0, 0x0c, 0xca,
  0x83, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x70, 0x06, 0x80, 0xc8, 0x19, 0x00, 0x4a, 0x67, 0x00, 0x68, 0x9d, 0x01,
  0x20, 0x76, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x00, 0x8e,
  0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x93, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x28, 0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x60, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x34,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x61, 0xa0, 0x11, 0x98, 0x20, 0x10,
  0xce, 0x04, 0x81, 0x78, 0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7,
  0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x64, 0xb0, 0x4d, 0x10, 0x08, 0x68,
  0x43, 0x62, 0x50, 0xcf, 0x61, 0x18, 0xd5, 0x21, 0x6d, 0x10, 0x26, 0x6b,
  0x82, 0x90, 0x06, 0xdc, 0x04, 0x81, 0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c,
  0x87, 0x91, 0x01, 0x1b, 0x02, 0x6d, 0x82, 0xb0, 0x06, 0xdd, 0x06, 0xe4,
  0xe0, 0x9e, 0xe3, 0x30, 0x0e, 0x60, 0x03, 0x62, 0x70, 0xcf, 0x61, 0x18,
  0x07, 0xb0, 0x41, 0xe8, 0xbc, 0x0d, 0xc4, 0x05, 0x6c, 0xdf, 0x04, 0x81,
  0x0d, 0xbc, 0x0d, 0x41, 0x18, 0x4c, 0x10, 0x04, 0x80, 0x6d, 0x00, 0x35,
  0x55, 0xe4, 0x66, 0xd7, 0x14, 0x06, 0x47, 0x54, 0x17, 0xc6, 0x06, 0x15,
  0x26, 0x17, 0x26, 0xf6, 0xc6, 0x16, 0x06, 0x95, 0x86, 0x57, 0xc6, 0xc6,
  0x94, 0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0x66, 0x24, 0x57, 0x36, 0xe7,
  0x56, 0xc6, 0xe6, 0xf4, 0x66, 0xf4, 0x76, 0x46, 0x84, 0xaa, 0x08, 0x6b,
  0xe8, 0xe9, 0x49, 0x8a, 0x68, 0x82, 0x50, 0x50, 0x13, 0x84, 0xa2, 0xda,
  0x10, 0x1c, 0x13, 0x84, 0xc2, 0x9a, 0x20, 0x10, 0xd2, 0x06, 0x41, 0x0d,
  0xd4, 0x60, 0xc3, 0x72, 0x94, 0x81, 0x19, 0x9c, 0x01, 0x1a, 0xa4, 0x81,
  0x91, 0x06, 0xc7, 0x19, 0xac, 0xc1, 0x86, 0xc0, 0x98, 0x20, 0x14, 0xd7,
  0x06, 0x41, 0x0d, 0xaa, 0x0d, 0x8b, 0x51, 0x06, 0x66, 0x70, 0x06, 0x6d,
  0x90, 0x06, 0x86, 0x1b, 0x18, 0x67, 0xf0, 0x06, 0x1b, 0x02, 0x68, 0x82,
  0x50, 0x60, 0x1b, 0x16, 0xa8, 0x0c, 0xcc, 0xe0, 0x0c, 0xe2, 0x20, 0x0d,
  0x0c, 0x39, 0x80, 0xce, 0xe0, 0x0d, 0x58, 0x0c, 0x3d, 0x31, 0x3d, 0x49,
  0x4d, 0x10, 0x88, 0x69, 0x83, 0xa0, 0x06, 0x75, 0xb0, 0x61, 0x51, 0x03,
  0x3a, 0x30, 0x83, 0x33, 0x40, 0x83, 0x34, 0x30, 0xdc, 0x40, 0x0d, 0xce,
  0xc0, 0x0e, 0x36, 0x10, 0x6c, 0x00, 0x07, 0x73, 0x70, 0x07, 0x4c, 0xa6,
  0xac, 0xbe, 0xa8, 0xc2, 0xe4, 0xce, 0xca, 0xe8, 0x26, 0x08, 0x45, 0xb6,
  0x61, 0x39, 0xf2, 0xc0, 0x0c, 0xf4, 0x00, 0x0d, 0xce, 0xc0, 0x70, 0x83,
  0xe3, 0x0c, 0xec, 0x60, 0x43, 0xb0, 0x07, 0x1b, 0x06, 0x3c, 0xe0, 0x03,
  0x60, 0x43, 0x31, 0x06, 0x64, 0xd0, 0x07, 0x60, 0x00, 0xb4, 0xc2, 0x13,
  0x7b, 0xc3, 0x73, 0x19, 0x7b, 0x6b, 0x83, 0x4b, 0x63, 0x2b, 0x93, 0x73,
  0x79, 0x83, 0xa3, 0x4b, 0x7b, 0x73, 0x9b, 0x9b, 0x12, 0x08, 0x55, 0xd8,
  0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x44,
  0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29,
  0xc1, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e,
  0x4a, 0x90, 0xd4, 0x21, 0xc3, 0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93,
  0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12, 0x30, 0x65, 0xc8, 0xf0, 0x5c,
  0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x5f,
  0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba,
  0x30, 0xba, 0xb2, 0x29, 0x41, 0x18, 0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73,
  0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xf4,
  0x01, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x2e, 0x00, 0x00, 0x00, 0x06, 0xd0, 0x06, 0x29, 0xeb, 0x35, 0x95, 0x09,
  0x3c, 0x1d, 0x05, 0x2c, 0x29, 0x10, 0x01, 0x81, 0xb3, 0x00, 0x29, 0x72,
  0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84, 0x34, 0xc6, 0x17, 0x11, 0x52, 0x43,
  0x2c, 0xa7, 0xf3, 0x39, 0x86, 0x19, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f,
  0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x76, 0xb0, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61,
  0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xd2, 0x70, 0xf9, 0xce, 0xe3,
  0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x18, 0x81, 0x33,
  0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30,
  0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4,
  0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x00, 0xf3,
  0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f,
  0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x21,
  0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6,
  0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10,
  0x61, 0x7e, 0x71, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x54, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xa4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x4a, 0xb9, 0x94, 0x51, 0x51, 0xcc, 0x00, 0x14, 0x42, 0x71, 0x95, 0x5d,
  0xc9, 0x95, 0x42, 0xb9, 0x15, 0x5e, 0xc9, 0xd0, 0x30, 0x46, 0x00, 0x82,
  0x20, 0x08, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x18, 0xcc, 0x00,
  0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2, 0xdf, 0x08, 0xc0, 0x18, 0x01, 0x08,
  0x82, 0x20, 0x08, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xb0, 0xad, 0xc1, 0xf2, 0xa9, 0x81, 0x1a, 0x54, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0xb0, 0xb1, 0x01, 0x03, 0x06, 0x6a, 0xa0, 0x06,
  0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x6c, 0x6d, 0xd0, 0x78, 0x6c,
  0xc0, 0x06, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x6c, 0x6e, 0xe0,
  0x7c, 0x6c, 0xc0, 0x06, 0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x6c,
  0x6f, 0xf0, 0x88, 0x41, 0x1b, 0xb4, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x1e, 0x4c, 0x67, 0xe0, 0x06, 0x64, 0x40, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x14, 0x1a, 0xbc, 0x81, 0x56,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x07, 0x55, 0x1a, 0xc0,
  0x41, 0x19, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec, 0x81,
  0xa5, 0x06, 0x71, 0x40, 0x06, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x7c, 0x70, 0xbd, 0x81, 0x1c, 0xa0, 0x01, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x46, 0x1f, 0x60, 0x70, 0x30, 0x07, 0x5e, 0x36, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1f, 0x64, 0x71, 0x40, 0x07, 0x69,
  0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xf1, 0x07, 0x9a, 0x1d,
  0xd4, 0xc1, 0x1a, 0x6c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x80,
  0xc2, 0x76, 0x07, 0x76, 0x10, 0x06, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xa1, 0xc0, 0xe1, 0xc1, 0x1d, 0xb0, 0x41, 0x37, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x86, 0x28, 0x74, 0x78, 0x80, 0x07, 0x6e, 0xe0,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x31, 0x0a, 0x5e, 0x1e, 0xe4,
  0x01, 0x19, 0x7c, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xd0, 0x88, 0x42,
  0x06, 0x39, 0x42, 0x50, 0x55, 0x7a, 0xa0, 0x07, 0x60, 0x50, 0x8d, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0x18, 0x11, 0xc9, 0xc7, 0x88, 0x48, 0x3e, 0x46, 0x44, 0xf2, 0x31, 0x22,
  0x92, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x58, 0xa7, 0x60, 0x06,
  0x96, 0x1a, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0x82, 0x0d, 0x52, 0x7c, 0x6c, 0x90, 0xe2, 0x63, 0x83, 0x14, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0x62, 0x41, 0x0d, 0x06, 0x21, 0x18,
  0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x58, 0x48, 0x83,
  0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0xb6, 0xf0, 0x06, 0x1d, 0xb7, 0x75,
  0xdc, 0x36, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x91, 0x2d, 0xb8, 0x41,
  0x60, 0xc1, 0x27, 0x1f, 0x13, 0x3e, 0xf9, 0xd8, 0xf0, 0xc9, 0x67, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0x5c, 0xb8, 0x83, 0x33, 0xc8, 0x83,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x03, 0x8b, 0x17, 0xf6, 0x60, 0x0d, 0x66, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x02, 0x87, 0x3f, 0x78, 0x83, 0x3e, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xb0, 0xc8, 0x61, 0x14, 0xe6, 0xe0, 0x17, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x2c, 0x74, 0x38, 0x85, 0x3b, 0x10, 0x87, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x03, 0x8b, 0x1d, 0x56, 0x61, 0x0f, 0xc8, 0x61, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x8c, 0x14, 0xac,
  0xf8, 0x58, 0x29, 0x58, 0xf1, 0x31, 0x53, 0x80, 0xe2, 0x63, 0xa7, 0x00,
  0xc5, 0xc7, 0x50, 0x41, 0x89, 0x8f, 0xa5, 0x82, 0x12, 0x1f, 0x0b, 0x83,
  0x4e, 0x3e, 0xb6, 0x0a, 0x41, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x00, 0xbb, 0x07, 0x5c, 0x40, 0xc4, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x03, 0x0c, 0x1f, 0x72, 0x01, 0x11, 0x83, 0xc0, 0xca, 0x20, 0x93,
  0x8f, 0xbd, 0x42, 0x10, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc0,
  0xf6, 0x81, 0x17, 0x14, 0x33, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x00, 0xe3, 0x87, 0x5e, 0x50, 0xcc, 0x20, 0xb0, 0x34, 0xa8, 0xe4, 0x63,
  0xb3, 0x10, 0xc4, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb0, 0x7f,
  0x00, 0x07, 0x46, 0x0d, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc0,
  0x40, 0x22, 0x1c, 0x18, 0x35, 0x08, 0x86, 0x23, 0x92, 0x5b, 0x20, 0xbe,
  0xe1, 0x08, 0x03, 0x17, 0x88, 0x6f, 0x38, 0x62, 0xc8, 0x05, 0xe2, 0x9b,
  0x6e, 0xd0, 0x85, 0x5d, 0x18, 0xa6, 0x1b, 0x76, 0x81, 0x17, 0x86, 0xe9,
  0x06, 0x5e, 0xe8, 0x85, 0xc1, 0x86, 0x47, 0x3e, 0x36, 0x30, 0xf2, 0xb1,
  0x21, 0x91, 0x8f, 0x0d, 0x6e, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xc0, 0x56, 0x82, 0x1d, 0x86, 0x33, 0x08, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x00, 0x63, 0x89, 0x76, 0x18, 0xc0, 0x20, 0x30, 0x03, 0x0e,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x98, 0x4b, 0xbc, 0x83,
  0x91, 0x06, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x60, 0x2f, 0x01,
  0x0f, 0x86, 0x18, 0x04, 0x96, 0xc8, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x00, 0x8b, 0x09, 0x79, 0x48, 0xd6, 0x20, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x03, 0x4c, 0x26, 0xe6, 0x21, 0x21, 0x83, 0x60, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0x9a, 0x98, 0x87, 0x71, 0x68, 0x89,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x61,
  0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xd6, 0x4e, 0xe8, 0x83, 0x3a, 0xc0, 0xc4, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x31, 0xc0, 0xc7,
  0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0xb1, 0x5f, 0x18, 0xe4, 0x63, 0xbf,
  0x30, 0xc8, 0xc7, 0x7e, 0x61, 0x90, 0x8f, 0xe5, 0x43, 0x2d, 0xc4, 0xc7,
  0xf4, 0xa1, 0x16, 0xe2, 0x63, 0xfb, 0x50, 0x0b, 0xf1, 0x19, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x83, 0x67, 0x2d, 0x48, 0x62, 0x10, 0x82, 0x59, 0x90,
  0x85, 0x58, 0xb0, 0x20, 0x24, 0xe4, 0x63, 0x41, 0x2d, 0xc8, 0xc7, 0x84,
  0x5a, 0x90, 0x8f, 0x0d, 0xb5, 0x20, 0x1f, 0x43, 0x86, 0xf8, 0x18, 0x32,
  0xc4, 0xc7, 0x90, 0x21, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10,
  0xc9, 0x85, 0x5a, 0x04, 0x16, 0x9c, 0x04, 0x7c, 0x2c, 0x50, 0x09, 0xf9,
  0x98, 0x11, 0xd0, 0xc7, 0x82, 0x96, 0x80, 0x8f, 0x1d, 0x03, 0x7d, 0x2c,
  0x78, 0x09, 0xf8, 0x0c, 0x47, 0x20, 0x2c, 0x21, 0x7c, 0xd3, 0x0d, 0x2d,
  0xe1, 0x12, 0xc1, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x34, 0x7d, 0x41,
  0x13, 0x2c, 0xa1, 0x12, 0xc5, 0x10, 0xc0, 0x44, 0x5d, 0xd4, 0xc5, 0x4e,
  0xc0, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0x8c, 0x26, 0x10, 0x83, 0x11, 0xf8, 0x20, 0x1f, 0x23, 0xf2, 0x41, 0x3e,
  0x46, 0xe8, 0x83, 0x7c, 0x8c, 0xd8, 0x07, 0xf9, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0xc1, 0x53, 0x1a, 0x3e, 0x21, 0x0f, 0xf1, 0x00, 0x0f, 0xed,
  0xc0, 0x0e, 0xeb, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd6, 0x68,
  0x88, 0x85, 0x4c, 0x80, 0xc6, 0x68, 0x42, 0x10, 0x8c, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x41, 0x74, 0x1a, 0x7f, 0x31, 0x18, 0x4f, 0x04, 0xf1, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x09, 0x35, 0xd6, 0x22, 0xe0, 0x89,
  0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x54, 0xa3, 0x2d, 0x02, 0x0b,
  0x0a, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xc4, 0x1a, 0x70,
  0x11, 0x8c, 0x26, 0x20, 0x80, 0x05, 0x82, 0x7c, 0xec, 0x59, 0x83, 0xf8,
  0xd8, 0xb3, 0x06, 0xf1, 0xb1, 0x67, 0x0d, 0xe2, 0x63, 0xc4, 0x20, 0x1f,
  0x2b, 0x06, 0xf9, 0x98, 0x31, 0xc8, 0xc7, 0x86, 0x38, 0x80, 0x8f, 0x0d,
  0x71, 0x00, 0x1f, 0x1b, 0xe2, 0x00, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x60, 0xd9, 0x46, 0x5d, 0x94, 0x85, 0x6c, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x99, 0x7c, 0x6c, 0xd0,
  0xe4, 0x63, 0xc3, 0x26, 0x1f, 0x53, 0x06, 0xf8, 0x98, 0x32, 0xc0, 0xc7,
  0x94, 0x01, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x94, 0x47,
  0x5f, 0xf0, 0x06, 0x6f, 0xc8, 0xc6, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x48, 0x79, 0xf4, 0x05, 0x6f, 0xf0, 0xc6, 0x69, 0x08, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x80, 0x94, 0x47, 0x5f, 0xf0, 0x06, 0x6f, 0xc4,
  0x46, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0x79, 0xf4, 0x05,
  0x6f, 0xf0, 0xc6, 0x6b, 0xe8, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x8c, 0xd0, 0x74, 0x5c,
  0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c, 0x05, 0xb9, 0xd0, 0x2a,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0xfa, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe9, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xed, 0x58, 0x4d, 0x6c, 0x1b, 0x55, 0x10, 0x9e, 0xf7, 0xe3,
  0xf5, 0xdb, 0xf5, 0xfa, 0xd9, 0x5e, 0x6f, 0x62, 0xc7, 0x71, 0xc0, 0x71,
  0x5d, 0xcb, 0xa1, 0x89, 0x49, 0x39, 0x15, 0x04, 0xa2, 0x48, 0x25, 0x48,
  0xa4, 0x4d, 0x23, 0x45, 0x2c, 0x70, 0x68, 0x55, 0x23, 0x45, 0x89, 0xdb,
  0x28, 0xa9, 0xca, 0x8f, 0x72, 0x88, 0xcc, 0x56, 0x8a, 0x04, 0x88, 0x1e,
  0xca, 0x81, 0x03, 0x27, 0x7a, 0xf0, 0x81, 0x9f, 0x22, 0x55, 0xc0, 0x81,
  0xd3, 0x26, 0x70, 0x7a, 0x47, 0x2e, 0x56, 0x85, 0x54, 0xc1, 0x89, 0x33,
  0xa8, 0xf2, 0x21, 0xaa, 0x50, 0xc2, 0xec, 0xda, 0x6e, 0x9c, 0xa6, 0x51,
  0x02, 0x17, 0x2c, 0xe4, 0x91, 0x46, 0xdf, 0xee, 0xcc, 0xf7, 0xde, 0xcc,
  0x7b, 0xb3, 0x5a, 0x69, 0x66, 0x6a, 0x6e, 0xee, 0x1c, 0x21, 0x00, 0xbf,
  0x24, 0x21, 0x10, 0xad, 0x05, 0xf0, 0x87, 0xf7, 0xcd, 0xaf, 0x47, 0xd1,
  0x3b, 0xff, 0x90, 0xdf, 0x51, 0xda, 0x5e, 0x77, 0x06, 0xfe, 0x9d, 0x74,
  0xf6, 0xd9, 0x92, 0xad, 0x77, 0x97, 0x75, 0x7b, 0xe5, 0x3e, 0xfe, 0xaa,
  0xd5, 0xc2, 0x7b, 0x6d, 0x0c, 0x75, 0x94, 0x50, 0xd8, 0xec, 0xe2, 0xa5,
  0xe1, 0x12, 0x23, 0x5d, 0xef, 0xa7, 0xdb, 0xf7, 0xe2, 0xdb, 0x5e, 0x42,
  0xbd, 0xfe, 0xf0, 0x9e, 0x82, 0x80, 0x54, 0x23, 0x31, 0x74, 0x11, 0xaa,
  0xd1, 0x30, 0x1e, 0x89, 0x52, 0x8d, 0xc5, 0xd0, 0xc1, 0x28, 0xfc, 0xcf,
  0x85, 0xa3, 0x66, 0xbb, 0x9e, 0xfd, 0x03, 0xc7, 0x51, 0x63, 0x5d, 0x1c,
  0xff, 0x5b, 0xfa, 0x21, 0x78, 0x72, 0x37, 0xba, 0xf5, 0x66, 0x1a, 0xb6,
  0x1e, 0xbf, 0xeb, 0x5e, 0x1e, 0x41, 0x9e, 0x7e, 0x04, 0x1e, 0xf3, 0x79,
  0x91, 0x23, 0xf2, 0x42, 0x07, 0xf3, 0xf4, 0x14, 0x5c, 0xe4, 0x11, 0x7a,
  0x31, 0x96, 0xc5, 0xfc, 0xc8, 0xe3, 0x78, 0xd5, 0xbb, 0x7a, 0x8a, 0xa2,
  0xab, 0x7a, 0x17, 0x79, 0x70, 0x30, 0x6f, 0xb1, 0xcd, 0x5b, 0x3c, 0x84,
  0x77, 0xb9, 0xcd, 0xbb, 0x7c, 0x08, 0xef, 0x4a, 0x9b, 0x77, 0xe5, 0x10,
  0xde, 0xde, 0xf3, 0xc6, 0x82, 0x7b, 0xe1, 0xfb, 0x4e, 0xbc, 0x83, 0x02,
  0x7d, 0xe9, 0x29, 0xe9, 0xd7, 0xa4, 0xf7, 0xa4, 0x5f, 0x93, 0xde, 0x93,
  0x7e, 0x4d, 0x7a, 0x4f, 0xfa, 0x35, 0xe9, 0x3d, 0xe9, 0xd7, 0xa4, 0xf7,
  0xa4, 0x5f, 0x93, 0xde, 0x95, 0xef, 0xc7, 0xdc, 0xc6, 0xcf, 0xbf, 0x6d,
  0xb3, 0x99, 0x93, 0xd9, 0x7b, 0xf1, 0x75, 0xb7, 0x71, 0xe2, 0xf5, 0x6d,
  0x56, 0xfd, 0x74, 0xeb, 0x36, 0x83, 0x5b, 0x1b, 0x35, 0x7e, 0xc7, 0xab,
  0x19, 0xdb, 0x9e, 0xce, 0x6e, 0x7a, 0x2e, 0xfb, 0x08, 0xf5, 0x13, 0x2f,
  0xc2, 0xbe, 0x45, 0xfc, 0xd8, 0xe3, 0x60, 0x36, 0x71, 0xf9, 0x03, 0xa1,
  0x89, 0x00, 0x25, 0xfb, 0xcb, 0x0b, 0x89, 0x96, 0x0d, 0x40, 0x28, 0x20,
  0xa6, 0x02, 0x3d, 0xad, 0x40, 0x64, 0x15, 0x18, 0x39, 0x45, 0x40, 0x57,
  0x84, 0x44, 0x15, 0xd1, 0x87, 0x14, 0x11, 0x23, 0x8a, 0x18, 0xa3, 0x2a,
  0xba, 0x33, 0xf6, 0xa1, 0xdf, 0x3d, 0x99, 0xec, 0x0b, 0x4f, 0x8b, 0x5a,
  0xf2, 0x47, 0xf6, 0x95, 0xb7, 0xc3, 0xbe, 0xf6, 0x6e, 0x9f, 0x27, 0x09,
  0x08, 0x95, 0x94, 0x1d, 0x29, 0x35, 0x6f, 0xe1, 0x7e, 0xef, 0x6f, 0xde,
  0xd8, 0x10, 0x31, 0xf7, 0x4f, 0x4a, 0x37, 0x21, 0x1c, 0xb3, 0x1c, 0x1b,
  0x26, 0x9b, 0x39, 0xb4, 0xdb, 0x7c, 0xb2, 0x79, 0xc9, 0x8f, 0xc7, 0x27,
  0x15, 0x09, 0x8d, 0x29, 0x91, 0xb0, 0x1c, 0xd0, 0x4e, 0x29, 0x97, 0x7d,
  0xe7, 0x11, 0x7e, 0x52, 0x81, 0x39, 0xae, 0xf4, 0x0b, 0x56, 0x8d, 0x68,
  0xcf, 0x2a, 0x88, 0xbe, 0xa1, 0x40, 0x3e, 0xaf, 0xb0, 0x51, 0x53, 0xc4,
  0x9c, 0x50, 0x24, 0xfa, 0xa6, 0x9a, 0xb0, 0x6d, 0x31, 0x9e, 0x2e, 0x0b,
  0x3d, 0x96, 0x91, 0x7a, 0xb4, 0x24, 0xf5, 0x44, 0x5c, 0x1a, 0x03, 0x39,
  0x59, 0xce, 0x66, 0x45, 0x10, 0x33, 0x93, 0x97, 0x66, 0xc6, 0x92, 0xf1,
  0x4c, 0x41, 0xa6, 0x9e, 0xce, 0x39, 0x44, 0xbe, 0xa0, 0x12, 0x30, 0xdd,
  0xd0, 0x4b, 0x53, 0x75, 0x1d, 0x31, 0x5a, 0x2a, 0xd6, 0x2d, 0xc4, 0x44,
  0xe9, 0xd5, 0xba, 0x1c, 0x41, 0x7f, 0x8c, 0xa0, 0xff, 0x44, 0xc3, 0x88,
  0xd3, 0x9c, 0x8e, 0x28, 0x11, 0x2d, 0x44, 0x0b, 0x31, 0x7e, 0x21, 0x57,
  0xb3, 0x79, 0xa1, 0x89, 0xbd, 0xe2, 0x03, 0x37, 0x2f, 0xd6, 0x86, 0x58,
  0xeb, 0xde, 0x6c, 0x5a, 0x0a, 0x30, 0x09, 0xa4, 0x71, 0x1f, 0xbe, 0x24,
  0xae, 0x25, 0xd6, 0x8c, 0x51, 0x5b, 0xa6, 0x46, 0xd3, 0x32, 0x79, 0x2c,
  0x2f, 0xb5, 0x8e, 0xbd, 0x20, 0xd6, 0xe4, 0x68, 0x56, 0xda, 0xf9, 0x9c,
  0xd4, 0x92, 0x65, 0xd9, 0xe1, 0xa7, 0xcb, 0x39, 0x27, 0x79, 0x5c, 0xca,
  0x81, 0x7c, 0x41, 0x0e, 0xe6, 0xf3, 0xd2, 0x18, 0x2b, 0xca, 0xac, 0xcc,
  0x39, 0x43, 0xe5, 0x82, 0x93, 0x29, 0xe7, 0x9d, 0x14, 0xe6, 0x67, 0x0e,
  0xcf, 0xd4, 0xe3, 0x88, 0x80, 0xd9, 0x8c, 0xc8, 0x82, 0xf3, 0x84, 0xf4,
  0xed, 0x98, 0x5f, 0x82, 0x96, 0xfc, 0xfc, 0x49, 0x61, 0x10, 0xfc, 0x73,
  0xd1, 0x7c, 0x06, 0x7b, 0xd7, 0xe9, 0x46, 0x6a, 0xec, 0xa9, 0xba, 0xe1,
  0x63, 0xe2, 0xb9, 0x7a, 0xd8, 0xc7, 0xe1, 0x67, 0xea, 0x3a, 0x61, 0x0d,
  0xe3, 0x77, 0x22, 0x5c, 0x9b, 0xae, 0xe9, 0xaf, 0x59, 0x35, 0xa3, 0x1d,
  0xdf, 0x46, 0x7f, 0x38, 0xf9, 0x13, 0x1b, 0x40, 0xd4, 0x10, 0xaf, 0xbe,
  0x78, 0x63, 0x83, 0x3f, 0x29, 0x24, 0x4d, 0x71, 0xc9, 0x26, 0x34, 0x19,
  0x22, 0x86, 0x34, 0x5e, 0x19, 0xaf, 0xf1, 0x63, 0x68, 0x1b, 0xb5, 0x24,
  0x3b, 0x3e, 0x28, 0x6b, 0x93, 0xdb, 0x1f, 0xf8, 0xf7, 0x5b, 0xc2, 0x9a,
  0xda, 0xb0, 0x08, 0xe6, 0x70, 0xd1, 0x91, 0x89, 0xa2, 0xa3, 0x51, 0xde,
  0xb8, 0x5f, 0xa4, 0xe0, 0x9a, 0x66, 0x4e, 0x3b, 0x6f, 0xd6, 0x12, 0xa6,
  0x29, 0xb5, 0x69, 0xb3, 0x16, 0x47, 0xf4, 0xf7, 0xf5, 0x73, 0xa1, 0x11,
  0x6b, 0x1d, 0xfc, 0xb3, 0x44, 0x8a, 0xeb, 0xc4, 0xcf, 0x3d, 0x52, 0x5e,
  0x67, 0x11, 0x2e, 0xb5, 0x98, 0x70, 0x34, 0x62, 0x39, 0x1a, 0x1b, 0x74,
  0x0c, 0x2e, 0x1c, 0xc1, 0x2d, 0x47, 0xe7, 0x83, 0xce, 0xc1, 0x3d, 0xee,
  0x75, 0xb4, 0x7f, 0xfe, 0x9f, 0x6b, 0x67, 0x7c, 0xd3, 0x69, 0x6b, 0x05,
  0xea, 0xa3, 0x36, 0x9d, 0xec, 0xb5, 0xf9, 0x6a, 0xd0, 0xfd, 0xb6, 0x08,
  0xdb, 0x5d, 0xd3, 0x19, 0xc4, 0x98, 0xbc, 0x6b, 0x43, 0x68, 0xcd, 0x2c,
  0x04, 0x06, 0x21, 0x6c, 0xef, 0x7f, 0x80, 0x77, 0x05, 0x21, 0x1d, 0x1e,
  0x06, 0x21, 0x6c, 0x6f, 0x2e, 0x1c, 0x83, 0xd0, 0x47, 0x7a, 0x70, 0x1e,
  0x04, 0x69, 0xc9, 0xee, 0xbf, 0x7e, 0x02, 0x66, 0xe7, 0x5e, 0x5e, 0x7e,
  0xef, 0x5c, 0xe5, 0xea, 0x99, 0x77, 0x2b, 0x4b, 0xb3, 0x95, 0x6b, 0x95,
  0xb7, 0x56, 0x96, 0x2a, 0xb3, 0xd5, 0xd5, 0xf9, 0xa5, 0xb3, 0xd5, 0x85,
  0xc5, 0x77, 0xaa, 0xcb, 0x0b, 0x53, 0xd7, 0xe6, 0xdf, 0x5e, 0x9e, 0x5f,
  0x9a, 0x59, 0x99, 0x5a, 0x59, 0xe8, 0x0c, 0xb6, 0x3e, 0x6b, 0x0f, 0x9a,
  0x4e, 0xa3, 0x86, 0x51, 0x4f, 0x05, 0xc1, 0x77, 0xe7, 0x4a, 0xbe, 0x9d,
  0xb0, 0xdd, 0x41, 0xd7, 0xd9, 0xc0, 0x1f, 0x7e, 0x98, 0xe0, 0x2a, 0x69,
  0xf9, 0x5b, 0xef, 0x00, 0x7f, 0x03, 0x31, 0x51, 0xac, 0x0f, 0x00, 0x00,
  0xb4, 0x29, 0xd0, 0x6f, 0x4e, 0x31, 0x1c, 0xdc, 0x10, 0x84, 0x2b, 0x2b,
  0x69, 0x95, 0xf8, 0xac
};
