#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingFresnel.pdb
; shader hash: 8dc31e613c0bec5705fc1d1ab488f1c7
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapDualParabolaPixelLightingFresnel
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32     2darray      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<vector<float, 4> >" = type { <4 x float>, %"class.Texture2DArray<vector<float, 4> >::mips_type" }
%"class.Texture2DArray<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapDualParabolaPixelLightingFresnel() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = extractvalue %dx.types.ResRet.f32 %19, 2
  %23 = extractvalue %dx.types.ResRet.f32 %19, 3
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = fmul fast float %23, %9
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = fsub fast float %31, %15
  %35 = call float @dx.op.dot3.f32(i32 55, float %32, float %33, float %34, float %32, float %33, float %34)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 25, float %35)  ; Rsqrt(value)
  %37 = fmul fast float %32, %36
  %38 = fmul fast float %33, %36
  %39 = fmul fast float %34, %36
  %40 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %41 = call float @dx.op.unary.f32(i32 25, float %40)  ; Rsqrt(value)
  %42 = fmul fast float %41, %10
  %43 = fmul fast float %41, %11
  %44 = fmul fast float %41, %12
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = fsub fast float -0.000000e+00, %47
  %70 = fsub fast float -0.000000e+00, %48
  %71 = fsub fast float -0.000000e+00, %55
  %72 = fsub fast float -0.000000e+00, %56
  %73 = fsub fast float -0.000000e+00, %63
  %74 = fsub fast float -0.000000e+00, %64
  %75 = fmul fast float %42, %46
  %76 = fsub fast float -0.000000e+00, %75
  %77 = call float @dx.op.tertiary.f32(i32 46, float %69, float %43, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %70, float %44, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %42, %54
  %80 = fsub fast float -0.000000e+00, %79
  %81 = call float @dx.op.tertiary.f32(i32 46, float %71, float %43, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %72, float %44, float %81)  ; FMad(a,b,c)
  %83 = fmul fast float %42, %62
  %84 = fsub fast float -0.000000e+00, %83
  %85 = call float @dx.op.tertiary.f32(i32 46, float %73, float %43, float %84)  ; FMad(a,b,c)
  %86 = call float @dx.op.tertiary.f32(i32 46, float %74, float %44, float %85)  ; FMad(a,b,c)
  %87 = fcmp fast olt float %78, 0.000000e+00
  %88 = fcmp fast olt float %82, 0.000000e+00
  %89 = fcmp fast olt float %86, 0.000000e+00
  %90 = select i1 %87, float 0.000000e+00, float 1.000000e+00
  %91 = select i1 %88, float 0.000000e+00, float 1.000000e+00
  %92 = select i1 %89, float 0.000000e+00, float 1.000000e+00
  %93 = fmul fast float %90, %78
  %94 = fmul fast float %91, %82
  %95 = fmul fast float %92, %86
  %96 = fmul fast float %93, %50
  %97 = call float @dx.op.tertiary.f32(i32 46, float %94, float %58, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %95, float %66, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %93, %51
  %100 = call float @dx.op.tertiary.f32(i32 46, float %94, float %59, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %95, float %67, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %93, %52
  %103 = call float @dx.op.tertiary.f32(i32 46, float %94, float %60, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %95, float %68, float %103)  ; FMad(a,b,c)
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = fmul fast float %106, %98
  %110 = fmul fast float %107, %101
  %111 = fmul fast float %108, %104
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = fadd fast float %109, %113
  %117 = fadd fast float %110, %114
  %118 = fadd fast float %111, %115
  %119 = fmul fast float %24, %116
  %120 = fmul fast float %25, %117
  %121 = fmul fast float %26, %118
  %122 = fsub fast float -0.000000e+00, %37
  %123 = fsub fast float -0.000000e+00, %38
  %124 = fsub fast float -0.000000e+00, %39
  %125 = call float @dx.op.dot3.f32(i32 55, float %122, float %123, float %124, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %126 = fmul fast float %125, 2.000000e+00
  %127 = fmul fast float %126, %42
  %128 = fmul fast float %126, %43
  %129 = fmul fast float %126, %44
  %130 = fsub fast float %122, %127
  %131 = fsub fast float %123, %128
  %132 = fsub fast float %124, %129
  %133 = call float @dx.op.unary.f32(i32 6, float %132)  ; FAbs(value)
  %134 = fadd fast float %133, 1.000000e+00
  %135 = fmul fast float %134, 2.000000e+00
  %136 = fdiv fast float %130, %135
  %137 = fadd fast float %136, 5.000000e-01
  %138 = fdiv fast float %131, %135
  %139 = fadd fast float %138, 5.000000e-01
  %140 = fcmp fast ogt float %132, 0.000000e+00
  %141 = select i1 %140, float 0.000000e+00, float 1.000000e+00
  %142 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %137, float %139, float %141, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %143 = extractvalue %dx.types.ResRet.f32 %142, 0
  %144 = extractvalue %dx.types.ResRet.f32 %142, 1
  %145 = extractvalue %dx.types.ResRet.f32 %142, 2
  %146 = extractvalue %dx.types.ResRet.f32 %142, 3
  %147 = fmul fast float %143, %27
  %148 = fmul fast float %144, %27
  %149 = fmul fast float %145, %27
  %150 = fmul fast float %146, %27
  %151 = call float @dx.op.dot3.f32(i32 55, float %37, float %38, float %39, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %154 = call float @dx.op.unary.f32(i32 6, float %151)  ; FAbs(value)
  %155 = fsub fast float 1.000000e+00, %154
  %156 = call float @dx.op.binary.f32(i32 35, float %155, float 0.000000e+00)  ; FMax(a,b)
  %157 = call float @dx.op.unary.f32(i32 23, float %156)  ; Log(value)
  %158 = fmul fast float %157, %153
  %159 = call float @dx.op.unary.f32(i32 21, float %158)  ; Exp(value)
  %160 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %161 = fmul fast float %160, %159
  %162 = fsub fast float %147, %119
  %163 = fsub fast float %148, %120
  %164 = fsub fast float %149, %121
  %165 = fmul fast float %161, %162
  %166 = fmul fast float %161, %163
  %167 = fmul fast float %161, %164
  %168 = fadd fast float %165, %119
  %169 = fadd fast float %166, %120
  %170 = fadd fast float %167, %121
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = fmul fast float %172, %150
  %176 = fmul fast float %173, %150
  %177 = fmul fast float %174, %150
  %178 = fadd fast float %168, %175
  %179 = fadd fast float %169, %176
  %180 = fadd fast float %170, %177
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %185 = fmul fast float %182, %27
  %186 = fmul fast float %183, %27
  %187 = fmul fast float %184, %27
  %188 = fsub fast float %185, %178
  %189 = fsub fast float %186, %179
  %190 = fsub fast float %187, %180
  %191 = fmul fast float %188, %16
  %192 = fmul fast float %189, %16
  %193 = fmul fast float %190, %16
  %194 = fadd fast float %191, %178
  %195 = fadd fast float %192, %179
  %196 = fadd fast float %193, %180
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %194)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %195)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %196)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2DArray<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 7, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapDualParabolaPixelLightingFresnel, !"PSEnvMapDualParabolaPixelLightingFresnel", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !28}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!26 = !{i32 2}
!27 = !{i32 3, i32 7}
!28 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !24}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 78
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 960
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x611ec38d, 0x57ec0b3c                // 000000000000: D580C38D 03FEC31E 57EC0B3C
;   v_nop_xbox_data 0x1a1dfc05, 0xc7f188b4                // 00000000000C: D580FC05 03FE351D C7F188B4
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[56:57], exec                          // 00000000001C: BEB8047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     m0, s14                                 // 000000000024: BEFC030E
;   s_or_b32      s53, s13, lit(0x00100000)               // 000000000028: 8835FF0D 00100000
;   v_interp_p1_f32  v2, v0, attr2.y                      // 000000000030: C8080900
;   v_interp_p1_f32  v3, v0, attr2.x                      // 000000000034: C80C0800
;   s_mov_b32     s52, s12                                // 000000000038: BEB4030C
;   s_mov_b32     s54, -1                                 // 00000000003C: BEB603C1
;   s_mov_b32     s55, lit(0x11014fac)                    // 000000000040: BEB703FF 11014FAC
;   v_interp_p2_f32  v2, v1, attr2.y                      // 000000000048: C8090901
;   v_interp_p1_f32  v4, v0, attr2.z                      // 00000000004C: C8100A00
;   s_buffer_load_dwordx8  s[0:7], s[52:55], 0x0000a0     // 000000000050: F42C001A FA0000A0
;   v_interp_p2_f32  v3, v1, attr2.x                      // 000000000058: C80D0801
;   v_interp_p1_f32  v8, v0, attr1.y                      // 00000000005C: C8200500
;   v_mul_legacy_f32  v5, v2, v2                          // 000000000060: 0E0A0502
;   v_interp_p2_f32  v4, v1, attr2.z                      // 000000000064: C8110A01
;   s_buffer_load_dwordx16  s[12:27], s[52:55], 0x000020  // 000000000068: F430031A FA000020
;   v_interp_p1_f32  v11, v0, attr1.x                     // 000000000070: C82C0400
;   v_interp_p2_f32  v8, v1, attr1.y                      // 000000000074: C8210501
;   v_fmac_f32    v5, v3, v3                              // 000000000078: 560A0703
;   v_interp_p1_f32  v10, v0, attr1.z                     // 00000000007C: C8280600
;   s_buffer_load_dwordx16  s[28:43], s[52:55], 0x000060  // 000000000080: F430071A FA000060
;   v_interp_p2_f32  v11, v1, attr1.x                     // 000000000088: C82D0401
;   v_interp_p1_f32  v6, v0, attr3.x                      // 00000000008C: C8180C00
;   v_fmac_f32    v5, v4, v4                              // 000000000090: 560A0904
;   v_interp_p2_f32  v10, v1, attr1.z                     // 000000000094: C8290601
;   v_interp_p1_f32  v7, v0, attr3.y                      // 000000000098: C81C0D00
;   v_interp_p1_f32  v12, v0, attr3.z                     // 00000000009C: C8300E00
;   v_interp_p1_f32  v13, v0, attr3.w                     // 0000000000A0: C8340F00
;   v_rsq_f32     v5, v5                                  // 0000000000A4: 7E0A5D05
;   v_interp_p1_f32  v14, v0, attr1.w                     // 0000000000A8: C8380700
;   s_waitcnt     lgkmcnt(0)                              // 0000000000AC: BF8CC07F
;   v_sub_f32     v8, s1, v8                              // 0000000000B0: 08101001
;   v_sub_f32     v9, s0, v11                             // 0000000000B4: 08121600
;   v_sub_f32     v10, s2, v10                            // 0000000000B8: 08141402
;   v_interp_p1_f32  v23, v0, attr0.x                     // 0000000000BC: C85C0000
;   v_interp_p1_f32  v22, v0, attr0.y                     // 0000000000C0: C8580100
;   v_mul_legacy_f32  v11, v8, v8                         // 0000000000C4: 0E161108
;   v_interp_p2_f32  v6, v1, attr3.x                      // 0000000000C8: C8190C01
;   v_interp_p2_f32  v7, v1, attr3.y                      // 0000000000CC: C81D0D01
;   v_mul_legacy_f32  v15, v5, v3                         // 0000000000D0: 0E1E0705
;   v_mul_legacy_f32  v2, v5, v2                          // 0000000000D4: 0E040505
;   v_fmac_f32    v11, v9, v9                             // 0000000000D8: 56161309
;   v_mul_legacy_f32  v4, v5, v4                          // 0000000000DC: 0E080905
;   v_interp_p2_f32  v12, v1, attr3.z                     // 0000000000E0: C8310E01
;   v_mul_legacy_f32  v3, s20, v15                        // 0000000000E4: 0E061E14
;   v_mul_legacy_f32  v5, s24, v15                        // 0000000000E8: 0E0A1E18
;   v_fmac_f32    v11, v10, v10                           // 0000000000EC: 5616150A
;   v_mul_legacy_f32  v17, s28, v15                       // 0000000000F0: 0E221E1C
;   v_interp_p2_f32  v13, v1, attr3.w                     // 0000000000F4: C8350F01
;   v_fma_f32     v3, -s21, v2, -v3                       // 0000000000F8: D54B0003 A40E0415
;   v_fma_f32     v5, -s25, v2, -v5                       // 000000000100: D54B0005 A4160419
;   v_rsq_f32     v11, v11                                // 000000000108: 7E165D0B
;   v_interp_p2_f32  v14, v1, attr1.w                     // 00000000010C: C8390701
;   v_interp_p2_f32  v23, v1, attr0.x                     // 000000000110: C85D0001
;   v_fmac_f32    v3, -s22, v4                            // 000000000114: D52B0003 20020816
;   v_interp_p2_f32  v22, v1, attr0.y                     // 00000000011C: C8590101
;   v_fma_f32     v1, -s29, v2, -v17                      // 000000000120: D54B0001 A446041D
;   v_fmac_f32    v5, -s26, v4                            // 000000000128: D52B0005 2002081A
;   s_mov_b32     s60, s9                                 // 000000000130: BEBC0309
;   v_cmp_gt_f32  vcc, 0, v3                              // 000000000134: 7C080680
;   s_mov_b32     s9, 0                                   // 000000000138: BE890380
;   v_mul_legacy_f32  v8, v8, v11                         // 00000000013C: 0E101708
;   v_fmac_f32    v1, -s30, v4                            // 000000000140: D52B0001 2002081E
;   v_mul_legacy_f32  v9, v9, v11                         // 000000000148: 0E121709
;   v_cndmask_b32  v17, 1.0, 0, vcc                       // 00000000014C: D5010011 01A900F2
;   v_cmp_gt_f32  vcc, 0, v5                              // 000000000154: 7C080A80
;   v_mul_legacy_f32  v10, v10, v11                       // 000000000158: 0E14170A
;   s_mov_b32     s61, 0                                  // 00000000015C: BEBD0380
;   s_load_dwordx8  s[44:51], s[8:9], null                // 000000000160: F40C0B04 FA000000
;   v_mul_legacy_f32  v3, v17, v3                         // 000000000168: 0E060711
;   v_cndmask_b32  v18, 1.0, 0, vcc                       // 00000000016C: D5010012 01A900F2
;   v_mul_legacy_f32  v17, v8, v2                         // 000000000174: 0E220508
;   v_cmp_gt_f32  vcc, 0, v1                              // 000000000178: 7C080280
;   s_load_dwordx4  s[72:75], s[60:61], null              // 00000000017C: F408121E FA000000
;   v_mul_legacy_f32  v20, s34, v3                        // 000000000184: 0E280622
;   v_mul_legacy_f32  v5, v18, v5                         // 000000000188: 0E0A0B12
;   v_fma_f32     v11, -v9, v15, -v17                     // 00000000018C: D54B000B A4461F09
;   v_cndmask_b32  v19, 1.0, 0, vcc                       // 000000000194: D5010013 01A900F2
;   v_mul_legacy_f32  v18, s32, v3                        // 00000000019C: 0E240620
;   s_mov_b32     s58, s11                                // 0000000001A0: BEBA030B
;   v_fmac_f32    v20, s38, v5                            // 0000000001A4: 56280A26
;   v_fmac_f32    v11, -v10, v4 mul:2                     // 0000000001A8: D52B000B 2802090A
;   v_mul_legacy_f32  v1, v19, v1                         // 0000000001B0: 0E020313
;   v_mul_legacy_f32  v19, s33, v3                        // 0000000001B4: 0E260621
;   v_fmac_f32    v18, s36, v5                            // 0000000001B8: 56240A24
;   s_mov_b32     s11, 0                                  // 0000000001BC: BE8B0380
;   v_fma_f32     v2, -v11, v2, -v8                       // 0000000001C0: D54B0002 A422050B
;   v_fma_f32     v8, -v11, v15, -v9                      // 0000000001C8: D54B0008 A4261F0B
;   v_fmac_f32    v19, s37, v5                            // 0000000001D0: 56260A25
;   v_fma_f32     v5, -v11, v4, -v10                      // 0000000001D4: D54B0005 A42A090B
;   v_fmac_f32    v18, s40, v1                            // 0000000001DC: 56240228
;   v_fmac_f32    v20, s42, v1                            // 0000000001E0: 5628022A
;   s_mov_b32     s59, 0                                  // 0000000001E4: BEBB0380
;   v_fmac_f32    v19, s41, v1                            // 0000000001E8: 56260229
;   v_add_f32     v3, abs(v5), 1.0 mul:2                  // 0000000001EC: D5030103 0801E505
;   s_load_dwordx8  s[20:27], s[10:11], null              // 0000000001F4: F40C0505 FA000000
;   s_buffer_load_dwordx2  s[28:29], s[52:55], 0x000010   // 0000000001FC: F424071A FA000010
;   s_load_dwordx4  s[8:11], s[58:59], null               // 000000000204: F408021D FA000000
;   s_buffer_load_dwordx4  s[0:3], s[52:55], null         // 00000000020C: F428001A FA000000
;   v_rcp_f32     v3, v3                                  // 000000000214: 7E065503
;   v_cmp_lt_f32  vcc, 0, v5                              // 000000000218: 7C020A80
;   v_fma_f32     v16, s12, v18, s16                      // 00000000021C: D54B0010 0042240C
;   v_fma_f32     v18, s13, v19, s17                      // 000000000224: D54B0012 0046260D
;   v_fma_f32     v19, s14, v20, s18                      // 00000000022C: D54B0013 004A280E
;   v_cndmask_b32  v5, 1.0, 0, vcc                        // 000000000234: D5010005 01A900F2
;   v_fma_f32     v8, v8, v3, 0.5                         // 00000000023C: D54B0008 03C20708
;   v_fma_f32     v11, v2, v3, 0.5                        // 000000000244: D54B000B 03C20702
;   s_waitcnt     lgkmcnt(0)                              // 00000000024C: BF8CC07F
;   image_sample  v[0:3], [v23,v22], s[44:51], s[72:75] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000250: F0800F0A 024B0017 00000016
;   s_waitcnt     vmcnt(0)                                // 00000000025C: BF8C3F70
;   v_mul_legacy_f32  v23, v0, v6                         // 000000000260: 0E2E0D00
;   v_mul_legacy_f32  v1, v1, v7                          // 000000000264: 0E020F01
;   v_mul_legacy_f32  v2, v2, v12                         // 000000000268: 0E041902
;   v_mul_legacy_f32  v6, v3, v13                         // 00000000026C: 0E0C1B03
;   v_mul_legacy_f32  v7, v23, v16                        // 000000000270: 0E0E2117
;   v_mul_legacy_f32  v12, v1, v18                        // 000000000274: 0E182501
;   v_mul_legacy_f32  v13, v2, v19                        // 000000000278: 0E1A2702
;   v_rndne_f32   v2, v5                                  // 00000000027C: 7E044705
;   s_and_b64     exec, exec, s[56:57]                    // 000000000280: 87FE387E
;   image_sample  v[0:3], [v8,v11,v2], s[20:27], s[8:11] dmask:0xf dim:SQ_RSRC_IMG_2D_ARRAY // 000000000284: F0800F2A 00450008 0000020B
;   v_fmac_f32    v17, v9, v15                            // 000000000290: 56221F09
;   v_fmac_f32    v17, v10, v4                            // 000000000294: 5622090A
;   v_sub_f32     v4, 1.0, abs(v17)                       // 000000000298: D5040204 000222F2
;   v_max_f32     v4, 0, v4                               // 0000000002A0: 20080880
;   v_log_f32     v4, v4                                  // 0000000002A4: 7E084F04
;   v_mul_legacy_f32  v4, s29, v4                         // 0000000002A8: 0E08081D
;   v_exp_f32     v4, v4                                  // 0000000002AC: 7E084B04
;   v_mul_legacy_f32  v10, s28, v4                        // 0000000002B0: 0E14081C
;   s_waitcnt     vmcnt(0)                                // 0000000002B4: BF8C3F70
;   v_fma_f32     v0, v0, v6, -v7                         // 0000000002B8: D54B0000 841E0D00
;   v_fma_f32     v1, v1, v6, -v12                        // 0000000002C0: D54B0001 84320D01
;   v_fma_f32     v11, v2, v6, -v13                       // 0000000002C8: D54B000B 84360D02
;   v_mul_legacy_f32  v18, v3, v6                         // 0000000002D0: 0E240D03
;   v_fmac_f32    v7, v10, v0                             // 0000000002D4: 560E010A
;   v_fmac_f32    v12, v10, v1                            // 0000000002D8: 5618030A
;   v_fmac_f32    v13, v10, v11                           // 0000000002DC: 561A170A
;   v_fmac_f32    v7, s0, v18                             // 0000000002E0: 560E2400
;   v_fmac_f32    v12, s1, v18                            // 0000000002E4: 56182401
;   v_fmac_f32    v13, s2, v18                            // 0000000002E8: 561A2402
;   v_fma_f32     v0, s4, v6, -v7                         // 0000000002EC: D54B0000 841E0C04
;   v_fma_f32     v1, s5, v6, -v12                        // 0000000002F4: D54B0001 84320C05
;   v_fma_f32     v3, s6, v6, -v13                        // 0000000002FC: D54B0003 84360C06
;   v_fmac_f32    v7, v0, v14                             // 000000000304: 560E1D00
;   v_fmac_f32    v12, v1, v14                            // 000000000308: 56181D01
;   v_fmac_f32    v13, v3, v14                            // 00000000030C: 561A1D03
;   s_nop         0x0000                                  // 000000000310: BF800000
;   s_nop         0x0000                                  // 000000000314: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v12                      // 000000000318: 5E001907
;   v_cvt_pkrtz_f16_f32  v1, v13, v6                      // 00000000031C: 5E020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000320: F8001C0F 00000100
;   s_endpgm                                              // 000000000328: BF810000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 352, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 380, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 500, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 7 (Texture2DArray)  }
;   bound_descriptor_loads[3] {  instr_offset: 516, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 60
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapDualParabolaPixelLightingFresnel)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 196
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x7,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, off, off, off done vm         // 000000000010: F8001801 00000007
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xc07,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v12, off, off done vm         // 000000000010: F8001803 00000C07
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x607,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v6, off, off done vm          // 000000000010: F8001803 00000607
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e001907,
;        0x5e020d0d,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v12                      // 000000000008: 5E001907
;   v_cvt_pkrtz_f16_f32  v1, v13, v6                      // 00000000000C: 5E020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x21907,
;        0xd7690001,
;        0x20d0d,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v7, v12                     // 000000000000: D7690000 00021907
;   v_cvt_pknorm_u16_f32  v1, v13, v6                     // 000000000008: D7690001 00020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x21907,
;        0xd7680001,
;        0x20d0d,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v7, v12                     // 000000000000: D7680000 00021907
;   v_cvt_pknorm_i16_f32  v1, v13, v6                     // 000000000008: D7680001 00020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x21907,
;        0xd76a0001,
;        0x20d0d,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v7, v12                         // 000000000000: D76A0000 00021907
;   v_cvt_pk_u16_u32  v1, v13, v6                         // 000000000008: D76A0001 00020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x21907,
;        0xd76b0001,
;        0x20d0d,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v7, v12                         // 000000000000: D76B0000 00021907
;   v_cvt_pk_i16_i32  v1, v13, v6                         // 000000000008: D76B0001 00020D0D
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x60d0c07,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v12, v13, v6 done vm          // 000000000010: F800180F 060D0C07
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=78,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:119,SAlu:22,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingFresnel[] = {
  0x44, 0x58, 0x42, 0x43, 0x41, 0x50, 0xce, 0x73, 0x4d, 0x79, 0x37, 0x22,
  0x9a, 0xad, 0x92, 0x7c, 0x96, 0x27, 0xbb, 0x1e, 0x01, 0x00, 0x00, 0x00,
  0x94, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xe0, 0x02, 0x00, 0x00, 0xc8, 0x03, 0x00, 0x00, 0x78, 0x04, 0x00, 0x00,
  0x94, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xac, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x44, 0x75,
  0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x61, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46,
  0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x62,
  0x6f, 0x6c, 0x61, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68,
  0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x2e,
  0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x8d, 0xc3, 0x1e, 0x61, 0x3c, 0x0b, 0xec, 0x57,
  0x05, 0xfc, 0x1d, 0x1a, 0xb4, 0x88, 0xf1, 0xc7, 0x44, 0x58, 0x49, 0x4c,
  0xf8, 0x12, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xbe, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x18, 0x0e, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x30, 0x0e, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x90, 0x0e, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xa4, 0x0e, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb4, 0x0e, 0x00, 0x00,
  0x31, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xe8, 0x12, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8c, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x18, 0x0e, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x83, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb4, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x62, 0x20, 0x86, 0x81, 0xa6, 0xa3, 0x86,
  0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x50, 0x88, 0x8a, 0x60, 0x08, 0xb2,
  0x4a, 0x31, 0x10, 0xc3, 0x30, 0x10, 0x36, 0x47, 0x10, 0x14, 0x83, 0x21,
  0x0a, 0x82, 0xd0, 0x68, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x99, 0xda,
  0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc,
  0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc,
  0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e, 0xe6,
  0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x40, 0xcc, 0x24,
  0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50,
  0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x48, 0xf0, 0x3e, 0x02, 0x67, 0x92, 0x83, 0x71,
  0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0x08, 0x05, 0x79,
  0x90, 0x87, 0x70, 0xc8, 0x07, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a,
  0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a,
  0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0xd0, 0x03, 0x3d,
  0x68, 0x87, 0x74, 0x80, 0x87, 0x79, 0xf8, 0x05, 0x7a, 0xc8, 0x07, 0x78,
  0x28, 0x07, 0x14, 0x10, 0x33, 0x9d, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc,
  0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8,
  0x43, 0x39, 0xc8, 0x01, 0x29, 0x84, 0x82, 0x3c, 0xc8, 0x43, 0x38, 0xe4,
  0x03, 0x1f, 0xd8, 0x43, 0x39, 0x8c, 0x03, 0x3d, 0xbc, 0x83, 0x3c, 0xf0,
  0x81, 0x39, 0xb0, 0xc3, 0x3b, 0x84, 0x03, 0x3d, 0xb0, 0x01, 0x18, 0xd0,
  0x81, 0x1f, 0x80, 0x81, 0x1f, 0x20, 0xc1, 0x13, 0x69, 0x1c, 0x46, 0x18,
  0x86, 0x1c, 0x28, 0x93, 0xc0, 0xbb, 0xea, 0x70, 0xa4, 0x69, 0x01, 0x30,
  0x87, 0x9a, 0xfc, 0x14, 0x88, 0x00, 0x86, 0x98, 0x88, 0x48, 0x42, 0x4d,
  0x39, 0x0c, 0x5e, 0x69, 0x9a, 0x65, 0xe9, 0x9d, 0xe6, 0x49, 0xe8, 0x4d,
  0xd2, 0x14, 0x51, 0xc2, 0xe4, 0xb3, 0x00, 0xf3, 0x2c, 0x44, 0xc4, 0x4e,
  0xc0, 0x44, 0xa0, 0x80, 0x20, 0x35, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x1c, 0x0a, 0xd0, 0xa0, 0x0c, 0xca,
  0x83, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x70, 0x06, 0x80, 0xc8, 0x19, 0x00, 0x4a, 0x67, 0x00, 0x68, 0x9d, 0x01,
  0x20, 0x76, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x38, 0x8e,
  0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x92, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x28, 0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x60, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x34,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x61, 0xa0, 0x11, 0x98, 0x20, 0x10,
  0xce, 0x04, 0x81, 0x78, 0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7,
  0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x64, 0xb0, 0x4d, 0x10, 0x08, 0x68,
  0x43, 0x62, 0x50, 0xcf, 0x61, 0x18, 0xd5, 0x21, 0x6d, 0x10, 0x26, 0x6b,
  0x82, 0x90, 0x06, 0xdc, 0x04, 0x81, 0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c,
  0x87, 0x91, 0x01, 0x1b, 0x02, 0x6d, 0x82, 0xb0, 0x06, 0xdd, 0x06, 0xe4,
  0xe0, 0x9e, 0xe3, 0x30, 0x0e, 0x60, 0x03, 0x62, 0x70, 0xcf, 0x61, 0x18,
  0x07, 0xb0, 0x41, 0xe8, 0xbc, 0x0d, 0xc4, 0x05, 0x6c, 0xdf, 0x04, 0x81,
  0x0d, 0xbc, 0x0d, 0x41, 0x18, 0x4c, 0x10, 0x04, 0x80, 0x68, 0x00, 0x35,
  0x55, 0xe4, 0x66, 0xd7, 0x14, 0x06, 0x47, 0x54, 0x17, 0xc6, 0x06, 0x15,
  0x26, 0x17, 0x26, 0xf6, 0xc6, 0x16, 0x06, 0x95, 0x86, 0x57, 0xc6, 0xc6,
  0x94, 0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0x66, 0x24, 0x57, 0x36, 0xe7,
  0x56, 0xc6, 0x46, 0x84, 0xaa, 0x08, 0x6b, 0xe8, 0xe9, 0x49, 0x8a, 0x68,
  0x82, 0x50, 0x50, 0x13, 0x84, 0xa2, 0xda, 0x10, 0x1c, 0x13, 0x84, 0xc2,
  0x9a, 0x20, 0x10, 0xd2, 0x06, 0x41, 0x0d, 0xd4, 0x60, 0xc3, 0x72, 0x94,
  0x81, 0x19, 0x9c, 0x01, 0x1a, 0xa4, 0x81, 0x91, 0x06, 0xc7, 0x19, 0xac,
  0xc1, 0x86, 0xc0, 0x98, 0x20, 0x14, 0xd7, 0x04, 0x81, 0x98, 0x36, 0x08,
  0x6a, 0xf0, 0x06, 0x1b, 0x16, 0xa3, 0x0c, 0xcc, 0xe0, 0x0c, 0xda, 0x20,
  0x0d, 0x0c, 0x37, 0x30, 0xce, 0x00, 0x0e, 0x36, 0x04, 0xd0, 0x04, 0xa1,
  0xc0, 0x36, 0x08, 0x6a, 0x50, 0x6d, 0x58, 0xa0, 0x32, 0x30, 0x83, 0x33,
  0x90, 0x83, 0x34, 0x30, 0xe6, 0x00, 0x3a, 0x03, 0x3a, 0x60, 0x31, 0xf4,
  0xc4, 0xf4, 0x24, 0xb5, 0x61, 0x51, 0x03, 0x3b, 0x30, 0x83, 0x33, 0x40,
  0x83, 0x34, 0x30, 0xdc, 0x40, 0x0d, 0xce, 0x00, 0x0e, 0x36, 0x10, 0x6c,
  0x10, 0x07, 0x75, 0x70, 0x07, 0x4c, 0xa6, 0xac, 0xbe, 0xa8, 0xc2, 0xe4,
  0xce, 0xca, 0xe8, 0x26, 0x08, 0x45, 0xb6, 0x61, 0x39, 0xf2, 0xc0, 0x0c,
  0xf4, 0x00, 0x0d, 0xce, 0xc0, 0x70, 0x83, 0xe3, 0x0c, 0xe0, 0x60, 0x43,
  0xb0, 0x07, 0x1b, 0x06, 0x3c, 0xe0, 0x03, 0x60, 0x43, 0x31, 0x06, 0x64,
  0xd0, 0x07, 0x60, 0x00, 0xb4, 0xc2, 0x13, 0x7b, 0xc3, 0x73, 0x19, 0x7b,
  0x6b, 0x83, 0x4b, 0x63, 0x2b, 0x93, 0x73, 0x79, 0x83, 0xa3, 0x4b, 0x7b,
  0x73, 0x9b, 0x9b, 0x12, 0x08, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2,
  0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x44, 0x15, 0x32, 0x3c, 0x17, 0xbb,
  0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0xc1, 0xd1, 0x84, 0x0c, 0xcf,
  0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x90, 0xd4, 0x21, 0xc3,
  0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63,
  0x9b, 0x12, 0x30, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea,
  0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x5f, 0x1d, 0x32, 0x3c, 0x17, 0xbb,
  0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x41,
  0x18, 0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a,
  0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec,
  0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33,
  0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d,
  0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e,
  0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
  0x06, 0x80, 0x06, 0x29, 0xeb, 0x35, 0x95, 0x09, 0x3c, 0x1d, 0x05, 0x2c,
  0x29, 0x10, 0x01, 0x81, 0xb3, 0x00, 0x29, 0x72, 0x11, 0x4b, 0x89, 0x18,
  0xc7, 0x84, 0x34, 0xc6, 0x17, 0x11, 0x52, 0x43, 0x2c, 0x66, 0x00, 0x0d,
  0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0xdb,
  0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95,
  0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x25, 0x48,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c,
  0x0b, 0x61, 0x04, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb,
  0xc5, 0x6d, 0x5b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x8b, 0x03, 0x0c,
  0x62, 0xf3, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x0d, 0x40, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10, 0x7e, 0x71, 0xdb, 0x26, 0x50, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43, 0x4d,
  0x7e, 0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x44,
  0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x15, 0x3c, 0xc3, 0xe5, 0x3b,
  0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xa4, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x94, 0x45, 0xa9, 0x94, 0x4b, 0x19, 0xcd, 0x00, 0x14,
  0x42, 0xd9, 0x15, 0x57, 0xc9, 0x95, 0x42, 0xb9, 0x15, 0x5e, 0xc9, 0x14,
  0x05, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x37, 0x46, 0x00, 0x82,
  0x20, 0x08, 0x82, 0xc1, 0x0c, 0xc0, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe,
  0x8d, 0x00, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xa0, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xb1, 0x01, 0x03, 0x06, 0x6b,
  0xb0, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x6c, 0x6d, 0xd0,
  0x84, 0xc1, 0x1a, 0xac, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x9b, 0x1b, 0x38, 0x5f, 0x1b, 0xb4, 0x01, 0x36, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xdb, 0x1b, 0x3c, 0x60, 0xd0, 0x06, 0x6d, 0x90, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0xc1, 0x06, 0x07, 0xd0, 0x18, 0xb8, 0x81, 0x1b,
  0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe4, 0x01, 0x85, 0x06,
  0x6f, 0x50, 0x06, 0xd5, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7a,
  0x50, 0xa5, 0x01, 0x1c, 0x6c, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x7b, 0x60, 0xa9, 0x41, 0x1c, 0x98, 0xc1, 0x35, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x06, 0x1f, 0x5c, 0x6b, 0x20, 0x07, 0x65, 0x80, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xd1, 0x07, 0x18, 0x1c, 0xcc, 0x41,
  0x1a, 0x64, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0x41, 0x16,
  0x07, 0x74, 0xf0, 0x69, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc,
  0x81, 0x26, 0x07, 0x75, 0xa0, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xa0, 0xb0, 0xdd, 0x81, 0x1d, 0xb0, 0x01, 0x37, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x46, 0x28, 0x70, 0x78, 0x70, 0x07, 0x62, 0xd0,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a, 0x5d, 0x1e, 0xe0,
  0x41, 0x1b, 0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x8c, 0x82,
  0xa7, 0x07, 0x79, 0xc0, 0x06, 0xdf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xa4, 0xf0, 0xe9, 0x81, 0x1e, 0xc0, 0x01, 0x18, 0x8c, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x51, 0x0a, 0x60, 0xb0, 0x07, 0x7b, 0x60, 0x06,
  0x61, 0x30, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0x0d, 0x29, 0x6c, 0xd1,
  0x23, 0x04, 0x96, 0xc5, 0x07, 0x7c, 0x20, 0x06, 0xd6, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x11,
  0x92, 0x7c, 0x8c, 0x90, 0xe4, 0x63, 0x84, 0x24, 0x1f, 0x23, 0x24, 0xf9,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x95, 0x0a, 0x69, 0x70, 0x89,
  0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8,
  0x30, 0xc5, 0xc7, 0x86, 0x29, 0x3e, 0x36, 0x4c, 0xf1, 0x19, 0x31, 0x58,
  0x00, 0x10, 0x04, 0x83, 0x67, 0x16, 0xd8, 0x60, 0x10, 0x82, 0x41, 0x08,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x9a, 0x85, 0x35, 0x08, 0xac,
  0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f, 0x2b, 0x06, 0xf9, 0x8c, 0x18, 0x2c,
  0x00, 0x08, 0x82, 0xc1, 0x83, 0x0b, 0x71, 0xe0, 0x75, 0x9c, 0xd7, 0x71,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xe1, 0x02, 0x1c, 0x04, 0x16,
  0x80, 0x81, 0x7c, 0x4c, 0x00, 0x03, 0xf9, 0xd8, 0x00, 0x06, 0xf2, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x4b, 0x17, 0xf4, 0x00, 0x0d, 0xf6,
  0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0xf2, 0x05, 0x3f, 0x60, 0x83, 0x5a,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0xc4, 0x41, 0x14, 0xe0, 0xe0, 0x0f,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2c, 0x73, 0x30, 0x05, 0x3a, 0x08, 0x87,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x03, 0x4b, 0x1d, 0x54, 0x01, 0x0f, 0xc8, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xc0, 0x72, 0x07, 0x57, 0xe0, 0x03, 0x73, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x2b, 0x05,
  0x2b, 0x3e, 0x66, 0x0a, 0x56, 0x7c, 0xec, 0x14, 0xa0, 0xf8, 0x18, 0x2a,
  0x40, 0xf1, 0xb1, 0x54, 0x50, 0xe2, 0x63, 0xaa, 0xa0, 0xc4, 0xc7, 0xc2,
  0xa0, 0x93, 0x8f, 0xb1, 0x42, 0x10, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xc0, 0xf2, 0x21, 0x17, 0x10, 0x31, 0x08, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x00, 0xd3, 0x07, 0x5d, 0x40, 0xc4, 0x20, 0xb0, 0x32, 0xc8,
  0xe4, 0x63, 0xb0, 0x10, 0xc4, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xb0, 0x7e, 0xe8, 0x05, 0xc5, 0x0c, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xc0, 0xfc, 0xc1, 0x17, 0x14, 0x33, 0x08, 0x2c, 0x0d, 0x2a, 0xf9,
  0x18, 0x2d, 0x04, 0xf1, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x2c,
  0x24, 0xc2, 0x81, 0x51, 0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x30, 0x91, 0x10, 0x07, 0x46, 0x0d, 0x82, 0xe1, 0x88, 0x04, 0x17, 0x88,
  0x6f, 0x38, 0xc2, 0xc8, 0x05, 0xe2, 0x1b, 0x8e, 0x18, 0x74, 0x81, 0xf8,
  0xa6, 0x1b, 0x76, 0x81, 0x17, 0x86, 0xe9, 0x06, 0x5e, 0xe8, 0x85, 0x61,
  0xba, 0xa1, 0x17, 0x7c, 0x61, 0xb0, 0xe1, 0x91, 0x8f, 0x0d, 0x8c, 0x7c,
  0x6c, 0x48, 0xe4, 0x63, 0x83, 0x1b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0xb0, 0x96, 0x68, 0x87, 0xe1, 0x0c, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xc0, 0x5c, 0xc2, 0x1d, 0x06, 0x30, 0x08, 0xcc, 0x80,
  0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0x06, 0x13, 0xf0,
  0x60, 0xa4, 0x41, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x58, 0x4c,
  0xc4, 0x83, 0x21, 0x06, 0x81, 0x25, 0x72, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xc0, 0x66, 0x62, 0x1e, 0x92, 0x35, 0x08, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x00, 0xa3, 0x09, 0x7a, 0x48, 0xc8, 0x20, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xcb, 0x26, 0xec, 0x81, 0x1c, 0x5e,
  0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x6c,
  0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x81, 0xd5, 0x13, 0xfd, 0xb0, 0x0e, 0x32, 0x31, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76, 0x0c, 0xf0,
  0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0xec, 0x17, 0x06, 0xf9, 0xd8,
  0x2f, 0x0c, 0xf2, 0xb1, 0x5f, 0x18, 0xe4, 0x63, 0xfa, 0x50, 0x0b, 0xf1,
  0xb1, 0x7d, 0xa8, 0x85, 0xf8, 0x18, 0x3f, 0xd4, 0x42, 0x7c, 0x46, 0x0c,
  0x16, 0x00, 0x04, 0xc1, 0xe0, 0x69, 0x0b, 0x93, 0x18, 0x84, 0x60, 0x16,
  0x64, 0x21, 0x16, 0x2c, 0x10, 0x09, 0xf9, 0x58, 0x50, 0x0b, 0xf2, 0x31,
  0xa1, 0x16, 0xe4, 0x63, 0x43, 0x2d, 0xc8, 0xc7, 0x90, 0x21, 0x3e, 0x86,
  0x0c, 0xf1, 0x31, 0x64, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0x74, 0xc1, 0x16, 0x81, 0x05, 0x28, 0x01, 0x1f, 0x0b, 0x56, 0x42,
  0x3e, 0x66, 0x04, 0xf4, 0xb1, 0xc0, 0x25, 0xe0, 0x63, 0xc7, 0x40, 0x1f,
  0x0b, 0x60, 0x02, 0x3e, 0xc3, 0x11, 0x48, 0x4b, 0x08, 0xdf, 0x74, 0x83,
  0x4b, 0xbc, 0x44, 0x30, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06, 0xcd, 0x5f,
  0xd8, 0x44, 0x4b, 0xac, 0x44, 0x31, 0x04, 0x31, 0x71, 0x17, 0x77, 0xd1,
  0x13, 0x31, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x60, 0x04, 0x3e, 0xc8, 0xc7, 0x88, 0x7c, 0x90,
  0x8f, 0x11, 0xfa, 0x20, 0x1f, 0x23, 0xf6, 0x41, 0x3e, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xf0, 0x9c, 0x06, 0x58, 0xc8, 0x43, 0x3c, 0xc0, 0x43,
  0x3b, 0xb0, 0xc3, 0x3a, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x55,
  0x1a, 0x65, 0x31, 0x13, 0xa2, 0x31, 0x9a, 0x10, 0x04, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0x10, 0xa5, 0x46, 0x68, 0x0c, 0xd6, 0x13, 0x41, 0x7c,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x60, 0x52, 0x0d, 0xb6, 0x08, 0x7a,
  0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0xd6, 0x70, 0x8b, 0xc0,
  0x82, 0x42, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xb9, 0x46,
  0x5c, 0x04, 0xa3, 0x09, 0x08, 0x60, 0x81, 0x20, 0x1f, 0x7b, 0xd6, 0x20,
  0x3e, 0xf6, 0xac, 0x41, 0x7c, 0xec, 0x59, 0x83, 0xf8, 0x18, 0x31, 0xc8,
  0xc7, 0x8a, 0x41, 0x3e, 0x66, 0x0c, 0xf2, 0xb1, 0x21, 0x0e, 0xe0, 0x63,
  0x43, 0x1c, 0xc0, 0xc7, 0x86, 0x38, 0x80, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x58, 0xb8, 0x81, 0x17, 0x66, 0x41, 0x1b, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0x43, 0x26, 0x1f, 0x1b,
  0x34, 0xf9, 0xd8, 0xb0, 0xc9, 0xc7, 0x94, 0x01, 0x3e, 0xa6, 0x0c, 0xf0,
  0x31, 0x65, 0x80, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x58, 0xe2,
  0x21, 0x1a, 0x70, 0x81, 0x1a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x60, 0x83, 0x4f, 0xc8, 0xc7, 0x86, 0x9f, 0x90, 0x8f,
  0x0d, 0x60, 0x21, 0x1f, 0x1b, 0x94, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x06,
  0x25, 0x3e, 0x36, 0xbc, 0x85, 0x7c, 0x6c, 0x80, 0x0b, 0xf9, 0xd8, 0x10,
  0x17, 0xf2, 0xb1, 0x01, 0x82, 0x8f, 0x0d, 0x10, 0x7c, 0x6c, 0x80, 0xe0,
  0x33, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc8, 0x7d, 0xbc, 0x86, 0x7b,
  0xb8, 0x07, 0x79, 0x0c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xdc,
  0xc7, 0x6b, 0xb8, 0x87, 0x7b, 0xe4, 0x86, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc8, 0x7d, 0xbc, 0x86, 0x7b, 0xb8, 0xc7, 0x78, 0x04, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xdc, 0xc7, 0x6b, 0xb8, 0x87, 0x7b,
  0x84, 0x87, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x8c, 0xd0, 0x74, 0x5c,
  0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c, 0x05, 0xb9, 0xd0, 0x2a,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x19, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xed, 0x98, 0xdd, 0x6b, 0x5c, 0x45, 0x14, 0xc0, 0xcf, 0xcc,
  0xdc, 0x8f, 0xb9, 0x73, 0xef, 0x9d, 0xdd, 0x6c, 0xb6, 0xbb, 0x9b, 0x75,
  0x77, 0x93, 0x2c, 0xdb, 0x75, 0x9b, 0x56, 0x89, 0xc5, 0x94, 0x0a, 0x05,
  0x45, 0xda, 0x08, 0xc6, 0xd2, 0x40, 0xf0, 0xaa, 0x60, 0x4a, 0x23, 0x84,
  0x26, 0x6d, 0x88, 0xa5, 0x7e, 0xe0, 0x43, 0x58, 0xaf, 0x10, 0xb0, 0x62,
  0x05, 0xff, 0x03, 0xfb, 0xb0, 0x2f, 0x82, 0x82, 0x0f, 0x45, 0x8b, 0xd6,
  0x9b, 0x68, 0x05, 0xe7, 0x0f, 0x70, 0xe9, 0x9b, 0xf8, 0xe2, 0x9b, 0xa0,
  0x96, 0x7d, 0x28, 0xa1, 0x24, 0x9e, 0x7b, 0xef, 0x2e, 0xd9, 0x34, 0x0d,
  0x89, 0x3e, 0x2d, 0xb2, 0x07, 0x0e, 0xe7, 0xce, 0x39, 0xbf, 0x99, 0x33,
  0x73, 0xcf, 0x7e, 0x30, 0x67, 0x72, 0x66, 0xe6, 0x2c, 0x21, 0x00, 0xe9,
  0x34, 0x44, 0x62, 0xc4, 0x06, 0xfe, 0x0c, 0xbe, 0xfc, 0xf5, 0x20, 0xfa,
  0xd5, 0xbf, 0xe4, 0x3b, 0x4a, 0xdb, 0xf3, 0x4e, 0xc3, 0x7f, 0x93, 0xce,
  0x3a, 0xf7, 0x65, 0x3c, 0x5e, 0x67, 0xdd, 0x51, 0xb9, 0x8b, 0xbf, 0x95,
  0x8a, 0x6d, 0x61, 0x30, 0xb6, 0x7a, 0x47, 0x09, 0x85, 0xf5, 0x2e, 0x2e,
  0x07, 0xbf, 0x69, 0xa4, 0x6b, 0xec, 0xb7, 0xf9, 0xd0, 0x77, 0x0a, 0xf5,
  0x76, 0x7b, 0x6c, 0x40, 0x94, 0x90, 0x1a, 0x24, 0x81, 0x21, 0x42, 0x0d,
  0x6a, 0xe2, 0x91, 0x28, 0x35, 0x58, 0x02, 0x03, 0x8c, 0xc2, 0xff, 0x5c,
  0x34, 0xd4, 0x42, 0xd7, 0x73, 0x78, 0xe0, 0x24, 0x6a, 0xa2, 0x8b, 0x09,
  0x3f, 0x4b, 0x3f, 0x45, 0x4f, 0xfe, 0x5a, 0xb7, 0x7e, 0x9a, 0x83, 0xfb,
  0x8f, 0x5e, 0x75, 0x27, 0x47, 0x90, 0x33, 0x0f, 0xc0, 0xb1, 0x90, 0x73,
  0x0e, 0xc8, 0x19, 0x7b, 0x73, 0xe6, 0x10, 0x9c, 0x77, 0x5d, 0x7a, 0x3e,
  0x51, 0xc0, 0xfd, 0x91, 0x47, 0x71, 0x8b, 0x77, 0xcd, 0x21, 0x8a, 0xa1,
  0xc5, 0xbb, 0xc8, 0xc1, 0xde, 0xdc, 0x42, 0x9b, 0x5b, 0xd8, 0x87, 0xbb,
  0xd4, 0xe6, 0x2e, 0xed, 0xc3, 0x5d, 0x6e, 0x73, 0x97, 0xf7, 0xe1, 0x76,
  0x9e, 0x37, 0x11, 0xbd, 0x17, 0x77, 0xd7, 0x89, 0xb7, 0x50, 0xa0, 0x2f,
  0x3d, 0x25, 0xfd, 0x9a, 0xf4, 0x9e, 0xf4, 0x6b, 0xd2, 0x7b, 0xd2, 0xaf,
  0x49, 0xef, 0x49, 0xbf, 0x26, 0xbd, 0x27, 0xfd, 0x9a, 0xf4, 0x9e, 0xf4,
  0x6b, 0xd2, 0xbb, 0xf2, 0xc9, 0x1d, 0xbf, 0x59, 0xba, 0xb3, 0xc9, 0x4e,
  0xd9, 0x7f, 0xbc, 0xa2, 0x3f, 0xf0, 0x9b, 0xc5, 0x89, 0x4d, 0x76, 0xf3,
  0xda, 0xdf, 0x3f, 0x33, 0xb8, 0xb1, 0x56, 0xd7, 0x6e, 0x05, 0x75, 0xb1,
  0x19, 0x48, 0xf6, 0x20, 0x70, 0xb7, 0x26, 0xae, 0x45, 0x37, 0x1d, 0x8b,
  0x2b, 0xe0, 0x8e, 0x72, 0xd8, 0xcd, 0xe0, 0x07, 0xf6, 0x75, 0xb0, 0xc5,
  0xbe, 0x09, 0xbe, 0x38, 0x47, 0x06, 0x88, 0x65, 0x29, 0x10, 0x49, 0x95,
  0x87, 0x63, 0xad, 0x1b, 0x00, 0x1b, 0x84, 0xbb, 0x0a, 0xf4, 0x11, 0x45,
  0x75, 0x21, 0x89, 0x18, 0x50, 0x79, 0x36, 0xde, 0x1a, 0x41, 0x3f, 0x68,
  0xc7, 0x14, 0xd1, 0x47, 0x15, 0x33, 0x85, 0x07, 0x46, 0x4d, 0xe5, 0xcd,
  0xf1, 0xd6, 0x85, 0x90, 0xd7, 0x9e, 0x50, 0xe0, 0xe4, 0x94, 0x66, 0x09,
  0x8f, 0x18, 0x47, 0x14, 0xb8, 0x05, 0x05, 0x72, 0x5c, 0x41, 0xe2, 0x69,
  0xa5, 0xcf, 0x8a, 0x3a, 0x98, 0x27, 0xd5, 0xfb, 0xeb, 0xd7, 0xd7, 0x48,
  0x32, 0xc9, 0x21, 0x93, 0xe2, 0x34, 0x9d, 0xe6, 0x00, 0xaf, 0x2b, 0x20,
  0xaf, 0x2a, 0x3e, 0x90, 0x91, 0xc4, 0x19, 0x52, 0xc4, 0x2d, 0x2a, 0xdd,
  0x2c, 0x49, 0x5d, 0xd7, 0xa4, 0x35, 0x98, 0xf1, 0x74, 0x8b, 0x4b, 0x22,
  0x9f, 0x52, 0xe9, 0x92, 0x21, 0x73, 0x25, 0x21, 0xc5, 0xa1, 0x8c, 0x57,
  0x28, 0x95, 0x25, 0x49, 0x4c, 0x28, 0x06, 0x53, 0xcd, 0x43, 0x9a, 0x6c,
  0xe8, 0x68, 0x87, 0xb4, 0x4c, 0xc3, 0x9e, 0xcd, 0xd4, 0x89, 0xf9, 0x8c,
  0x22, 0x30, 0x8b, 0xb1, 0xa3, 0xcd, 0x0c, 0xa7, 0x23, 0x84, 0xbc, 0x86,
  0xe3, 0xa9, 0x66, 0x51, 0x9b, 0x44, 0xee, 0x68, 0x33, 0x8f, 0x3e, 0x8b,
  0xdd, 0x0e, 0x7c, 0x83, 0xaf, 0xf8, 0xec, 0xa3, 0x80, 0x67, 0x93, 0x92,
  0xa0, 0xbf, 0x14, 0xfa, 0xb3, 0x29, 0x39, 0x00, 0xa4, 0x79, 0x0f, 0x3e,
  0x27, 0xbe, 0xe0, 0x2b, 0x22, 0x9b, 0x96, 0x3e, 0xfb, 0x3e, 0xd0, 0x6c,
  0xa7, 0x85, 0xaf, 0x79, 0x63, 0xc0, 0x34, 0x64, 0xaa, 0x1d, 0xe7, 0x7a,
  0x59, 0xfa, 0x94, 0xaf, 0x94, 0x52, 0x3c, 0x8a, 0x95, 0x8d, 0x9a, 0x4c,
  0xd9, 0x42, 0xda, 0x98, 0xcb, 0x1a, 0x9e, 0x6c, 0x0c, 0xb6, 0xb9, 0x11,
  0xa3, 0x22, 0x6d, 0xf6, 0x6d, 0x50, 0x15, 0x35, 0xcf, 0xc6, 0x3c, 0xc2,
  0xa2, 0xb5, 0x41, 0x46, 0xe5, 0xa8, 0x51, 0x95, 0x15, 0x51, 0xf1, 0x7c,
  0xf6, 0x71, 0x40, 0x71, 0x8e, 0xad, 0x97, 0x1b, 0x3c, 0xb4, 0xc3, 0xd5,
  0xc6, 0x61, 0x51, 0xf5, 0xc2, 0x33, 0xd9, 0xd6, 0x58, 0xa3, 0x46, 0x2b,
  0xde, 0x18, 0xad, 0x21, 0xf7, 0x5d, 0x70, 0x84, 0x56, 0x3d, 0x46, 0x58,
  0x53, 0xff, 0x1d, 0xd3, 0xeb, 0xf1, 0x9e, 0xf2, 0x66, 0xa5, 0x85, 0x15,
  0xdd, 0x28, 0xd2, 0x78, 0x1f, 0x79, 0xa8, 0x45, 0x96, 0xbd, 0x6c, 0xd4,
  0x7d, 0x41, 0x57, 0x92, 0xb8, 0x8e, 0x53, 0x79, 0x1e, 0x52, 0x68, 0xdd,
  0xea, 0x24, 0x0c, 0xa2, 0x95, 0xb5, 0x17, 0x41, 0xef, 0x9c, 0x03, 0xc7,
  0xdc, 0xfc, 0x91, 0x85, 0xfb, 0xa6, 0x68, 0xc3, 0xfa, 0x88, 0x84, 0xff,
  0x57, 0x16, 0xa6, 0x68, 0x06, 0x17, 0xba, 0xf2, 0xec, 0xf5, 0x35, 0x70,
  0x9f, 0xc4, 0xf7, 0x4d, 0x25, 0x1d, 0xd2, 0x24, 0x7b, 0xcc, 0x91, 0xd9,
  0x51, 0x29, 0xc9, 0xe1, 0x9c, 0xa4, 0x8f, 0xe7, 0xa5, 0xfe, 0x82, 0x56,
  0xaf, 0x9f, 0xdc, 0xfc, 0x70, 0x0c, 0xe7, 0x70, 0x38, 0x03, 0x36, 0x5e,
  0xa6, 0xad, 0xe1, 0xb2, 0x27, 0xac, 0xb2, 0xa7, 0x51, 0xad, 0x79, 0xaf,
  0x4c, 0xc1, 0xe7, 0x7c, 0x44, 0x3b, 0xc7, 0xeb, 0x45, 0xce, 0xa5, 0x36,
  0xc5, 0xeb, 0x05, 0x9e, 0x96, 0xd1, 0xba, 0x98, 0x13, 0xdc, 0xd2, 0x6a,
  0x58, 0x1f, 0xe2, 0x1e, 0x5f, 0x8d, 0xf6, 0xe0, 0x9e, 0x58, 0x65, 0x6e,
  0x45, 0x0a, 0x22, 0x3d, 0xc1, 0x72, 0x9e, 0xc8, 0xe6, 0x3d, 0xa8, 0x48,
  0x8f, 0x54, 0x72, 0x1e, 0xad, 0xe0, 0x33, 0x32, 0x9a, 0x13, 0xcf, 0xd1,
  0x9d, 0xe3, 0xab, 0xe1, 0x67, 0xc0, 0x70, 0x4e, 0xac, 0x42, 0x11, 0x99,
  0x62, 0xce, 0x63, 0xc5, 0x90, 0xd9, 0xeb, 0x4e, 0xfc, 0x01, 0xfa, 0x3f,
  0xeb, 0x39, 0xed, 0xb4, 0x7f, 0x3a, 0xd7, 0x62, 0xfc, 0x52, 0xc0, 0xc3,
  0x3e, 0x8b, 0xec, 0xf4, 0x85, 0x2a, 0xe8, 0x6e, 0x9f, 0xcd, 0xb6, 0xe7,
  0x74, 0x1a, 0x39, 0x8e, 0xd6, 0xb5, 0x20, 0xc4, 0x3d, 0x0f, 0x8e, 0x49,
  0x08, 0xdb, 0xf9, 0x3b, 0xa2, 0x75, 0x25, 0x21, 0x1d, 0x0e, 0x93, 0x10,
  0xb6, 0x73, 0x2f, 0x1a, 0x26, 0xa1, 0x0f, 0xdd, 0xe1, 0xb5, 0x28, 0x49,
  0x2c, 0xdb, 0xff, 0x15, 0x35, 0x98, 0x9e, 0x39, 0xb3, 0xfc, 0xee, 0xd9,
  0xb9, 0x2b, 0xa7, 0xdf, 0x99, 0x5b, 0x9a, 0x9e, 0xbb, 0x3a, 0xf7, 0xc6,
  0x9b, 0x4b, 0x73, 0xd3, 0x8b, 0xef, 0xcd, 0x2f, 0xbd, 0xb4, 0x78, 0x71,
  0xe1, 0xed, 0xc5, 0xe5, 0x8b, 0x93, 0x57, 0xe7, 0xdf, 0x5a, 0x9e, 0x5f,
  0xea, 0xf4, 0xc4, 0x7e, 0x69, 0xf7, 0xa8, 0x9e, 0x43, 0x0d, 0xfb, 0x27,
  0x17, 0xc2, 0x0e, 0x15, 0x6c, 0xb7, 0xa4, 0x56, 0xc2, 0x31, 0xdb, 0xee,
  0x91, 0xb5, 0xa2, 0xb8, 0xb9, 0xbd, 0x37, 0x1a, 0xc7, 0xe3, 0x31, 0xc0,
  0x3f, 0x9d, 0xc7, 0xb5, 0x2d, 0x00, 0x00, 0x00, 0x8d, 0xc3, 0x1e, 0x61,
  0x3c, 0x0b, 0xec, 0x57, 0x05, 0xfc, 0x1d, 0x1a, 0xb4, 0x88, 0xf1, 0xc7
};
