#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_PSTextured.pdb
; shader hash: d221279b07f898e485d625eeb3c7d205
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSTextured
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;                                   texture     f32        cube      T3             t4     1
;                                   texture     f32        cube      T4             t5     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 1 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSTextured() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = fsub fast float %18, %12
  %22 = fsub fast float %19, %13
  %23 = fsub fast float %20, %14
  %24 = call float @dx.op.dot3.f32(i32 55, float %21, float %22, float %23, float %21, float %22, float %23)  ; Dot3(ax,ay,az,bx,by,bz)
  %25 = call float @dx.op.unary.f32(i32 25, float %24)  ; Rsqrt(value)
  %26 = fmul fast float %21, %25
  %27 = fmul fast float %22, %25
  %28 = fmul fast float %23, %25
  %29 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %4, %dx.types.Handle %7, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %30 = extractvalue %dx.types.ResRet.f32 %29, 0
  %31 = extractvalue %dx.types.ResRet.f32 %29, 1
  %32 = fmul fast float %30, 2.000000e+00
  %33 = fmul fast float %31, 2.000000e+00
  %34 = fadd fast float %32, -1.000000e+00
  %35 = fadd fast float %33, -1.000000e+00
  %36 = call float @dx.op.dot2.f32(i32 54, float %34, float %35, float %34, float %35)  ; Dot2(ax,ay,bx,by)
  %37 = fsub fast float 1.000000e+00, %36
  %38 = call float @dx.op.unary.f32(i32 24, float %37)  ; Sqrt(value)
  %39 = call float @dx.op.unary.f32(i32 83, float %12)  ; DerivCoarseX(value)
  %40 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %41 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %42 = call float @dx.op.unary.f32(i32 84, float %12)  ; DerivCoarseY(value)
  %43 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %44 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %45 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %46 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %47 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %48 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %49 = fmul fast float %44, %40
  %50 = fmul fast float %43, %41
  %51 = fsub fast float %49, %50
  %52 = fmul fast float %42, %41
  %53 = fmul fast float %44, %39
  %54 = fsub fast float %52, %53
  %55 = fmul fast float %43, %39
  %56 = fmul fast float %42, %40
  %57 = fsub fast float %55, %56
  %58 = fmul fast float %57, %43
  %59 = fmul fast float %54, %44
  %60 = fsub fast float %58, %59
  %61 = fmul fast float %51, %44
  %62 = fmul fast float %57, %42
  %63 = fsub fast float %61, %62
  %64 = fmul fast float %54, %42
  %65 = fmul fast float %51, %43
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %54, %41
  %68 = fmul fast float %57, %40
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %57, %39
  %71 = fmul fast float %51, %41
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %51, %40
  %74 = fmul fast float %54, %39
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %60, %45
  %77 = call float @dx.op.tertiary.f32(i32 46, float %47, float %69, float %76)  ; FMad(a,b,c)
  %78 = fmul fast float %63, %45
  %79 = call float @dx.op.tertiary.f32(i32 46, float %47, float %72, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %66, %45
  %81 = call float @dx.op.tertiary.f32(i32 46, float %47, float %75, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.dot3.f32(i32 55, float %77, float %79, float %81, float %77, float %79, float %81)  ; Dot3(ax,ay,az,bx,by,bz)
  %83 = call float @dx.op.unary.f32(i32 25, float %82)  ; Rsqrt(value)
  %84 = fmul fast float %60, %46
  %85 = call float @dx.op.tertiary.f32(i32 46, float %48, float %69, float %84)  ; FMad(a,b,c)
  %86 = fmul fast float %63, %46
  %87 = call float @dx.op.tertiary.f32(i32 46, float %48, float %72, float %86)  ; FMad(a,b,c)
  %88 = fmul fast float %66, %46
  %89 = call float @dx.op.tertiary.f32(i32 46, float %48, float %75, float %88)  ; FMad(a,b,c)
  %90 = call float @dx.op.dot3.f32(i32 55, float %85, float %87, float %89, float %85, float %87, float %89)  ; Dot3(ax,ay,az,bx,by,bz)
  %91 = call float @dx.op.unary.f32(i32 25, float %90)  ; Rsqrt(value)
  %92 = fmul fast float %91, %85
  %93 = fmul fast float %91, %87
  %94 = fmul fast float %91, %89
  %95 = fmul fast float %77, %34
  %96 = fmul fast float %95, %83
  %97 = call float @dx.op.tertiary.f32(i32 46, float %35, float %92, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %38, float %9, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %79, %34
  %100 = fmul fast float %99, %83
  %101 = call float @dx.op.tertiary.f32(i32 46, float %35, float %93, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %38, float %10, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %81, %34
  %104 = fmul fast float %103, %83
  %105 = call float @dx.op.tertiary.f32(i32 46, float %35, float %94, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %38, float %11, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.dot3.f32(i32 55, float %98, float %102, float %106, float %98, float %102, float %106)  ; Dot3(ax,ay,az,bx,by,bz)
  %108 = call float @dx.op.unary.f32(i32 25, float %107)  ; Rsqrt(value)
  %109 = fmul fast float %108, %98
  %110 = fmul fast float %108, %102
  %111 = fmul fast float %108, %106
  %112 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %5, %dx.types.Handle %7, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %113 = extractvalue %dx.types.ResRet.f32 %112, 0
  %114 = extractvalue %dx.types.ResRet.f32 %112, 1
  %115 = extractvalue %dx.types.ResRet.f32 %112, 2
  %116 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %7, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %117 = extractvalue %dx.types.ResRet.f32 %116, 0
  %118 = extractvalue %dx.types.ResRet.f32 %116, 1
  %119 = extractvalue %dx.types.ResRet.f32 %116, 2
  %120 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %26, float %27, float %28)  ; Dot3(ax,ay,az,bx,by,bz)
  %121 = call float @dx.op.unary.f32(i32 7, float %120)  ; Saturate(value)
  %122 = fmul fast float %118, %118
  %123 = fmul fast float %119, %113
  %124 = fmul fast float %119, %114
  %125 = fmul fast float %119, %115
  %126 = fsub fast float %113, %123
  %127 = fsub fast float %114, %124
  %128 = fsub fast float %115, %125
  %129 = fmul fast float %126, %117
  %130 = fmul fast float %127, %117
  %131 = fmul fast float %128, %117
  %132 = fadd fast float %113, 0xBFA47AE140000000
  %133 = fadd fast float %114, 0xBFA47AE140000000
  %134 = fadd fast float %115, 0xBFA47AE140000000
  %135 = fmul fast float %119, %132
  %136 = fmul fast float %119, %133
  %137 = fmul fast float %119, %134
  %138 = fadd fast float %135, 0x3FA47AE140000000
  %139 = fadd fast float %136, 0x3FA47AE140000000
  %140 = fadd fast float %137, 0x3FA47AE140000000
  %141 = fmul fast float %138, %117
  %142 = fmul fast float %139, %117
  %143 = fmul fast float %140, %117
  br label %144

; <label>:144                                     ; preds = %144, %0
  %145 = phi float [ 0.000000e+00, %0 ], [ %241, %144 ]
  %146 = phi float [ 0.000000e+00, %0 ], [ %242, %144 ]
  %147 = phi float [ 0.000000e+00, %0 ], [ %243, %144 ]
  %148 = phi i32 [ 0, %0 ], [ %244, %144 ]
  %149 = add nuw nsw i32 %148, 16
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %149)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = fsub fast float -0.000000e+00, %151
  %155 = fsub fast float -0.000000e+00, %152
  %156 = fsub fast float -0.000000e+00, %153
  %157 = call float @dx.op.dot3.f32(i32 55, float %154, float %155, float %156, float %154, float %155, float %156)  ; Dot3(ax,ay,az,bx,by,bz)
  %158 = call float @dx.op.unary.f32(i32 25, float %157)  ; Rsqrt(value)
  %159 = fmul fast float %158, %154
  %160 = fmul fast float %158, %155
  %161 = fmul fast float %158, %156
  %162 = fadd fast float %159, %26
  %163 = fadd fast float %160, %27
  %164 = fadd fast float %161, %28
  %165 = call float @dx.op.dot3.f32(i32 55, float %162, float %163, float %164, float %162, float %163, float %164)  ; Dot3(ax,ay,az,bx,by,bz)
  %166 = call float @dx.op.unary.f32(i32 25, float %165)  ; Rsqrt(value)
  %167 = fmul fast float %162, %166
  %168 = fmul fast float %163, %166
  %169 = fmul fast float %164, %166
  %170 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %159, float %160, float %161)  ; Dot3(ax,ay,az,bx,by,bz)
  %171 = call float @dx.op.unary.f32(i32 7, float %170)  ; Saturate(value)
  %172 = call float @dx.op.dot3.f32(i32 55, float %159, float %160, float %161, float %167, float %168, float %169)  ; Dot3(ax,ay,az,bx,by,bz)
  %173 = call float @dx.op.unary.f32(i32 7, float %172)  ; Saturate(value)
  %174 = call float @dx.op.dot3.f32(i32 55, float %109, float %110, float %111, float %167, float %168, float %169)  ; Dot3(ax,ay,az,bx,by,bz)
  %175 = call float @dx.op.unary.f32(i32 7, float %174)  ; Saturate(value)
  %176 = fmul fast float %118, 2.000000e+00
  %177 = fmul fast float %173, %173
  %178 = fmul fast float %177, %176
  %179 = fadd fast float %178, -5.000000e-01
  %180 = fsub fast float 1.000000e+00, %171
  %181 = fmul fast float %180, %180
  %182 = fmul fast float %181, %181
  %183 = fmul fast float %182, %180
  %184 = fmul fast float %183, %179
  %185 = fadd fast float %184, 1.000000e+00
  %186 = fsub fast float 1.000000e+00, %121
  %187 = fmul fast float %186, %186
  %188 = fmul fast float %187, %187
  %189 = fmul fast float %188, %186
  %190 = fmul fast float %189, %179
  %191 = fadd fast float %190, 1.000000e+00
  %192 = fmul fast float %185, %191
  %193 = fmul fast float %122, %122
  %194 = fadd fast float %193, -1.000000e+00
  %195 = fmul fast float %175, %175
  %196 = fmul fast float %195, %194
  %197 = fadd fast float %196, 1.000000e+00
  %198 = fmul fast float %197, %197
  %199 = fmul fast float %198, 0x400921FB60000000
  %200 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %199)  ; FMax(a,b)
  %201 = fdiv fast float %193, %200
  %202 = fsub fast float 1.000000e+00, %141
  %203 = fsub fast float 1.000000e+00, %142
  %204 = fsub fast float 1.000000e+00, %143
  %205 = fsub fast float 1.000000e+00, %173
  %206 = fmul fast float %205, %205
  %207 = fmul fast float %206, %206
  %208 = fmul fast float %207, %205
  %209 = fmul fast float %208, %202
  %210 = fmul fast float %208, %203
  %211 = fmul fast float %208, %204
  %212 = fadd fast float %209, %141
  %213 = fadd fast float %210, %142
  %214 = fadd fast float %211, %143
  %215 = fsub fast float 1.000000e+00, %177
  %216 = fmul fast float %193, 2.500000e-01
  %217 = fmul fast float %216, %215
  %218 = fadd fast float %217, %177
  %219 = fdiv fast float 1.000000e+00, %218
  %220 = fmul fast float %219, %201
  %221 = fmul fast float %220, %212
  %222 = fmul fast float %220, %213
  %223 = fmul fast float %220, %214
  %224 = add nuw nsw i32 %148, 19
  %225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 %224)  ; CBufferLoadLegacy(handle,regIndex)
  %226 = extractvalue %dx.types.CBufRet.f32 %225, 0
  %227 = extractvalue %dx.types.CBufRet.f32 %225, 1
  %228 = extractvalue %dx.types.CBufRet.f32 %225, 2
  %229 = fmul fast float %226, %171
  %230 = fmul fast float %227, %171
  %231 = fmul fast float %228, %171
  %232 = fmul fast float %192, %129
  %233 = fmul fast float %192, %130
  %234 = fmul fast float %192, %131
  %235 = fadd fast float %221, %232
  %236 = fadd fast float %222, %233
  %237 = fadd fast float %223, %234
  %238 = fmul fast float %229, %235
  %239 = fmul fast float %230, %236
  %240 = fmul fast float %231, %237
  %241 = fadd fast float %238, %145
  %242 = fadd fast float %239, %146
  %243 = fadd fast float %240, %147
  %244 = add nuw nsw i32 %148, 1
  %245 = icmp eq i32 %244, 3
  br i1 %245, label %246, label %144

; <label>:246                                     ; preds = %144
  %247 = extractvalue %dx.types.ResRet.f32 %112, 3
  %248 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %6, float %109, float %110, float %111, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %249 = extractvalue %dx.types.ResRet.f32 %248, 0
  %250 = extractvalue %dx.types.ResRet.f32 %248, 1
  %251 = extractvalue %dx.types.ResRet.f32 %248, 2
  %252 = fmul fast float %249, %129
  %253 = fmul fast float %250, %130
  %254 = fmul fast float %251, %131
  %255 = fadd fast float %252, %241
  %256 = fadd fast float %253, %242
  %257 = fadd fast float %254, %243
  %258 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.i32 %258, 2
  %260 = sitofp i32 %259 to float
  %261 = fmul fast float %260, %118
  %262 = fsub fast float -0.000000e+00, %26
  %263 = fsub fast float -0.000000e+00, %27
  %264 = fsub fast float -0.000000e+00, %28
  %265 = call float @dx.op.dot3.f32(i32 55, float %262, float %263, float %264, float %109, float %110, float %111)  ; Dot3(ax,ay,az,bx,by,bz)
  %266 = fmul fast float %265, 2.000000e+00
  %267 = fmul fast float %266, %109
  %268 = fmul fast float %266, %110
  %269 = fmul fast float %266, %111
  %270 = fsub fast float %262, %267
  %271 = fsub fast float %263, %268
  %272 = fsub fast float %264, %269
  %273 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %6, float %270, float %271, float %272, float undef, i32 undef, i32 undef, i32 undef, float %261)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %274 = extractvalue %dx.types.ResRet.f32 %273, 0
  %275 = extractvalue %dx.types.ResRet.f32 %273, 1
  %276 = extractvalue %dx.types.ResRet.f32 %273, 2
  %277 = fmul fast float %274, %141
  %278 = fmul fast float %275, %142
  %279 = fmul fast float %276, %143
  %280 = fadd fast float %255, %277
  %281 = fadd fast float %256, %278
  %282 = fadd fast float %257, %279
  %283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.f32 %283, 3
  %285 = fmul fast float %284, %247
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %280)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %281)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %282)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %285)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!18}
!dx.entryPoints = !{!19}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !13, !15}
!6 = !{!7, !9, !10, !11, !12}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !8}
!11 = !{i32 3, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !8}
!12 = !{i32 4, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !8}
!13 = !{!14}
!14 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!15 = !{!16, !17}
!16 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!17 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!18 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0]}
!19 = !{void ()* @PSTextured, !"PSTextured", !20, !5, null}
!20 = !{!21, !31, null}
!21 = !{!22, !25, !28, !30}
!22 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 2, i32 0, i8 0, !24}
!23 = !{i32 0}
!24 = !{i32 3, i32 3}
!25 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 4, i32 1, i8 0, !27}
!26 = !{i32 1}
!27 = !{i32 3, i32 7}
!28 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !29, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!29 = !{i32 2}
!30 = !{i32 3, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!31 = !{!32}
!32 = !{i32 0, !"SV_Target", i8 9, i8 16, !23, i8 0, i32 1, i8 4, i32 0, i8 0, !33}
!33 = !{i32 3, i32 15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 35
;   num_shared_vgprs: 0
;   num_sgprs: 62
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 2560
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x9b2721d2, 0xe498f807                // 000000000000: D58021D2 03FF3727 E498F807
;   v_nop_xbox_data 0xee25d685, 0x05d2c7b3                // 00000000000C: D580D685 03FFDD25 05D2C7B3
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[22:23], exec                          // 00000000001C: BE96047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s18, s15                                // 000000000024: BE92030F
;   s_mov_b32     s2, s13                                 // 000000000028: BE82030D
;   s_mov_b32     s40, s9                                 // 00000000002C: BEA80309
;   s_mov_b32     s9, 0                                   // 000000000030: BE890380
;   s_mov_b32     s41, 0                                  // 000000000034: BEA90380
;   s_mov_b32     s11, 0                                  // 000000000038: BE8B0380
;   s_mov_b32     s13, 0                                  // 00000000003C: BE8D0380
;   s_mov_b32     s3, 0                                   // 000000000040: BE830380
;   s_mov_b32     s15, 0                                  // 000000000044: BE8F0380
;   s_mov_b32     s19, 0                                  // 000000000048: BE930380
;   s_load_dwordx8  s[32:39], s[2:3], null                // 00000000004C: F40C0801 FA000000
;   s_load_dwordx8  s[24:31], s[12:13], null              // 000000000054: F40C0606 FA000000
;   s_load_dwordx8  s[0:7], s[10:11], null                // 00000000005C: F40C0005 FA000000
;   s_load_dwordx8  s[48:55], s[40:41], null              // 000000000064: F40C0C14 FA000000
;   s_load_dwordx8  s[40:47], s[8:9], null                // 00000000006C: F40C0A04 FA000000
;   s_load_dwordx4  s[56:59], s[18:19], null              // 000000000074: F4080E09 FA000000
;   s_load_dwordx4  s[8:11], s[14:15], null               // 00000000007C: F4080207 FA000000
;   s_bitset1_b32  s17, 20                                // 000000000084: BE911D94
;   s_mov_b32     s18, -1                                 // 000000000088: BE9203C1
;   s_mov_b32     s19, lit(0x11014fac)                    // 00000000008C: BE9303FF 11014FAC
;   s_mov_b32     m0, s20                                 // 000000000094: BEFC0314
;   s_buffer_load_dwordx4  s[12:15], s[16:19], null       // 000000000098: F4280308 FA000000
;   v_interp_p1_f32  v6, v0, attr1.y                      // 0000000000A0: C8180500
;   v_interp_p1_f32  v2, v0, attr2.x                      // 0000000000A4: C8080800
;   v_interp_p1_f32  v3, v0, attr2.y                      // 0000000000A8: C80C0900
;   v_interp_p1_f32  v4, v0, attr2.z                      // 0000000000AC: C8100A00
;   v_interp_p1_f32  v23, v0, attr1.x                     // 0000000000B0: C85C0400
;   v_interp_p2_f32  v6, v1, attr1.y                      // 0000000000B4: C8190501
;   v_interp_p1_f32  v7, v0, attr1.z                      // 0000000000B8: C81C0600
;   v_interp_p1_f32  v8, v0, attr0.x                      // 0000000000BC: C8200000
;   v_interp_p1_f32  v9, v0, attr0.y                      // 0000000000C0: C8240100
;   v_interp_p2_f32  v23, v1, attr1.x                     // 0000000000C4: C85D0401
;   v_interp_p2_f32  v2, v1, attr2.x                      // 0000000000C8: C8090801
;   v_interp_p2_f32  v7, v1, attr1.z                      // 0000000000CC: C81D0601
;   v_interp_p2_f32  v8, v1, attr0.x                      // 0000000000D0: C8210001
;   v_interp_p2_f32  v9, v1, attr0.y                      // 0000000000D4: C8250101
;   v_interp_p2_f32  v3, v1, attr2.y                      // 0000000000D8: C80D0901
;   v_interp_p2_f32  v4, v1, attr2.z                      // 0000000000DC: C8110A01
;   ds_swizzle_b32  v14, v23 offset:32768                 // 0000000000E0: D8D48000 0E000017
;   ds_swizzle_b32  v15, v23 offset:32853                 // 0000000000E8: D8D48055 0F000017
;   ds_swizzle_b32  v5, v23 offset:32938                  // 0000000000F0: D8D480AA 05000017
;   s_waitcnt     lgkmcnt(0)                              // 0000000000F8: BF8CC07F
;   v_sub_f32     v1, s13, v6                             // 0000000000FC: 08020C0D
;   v_sub_f32     v0, s12, v23                            // 000000000100: 08002E0C
;   v_sub_f32     v10, s14, v7                            // 000000000104: 08140E0E
;   ds_swizzle_b32  v16, v6 offset:32768                  // 000000000108: D8D48000 10000006
;   ds_swizzle_b32  v17, v6 offset:32853                  // 000000000110: D8D48055 11000006
;   v_mul_legacy_f32  v11, v1, v1                         // 000000000118: 0E160301
;   ds_swizzle_b32  v6, v6 offset:32938                   // 00000000011C: D8D480AA 06000006
;   ds_swizzle_b32  v18, v7 offset:32768                  // 000000000124: D8D48000 12000007
;   ds_swizzle_b32  v19, v7 offset:32853                  // 00000000012C: D8D48055 13000007
;   ds_swizzle_b32  v7, v7 offset:32938                   // 000000000134: D8D480AA 07000007
;   v_fmac_f32    v11, v0, v0                             // 00000000013C: 56160100
;   ds_swizzle_b32  v21, v8 offset:32938                  // 000000000140: D8D480AA 15000008
;   ds_swizzle_b32  v20, v9 offset:32853                  // 000000000148: D8D48055 14000009
;   v_fmac_f32    v11, v10, v10                           // 000000000150: 5616150A
;   v_sub_f32     v15, v15, v14                           // 000000000154: 081E1D0F
;   v_sub_f32     v5, v5, v14                             // 000000000158: 080A1D05
;   v_rsq_f32     v11, v11                                // 00000000015C: 7E165D0B
;   ds_swizzle_b32  v14, v8 offset:32768                  // 000000000160: D8D48000 0E000008
;   s_waitcnt     lgkmcnt(7)                              // 000000000168: BF8CC77F
;   v_sub_f32     v17, v17, v16                           // 00000000016C: 08222111
;   s_waitcnt     lgkmcnt(6)                              // 000000000170: BF8CC67F
;   v_sub_f32     v6, v6, v16                             // 000000000174: 080C2106
;   ds_swizzle_b32  v16, v8 offset:32853                  // 000000000178: D8D48055 10000008
;   s_waitcnt     lgkmcnt(5)                              // 000000000180: BF8CC57F
;   v_sub_f32     v19, v19, v18                           // 000000000184: 08262513
;   s_waitcnt     lgkmcnt(4)                              // 000000000188: BF8CC47F
;   v_sub_f32     v7, v7, v18                             // 00000000018C: 080E2507
;   v_mul_legacy_f32  v12, v0, v11                        // 000000000190: 0E181700
;   v_mul_legacy_f32  v13, v1, v11                        // 000000000194: 0E1A1701
;   image_sample  v[0:1], v[8:9], s[48:55], s[8:11] dmask:0x3 dim:SQ_RSRC_IMG_2D // 000000000198: F0800308 004C0008
;   ds_swizzle_b32  v18, v9 offset:32768                  // 0000000001A0: D8D48000 12000009
;   v_mul_legacy_f32  v22, v6, v19                        // 0000000001A8: 0E2C2706
;   v_mul_legacy_f32  v23, v5, v17                        // 0000000001AC: 0E2E2305
;   v_mul_legacy_f32  v10, v10, v11                       // 0000000001B0: 0E14170A
;   v_fma_f32     v23, v6, v15, -v23                      // 0000000001B4: D54B0017 845E1F06
;   v_mul_legacy_f32  v25, v23, v5                        // 0000000001BC: 0E320B17
;   s_waitcnt     lgkmcnt(1)                              // 0000000001C0: BF8CC17F
;   v_sub_f32     v16, v16, v14                           // 0000000001C4: 08201D10
;   v_sub_f32     v14, v21, v14                           // 0000000001C8: 081C1D15
;   ds_swizzle_b32  v21, v9 offset:32938                  // 0000000001CC: D8D480AA 15000009
;   s_waitcnt     lgkmcnt(1)                              // 0000000001D4: BF8CC17F
;   v_sub_f32     v20, v20, v18                           // 0000000001D8: 08282514
;   s_waitcnt     lgkmcnt(0)                              // 0000000001DC: BF8CC07F
;   v_sub_f32     v18, v21, v18                           // 0000000001E0: 08242515
;   v_fma_f32     v21, v7, v17, -v22                      // 0000000001E4: D54B0015 845A2307
;   v_mul_legacy_f32  v22, v7, v15                        // 0000000001EC: 0E2C1F07
;   v_fma_f32     v22, v5, v19, -v22                      // 0000000001F0: D54B0016 845A2705
;   v_mul_legacy_f32  v24, v22, v7                        // 0000000001F8: 0E300F16
;   v_fma_f32     v7, v21, v7, -v25                       // 0000000001FC: D54B0007 84660F15
;   v_fma_f32     v24, v23, v6, -v24                      // 000000000204: D54B0018 84620D17
;   v_mul_legacy_f32  v6, v21, v6                         // 00000000020C: 0E0C0D15
;   v_fma_f32     v5, v22, v5, -v6                        // 000000000210: D54B0005 841A0B16
;   v_mul_legacy_f32  v6, v23, v17                        // 000000000218: 0E0C2317
;   v_fma_f32     v6, v22, v19, -v6                       // 00000000021C: D54B0006 841A2716
;   v_mul_legacy_f32  v19, v21, v19                       // 000000000224: 0E262715
;   v_fma_f32     v19, v23, v15, -v19                     // 000000000228: D54B0013 844E1F17
;   v_mul_legacy_f32  v15, v22, v15                       // 000000000230: 0E1E1F16
;   v_mul_legacy_f32  v22, v24, v20                       // 000000000234: 0E2C2918
;   v_fma_f32     v15, v21, v17, -v15                     // 000000000238: D54B000F 843E2315
;   v_mul_legacy_f32  v17, v24, v16                       // 000000000240: 0E222118
;   v_fmac_f32    v22, v18, v6                            // 000000000244: 562C0D12
;   v_mul_legacy_f32  v21, v7, v16                        // 000000000248: 0E2A2107
;   v_mul_legacy_f32  v16, v5, v16                        // 00000000024C: 0E202105
;   v_mul_legacy_f32  v5, v5, v20                         // 000000000250: 0E0A2905
;   v_fmac_f32    v17, v14, v6                            // 000000000254: 56220D0E
;   v_mul_legacy_f32  v6, v7, v20                         // 000000000258: 0E0C2907
;   v_fmac_f32    v21, v14, v19                           // 00000000025C: 562A270E
;   v_fmac_f32    v16, v14, v15                           // 000000000260: 56201F0E
;   v_fmac_f32    v5, v18, v15                            // 000000000264: 560A1F12
;   v_fmac_f32    v6, v18, v19                            // 000000000268: 560C2712
;   v_mul_legacy_f32  v14, v21, v21                       // 00000000026C: 0E1C2B15
;   v_mul_legacy_f32  v7, v6, v6                          // 000000000270: 0E0E0D06
;   v_fmac_f32    v14, v17, v17                           // 000000000274: 561C2311
;   v_fmac_f32    v7, v22, v22                            // 000000000278: 560E2D16
;   v_fmac_f32    v14, v16, v16                           // 00000000027C: 561C2110
;   v_fmac_f32    v7, v5, v5                              // 000000000280: 560E0B05
;   v_rsq_f32     v14, v14                                // 000000000284: 7E1C5D0E
;   v_rsq_f32     v7, v7                                  // 000000000288: 7E0E5D07
;   v_mul_legacy_f32  v15, v7, v22                        // 00000000028C: 0E1E2D07
;   v_mul_legacy_f32  v6, v7, v6                          // 000000000290: 0E0C0D07
;   v_mul_legacy_f32  v19, v7, v5                         // 000000000294: 0E260B07
;   s_waitcnt     vmcnt(0)                                // 000000000298: BF8C3F70
;   v_fma_f32     v0, v0, 2.0, -1.0                       // 00000000029C: D54B0000 03CDE900
;   v_fma_f32     v1, v1, 2.0, -1.0                       // 0000000002A4: D54B0001 03CDE901
;   v_mul_legacy_f32  v7, v17, v0                         // 0000000002AC: 0E0E0111
;   v_fma_f32     v11, -v1, v1, 1.0                       // 0000000002B0: D54B000B 23CA0301
;   v_mul_legacy_f32  v18, v7, v14                        // 0000000002B8: 0E241D07
;   v_fmac_f32    v11, -v0, v0                            // 0000000002BC: D52B000B 20020100
;   v_fmac_f32    v18, v1, v15                            // 0000000002C4: 56241F01
;   v_mul_legacy_f32  v15, v21, v0                        // 0000000002C8: 0E1E0115
;   v_sqrt_f32    v11, v11                                // 0000000002CC: 7E16670B
;   v_mul_legacy_f32  v0, v16, v0                         // 0000000002D0: 0E000110
;   v_mul_legacy_f32  v20, v15, v14                       // 0000000002D4: 0E281D0F
;   v_fmac_f32    v20, v1, v6                             // 0000000002D8: 56280D01
;   v_mul_legacy_f32  v6, v0, v14                         // 0000000002DC: 0E0C1D00
;   v_fmac_f32    v18, v11, v2                            // 0000000002E0: 5624050B
;   v_fmac_f32    v20, v11, v3                            // 0000000002E4: 5628070B
;   v_fmac_f32    v6, v1, v19                             // 0000000002E8: 560C2701
;   v_mul_legacy_f32  v1, v20, v20                        // 0000000002EC: 0E022914
;   v_fmac_f32    v6, v11, v4                             // 0000000002F0: 560C090B
;   v_fmac_f32    v1, v18, v18                            // 0000000002F4: 56022512
;   v_fmac_f32    v1, v6, v6                              // 0000000002F8: 56020D06
;   v_rsq_f32     v1, v1                                  // 0000000002FC: 7E025D01
;   v_mul_legacy_f32  v7, v1, v18                         // 000000000300: 0E0E2501
;   v_mul_legacy_f32  v11, v1, v20                        // 000000000304: 0E162901
;   v_mul_legacy_f32  v14, v1, v6                         // 000000000308: 0E1C0D01
;   image_sample  v[0:3], v[8:9], s[40:47], s[8:11] dmask:0xf dim:SQ_RSRC_IMG_2D // 00000000030C: F0800F08 004A0008
;   image_sample  v[4:6], v[8:9], s[0:7], s[8:11] dmask:0x7 dim:SQ_RSRC_IMG_2D // 000000000314: F0800708 00400408
;   v_nop                                                 // 00000000031C: 7E000000
;   s_buffer_load_dwordx16  s[0:15], s[16:19], 0x000100   // 000000000320: F4300008 FA000100
;   v_mul_legacy_f32  v8, v11, v13                        // 000000000328: 0E101B0B
;   v_fma_f32     v9, v7, v12, v8                         // 00000000032C: D54B0009 04221907
;   v_fmac_f32    v9, v14, v10                            // 000000000334: 5612150E
;   v_sub_f32     v9, 1.0, v9 clamp                       // 000000000338: D5048009 000212F2
;   s_waitcnt     vmcnt(0)                                // 000000000340: BF8C3F70
;   v_fma_f32     v19, v1, -v6, v1                        // 000000000344: D54B0013 44060D01
;   v_fma_f32     v15, v0, -v6, v0                        // 00000000034C: D54B000F 44020D00
;   v_add_f32     v0, lit(0xbd23d70a), v0                 // 000000000354: 060000FF BD23D70A
;   v_add_f32     v1, lit(0xbd23d70a), v1                 // 00000000035C: 060202FF BD23D70A
;   v_fma_f32     v17, v2, -v6, v2                        // 000000000364: D54B0011 440A0D02
;   v_mul_legacy_f32  v16, v19, v4                        // 00000000036C: 0E200913
;   v_add_f32     v19, lit(0xbd23d70a), v2                // 000000000370: 062604FF BD23D70A
;   v_fma_f32     v0, v6, v0, lit(0x3d23d70a)             // 000000000378: D54B0000 03FE0106 3D23D70A
;   v_fma_f32     v1, v6, v1, lit(0x3d23d70a)             // 000000000384: D54B0001 03FE0306 3D23D70A
;   v_mul_legacy_f32  v15, v15, v4                        // 000000000390: 0E1E090F
;   v_mul_legacy_f32  v17, v17, v4                        // 000000000394: 0E220911
;   v_fma_f32     v2, v6, v19, lit(0x3d23d70a)            // 000000000398: D54B0002 03FE2706 3D23D70A
;   s_waitcnt     lgkmcnt(0)                              // 0000000003A4: BF8CC07F
;   v_mul_legacy_f32  v6, s0, s0                          // 0000000003A8: D5070006 00000000
;   v_mul_legacy_f32  v18, v0, v4                         // 0000000003B0: 0E240900
;   v_mul_legacy_f32  v19, v1, v4                         // 0000000003B4: 0E260901
;   v_fma_f32     v0, -v0, v4, 1.0                        // 0000000003B8: D54B0000 23CA0900
;   v_mul_legacy_f32  v20, v2, v4                         // 0000000003C0: 0E280902
;   v_fmac_f32    v6, s1, s1                              // 0000000003C4: D52B0006 00000201
;   v_fma_f32     v1, -v1, v4, 1.0                        // 0000000003CC: D54B0001 23CA0901
;   v_fma_f32     v2, -v2, v4, 1.0                        // 0000000003D4: D54B0002 23CA0902
;   v_fmac_f32    v6, s2, s2                              // 0000000003DC: D52B0006 00000402
;   v_rsq_f32     v6, v6                                  // 0000000003E4: 7E0C5D06
;   v_fma_f32     v25, -s1, v6, v13                       // 0000000003E8: D54B0019 24360C01
;   v_fma_f32     v24, -s0, v6, v12                       // 0000000003F0: D54B0018 24320C00
;   v_mul_legacy_f32  v21, v6, -s0                        // 0000000003F8: D5070015 40000106
;   v_mul_legacy_f32  v22, v6, -s1                        // 000000000400: D5070016 40000306
;   v_mul_legacy_f32  v23, v6, -s2                        // 000000000408: D5070017 40000506
;   v_mul_legacy_f32  v26, v25, v25                       // 000000000410: 0E343319
;   v_fma_f32     v6, -s2, v6, v10                        // 000000000414: D54B0006 242A0C02
;   v_fmac_f32    v26, v24, v24                           // 00000000041C: 56343118
;   v_fmac_f32    v26, v6, v6                             // 000000000420: 56340D06
;   v_rsq_f32     v26, v26                                // 000000000424: 7E345D1A
;   v_mul_legacy_f32  v24, v24, v26                       // 000000000428: 0E303518
;   v_mul_legacy_f32  v25, v25, v26                       // 00000000042C: 0E323519
;   v_mul_legacy_f32  v6, v6, v26                         // 000000000430: 0E0C3506
;   v_mul_legacy_f32  v26, v11, v22                       // 000000000434: 0E342D0B
;   v_mul_legacy_f32  v22, v22, v25                       // 000000000438: 0E2C3316
;   v_fmac_f32    v26, v7, v21                            // 00000000043C: 56342B07
;   v_fmac_f32    v22, v21, v24                           // 000000000440: 562C3115
;   v_fmac_f32    v26, v14, v23                           // 000000000444: 56342F0E
;   v_fmac_f32    v22, v23, v6                            // 000000000448: 562C0D17
;   v_mul_legacy_f32  v23, v11, v25                       // 00000000044C: 0E2E330B
;   v_max_f32     v27, v26, v26 clamp                     // 000000000450: D510801B 0002351A
;   v_sub_f32     v26, 1.0, v26 clamp                     // 000000000458: D504801A 000234F2
;   v_max_f32     v21, v22, v22 clamp                     // 000000000460: D5108015 00022D16
;   v_fmac_f32    v23, v7, v24                            // 000000000468: 562E3107
;   v_add_f32     v24, v5, v5                             // 00000000046C: 06300B05
;   v_mul_legacy_f32  v28, v26, v26                       // 000000000470: 0E38351A
;   v_sub_f32     v4, 1.0, v22 clamp                      // 000000000474: D5048004 00022CF2
;   v_fmac_f32    v23, v14, v6 clamp                      // 00000000047C: D52B8017 00020D0E
;   v_mul_legacy_f32  v6, v21, v21                        // 000000000484: 0E0C2B15
;   v_mul_legacy_f32  v28, v28, v28                       // 000000000488: 0E38391C
;   v_fma_f32     v21, -v21, v21, 1.0                     // 00000000048C: D54B0015 23CA2B15
;   v_mul_legacy_f32  v22, v4, v4                         // 000000000494: 0E2C0904
;   v_mul_legacy_f32  v23, v23, v23                       // 000000000498: 0E2E2F17
;   v_fma_f32     v25, v6, v24, -0.5                      // 00000000049C: D54B0019 03C63106
;   v_mul_legacy_f32  v26, v28, v26                       // 0000000004A4: 0E34351C
;   v_mul_legacy_f32  v28, v9, v9                         // 0000000004A8: 0E381309
;   v_mul_legacy_f32  v22, v22, v22                       // 0000000004AC: 0E2C2D16
;   v_fma_f32     v26, v26, v25, 1.0                      // 0000000004B0: D54B001A 03CA331A
;   v_mul_legacy_f32  v28, v28, v28                       // 0000000004B8: 0E38391C
;   v_mul_legacy_f32  v4, v22, v4                         // 0000000004BC: 0E080916
;   v_mul_legacy_f32  v9, v28, v9                         // 0000000004C0: 0E12131C
;   v_fma_f32     v22, v4, v0, v18                        // 0000000004C4: D54B0016 044A0104
;   v_fma_f32     v29, v4, v1, v19                        // 0000000004CC: D54B001D 044E0304
;   v_fma_f32     v4, v4, v2, v20                         // 0000000004D4: D54B0004 04520504
;   v_fma_f32     v25, v9, v25, 1.0                       // 0000000004DC: D54B0019 03CA3309
;   v_mul_legacy_f32  v25, v26, v25                       // 0000000004E4: 0E32331A
;   v_mul_legacy_f32  v26, v5, v5                         // 0000000004E8: 0E340B05
;   v_mul_legacy_f32  v31, v25, v15                       // 0000000004EC: 0E3E1F19
;   v_mul_legacy_f32  v28, v26, v26                       // 0000000004F0: 0E38351A
;   v_fma_f32     v26, v26, v26, -1.0                     // 0000000004F4: D54B001A 03CE351A
;   v_mul_legacy_f32  v32, v25, v16                       // 0000000004FC: 0E402119
;   v_mul_legacy_f32  v25, v25, v17                       // 000000000500: 0E322319
;   v_mul_legacy_f32  v30, lit(0x3e800000), v28           // 000000000504: 0E3C38FF 3E800000
;   v_fma_f32     v23, v23, v26, 1.0                      // 00000000050C: D54B0017 03CA3517
;   v_fmac_f32    v6, v30, v21                            // 000000000514: 560C2B1E
;   v_mul_legacy_f32  v23, v23, v23                       // 000000000518: 0E2E2F17
;   v_mul_legacy_f32  v21, s12, v27                       // 00000000051C: 0E2A360C
;   v_rcp_f32     v6, v6                                  // 000000000520: 7E0C5506
;   v_mul_legacy_f32  v23, lit(0x40490fdb), v23           // 000000000524: 0E2E2EFF 40490FDB
;   v_max_f32     v23, lit(0x358637bd), v23               // 00000000052C: 202E2EFF 358637BD
;   v_rcp_f32     v23, v23                                // 000000000534: 7E2E5517
;   v_mul_legacy_f32  v23, v28, v23                       // 000000000538: 0E2E2F1C
;   v_mul_legacy_f32  v6, v6, v23                         // 00000000053C: 0E0C2F06
;   v_mul_legacy_f32  v23, s13, v27                       // 000000000540: 0E2E360D
;   v_mul_legacy_f32  v27, s14, v27                       // 000000000544: 0E36360E
;   v_fmac_f32    v25, v6, v4                             // 000000000548: 56320906
;   v_mul_legacy_f32  v4, s4, s4                          // 00000000054C: D5070004 00000804
;   v_fmac_f32    v31, v6, v22                            // 000000000554: 563E2D06
;   v_fmac_f32    v32, v6, v29                            // 000000000558: 56403B06
;   v_fmac_f32    v4, s5, s5                              // 00000000055C: D52B0004 00000A05
;   v_mul_legacy_f32  v21, v21, v31                       // 000000000564: 0E2A3F15
;   v_mul_legacy_f32  v22, v23, v32                       // 000000000568: 0E2C4117
;   v_mul_legacy_f32  v23, v27, v25                       // 00000000056C: 0E2E331B
;   v_fmac_f32    v4, s6, s6                              // 000000000570: D52B0004 00000C06
;   v_rsq_f32     v4, v4                                  // 000000000578: 7E085D04
;   v_fma_f32     v31, -s5, v4, v13                       // 00000000057C: D54B001F 24360805
;   v_fma_f32     v29, -s4, v4, v12                       // 000000000584: D54B001D 24320804
;   v_mul_legacy_f32  v6, v4, -s4                         // 00000000058C: D5070006 40000904
;   v_mul_legacy_f32  v25, v4, -s5                        // 000000000594: D5070019 40000B04
;   v_mul_legacy_f32  v27, v4, -s6                        // 00000000059C: D507001B 40000D04
;   v_mul_legacy_f32  v32, v31, v31                       // 0000000005A4: 0E403F1F
;   v_fma_f32     v4, -s6, v4, v10                        // 0000000005A8: D54B0004 242A0806
;   s_buffer_load_dwordx8  s[0:7], s[16:19], 0x000140     // 0000000005B0: F42C0008 FA000140
;   v_fmac_f32    v32, v29, v29                           // 0000000005B8: 56403B1D
;   v_fmac_f32    v32, v4, v4                             // 0000000005BC: 56400904
;   v_rsq_f32     v32, v32                                // 0000000005C0: 7E405D20
;   v_mul_legacy_f32  v31, v31, v32                       // 0000000005C4: 0E3E411F
;   v_mul_legacy_f32  v29, v29, v32                       // 0000000005C8: 0E3A411D
;   v_mul_legacy_f32  v4, v4, v32                         // 0000000005CC: 0E084104
;   v_mul_legacy_f32  v32, v11, v25                       // 0000000005D0: 0E40330B
;   v_mul_legacy_f32  v25, v25, v31                       // 0000000005D4: 0E323F19
;   v_fmac_f32    v32, v7, v6                             // 0000000005D8: 56400D07
;   v_fmac_f32    v25, v6, v29                            // 0000000005DC: 56323B06
;   v_fmac_f32    v32, v14, v27                           // 0000000005E0: 5640370E
;   v_fmac_f32    v25, v27, v4                            // 0000000005E4: 5632091B
;   v_mul_legacy_f32  v27, v11, v31                       // 0000000005E8: 0E363F0B
;   v_max_f32     v33, v32, v32 clamp                     // 0000000005EC: D5108021 00024120
;   v_max_f32     v6, v25, v25 clamp                      // 0000000005F4: D5108006 00023319
;   v_fmac_f32    v27, v7, v29                            // 0000000005FC: 56363B07
;   v_sub_f32     v29, 1.0, v32 clamp                     // 000000000600: D504801D 000240F2
;   v_sub_f32     v25, 1.0, v25 clamp                     // 000000000608: D5048019 000232F2
;   s_waitcnt     lgkmcnt(0)                              // 000000000610: BF8CC07F
;   v_mul_legacy_f32  v32, s2, v33                        // 000000000614: 0E404202
;   v_fmac_f32    v27, v14, v4 clamp                      // 000000000618: D52B801B 0002090E
;   v_mul_legacy_f32  v31, v29, v29                       // 000000000620: 0E3E3B1D
;   v_mul_legacy_f32  v4, v6, v6                          // 000000000624: 0E080D06
;   v_fma_f32     v6, -v6, v6, 1.0                        // 000000000628: D54B0006 23CA0D06
;   v_mul_legacy_f32  v27, v27, v27                       // 000000000630: 0E36371B
;   v_mul_legacy_f32  v31, v31, v31                       // 000000000634: 0E3E3F1F
;   v_fma_f32     v24, v4, v24, -0.5                      // 000000000638: D54B0018 03C63104
;   v_fmac_f32    v4, v30, v6                             // 000000000640: 56080D1E
;   v_mul_legacy_f32  v6, s0, v33                         // 000000000644: 0E0C4200
;   v_fma_f32     v27, v27, v26, 1.0                      // 000000000648: D54B001B 03CA351B
;   v_mul_legacy_f32  v29, v31, v29                       // 000000000650: 0E3A3B1F
;   v_rcp_f32     v4, v4                                  // 000000000654: 7E085504
;   v_mul_legacy_f32  v27, v27, v27                       // 000000000658: 0E36371B
;   v_fma_f32     v29, v29, v24, 1.0                      // 00000000065C: D54B001D 03CA311D
;   v_fma_f32     v24, v9, v24, 1.0                       // 000000000664: D54B0018 03CA3109
;   v_mul_legacy_f32  v27, lit(0x40490fdb), v27           // 00000000066C: 0E3636FF 40490FDB
;   v_mul_legacy_f32  v24, v29, v24                       // 000000000674: 0E30311D
;   v_mul_legacy_f32  v29, v25, v25                       // 000000000678: 0E3A3319
;   v_max_f32     v27, lit(0x358637bd), v27               // 00000000067C: 203636FF 358637BD
;   v_mul_legacy_f32  v34, v24, v16                       // 000000000684: 0E442118
;   v_mul_legacy_f32  v29, v29, v29                       // 000000000688: 0E3A3B1D
;   v_rcp_f32     v27, v27                                // 00000000068C: 7E36551B
;   v_mul_legacy_f32  v25, v29, v25                       // 000000000690: 0E32331D
;   v_fma_f32     v29, v25, v0, v18                       // 000000000694: D54B001D 044A0119
;   v_fma_f32     v31, v25, v1, v19                       // 00000000069C: D54B001F 044E0319
;   v_mul_legacy_f32  v27, v28, v27                       // 0000000006A4: 0E36371C
;   v_fma_f32     v25, v25, v2, v20                       // 0000000006A8: D54B0019 04520519
;   v_mul_legacy_f32  v4, v4, v27                         // 0000000006B0: 0E083704
;   v_mul_legacy_f32  v27, s1, v33                        // 0000000006B4: 0E364201
;   v_mul_legacy_f32  v33, v24, v15                       // 0000000006B8: 0E421F18
;   v_mul_legacy_f32  v24, v24, v17                       // 0000000006BC: 0E302318
;   v_fmac_f32    v34, v4, v31                            // 0000000006C0: 56443F04
;   v_fmac_f32    v33, v4, v29                            // 0000000006C4: 56423B04
;   v_fmac_f32    v24, v4, v25                            // 0000000006C8: 56303304
;   v_mul_legacy_f32  v4, s8, s8                          // 0000000006CC: D5070004 00001008
;   v_fmac_f32    v22, v27, v34                           // 0000000006D4: 562C451B
;   v_fmac_f32    v21, v6, v33                            // 0000000006D8: 562A4306
;   v_fmac_f32    v23, v32, v24                           // 0000000006DC: 562E3120
;   v_fmac_f32    v4, s9, s9                              // 0000000006E0: D52B0004 00001209
;   v_fmac_f32    v4, s10, s10                            // 0000000006E8: D52B0004 0000140A
;   v_rsq_f32     v4, v4                                  // 0000000006F0: 7E085D04
;   v_fma_f32     v29, -s9, v4, v13                       // 0000000006F4: D54B001D 24360809
;   v_fma_f32     v27, -s8, v4, v12                       // 0000000006FC: D54B001B 24320808
;   v_mul_legacy_f32  v6, v4, -s8                         // 000000000704: D5070006 40001104
;   v_mul_legacy_f32  v24, v4, -s9                        // 00000000070C: D5070018 40001304
;   v_mul_legacy_f32  v25, v4, -s10                       // 000000000714: D5070019 40001504
;   v_mul_legacy_f32  v31, v29, v29                       // 00000000071C: 0E3E3B1D
;   v_fma_f32     v4, -s10, v4, v10                       // 000000000720: D54B0004 242A080A
;   v_fmac_f32    v31, v27, v27                           // 000000000728: 563E371B
;   v_fmac_f32    v31, v4, v4                             // 00000000072C: 563E0904
;   v_rsq_f32     v31, v31                                // 000000000730: 7E3E5D1F
;   v_mul_legacy_f32  v29, v29, v31                       // 000000000734: 0E3A3F1D
;   v_mul_legacy_f32  v27, v27, v31                       // 000000000738: 0E363F1B
;   v_mul_legacy_f32  v4, v4, v31                         // 00000000073C: 0E083F04
;   v_mul_legacy_f32  v31, v11, v24                       // 000000000740: 0E3E310B
;   v_mul_legacy_f32  v24, v24, v29                       // 000000000744: 0E303B18
;   v_fmac_f32    v31, v7, v6                             // 000000000748: 563E0D07
;   v_fmac_f32    v24, v6, v27                            // 00000000074C: 56303706
;   v_fmac_f32    v31, v14, v25                           // 000000000750: 563E330E
;   v_fmac_f32    v24, v25, v4                            // 000000000754: 56300919
;   v_mul_legacy_f32  v25, v11, v29                       // 000000000758: 0E323B0B
;   v_sub_f32     v29, 1.0, v31 clamp                     // 00000000075C: D504801D 00023EF2
;   v_max_f32     v32, v31, v31 clamp                     // 000000000764: D5108020 00023F1F
;   v_max_f32     v6, v24, v24 clamp                      // 00000000076C: D5108006 00023118
;   v_fmac_f32    v25, v7, v27                            // 000000000774: 56323707
;   v_add_f32     v27, v5, v5                             // 000000000778: 06360B05
;   v_mul_legacy_f32  v31, v29, v29                       // 00000000077C: 0E3E3B1D
;   v_sub_f32     v24, 1.0, v24 clamp                     // 000000000780: D5048018 000230F2
;   v_fmac_f32    v25, v14, v4 clamp                      // 000000000788: D52B8019 0002090E
;   v_mul_legacy_f32  v4, v6, v6                          // 000000000790: 0E080D06
;   v_mul_legacy_f32  v31, v31, v31                       // 000000000794: 0E3E3F1F
;   v_fma_f32     v6, -v6, v6, 1.0                        // 000000000798: D54B0006 23CA0D06
;   v_mul_legacy_f32  v25, v25, v25                       // 0000000007A0: 0E323319
;   v_fma_f32     v27, v4, v27, -0.5                      // 0000000007A4: D54B001B 03C63704
;   v_mul_legacy_f32  v29, v31, v29                       // 0000000007AC: 0E3A3B1F
;   v_fmac_f32    v4, v30, v6                             // 0000000007B0: 56080D1E
;   v_mul_legacy_f32  v6, s4, v32                         // 0000000007B4: 0E0C4004
;   v_fma_f32     v25, v25, v26, 1.0                      // 0000000007B8: D54B0019 03CA3519
;   v_mul_legacy_f32  v26, v24, v24                       // 0000000007C0: 0E343118
;   v_fma_f32     v29, v29, v27, 1.0                      // 0000000007C4: D54B001D 03CA371D
;   v_fma_f32     v9, v9, v27, 1.0                        // 0000000007CC: D54B0009 03CA3709
;   v_rcp_f32     v4, v4                                  // 0000000007D4: 7E085504
;   v_mul_legacy_f32  v25, v25, v25                       // 0000000007D8: 0E323319
;   v_mul_legacy_f32  v26, v26, v26                       // 0000000007DC: 0E34351A
;   v_mul_legacy_f32  v9, v29, v9                         // 0000000007E0: 0E12131D
;   v_mul_legacy_f32  v25, lit(0x40490fdb), v25           // 0000000007E4: 0E3232FF 40490FDB
;   v_mul_legacy_f32  v24, v26, v24                       // 0000000007EC: 0E30311A
;   v_mul_legacy_f32  v26, v9, v15                        // 0000000007F0: 0E341F09
;   v_mul_legacy_f32  v27, v9, v16                        // 0000000007F4: 0E362109
;   v_max_f32     v25, lit(0x358637bd), v25               // 0000000007F8: 203232FF 358637BD
;   v_fma_f32     v0, v24, v0, v18                        // 000000000800: D54B0000 044A0118
;   v_fma_f32     v2, v24, v2, v20                        // 000000000808: D54B0002 04520518
;   v_mul_legacy_f32  v9, v9, v17                         // 000000000810: 0E122309
;   v_fma_f32     v1, v24, v1, v19                        // 000000000814: D54B0001 044E0318
;   v_rcp_f32     v25, v25                                // 00000000081C: 7E325519
;   v_mul_legacy_f32  v24, s5, v32                        // 000000000820: 0E304005
;   v_mul_legacy_f32  v25, v28, v25                       // 000000000824: 0E32331C
;   v_mul_legacy_f32  v4, v4, v25                         // 000000000828: 0E083304
;   v_mul_legacy_f32  v25, s6, v32                        // 00000000082C: 0E324006
;   v_fmac_f32    v26, v4, v0                             // 000000000830: 56340104
;   v_fmac_f32    v9, v4, v2                              // 000000000834: 56120504
;   v_cubema_f32  v0, v7, v11, v14                        // 000000000838: D5470000 043A1707
;   v_fmac_f32    v27, v4, v1                             // 000000000840: 56360304
;   v_cubesc_f32  v2, v7, v11, v14                        // 000000000844: D5450002 043A1707
;   v_mov_b32     v4, lit(0x3fc00000)                     // 00000000084C: 7E0802FF 3FC00000
;   v_fmac_f32    v23, v25, v9                            // 000000000854: 562E1319
;   v_rcp_f32     v9, abs(v0)                             // 000000000858: D5AA0109 00000100
;   v_fmac_f32    v21, v6, v26                            // 000000000860: 562A3506
;   v_fmac_f32    v22, v24, v27                           // 000000000864: 562C3718
;   v_cubeid_f32  v6, v7, v11, v14                        // 000000000868: D5440006 043A1707
;   v_mad_f32     v1, v2, v9, v4                          // 000000000870: D5410001 04121302
;   v_cubetc_f32  v2, v7, v11, v14                        // 000000000878: D5460002 043A1707
;   v_mad_f32     v0, v2, v9, v4                          // 000000000880: D5410000 04121302
;   s_and_b64     exec, exec, s[22:23]                    // 000000000888: 87FE167E
;   v_fma_f32     v9, -v12, v7, -v8                       // 00000000088C: D54B0009 A4220F0C
;   s_buffer_load_dword  s0, s[16:19], 0x00016c           // 000000000894: F4200008 FA00016C
;   s_buffer_load_dword  s1, s[16:19], 0x000178           // 00000000089C: F4200048 FA000178
;   image_sample  v[0:2], [v1,v0,v6], s[32:39], s[56:59] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 0000000008A4: F080071A 01C80001 00000600
;   v_fmac_f32    v9, -v10, v14 mul:2                     // 0000000008B0: D52B0009 28021D0A
;   v_fma_f32     v7, -v9, v7, -v12                       // 0000000008B8: D54B0007 A4320F09
;   v_fma_f32     v8, -v9, v11, -v13                      // 0000000008C0: D54B0008 A4361709
;   v_fma_f32     v6, -v9, v14, -v10                      // 0000000008C8: D54B0006 A42A1D09
;   v_cubema_f32  v9, v7, v8, v6                          // 0000000008D0: D5470009 041A1107
;   v_cubesc_f32  v10, v7, v8, v6                         // 0000000008D8: D545000A 041A1107
;   v_cubetc_f32  v14, v7, v8, v6                         // 0000000008E0: D546000E 041A1107
;   v_cubeid_f32  v6, v7, v8, v6                          // 0000000008E8: D5440006 041A1107
;   v_rcp_f32     v7, abs(v9)                             // 0000000008F0: D5AA0107 00000109
;   s_waitcnt     lgkmcnt(0)                              // 0000000008F8: BF8CC07F
;   v_cvt_f32_i32  v8, s1                                 // 0000000008FC: 7E100A01
;   v_mul_legacy_f32  v5, v8, v5                          // 000000000900: 0E0A0B08
;   v_mad_f32     v8, v10, v7, v4                         // 000000000904: D5410008 04120F0A
;   v_mac_f32     v4, v14, v7                             // 00000000090C: 3E080F0E
;   image_sample_l  v[4:6], [v8,v4,v6,v5], s[24:31], s[56:59] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 000000000910: F090071A 01C60408 00050604
;   s_waitcnt     vmcnt(1)                                // 00000000091C: BF8C3F71
;   v_fmac_f32    v21, v0, v15                            // 000000000920: 562A1F00
;   v_fmac_f32    v22, v1, v16                            // 000000000924: 562C2101
;   v_fmac_f32    v23, v2, v17                            // 000000000928: 562E2302
;   s_waitcnt     vmcnt(0)                                // 00000000092C: BF8C3F70
;   v_fmac_f32    v21, v4, v18                            // 000000000930: 562A2504
;   v_fmac_f32    v22, v5, v19                            // 000000000934: 562C2705
;   v_fmac_f32    v23, v6, v20                            // 000000000938: 562E2906
;   v_mul_legacy_f32  v4, s0, v3                          // 00000000093C: 0E080600
;   s_nop         0x0000                                  // 000000000940: BF800000
;   s_nop         0x0000                                  // 000000000944: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v21, v22                     // 000000000948: 5E002D15
;   v_cvt_pkrtz_f16_f32  v1, v23, v4                      // 00000000094C: 5E020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000950: F8001C0F 00000100
;   s_endpgm                                              // 000000000958: BF810000
;   s_code_end                                            // 00000000095C: BF9F0000
;   s_code_end                                            // 000000000960: BF9F0000
;   s_code_end                                            // 000000000964: BF9F0000
;   s_code_end                                            // 000000000968: BF9F0000
;   s_code_end                                            // 00000000096C: BF9F0000
;   s_code_end                                            // 000000000970: BF9F0000
;   s_code_end                                            // 000000000974: BF9F0000
;   s_code_end                                            // 000000000978: BF9F0000
;   s_code_end                                            // 00000000097C: BF9F0000
;   s_code_end                                            // 000000000980: BF9F0000
;   s_code_end                                            // 000000000984: BF9F0000
;   s_code_end                                            // 000000000988: BF9F0000
;   s_code_end                                            // 00000000098C: BF9F0000
;   s_code_end                                            // 000000000990: BF9F0000
;   s_code_end                                            // 000000000994: BF9F0000
;   s_code_end                                            // 000000000998: BF9F0000
;   s_code_end                                            // 00000000099C: BF9F0000
;   s_code_end                                            // 0000000009A0: BF9F0000
;   s_code_end                                            // 0000000009A4: BF9F0000
;   s_code_end                                            // 0000000009A8: BF9F0000
;   s_code_end                                            // 0000000009AC: BF9F0000
;   s_code_end                                            // 0000000009B0: BF9F0000
;   s_code_end                                            // 0000000009B4: BF9F0000
;   s_code_end                                            // 0000000009B8: BF9F0000
;   s_code_end                                            // 0000000009BC: BF9F0000
;   s_code_end                                            // 0000000009C0: BF9F0000
;   s_code_end                                            // 0000000009C4: BF9F0000
;   s_code_end                                            // 0000000009C8: BF9F0000
;   s_code_end                                            // 0000000009CC: BF9F0000
;   s_code_end                                            // 0000000009D0: BF9F0000
;   s_code_end                                            // 0000000009D4: BF9F0000
;   s_code_end                                            // 0000000009D8: BF9F0000
;   s_code_end                                            // 0000000009DC: BF9F0000
;   s_code_end                                            // 0000000009E0: BF9F0000
;   s_code_end                                            // 0000000009E4: BF9F0000
;   s_code_end                                            // 0000000009E8: BF9F0000
;   s_code_end                                            // 0000000009EC: BF9F0000
;   s_code_end                                            // 0000000009F0: BF9F0000
;   s_code_end                                            // 0000000009F4: BF9F0000
;   s_code_end                                            // 0000000009F8: BF9F0000
;   s_code_end                                            // 0000000009FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 76, resource_class: 0 (SRV), index: 5, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[1] {  instr_offset: 84, resource_class: 0 (SRV), index: 4, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[2] {  instr_offset: 92, resource_class: 0 (SRV), index: 2, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 100, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[4] {  instr_offset: 108, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[5] {  instr_offset: 116, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[6] {  instr_offset: 124, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 8
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 2
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 4
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 5
;       allocated_offset : 13
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[5] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 14
;       orig_rootsig_slot_id: 6
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[6] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 15
;       orig_rootsig_slot_id: 7
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[7] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 30
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSTextured)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 3 {
;     num_interp: 3
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 592
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x15,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v21, off, off, off done vm        // 000000000010: F8001801 00000015
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x1615,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v21, v22, off, off done vm        // 000000000010: F8001803 00001615
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x415,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v21, v4, off, off done vm         // 000000000010: F8001803 00000415
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e002d15,
;        0x5e020917,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v21, v22                     // 000000000008: 5E002D15
;   v_cvt_pkrtz_f16_f32  v1, v23, v4                      // 00000000000C: 5E020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x22d15,
;        0xd7690001,
;        0x20917,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v21, v22                    // 000000000000: D7690000 00022D15
;   v_cvt_pknorm_u16_f32  v1, v23, v4                     // 000000000008: D7690001 00020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x22d15,
;        0xd7680001,
;        0x20917,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v21, v22                    // 000000000000: D7680000 00022D15
;   v_cvt_pknorm_i16_f32  v1, v23, v4                     // 000000000008: D7680001 00020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x22d15,
;        0xd76a0001,
;        0x20917,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v21, v22                        // 000000000000: D76A0000 00022D15
;   v_cvt_pk_u16_u32  v1, v23, v4                         // 000000000008: D76A0001 00020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x22d15,
;        0xd76b0001,
;        0x20917,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v21, v22                        // 000000000000: D76B0000 00022D15
;   v_cvt_pk_i16_i32  v1, v23, v4                         // 000000000008: D76B0001 00020917
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x4171615,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v21, v22, v23, v4 done vm         // 000000000010: F800180F 04171615
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=35,NumSGPR=62,LDS=0,Scratch=0,WaveSize=64,Occupancy=14
; VAlu:365,SAlu:36,VMem:5,SMem:12,LDS:15,WaitCntOnVMem:4,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char PBREffect_PSTextured[] = {
  0x44, 0x58, 0x42, 0x43, 0x20, 0xdf, 0x07, 0xfa, 0x88, 0xea, 0x7c, 0x6d,
  0x49, 0x2c, 0x87, 0xbd, 0xdf, 0xd6, 0xed, 0x32, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x1f, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0x0c, 0x03, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0x44, 0x05, 0x00, 0x00,
  0x60, 0x05, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xd8, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x64,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
  0x50, 0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x64, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd2, 0x21, 0x27, 0x9b, 0x07, 0xf8, 0x98, 0xe4,
  0x85, 0xd6, 0x25, 0xee, 0xb3, 0xc7, 0xd2, 0x05, 0x44, 0x58, 0x49, 0x4c,
  0x14, 0x1a, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x85, 0x06, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0xfc, 0x10, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x14, 0x11, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x74, 0x11, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x88, 0x11, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x98, 0x11, 0x00, 0x00,
  0x69, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x1a, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xfc, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x3c, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xd4, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94,
  0x61, 0x20, 0x06, 0x62, 0x6e, 0x1a, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0x57, 0x42, 0x5a, 0x89, 0xc9, 0x2f, 0x6e, 0x1b, 0x15, 0xc3, 0x30, 0x0c,
  0x04, 0x15, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0,
  0x0c, 0x0b, 0x81, 0x82, 0xa7, 0x30, 0x0e, 0x01, 0x41, 0xc3, 0x30, 0x0c,
  0x04, 0x41, 0x0c, 0x14, 0x15, 0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a,
  0xc4, 0x40, 0x0c, 0x03, 0x55, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8, 0x6d, 0x23, 0x82, 0x20,
  0x08, 0xa2, 0x10, 0x17, 0x01, 0x11, 0x84, 0x1d, 0x35, 0x5c, 0xfe, 0x84,
  0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d,
  0x88, 0x61, 0x18, 0x86, 0x42, 0x68, 0x04, 0x44, 0xd0, 0x56, 0x8a, 0x81,
  0x18, 0x86, 0x81, 0xba, 0x39, 0x82, 0xa0, 0x18, 0x10, 0x51, 0x10, 0xc4,
  0x47, 0xe0, 0x40, 0xc0, 0x30, 0x02, 0x31, 0xcc, 0xd4, 0x06, 0xe3, 0xc0,
  0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50,
  0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0,
  0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0,
  0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40,
  0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x02, 0x62, 0x26, 0x31, 0x18, 0x07,
  0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07,
  0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87,
  0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87,
  0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03,
  0x3f, 0x40, 0xc2, 0x48, 0x52, 0x39, 0x8c, 0x30, 0x0c, 0x33, 0xb5, 0xc1,
  0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03,
  0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81,
  0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03,
  0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0xc1, 0x1c, 0xf8, 0x01,
  0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3,
  0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c,
  0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c,
  0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f,
  0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c,
  0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe6, 0xc0, 0x0f,
  0xc0, 0xc0, 0x0f, 0x90, 0x70, 0xa2, 0x94, 0xce, 0x44, 0x06, 0xe3, 0xc0,
  0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40,
  0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x30, 0x0a, 0xf5, 0x20, 0x0e, 0xe5, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x73, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x28, 0x38, 0x69, 0x4d, 0x82, 0x31, 0x07, 0xce,
  0xa3, 0x0e, 0x47, 0x9a, 0x16, 0x00, 0x73, 0xa8, 0xc9, 0xe7, 0x9c, 0x46,
  0x9a, 0x80, 0x66, 0x92, 0x90, 0x73, 0xb6, 0x6e, 0xdb, 0xba, 0xee, 0x39,
  0x0c, 0x03, 0x31, 0x0c, 0xf4, 0xde, 0x24, 0x4d, 0x11, 0x25, 0x4c, 0x3e,
  0x0b, 0x30, 0xcf, 0x42, 0x44, 0xec, 0x04, 0x4c, 0x04, 0x0a, 0x08, 0x8a,
  0x53, 0x82, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11,
  0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x89, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0x83, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x67, 0x03, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x07, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x30, 0x00, 0x02, 0x60, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x0c, 0x0a, 0xa1, 0x14, 0x0a, 0xd1,
  0xa0, 0x1c, 0xca, 0x83, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28,
  0x83, 0x02, 0x21, 0x73, 0x06, 0x80, 0xd4, 0x19, 0x00, 0x62, 0x67, 0x00,
  0x08, 0x9e, 0x01, 0x20, 0x79, 0x06, 0x80, 0xe6, 0xb1, 0x24, 0x88, 0x78,
  0x1e, 0x00, 0x38, 0x8e, 0x03, 0x38, 0x8e, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa,
  0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a,
  0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa,
  0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2,
  0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63,
  0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34,
  0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37,
  0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x34, 0x13, 0x04, 0xc2, 0xd9,
  0x20, 0x18, 0xc7, 0x04, 0x81, 0x78, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e,
  0x6e, 0x82, 0x40, 0x40, 0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x66, 0xf0,
  0x11, 0x98, 0x20, 0x10, 0xd1, 0x04, 0x81, 0x90, 0x36, 0x08, 0x47, 0xb4,
  0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x6a, 0x00,
  0x06, 0x1b, 0x12, 0x83, 0x7a, 0x0e, 0xc3, 0x80, 0x0e, 0x69, 0x43, 0x02,
  0x51, 0xcf, 0x01, 0x19, 0xd0, 0x21, 0x4d, 0x10, 0x88, 0x69, 0x82, 0xc0,
  0x06, 0x61, 0x30, 0x41, 0x20, 0xa8, 0x09, 0x02, 0x51, 0x6d, 0x48, 0x2e,
  0xec, 0x39, 0x32, 0x43, 0x3b, 0xa4, 0x0d, 0x49, 0x86, 0x3d, 0x87, 0x66,
  0x68, 0x87, 0xb4, 0xa1, 0x98, 0x2a, 0x6b, 0xe3, 0x26, 0x08, 0x70, 0x20,
  0x06, 0x13, 0x04, 0xc2, 0xda, 0x80, 0x1c, 0xde, 0x73, 0x1c, 0xc6, 0x07,
  0x6c, 0x08, 0xc0, 0x60, 0x82, 0x20, 0x07, 0x63, 0xb0, 0x01, 0x39, 0xc4,
  0xe0, 0x39, 0x0e, 0xe3, 0x00, 0x36, 0x20, 0x86, 0x18, 0x3c, 0x87, 0x61,
  0x1c, 0xc0, 0x06, 0x61, 0x0c, 0xc8, 0x60, 0x03, 0xd1, 0x01, 0x61, 0x50,
  0x06, 0x13, 0x84, 0x39, 0x20, 0x83, 0x0d, 0xc1, 0x19, 0x4c, 0x10, 0x04,
  0x80, 0x0a, 0xd4, 0x14, 0x55, 0x19, 0x1e, 0x5d, 0x9d, 0x5c, 0x19, 0x19,
  0x11, 0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x91,
  0x4d, 0x10, 0x0a, 0x6d, 0x43, 0x70, 0x4c, 0x10, 0x8a, 0x6d, 0x83, 0x70,
  0x5d, 0x1b, 0x96, 0x63, 0x0d, 0xd8, 0xa0, 0x0d, 0xdc, 0xe0, 0x0d, 0x8c,
  0x37, 0x38, 0xda, 0x00, 0x0e, 0x36, 0x04, 0xc6, 0x04, 0xa1, 0xe0, 0x26,
  0x08, 0xc4, 0xb5, 0x41, 0xb8, 0xe8, 0x60, 0xc3, 0x62, 0xac, 0x01, 0x1b,
  0xb4, 0x81, 0x1c, 0xbc, 0x81, 0x31, 0x07, 0x46, 0x1b, 0xd4, 0xc1, 0x86,
  0x00, 0x9a, 0x20, 0x14, 0xdd, 0x86, 0x05, 0x5a, 0x03, 0x36, 0x68, 0x83,
  0x3b, 0x78, 0x03, 0x03, 0x0f, 0xa0, 0x36, 0xa8, 0x03, 0x16, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x1b, 0x96, 0x4b, 0x0f, 0xd8, 0xa0, 0x0d, 0xdc, 0xe0,
  0x0d, 0x8c, 0x39, 0xb8, 0xda, 0x00, 0xd8, 0x40, 0xc4, 0x81, 0x1d, 0xe4,
  0xc1, 0x1e, 0x30, 0x99, 0xb2, 0xfa, 0xa2, 0x0a, 0x93, 0x3b, 0x2b, 0xa3,
  0x9b, 0x20, 0x14, 0xde, 0x04, 0x81, 0xc0, 0x36, 0x08, 0xd7, 0x1f, 0x6c,
  0x58, 0x8e, 0x3e, 0x60, 0x03, 0x3f, 0x70, 0x83, 0x36, 0x30, 0xe6, 0xe0,
  0x68, 0x03, 0x50, 0xd8, 0x10, 0x84, 0xc2, 0x86, 0x81, 0x0f, 0x44, 0x01,
  0xd8, 0x50, 0xa4, 0x81, 0x1a, 0x8c, 0x82, 0x19, 0x00, 0xad, 0xf0, 0xc4,
  0xde, 0xf0, 0x5c, 0xc6, 0xde, 0xda, 0xe0, 0xd2, 0xd8, 0xca, 0xe4, 0x5c,
  0xde, 0xe0, 0xe8, 0xd2, 0xde, 0xdc, 0xe6, 0xa6, 0x04, 0x42, 0x15, 0x36,
  0x36, 0xbb, 0x36, 0x97, 0x34, 0xb2, 0x32, 0x37, 0xba, 0x29, 0x01, 0x51,
  0x85, 0x0c, 0xcf, 0xc5, 0xae, 0x4c, 0x6e, 0x2e, 0xed, 0xcd, 0x6d, 0x4a,
  0x70, 0x34, 0x21, 0xc3, 0x73, 0xb1, 0x0b, 0x63, 0xb3, 0x2b, 0x93, 0x9b,
  0x12, 0x24, 0x75, 0xc8, 0xf0, 0x5c, 0xe6, 0xd0, 0xc2, 0xc8, 0xca, 0xe4,
  0x9a, 0xde, 0xc8, 0xca, 0xd8, 0xa6, 0x04, 0x4c, 0x19, 0x32, 0x3c, 0x17,
  0xb9, 0xb2, 0xb9, 0xb7, 0x3a, 0xb9, 0xb1, 0xb2, 0xb9, 0x29, 0x41, 0x19,
  0xd4, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2,
  0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x9c, 0x41, 0x1d, 0x32, 0x3c, 0x97, 0x32,
  0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9, 0x29, 0xc1,
  0x28, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06,
  0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f,
  0xf4, 0x30, 0x83, 0x81, 0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1,
  0x1c, 0xc2, 0x61, 0x1d, 0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x06, 0xa0, 0xa4, 0x6c,
  0x4b, 0x5c, 0x13, 0x15, 0x11, 0x83, 0x1d, 0x40, 0xc3, 0xe5, 0x3b, 0x8f,
  0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0xa6, 0xb0, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25,
  0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x3e, 0x72, 0xdb, 0xc6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x19, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d, 0x03, 0xce,
  0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x5b, 0xc0,
  0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93,
  0x5f, 0xdc, 0xb6, 0x15, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc,
  0xb3, 0x10, 0x7e, 0x71, 0xdb, 0x86, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x04, 0x30, 0xcf, 0x42, 0x94, 0x44, 0x45, 0x2c, 0x7e, 0x71, 0xdb, 0x26,
  0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0xb6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe,
  0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3,
  0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00,
  0x61, 0x20, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x13, 0x04, 0x43, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0xf4, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x14, 0x4b, 0xf1, 0x95, 0x4b, 0x99, 0x94, 0x51, 0x81,
  0x14, 0x4c, 0xb1, 0x15, 0x5e, 0xa1, 0x06, 0xcc, 0x00, 0x14, 0x57, 0xb9,
  0x95, 0x5c, 0xc9, 0x94, 0x5d, 0x99, 0x06, 0xd0, 0x30, 0x46, 0x00, 0x82,
  0x20, 0x88, 0x7e, 0x63, 0x04, 0x7d, 0xdf, 0xb2, 0xb8, 0x36, 0x46, 0xb0,
  0xfb, 0xa3, 0x4c, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfc, 0x0b,
  0x23, 0x00, 0x63, 0x04, 0x2a, 0x5e, 0x9f, 0xb2, 0x37, 0x46, 0xa0, 0xe2,
  0xf5, 0x29, 0xfb, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x0b, 0x63,
  0x04, 0x20, 0x08, 0x82, 0x20, 0x18, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82,
  0xa0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x33, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x06, 0x78, 0x00, 0xa9, 0x01,
  0x1c, 0xbc, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x60, 0x90,
  0x07, 0xd1, 0x1a, 0xc8, 0x41, 0x1c, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x80, 0x81, 0x1e, 0x48, 0x6c, 0x50, 0x07, 0x75, 0x10, 0x06,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x06, 0x7b, 0x30, 0xb5, 0x81,
  0x1e, 0xe8, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x18,
  0xf0, 0x01, 0xe5, 0x06, 0x7a, 0xa0, 0x07, 0x63, 0x30, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x60, 0xd0, 0x07, 0x15, 0x1b, 0xf0, 0x01, 0x1f, 0x90,
  0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x80, 0x81, 0x1f, 0x58, 0x6d,
  0xc0, 0x07, 0x7c, 0x50, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00,
  0x06, 0x7f, 0x70, 0xc1, 0x41, 0x1f, 0xf4, 0x81, 0x19, 0x8c, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0xb1, 0x0a, 0x78, 0xb0, 0x07, 0x7e, 0x20, 0x07,
  0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xac, 0x90, 0x07, 0x7c,
  0xf0, 0x07, 0x67, 0xc0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xd1,
  0x0a, 0x7a, 0xd0, 0x07, 0xa0, 0x30, 0x07, 0xdd, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0xae, 0xb0, 0x07, 0xa2, 0x10, 0x0a, 0x75, 0xe0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xf1, 0x0a, 0x7c, 0x30, 0x0a, 0xa2,
  0xa0, 0x06, 0xdf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xb0, 0xd0,
  0x07, 0xa4, 0x30, 0x0a, 0x76, 0x00, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xc4, 0x82, 0x1f, 0x90, 0x02, 0x29, 0xe0, 0x41, 0x18, 0x8c,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0b, 0x7f, 0x50, 0x0a, 0xa5,
  0xd0, 0x06, 0x62, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x9b, 0x2a,
  0x78, 0x89, 0x29, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0x82, 0x0d, 0x49, 0x7c, 0x6c, 0x48, 0xe2, 0x63, 0x43, 0x12, 0x9f,
  0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0x70, 0x01, 0x0d, 0x06, 0x21,
  0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x5c, 0x38,
  0x83, 0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf,
  0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x44, 0xbb, 0x10, 0x07, 0x99, 0xe5,
  0x34, 0x5d, 0x27, 0x0b, 0xb2, 0xf0, 0x06, 0xdd, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0x81, 0x09, 0x63, 0x20, 0x1f, 0x13, 0xc8, 0x40, 0x3e, 0x26,
  0x98, 0x01, 0x7c, 0x4c, 0x38, 0x03, 0xf8, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0xc1, 0x14, 0x0e, 0x79, 0x20, 0x04, 0x42, 0x60, 0x66, 0x10, 0xc4,
  0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x72, 0xe0, 0x83, 0x60,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x73, 0x98, 0x83, 0x6d, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x73, 0xa0, 0x83, 0x6d, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x18, 0x74, 0xa8, 0x83, 0x6d, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x98, 0x74, 0xe8, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x18, 0x75, 0xf0, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0x98, 0x75, 0xf8, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x18, 0x76, 0xc8, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98,
  0x76, 0xd0, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x77,
  0x10, 0x05, 0x30, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xe6, 0x1d,
  0x46, 0x01, 0x0c, 0xac, 0x48, 0xe4, 0x63, 0x47, 0x22, 0x1f, 0x13, 0x82,
  0xf8, 0x98, 0xb2, 0xc8, 0xc7, 0x12, 0x47, 0x3e, 0x26, 0x04, 0xf1, 0x31,
  0x06, 0x92, 0x8f, 0x39, 0x90, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc1, 0x23,
  0x1f, 0x2b, 0x1e, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x94, 0x48, 0x3e, 0x56,
  0x50, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x29, 0x96, 0x7c, 0xcc, 0xb1, 0xe4,
  0x63, 0x42, 0x10, 0x1f, 0x6b, 0x34, 0xf9, 0xd8, 0xc2, 0xc9, 0xc7, 0x84,
  0x20, 0x3e, 0xd6, 0x7c, 0xf2, 0x31, 0xca, 0x93, 0x8f, 0x09, 0x41, 0x7c,
  0xcc, 0x0a, 0x03, 0xf9, 0x18, 0x35, 0x06, 0xf2, 0x31, 0x21, 0x88, 0x8f,
  0x41, 0x9f, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x2b, 0x09,
  0x5f, 0xf0, 0x90, 0xc0, 0x9e, 0x30, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x74, 0x27, 0x01, 0x0e, 0x60, 0x70, 0x04, 0xe6, 0x8c, 0x81,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x4b, 0x09, 0x71, 0x10,
  0x03, 0x23, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x45, 0x26, 0xc4,
  0xa1, 0x18, 0x82, 0x62, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80,
  0x91, 0x89, 0x70, 0x08, 0x0c, 0x33, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0xd7, 0x12, 0xe6, 0x50, 0x06, 0x50, 0x60, 0x17, 0x1a,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xba, 0x97, 0x40, 0x87,
  0x33, 0x78, 0x02, 0xb3, 0xd4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0xd0, 0xc5, 0x84, 0x3a, 0xa4, 0x81, 0x13, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0x81, 0xa2, 0x13, 0xea, 0x50, 0x0c, 0x41, 0x31, 0x04, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0xe8, 0x44, 0x3a, 0x04, 0x16, 0x1c,
  0xf2, 0x31, 0xc1, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x4c, 0xea, 0x03, 0xf9,
  0x58, 0xd0, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xba, 0x9c,
  0x90, 0x07, 0x3f, 0x28, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xe8,
  0x74, 0x62, 0x1e, 0xf8, 0x20, 0x17, 0x02, 0xa3, 0x42, 0x41, 0x3e, 0x16,
  0x44, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xae, 0x27, 0xec,
  0x41, 0x14, 0x90, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x3a, 0x9f,
  0xb8, 0x07, 0x50, 0xe0, 0x85, 0xc0, 0xac, 0x52, 0x90, 0x8f, 0x05, 0x95,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x0b, 0x0b, 0x7d, 0x30,
  0x85, 0x25, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4e, 0x2c, 0xf6,
  0x81, 0x14, 0x7e, 0x21, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x65,
  0x2d, 0xf6, 0x21, 0x29, 0x82, 0xa4, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x80, 0x59, 0x0b, 0x7d, 0x08, 0x2c, 0x58, 0xe4, 0x63, 0x02, 0x22,
  0x1f, 0x1b, 0x0a, 0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x41, 0xe4,
  0x16, 0x24, 0xb1, 0x0e, 0xe9, 0x10, 0x0e, 0xe0, 0x00, 0x0f, 0xf0, 0x50,
  0x16, 0x65, 0x21, 0x12, 0xf0, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0x10, 0xc9,
  0x05, 0x4a, 0xc4, 0x43, 0x3b, 0x94, 0x03, 0x39, 0xd0, 0x03, 0x3d, 0xa4,
  0x45, 0x5a, 0x98, 0x04, 0x3d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0x78,
  0x81, 0x12, 0x8b, 0x92, 0xf8, 0x42, 0x2f, 0xf0, 0xc2, 0x88, 0x81, 0x01,
  0x80, 0x20, 0x18, 0x30, 0x78, 0x51, 0x16, 0x81, 0x11, 0x84, 0x7c, 0x8c,
  0x50, 0xe4, 0x63, 0x85, 0x22, 0x1f, 0x33, 0x14, 0xf9, 0x58, 0x33, 0xc4,
  0xc7, 0x9a, 0x21, 0x3e, 0xd6, 0x0c, 0xf1, 0xb1, 0x81, 0x91, 0x8f, 0x0d,
  0x8d, 0x7c, 0x6c, 0x70, 0xe4, 0x63, 0x53, 0x4a, 0xc0, 0xc7, 0x26, 0x95,
  0x80, 0x8f, 0x4d, 0x2b, 0x01, 0x1f, 0x83, 0x06, 0xf9, 0x58, 0x34, 0xc8,
  0xc7, 0xa4, 0x41, 0x3e, 0x36, 0xc0, 0x04, 0x7c, 0x6c, 0x88, 0x09, 0xf8,
  0xd8, 0x20, 0x13, 0xf0, 0xb1, 0x01, 0x93, 0x8f, 0x0d, 0x99, 0x7c, 0x6c,
  0xd0, 0xe4, 0x33, 0x4b, 0x10, 0x0c, 0x54, 0x0c, 0x6e, 0x02, 0x84, 0x46,
  0x30, 0x50, 0x31, 0xc0, 0x09, 0x10, 0x1a, 0xc1, 0x40, 0xc5, 0x20, 0x27,
  0x40, 0x68, 0x04, 0x03, 0x15, 0x04, 0xcc, 0x00, 0xa1, 0x11, 0x58, 0xb0,
  0x16, 0x30, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xcd, 0x35, 0xc4,
  0xa2, 0x25, 0x82, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0x9d, 0x18, 0xe2, 0x63, 0x3c, 0x31, 0xc4, 0xc7, 0x7a, 0x62,
  0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0xbc, 0xc1, 0x16,
  0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0c,
  0x6f, 0xac, 0x45, 0x60, 0x41, 0x21, 0x1f, 0x13, 0x0a, 0xf9, 0xd8, 0x50,
  0xc8, 0xc7, 0x86, 0x93, 0x80, 0x8f, 0x0d, 0x27, 0x01, 0x1f, 0x1b, 0x4e,
  0x02, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0x90, 0x07, 0x5d,
  0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30,
  0xe4, 0x31, 0x17, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5,
  0x20, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xd2, 0x23, 0x2f,
  0xf8, 0x60, 0x0f, 0xf4, 0x60, 0x51, 0x92, 0x11, 0x03, 0x03, 0x00, 0x41,
  0x30, 0x60, 0xd2, 0xc3, 0x36, 0x82, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30,
  0x50, 0xd6, 0x63, 0x2f, 0x1a, 0x66, 0x29, 0x88, 0x61, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x98, 0xf5, 0xc0, 0x8d, 0x60, 0xc4, 0x60, 0x01, 0x40,
  0x10, 0x0c, 0x94, 0xf6, 0xe8, 0x0b, 0x50, 0xf8, 0x03, 0x3f, 0x38, 0x8c,
  0x62, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0xf6, 0xd0, 0x8d, 0xc0,
  0xf2, 0x40, 0x2e, 0xe4, 0x63, 0x04, 0x21, 0x1f, 0x0b, 0x04, 0xf9, 0x58,
  0xa0, 0x17, 0xf0, 0x31, 0xba, 0x48, 0xe2, 0x63, 0x41, 0x20, 0x1f, 0x0b,
  0x02, 0xf9, 0x58, 0x30, 0xc8, 0xc7, 0x82, 0x42, 0x3e, 0x16, 0xe4, 0x05,
  0x7c, 0x4c, 0x2f, 0x40, 0x21, 0x3e, 0x16, 0x04, 0xf2, 0xb1, 0x20, 0x90,
  0x8f, 0x05, 0x83, 0x7c, 0x2c, 0x58, 0xe4, 0x63, 0xc1, 0x5f, 0xc0, 0xc7,
  0x8e, 0x40, 0x3e, 0x66, 0x0a, 0xa6, 0x20, 0x1f, 0x0b, 0x4a, 0x03, 0x3e,
  0x46, 0x51, 0xf2, 0xb1, 0x40, 0x90, 0x8f, 0x05, 0xa5, 0x01, 0x1f, 0x0b,
  0x02, 0xf9, 0x58, 0xf0, 0x1a, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x83, 0x6a, 0x44, 0x7e, 0x23, 0x36, 0x02, 0x43, 0x02, 0xfa, 0x98, 0x6a,
  0xf0, 0x41, 0x7c, 0x6c, 0x35, 0xf8, 0x20, 0x3e, 0xc6, 0x1a, 0x7c, 0x10,
  0x1f, 0x6b, 0x0d, 0x30, 0x88, 0x8f, 0x05, 0x81, 0x7c, 0x2c, 0x08, 0xe4,
  0x63, 0xc1, 0x20, 0x1f, 0x0b, 0x0e, 0xf9, 0x98, 0x70, 0xc8, 0xc7, 0x86,
  0x43, 0x3e, 0x36, 0x98, 0x02, 0x7c, 0x6c, 0x30, 0x05, 0xf8, 0xd8, 0x60,
  0x0a, 0xf0, 0xb1, 0xdb, 0x30, 0x83, 0xf8, 0xd8, 0x25, 0x1e, 0xf2, 0xb1,
  0x40, 0x90, 0x8f, 0x05, 0x69, 0x00, 0x1f, 0xdb, 0x8d, 0x80, 0x3e, 0x16,
  0x4c, 0xf2, 0xb1, 0x20, 0x91, 0x8f, 0x09, 0x89, 0x7c, 0x6c, 0x48, 0xe4,
  0x63, 0xac, 0x80, 0x1f, 0x30, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0x2d, 0x47, 0xda, 0x03, 0x37, 0x82, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0xb0, 0x41, 0x0f, 0xe4, 0x63, 0xc3, 0x1e, 0xc8,
  0xc7, 0x06, 0x3e, 0x90, 0x8f, 0xa1, 0x81, 0x39, 0xc8, 0xc7, 0xd2, 0xc0,
  0x1c, 0xe4, 0x63, 0x6a, 0x60, 0x0e, 0xf2, 0x31, 0x67, 0x80, 0x8f, 0x39,
  0x03, 0x7c, 0xcc, 0x19, 0xe0, 0x63, 0xc9, 0x20, 0x1f, 0x4b, 0x06, 0xf9,
  0x58, 0x32, 0xc8, 0xc7, 0x06, 0x70, 0x80, 0x8f, 0x0d, 0xe0, 0x00, 0x1f,
  0x1b, 0xc0, 0x01, 0x3e, 0x06, 0x0e, 0x69, 0x02, 0x83, 0xe1, 0x86, 0x80,
  0x4c, 0xc0, 0x60, 0x96, 0x41, 0x08, 0x82, 0xd1, 0x84, 0x92, 0x18, 0x46,
  0x0c, 0x1e, 0x00, 0x04, 0xc1, 0x20, 0xa2, 0x13, 0x15, 0xa9, 0x0f, 0xf8,
  0x48, 0x09, 0x94, 0x38, 0x09, 0xfb, 0x40, 0x11, 0x14, 0x41, 0x11, 0xfb,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b,
  0xf2, 0x41, 0x3e, 0x36, 0xe4, 0x83, 0x7c, 0x6c, 0xc8, 0x07, 0xf9, 0xd8,
  0xd0, 0xc0, 0xc7, 0x86, 0x06, 0x3e, 0x36, 0x34, 0xf0, 0x19, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x03, 0x4c, 0x4f, 0x5a, 0x04, 0x3f, 0x74, 0x64, 0x34,
  0x21, 0x10, 0x2e, 0x18, 0xcc, 0x82, 0x96, 0x90, 0x8f, 0x99, 0x88, 0x7a,
  0xc4, 0xc7, 0x4e, 0x44, 0x3d, 0xe2, 0x63, 0x28, 0xa2, 0x1e, 0xf1, 0x19,
  0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0xe5, 0x54, 0x6e, 0x64, 0x10, 0x02,
  0x9d, 0xc8, 0x09, 0x9c, 0xb0, 0x60, 0x45, 0xe4, 0x63, 0x01, 0x4f, 0xc8,
  0xc7, 0x04, 0x9e, 0x90, 0x8f, 0x0d, 0x3c, 0x21, 0x1f, 0x43, 0x86, 0xf8,
  0x18, 0x32, 0xc4, 0xc7, 0x90, 0x21, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82,
  0x60, 0x10, 0xa9, 0x8a, 0x9a, 0xb4, 0x48, 0x8a, 0x0c, 0x42, 0xf0, 0x22,
  0x61, 0x12, 0x26, 0x61, 0xc2, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x26, 0x21, 0x1f, 0x1b, 0x4c, 0x42, 0x3e,
  0x36, 0x98, 0x84, 0x7c, 0x2c, 0x1b, 0xe0, 0x63, 0xd9, 0x00, 0x1f, 0xcb,
  0x06, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x26, 0x2b, 0x66,
  0x12, 0x23, 0x75, 0x32, 0x9a, 0x10, 0x0c, 0x16, 0x98, 0x81, 0x7c, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0xe9, 0x15, 0x55, 0x89, 0x95, 0x58,
  0x29, 0x15, 0x63, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x5e, 0x51,
  0x95, 0x58, 0x89, 0x95, 0x3c, 0x29, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x00, 0xe9, 0x15, 0x55, 0x89, 0x95, 0x58, 0x21, 0x15, 0x62, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x90, 0x5e, 0x51, 0x95, 0x58, 0x89, 0x15, 0x51,
  0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x70, 0x4a, 0x17, 0x2a, 0x02, 0x52, 0xcb, 0xce,
  0xe4, 0xcd, 0xb0, 0xbb, 0xe3, 0xc7, 0xad, 0x6a, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x51, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x16, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x59,
  0x4d, 0x6c, 0x23, 0x49, 0x15, 0xae, 0xea, 0xdf, 0x6a, 0xbb, 0xfd, 0xec,
  0x38, 0xf1, 0xbf, 0x3b, 0xb6, 0x63, 0x67, 0x92, 0x38, 0x8e, 0x27, 0xb1,
  0x1d, 0x7b, 0x98, 0x80, 0xdd, 0x19, 0xb2, 0x0b, 0xec, 0xc2, 0xb2, 0x62,
  0x36, 0x75, 0x58, 0x6d, 0x46, 0x08, 0xed, 0xc2, 0xfe, 0x1d, 0x16, 0xb4,
  0x48, 0x7b, 0x40, 0x9d, 0x00, 0x01, 0x84, 0x08, 0x62, 0xf9, 0xd1, 0x8a,
  0x1b, 0x1c, 0xe6, 0x00, 0x23, 0x90, 0x90, 0x38, 0x6f, 0x32, 0x2b, 0xc1,
  0xac, 0x15, 0x09, 0x0e, 0x2b, 0xcc, 0x20, 0x21, 0x10, 0x07, 0x2e, 0x9c,
  0x40, 0x68, 0x0e, 0xa3, 0x15, 0x1a, 0xf3, 0x5e, 0xb7, 0xbd, 0xe3, 0x30,
  0x3b, 0x9a, 0x81, 0x53, 0x24, 0xf2, 0xa4, 0xd2, 0x57, 0xf5, 0xea, 0x75,
  0xd5, 0x7b, 0xdf, 0xab, 0xaa, 0x76, 0xb5, 0x1f, 0xbd, 0x7c, 0xf9, 0x13,
  0x9c, 0x33, 0x66, 0xe4, 0x98, 0x2f, 0x46, 0x00, 0xec, 0xef, 0x87, 0x3f,
  0xff, 0xf3, 0xc3, 0x94, 0x5f, 0xfc, 0x97, 0xf6, 0xe3, 0xa2, 0x8c, 0x9e,
  0xdb, 0x62, 0xff, 0x9b, 0x8c, 0xc7, 0xb9, 0x0d, 0x23, 0x45, 0x68, 0xb2,
  0x77, 0xe6, 0x1e, 0xfb, 0xdb, 0xe9, 0x00, 0xaf, 0x67, 0xee, 0x9a, 0x0b,
  0x2c, 0x3a, 0x57, 0xd8, 0xf5, 0x09, 0xbb, 0x32, 0xfb, 0x8b, 0xca, 0x27,
  0xda, 0x9f, 0xce, 0x06, 0x48, 0xba, 0x59, 0x2c, 0xde, 0xa8, 0x6d, 0x30,
  0x95, 0x40, 0x31, 0x78, 0x14, 0xbb, 0xb8, 0x62, 0x28, 0x26, 0x86, 0xa4,
  0x28, 0xec, 0xff, 0x44, 0x28, 0xfa, 0xc5, 0x89, 0x3a, 0x05, 0x1e, 0xc3,
  0x12, 0x9d, 0xb0, 0xa1, 0xb5, 0xf4, 0xa4, 0xcf, 0xc8, 0xde, 0xd1, 0x64,
  0x79, 0x3d, 0xcd, 0x6e, 0xbf, 0xff, 0xa8, 0x27, 0xed, 0x38, 0xda, 0x25,
  0x1e, 0xc2, 0x4e, 0x25, 0xbb, 0xe4, 0x43, 0xda, 0x69, 0xf7, 0xb7, 0x4b,
  0xac, 0xb0, 0x2b, 0x29, 0x4b, 0xb9, 0x12, 0xcd, 0xa3, 0x7f, 0xfc, 0xfd,
  0xec, 0x5e, 0xb8, 0x99, 0x58, 0x51, 0xb0, 0xeb, 0x85, 0x9b, 0x68, 0xc7,
  0xee, 0x6f, 0xf7, 0xfc, 0xc8, 0xee, 0xf9, 0x07, 0xd8, 0xbd, 0x38, 0xb2,
  0x7b, 0xf1, 0x01, 0x76, 0x2f, 0x8d, 0xec, 0x5e, 0x7a, 0x80, 0xdd, 0xc9,
  0x78, 0xa3, 0x3e, 0x2f, 0xa9, 0x7b, 0x22, 0x1e, 0xa2, 0xb0, 0x33, 0x39,
  0x55, 0x72, 0x96, 0x93, 0xd3, 0x27, 0x67, 0x39, 0x39, 0x7d, 0x72, 0x96,
  0x93, 0xd3, 0x27, 0x67, 0x39, 0x39, 0x7d, 0x72, 0x96, 0x93, 0xd3, 0x27,
  0x67, 0x39, 0x39, 0xbd, 0xf2, 0x4e, 0x69, 0x6f, 0xb0, 0xd0, 0x19, 0xaa,
  0xe6, 0xed, 0x1f, 0xfe, 0xf5, 0x6b, 0xbf, 0xdf, 0x1b, 0xcc, 0xff, 0x69,
  0xa8, 0xfe, 0xf2, 0xed, 0x77, 0x74, 0x95, 0xfd, 0xf8, 0xc8, 0xd3, 0xde,
  0x38, 0xf4, 0x42, 0x77, 0x0e, 0xa3, 0xea, 0xf7, 0x0e, 0x23, 0xea, 0x57,
  0x0e, 0x2d, 0xf5, 0x27, 0x87, 0x7b, 0xea, 0x37, 0xb1, 0xfc, 0x14, 0xcb,
  0xb7, 0xb0, 0x7c, 0x1b, 0xcb, 0x57, 0xb1, 0x7c, 0x07, 0xcb, 0xf7, 0x0f,
  0xb9, 0xb0, 0x6f, 0xe1, 0x90, 0xef, 0x1a, 0x46, 0x80, 0x3a, 0x0b, 0x70,
  0xc6, 0x0e, 0x50, 0x0b, 0x05, 0x68, 0x81, 0xf0, 0xd1, 0x54, 0x02, 0xfc,
  0x81, 0xf3, 0xdd, 0xc3, 0xb7, 0x70, 0x8e, 0x21, 0x8e, 0xf1, 0xb3, 0x4f,
  0xf2, 0xa9, 0x19, 0xf5, 0x5f, 0x87, 0x42, 0x5d, 0xf4, 0xfb, 0x98, 0x9e,
  0xee, 0x33, 0x21, 0xfa, 0xcc, 0xb2, 0xfb, 0x2c, 0x14, 0xeb, 0x33, 0xed,
  0x99, 0x3e, 0xd7, 0x33, 0x7d, 0x66, 0xe4, 0xfb, 0x8c, 0x15, 0xfb, 0x8c,
  0x57, 0xfa, 0x5c, 0xdb, 0xe9, 0x73, 0x61, 0xf5, 0xb9, 0xe1, 0xf4, 0x39,
  0x2b, 0xf5, 0x39, 0x9f, 0xef, 0x73, 0x2b, 0xd2, 0xe7, 0xa1, 0xa9, 0x3e,
  0xdb, 0xfb, 0xdd, 0x1f, 0x52, 0x8c, 0xc1, 0x76, 0x80, 0xd1, 0x6b, 0x01,
  0xea, 0xbb, 0xd7, 0x0f, 0x8e, 0x22, 0xb6, 0x22, 0xec, 0x3a, 0x13, 0x00,
  0x33, 0x82, 0xec, 0xf0, 0xde, 0x16, 0xdb, 0x0e, 0x70, 0x8a, 0xab, 0x49,
  0xb8, 0x16, 0xd4, 0x0d, 0xea, 0x33, 0x19, 0x8b, 0x6f, 0x07, 0x38, 0x7d,
  0x2d, 0x40, 0x93, 0xf1, 0xa4, 0xa4, 0x3a, 0xde, 0xa7, 0x13, 0xd4, 0x67,
  0xe1, 0x05, 0x3c, 0x94, 0x48, 0xca, 0xa8, 0x33, 0x2b, 0x74, 0x27, 0x24,
  0xc2, 0x3b, 0x49, 0x8f, 0x05, 0xfd, 0xb0, 0xfb, 0xf6, 0xc1, 0xd1, 0x54,
  0x69, 0x4e, 0xec, 0xde, 0x38, 0x38, 0x32, 0x4a, 0xb6, 0xd8, 0x0e, 0xf4,
  0xb1, 0xdd, 0x5f, 0x1f, 0x1c, 0x4d, 0xcf, 0x9f, 0x13, 0xbb, 0xbf, 0x3a,
  0x38, 0x32, 0xe7, 0x41, 0xb0, 0x54, 0x1a, 0x78, 0x2a, 0x0b, 0x42, 0xdd,
  0xfb, 0x87, 0x60, 0x1f, 0x67, 0x2c, 0x18, 0x37, 0x6e, 0x2c, 0xd4, 0x40,
  0x2f, 0xd7, 0x21, 0x94, 0x9a, 0x81, 0x14, 0x7b, 0x7c, 0x60, 0x14, 0xae,
  0xec, 0xa7, 0xc2, 0x0d, 0xd8, 0x7d, 0xeb, 0xe0, 0x28, 0xe6, 0x14, 0x45,
  0xc2, 0xc9, 0x8b, 0x6b, 0x81, 0x6d, 0x82, 0x74, 0x33, 0xf3, 0x8b, 0x82,
  0x62, 0x4c, 0xcc, 0x57, 0x44, 0x02, 0xed, 0xcd, 0xf2, 0xd3, 0xfb, 0x66,
  0xa1, 0x06, 0x49, 0xac, 0xeb, 0x0b, 0x4f, 0xef, 0x27, 0xa3, 0xab, 0x60,
  0x62, 0x3d, 0x11, 0xfd, 0xec, 0x7e, 0x1a, 0x31, 0x15, 0xf9, 0xcc, 0x7e,
  0x22, 0x62, 0x83, 0x8e, 0xf5, 0x64, 0x38, 0xbb, 0x9f, 0x2a, 0xdb, 0x60,
  0x50, 0x7d, 0x21, 0xbb, 0x9f, 0x58, 0x38, 0x07, 0xd3, 0x64, 0x53, 0x78,
  0x62, 0x3f, 0x59, 0x98, 0x85, 0xf4, 0x52, 0x0d, 0xa2, 0xf4, 0x6c, 0xb9,
  0xbb, 0x9f, 0x2e, 0xcd, 0x41, 0x3c, 0x52, 0x93, 0x66, 0xa9, 0x0a, 0x7a,
  0xa9, 0x08, 0xfa, 0x52, 0x08, 0x20, 0x32, 0x27, 0xcd, 0x25, 0x1b, 0x60,
  0xa1, 0x2a, 0xa1, 0x50, 0x94, 0xf1, 0x42, 0x48, 0xc6, 0x17, 0x6c, 0x99,
  0x58, 0xce, 0x83, 0x11, 0x01, 0x98, 0x2a, 0xe7, 0x65, 0x72, 0x05, 0x64,
  0xac, 0x94, 0x97, 0x7a, 0x18, 0x24, 0xec, 0xe4, 0x3d, 0x73, 0x07, 0x3c,
  0x73, 0x65, 0x16, 0x4c, 0xf4, 0xc1, 0x0c, 0x9f, 0x83, 0x57, 0x7a, 0x07,
  0x78, 0x97, 0x7b, 0x7c, 0xc0, 0xfe, 0xf6, 0x1b, 0x95, 0x23, 0x72, 0xc4,
  0x29, 0x0e, 0x10, 0xa6, 0xba, 0x7a, 0x5c, 0x36, 0x9d, 0x0a, 0xd6, 0x97,
  0x07, 0x8c, 0x2b, 0x45, 0x5e, 0xa8, 0xc8, 0x04, 0x9f, 0x85, 0xf0, 0xe7,
  0x92, 0x5e, 0x8c, 0x33, 0x88, 0x3a, 0x8b, 0xc0, 0x23, 0x8b, 0x92, 0x39,
  0x36, 0x84, 0xf5, 0x8a, 0x0c, 0x9b, 0x8b, 0x92, 0xe3, 0xfc, 0x33, 0x4b,
  0x0a, 0x84, 0x2d, 0x5b, 0xc6, 0xe7, 0x15, 0x69, 0x44, 0x14, 0xc9, 0x77,
  0x14, 0x8f, 0xcf, 0x03, 0xf0, 0xa5, 0x24, 0xda, 0xe7, 0x41, 0x44, 0x89,
  0xf3, 0xc7, 0x98, 0x30, 0x11, 0x35, 0x97, 0xb6, 0x87, 0x27, 0xd8, 0xea,
  0x2d, 0xbc, 0x73, 0xbe, 0x1b, 0xce, 0xc5, 0xc0, 0x22, 0x1e, 0x33, 0x73,
  0x1a, 0x24, 0xe2, 0xd2, 0xda, 0xd3, 0x06, 0xff, 0x8c, 0x2b, 0x8c, 0xfc,
  0x24, 0x6e, 0x78, 0xc4, 0xd8, 0x22, 0x4e, 0x58, 0x44, 0xd9, 0xc2, 0xc3,
  0xce, 0x08, 0xdd, 0x2c, 0xbf, 0x39, 0x54, 0x14, 0x1f, 0xa7, 0x50, 0xaf,
  0x44, 0x42, 0x5b, 0xd3, 0x56, 0x11, 0x86, 0xda, 0x39, 0x5f, 0x47, 0xb1,
  0x19, 0xfc, 0x8e, 0x8a, 0xf5, 0x0f, 0x51, 0x7c, 0x86, 0x1a, 0xd4, 0xa3,
  0xd6, 0x2c, 0x4c, 0x59, 0x73, 0xa0, 0x90, 0x6e, 0x21, 0xd0, 0x51, 0x1e,
  0x0d, 0x66, 0x0e, 0xfc, 0x0d, 0x6b, 0x55, 0x80, 0x5b, 0xe7, 0xc0, 0xe7,
  0xc6, 0x3a, 0x2e, 0x2b, 0xd6, 0x22, 0xe6, 0x69, 0x79, 0xc0, 0x15, 0xfa,
  0x56, 0x83, 0x7e, 0x90, 0x8e, 0xe6, 0x43, 0x24, 0xbd, 0x82, 0xb7, 0x60,
  0x63, 0xc7, 0xf6, 0x32, 0xd4, 0x67, 0xb7, 0x2b, 0x94, 0x6b, 0x66, 0x37,
  0x2a, 0x09, 0x1c, 0xcf, 0xe0, 0xcc, 0x4d, 0x12, 0xaa, 0xcc, 0x4d, 0x11,
  0xea, 0xcc, 0xcd, 0x34, 0x5b, 0x7e, 0xde, 0x15, 0xbb, 0x5a, 0x49, 0xaf,
  0xb5, 0x90, 0xa7, 0x96, 0xcc, 0xee, 0xb4, 0xbc, 0xf4, 0xfa, 0x2a, 0x64,
  0xd6, 0x1b, 0x60, 0xac, 0x23, 0xa7, 0x2b, 0x2d, 0x48, 0x36, 0x6b, 0x60,
  0x2e, 0xb7, 0x64, 0x62, 0xad, 0x26, 0xe1, 0x7c, 0x4b, 0xa6, 0x70, 0x0d,
  0x84, 0x9b, 0x75, 0xc8, 0xed, 0xc5, 0x06, 0xd9, 0x75, 0x85, 0x65, 0x89,
  0x9f, 0x96, 0xc2, 0x12, 0xd8, 0x4e, 0xe2, 0x1d, 0xde, 0x5c, 0xab, 0x63,
  0xae, 0x57, 0x8d, 0xec, 0xfa, 0x05, 0xd0, 0xa8, 0xaf, 0xa6, 0xb0, 0xd4,
  0xde, 0xf2, 0x00, 0x22, 0x68, 0xb3, 0x6c, 0x43, 0xfe, 0x03, 0x17, 0x80,
  0xd6, 0x69, 0x62, 0xf9, 0xb8, 0xac, 0x59, 0x35, 0x48, 0x9d, 0xaf, 0x03,
  0xf9, 0x6c, 0xac, 0xdd, 0x50, 0xf3, 0xeb, 0x2d, 0xb0, 0xa6, 0x2f, 0x40,
  0x72, 0xa5, 0x06, 0x59, 0xd4, 0x65, 0x9b, 0xc7, 0x2a, 0xd9, 0x27, 0x2d,
  0x01, 0xf9, 0xe9, 0xb8, 0xbf, 0xa6, 0x35, 0xfe, 0x98, 0xe6, 0x10, 0xaa,
  0x4f, 0x68, 0x1a, 0xa1, 0xfe, 0x29, 0x8d, 0x9e, 0xb7, 0xd0, 0x36, 0xdb,
  0x6c, 0x80, 0x1e, 0x6e, 0x41, 0xa6, 0xd0, 0x05, 0x9a, 0xdf, 0x1f, 0x63,
  0xfd, 0xb7, 0x6a, 0xa6, 0xe4, 0x42, 0xa6, 0xdc, 0x80, 0xe1, 0x85, 0x0f,
  0x22, 0x9f, 0x7b, 0x5d, 0xda, 0x57, 0xa9, 0xf5, 0x63, 0x75, 0x76, 0xd9,
  0x96, 0x34, 0xbf, 0xdd, 0xae, 0x82, 0xb1, 0x6d, 0x7b, 0xc3, 0x7a, 0x1d,
  0xfe, 0x18, 0xfd, 0x98, 0x8b, 0x58, 0x7c, 0xb3, 0xf3, 0xf5, 0xf5, 0xd4,
  0x76, 0xdd, 0xcb, 0x63, 0xbf, 0x71, 0xde, 0x86, 0x48, 0xbb, 0x0e, 0xd0,
  0x6e, 0x83, 0x61, 0x35, 0xa4, 0x86, 0x1c, 0x6a, 0xb8, 0xa9, 0x8d, 0x95,
  0xae, 0x34, 0x36, 0x5c, 0x6c, 0x2f, 0x0f, 0xf4, 0x10, 0x6e, 0xc8, 0x5e,
  0x15, 0x52, 0x9b, 0x35, 0xc8, 0x21, 0x3f, 0xa4, 0x33, 0x6c, 0xc6, 0xb4,
  0x1d, 0xe1, 0x15, 0x68, 0x2f, 0x8a, 0x76, 0xc5, 0xf7, 0x5b, 0x34, 0x2a,
  0x94, 0x63, 0xcd, 0xc2, 0x1c, 0x10, 0x86, 0x99, 0x9b, 0x23, 0x8c, 0x30,
  0xb7, 0xd0, 0x73, 0x81, 0x62, 0x32, 0x44, 0xb5, 0x22, 0x58, 0xed, 0x96,
  0x8b, 0xeb, 0xd1, 0xa1, 0xf1, 0x2d, 0x57, 0x16, 0x77, 0x5c, 0xaf, 0xb0,
  0xd9, 0x05, 0x67, 0xf3, 0x22, 0x68, 0x9b, 0x02, 0xc2, 0x4d, 0x8c, 0xa9,
  0xd7, 0xc0, 0x7d, 0xe4, 0xa2, 0x0f, 0x0d, 0x09, 0x1d, 0x57, 0xe6, 0xd0,
  0xb7, 0x70, 0xaf, 0x0d, 0x25, 0xcc, 0x45, 0x71, 0x53, 0x61, 0x06, 0x62,
  0xa6, 0x89, 0x39, 0xd9, 0x68, 0x4b, 0x87, 0x72, 0xe1, 0x2a, 0x2c, 0x43,
  0xd8, 0x50, 0x18, 0xad, 0x35, 0xe5, 0x92, 0x8b, 0x79, 0xc4, 0xdc, 0x58,
  0x0a, 0x73, 0x36, 0xba, 0xb8, 0x67, 0x85, 0xbf, 0x26, 0x8c, 0xc8, 0x71,
  0x39, 0xd7, 0x69, 0x43, 0xa1, 0xd7, 0x05, 0x5a, 0x47, 0x1a, 0xe6, 0x66,
  0x36, 0x22, 0x24, 0xbb, 0x64, 0x43, 0x0e, 0xdb, 0x39, 0xe4, 0xae, 0xb0,
  0x81, 0x7e, 0x6c, 0x0b, 0x8f, 0xec, 0x28, 0x2e, 0x67, 0xed, 0x58, 0x25,
  0x5b, 0x0b, 0x71, 0x88, 0x3c, 0x11, 0x8f, 0xce, 0x1a, 0xae, 0xa5, 0xe6,
  0x45, 0xc0, 0xb6, 0xcf, 0x67, 0xba, 0xb4, 0x05, 0x0e, 0x3e, 0x97, 0xdb,
  0x6e, 0x7b, 0x0e, 0xe6, 0x8a, 0x9e, 0xcb, 0x60, 0x3e, 0x89, 0x9f, 0x0c,
  0xe6, 0x33, 0x8f, 0x63, 0x51, 0x2e, 0x33, 0x98, 0x53, 0xad, 0x23, 0x80,
  0x5f, 0x6a, 0x43, 0xba, 0x70, 0x09, 0xd2, 0xe5, 0x55, 0xd0, 0x7a, 0x5b,
  0x52, 0xdb, 0xb8, 0x24, 0xb5, 0xe6, 0xaa, 0xcf, 0xbf, 0x88, 0x31, 0x96,
  0x7b, 0xa4, 0x26, 0x8d, 0x0f, 0x57, 0x65, 0x11, 0xd7, 0x1c, 0xf1, 0x6d,
  0xc5, 0x91, 0x6f, 0xc4, 0xd0, 0x4c, 0xc0, 0x3b, 0x8d, 0x6f, 0x21, 0xef,
  0xe4, 0xb3, 0x18, 0xf3, 0x3e, 0xc5, 0xdc, 0x34, 0xe1, 0xf4, 0x88, 0xff,
  0x04, 0x73, 0x29, 0x76, 0xe2, 0x3d, 0x84, 0xbc, 0xe7, 0x3a, 0x5d, 0xe4,
  0xbb, 0x2b, 0x0b, 0x3b, 0x5d, 0xcf, 0xe9, 0xa1, 0xaf, 0xc8, 0xa7, 0xd6,
  0x43, 0xbe, 0xd7, 0x90, 0x8b, 0x0d, 0x3c, 0x4b, 0x23, 0x98, 0xf3, 0xce,
  0xaa, 0x84, 0x66, 0x57, 0x66, 0xac, 0x55, 0x19, 0xde, 0xc0, 0x38, 0x88,
  0xd3, 0xae, 0xc2, 0x8a, 0xc8, 0x77, 0xa1, 0x17, 0xf0, 0x9e, 0x5e, 0x43,
  0xde, 0x3b, 0x0d, 0xdc, 0x0b, 0x6d, 0x83, 0xc6, 0x4f, 0x93, 0xcd, 0x2a,
  0xf1, 0x1f, 0xf0, 0x4d, 0x5c, 0x13, 0xbf, 0x63, 0xbe, 0x33, 0xc8, 0x07,
  0xf9, 0xa9, 0x75, 0x6e, 0xf8, 0xdc, 0x12, 0xdf, 0x9a, 0x6b, 0x07, 0x7c,
  0x20, 0xdf, 0xb8, 0x47, 0x03, 0x9e, 0x3b, 0xc7, 0x2a, 0x9d, 0x4f, 0x16,
  0x22, 0xf1, 0x4f, 0xcf, 0x65, 0x71, 0xdf, 0x38, 0xb8, 0x3f, 0x86, 0x8d,
  0x86, 0xcf, 0x7b, 0x16, 0x79, 0xb7, 0x0a, 0xb8, 0x97, 0x4a, 0x6d, 0xd2,
  0xf9, 0xdc, 0xd3, 0x39, 0x92, 0x46, 0xae, 0xe9, 0xcc, 0x48, 0x23, 0xbf,
  0x56, 0x39, 0x0e, 0x74, 0x8e, 0xa4, 0x91, 0xf7, 0xcc, 0x76, 0xc3, 0xd3,
  0xdd, 0x55, 0xc8, 0xe3, 0x58, 0x5a, 0x13, 0xd7, 0x80, 0x8b, 0xc8, 0x5b,
  0x52, 0xd3, 0xe3, 0x92, 0xb1, 0x8f, 0x0c, 0xcc, 0xd4, 0x45, 0x4d, 0x53,
  0xdb, 0x52, 0x61, 0x8f, 0xf8, 0xf5, 0xa1, 0x22, 0x3c, 0xc6, 0xae, 0xf7,
  0x32, 0xd3, 0x75, 0x69, 0xf1, 0x6b, 0x03, 0xfa, 0x56, 0x67, 0xac, 0x57,
  0x65, 0xba, 0x83, 0xf9, 0x60, 0x5b, 0xbe, 0x0d, 0x67, 0x9b, 0x03, 0x65,
  0x3a, 0x8e, 0xf3, 0x3d, 0xea, 0xb7, 0xd9, 0xa8, 0xed, 0x25, 0xef, 0x7c,
  0x83, 0xfc, 0xb7, 0xa3, 0x73, 0x57, 0x05, 0x2b, 0xde, 0x7a, 0x19, 0xd7,
  0xf8, 0x47, 0x11, 0x5f, 0x43, 0xcc, 0xe2, 0x79, 0xcc, 0x19, 0xbe, 0xda,
  0xf1, 0x65, 0x6c, 0x51, 0x1e, 0x1d, 0x65, 0x91, 0xde, 0x5d, 0x56, 0xb4,
  0x81, 0xb6, 0x88, 0xa9, 0xf6, 0x55, 0xe2, 0xcb, 0x72, 0xaa, 0x57, 0x2d,
  0xf2, 0x6b, 0x2a, 0xab, 0x85, 0xc8, 0x27, 0x44, 0xa0, 0x79, 0x10, 0xfd,
  0xf9, 0x11, 0x4d, 0xf4, 0xcb, 0x42, 0xbf, 0x68, 0x9d, 0xf3, 0x50, 0xcc,
  0x13, 0xe1, 0x10, 0xbe, 0x74, 0x37, 0x07, 0xa1, 0x68, 0x5c, 0x83, 0xa8,
  0xe8, 0x66, 0xcd, 0xd7, 0xf1, 0xec, 0xbf, 0xc1, 0x35, 0x3c, 0x0c, 0x3f,
  0x4f, 0xef, 0xa0, 0x42, 0x55, 0xf2, 0x52, 0x4d, 0x2a, 0xe5, 0xba, 0xa4,
  0xb3, 0x5e, 0x9b, 0xaf, 0x4a, 0x7d, 0x01, 0xe3, 0x59, 0xaa, 0x4b, 0x66,
  0x08, 0xb8, 0xff, 0x37, 0xd4, 0x2f, 0xa3, 0xfe, 0x47, 0xa7, 0xbe, 0xa8,
  0xa3, 0xdf, 0x81, 0xe3, 0xcf, 0xaa, 0xf4, 0xdf, 0xc0, 0xa4, 0x8e, 0x0a,
  0xf1, 0x35, 0xa9, 0xa3, 0x4f, 0xdb, 0x21, 0xe5, 0xa4, 0x8e, 0xea, 0x61,
  0xf5, 0xa4, 0x8e, 0x3e, 0xc0, 0xda, 0xda, 0x49, 0x9d, 0x8e, 0x25, 0xa2,
  0x9f, 0xd4, 0x91, 0xe0, 0x82, 0xbf, 0x67, 0xde, 0xa8, 0x79, 0xb7, 0x7f,
  0xfc, 0x07, 0x43, 0x4c, 0x9c, 0xd4, 0x51, 0x3d, 0x6e, 0x4d, 0x38, 0x3d,
  0x9a, 0x57, 0x4c, 0x04, 0x32, 0xf6, 0x45, 0x4c, 0x04, 0xa2, 0x8c, 0x75,
  0x13, 0x81, 0x68, 0x63, 0xdd, 0x84, 0xd3, 0xfa, 0x58, 0x87, 0x4e, 0xf3,
  0x89, 0x39, 0x7c, 0x7b, 0x74, 0x9a, 0xab, 0x27, 0xe3, 0xd0, 0xd0, 0x69,
  0xe5, 0x3f, 0xbe, 0x51, 0x6b, 0xe4, 0xf4, 0x48, 0xee, 0xde, 0x85, 0x42,
  0xec, 0xc9, 0xcb, 0x4f, 0x3d, 0xf7, 0xda, 0xab, 0x5f, 0xfc, 0xc2, 0x73,
  0xcf, 0x8e, 0xff, 0xd5, 0x79, 0x63, 0xf4, 0x2f, 0xcb, 0x2b, 0x8c, 0x7e,
  0x5e, 0x32, 0xfa, 0xfd, 0x87, 0x23, 0xeb, 0xbe, 0x17, 0x24, 0x4f, 0x8d,
  0xda, 0xe3, 0x4f, 0xdb, 0xcf, 0xf8, 0x6d, 0xe5, 0x3d, 0x76, 0x9e, 0x1d,
  0xb5, 0xc7, 0x0e, 0xbc, 0x3c, 0x6a, 0x8f, 0xe5, 0x55, 0x6a, 0xab, 0xf0,
  0x5e, 0xff, 0x97, 0x46, 0xed, 0x40, 0x18, 0xfb, 0x37, 0x84, 0xab, 0x06,
  0x6d, 0x00, 0x00, 0x00, 0xd2, 0x21, 0x27, 0x9b, 0x07, 0xf8, 0x98, 0xe4,
  0x85, 0xd6, 0x25, 0xee, 0xb3, 0xc7, 0xd2, 0x05
};
