#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettNormalMapEffect_PSNormalPixelLightingTxNoSpec.pdb
; shader hash: 04da6746dedda0168eab2f953d250192
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSNormalPixelLightingTxNoSpec
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTxNoSpec() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %3, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %5
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %12
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = fmul fast float %31, %35
  %37 = fmul fast float %32, %35
  %38 = fmul fast float %33, %35
  %39 = call float @dx.op.dot3.f32(i32 55, float %9, float %10, float %11, float %9, float %10, float %11)  ; Dot3(ax,ay,az,bx,by,bz)
  %40 = call float @dx.op.unary.f32(i32 25, float %39)  ; Rsqrt(value)
  %41 = fmul fast float %40, %9
  %42 = fmul fast float %40, %10
  %43 = fmul fast float %40, %11
  %44 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %45 = extractvalue %dx.types.ResRet.f32 %44, 0
  %46 = extractvalue %dx.types.ResRet.f32 %44, 1
  %47 = fmul fast float %45, 2.000000e+00
  %48 = fmul fast float %46, 2.000000e+00
  %49 = fadd fast float %47, -1.000000e+00
  %50 = fadd fast float %48, -1.000000e+00
  %51 = call float @dx.op.dot2.f32(i32 54, float %49, float %50, float %49, float %50)  ; Dot2(ax,ay,bx,by)
  %52 = fsub fast float 1.000000e+00, %51
  %53 = call float @dx.op.unary.f32(i32 24, float %52)  ; Sqrt(value)
  %54 = call float @dx.op.unary.f32(i32 83, float %12)  ; DerivCoarseX(value)
  %55 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %57 = call float @dx.op.unary.f32(i32 84, float %12)  ; DerivCoarseY(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %59 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %60 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %61 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %62 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %63 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %64 = fmul fast float %59, %55
  %65 = fmul fast float %58, %56
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %57, %56
  %68 = fmul fast float %59, %54
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %58, %54
  %71 = fmul fast float %57, %55
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %72, %58
  %74 = fmul fast float %69, %59
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %66, %59
  %77 = fmul fast float %72, %57
  %78 = fsub fast float %76, %77
  %79 = fmul fast float %69, %57
  %80 = fmul fast float %66, %58
  %81 = fsub fast float %79, %80
  %82 = fmul fast float %69, %56
  %83 = fmul fast float %72, %55
  %84 = fsub fast float %82, %83
  %85 = fmul fast float %72, %54
  %86 = fmul fast float %66, %56
  %87 = fsub fast float %85, %86
  %88 = fmul fast float %66, %55
  %89 = fmul fast float %69, %54
  %90 = fsub fast float %88, %89
  %91 = fmul fast float %75, %60
  %92 = call float @dx.op.tertiary.f32(i32 46, float %62, float %84, float %91)  ; FMad(a,b,c)
  %93 = fmul fast float %78, %60
  %94 = call float @dx.op.tertiary.f32(i32 46, float %62, float %87, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %81, %60
  %96 = call float @dx.op.tertiary.f32(i32 46, float %62, float %90, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.dot3.f32(i32 55, float %92, float %94, float %96, float %92, float %94, float %96)  ; Dot3(ax,ay,az,bx,by,bz)
  %98 = call float @dx.op.unary.f32(i32 25, float %97)  ; Rsqrt(value)
  %99 = fmul fast float %75, %61
  %100 = call float @dx.op.tertiary.f32(i32 46, float %63, float %84, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %78, %61
  %102 = call float @dx.op.tertiary.f32(i32 46, float %63, float %87, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %81, %61
  %104 = call float @dx.op.tertiary.f32(i32 46, float %63, float %90, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.dot3.f32(i32 55, float %100, float %102, float %104, float %100, float %102, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %106 = call float @dx.op.unary.f32(i32 25, float %105)  ; Rsqrt(value)
  %107 = fmul fast float %106, %100
  %108 = fmul fast float %106, %102
  %109 = fmul fast float %106, %104
  %110 = fmul fast float %92, %49
  %111 = fmul fast float %110, %98
  %112 = call float @dx.op.tertiary.f32(i32 46, float %50, float %107, float %111)  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %53, float %41, float %112)  ; FMad(a,b,c)
  %114 = fmul fast float %94, %49
  %115 = fmul fast float %114, %98
  %116 = call float @dx.op.tertiary.f32(i32 46, float %50, float %108, float %115)  ; FMad(a,b,c)
  %117 = call float @dx.op.tertiary.f32(i32 46, float %53, float %42, float %116)  ; FMad(a,b,c)
  %118 = fmul fast float %96, %49
  %119 = fmul fast float %118, %98
  %120 = call float @dx.op.tertiary.f32(i32 46, float %50, float %109, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %53, float %43, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.dot3.f32(i32 55, float %113, float %117, float %121, float %113, float %117, float %121)  ; Dot3(ax,ay,az,bx,by,bz)
  %123 = call float @dx.op.unary.f32(i32 25, float %122)  ; Rsqrt(value)
  %124 = fmul fast float %123, %113
  %125 = fmul fast float %123, %117
  %126 = fmul fast float %123, %121
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = fsub fast float %36, %128
  %140 = fsub fast float %37, %129
  %141 = fsub fast float %38, %130
  %142 = call float @dx.op.dot3.f32(i32 55, float %139, float %140, float %141, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = call float @dx.op.unary.f32(i32 25, float %142)  ; Rsqrt(value)
  %144 = fmul fast float %143, %140
  %145 = fmul fast float %143, %141
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 1
  %149 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = fsub fast float %36, %147
  %159 = fsub fast float %37, %148
  %160 = fsub fast float %38, %149
  %161 = call float @dx.op.dot3.f32(i32 55, float %158, float %159, float %160, float %158, float %159, float %160)  ; Dot3(ax,ay,az,bx,by,bz)
  %162 = call float @dx.op.unary.f32(i32 25, float %161)  ; Rsqrt(value)
  %163 = fmul fast float %162, %159
  %164 = fmul fast float %162, %160
  %165 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.f32 %165, 0
  %167 = extractvalue %dx.types.CBufRet.f32 %165, 1
  %168 = extractvalue %dx.types.CBufRet.f32 %165, 2
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %174 = extractvalue %dx.types.CBufRet.f32 %173, 0
  %175 = extractvalue %dx.types.CBufRet.f32 %173, 1
  %176 = extractvalue %dx.types.CBufRet.f32 %173, 2
  %177 = fsub fast float %36, %166
  %178 = fsub fast float %37, %167
  %179 = fsub fast float %38, %168
  %180 = call float @dx.op.dot3.f32(i32 55, float %177, float %178, float %179, float %177, float %178, float %179)  ; Dot3(ax,ay,az,bx,by,bz)
  %181 = call float @dx.op.unary.f32(i32 25, float %180)  ; Rsqrt(value)
  %182 = fmul fast float %181, %178
  %183 = fmul fast float %181, %179
  %184 = fsub fast float -0.000000e+00, %129
  %185 = fsub fast float -0.000000e+00, %130
  %186 = fsub fast float -0.000000e+00, %148
  %187 = fsub fast float -0.000000e+00, %149
  %188 = fsub fast float -0.000000e+00, %167
  %189 = fsub fast float -0.000000e+00, %168
  %190 = fmul fast float %124, %128
  %191 = fsub fast float -0.000000e+00, %190
  %192 = call float @dx.op.tertiary.f32(i32 46, float %184, float %125, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %185, float %126, float %192)  ; FMad(a,b,c)
  %194 = fmul fast float %124, %147
  %195 = fsub fast float -0.000000e+00, %194
  %196 = call float @dx.op.tertiary.f32(i32 46, float %186, float %125, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %187, float %126, float %196)  ; FMad(a,b,c)
  %198 = fmul fast float %124, %166
  %199 = fsub fast float -0.000000e+00, %198
  %200 = call float @dx.op.tertiary.f32(i32 46, float %188, float %125, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %189, float %126, float %200)  ; FMad(a,b,c)
  %202 = fmul fast float %139, %124
  %203 = fmul fast float %202, %143
  %204 = call float @dx.op.tertiary.f32(i32 46, float %144, float %125, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %145, float %126, float %204)  ; FMad(a,b,c)
  %206 = fmul fast float %158, %124
  %207 = fmul fast float %206, %162
  %208 = call float @dx.op.tertiary.f32(i32 46, float %163, float %125, float %207)  ; FMad(a,b,c)
  %209 = call float @dx.op.tertiary.f32(i32 46, float %164, float %126, float %208)  ; FMad(a,b,c)
  %210 = fmul fast float %177, %124
  %211 = fmul fast float %210, %181
  %212 = call float @dx.op.tertiary.f32(i32 46, float %182, float %125, float %211)  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %183, float %126, float %212)  ; FMad(a,b,c)
  %214 = fcmp fast olt float %193, 0.000000e+00
  %215 = fcmp fast olt float %197, 0.000000e+00
  %216 = fcmp fast olt float %201, 0.000000e+00
  %217 = select i1 %214, float 0.000000e+00, float 1.000000e+00
  %218 = select i1 %215, float 0.000000e+00, float 1.000000e+00
  %219 = select i1 %216, float 0.000000e+00, float 1.000000e+00
  %220 = fmul fast float %217, %193
  %221 = fmul fast float %218, %197
  %222 = fmul fast float %219, %201
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %225 = call float @dx.op.binary.f32(i32 35, float %205, float 0.000000e+00)  ; FMax(a,b)
  %226 = call float @dx.op.binary.f32(i32 35, float %209, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %213, float 0.000000e+00)  ; FMax(a,b)
  %228 = fmul fast float %225, %217
  %229 = fmul fast float %226, %218
  %230 = fmul fast float %227, %219
  %231 = call float @dx.op.unary.f32(i32 23, float %228)  ; Log(value)
  %232 = call float @dx.op.unary.f32(i32 23, float %229)  ; Log(value)
  %233 = call float @dx.op.unary.f32(i32 23, float %230)  ; Log(value)
  %234 = fmul fast float %231, %224
  %235 = fmul fast float %232, %224
  %236 = fmul fast float %233, %224
  %237 = call float @dx.op.unary.f32(i32 21, float %234)  ; Exp(value)
  %238 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
  %239 = call float @dx.op.unary.f32(i32 21, float %236)  ; Exp(value)
  %240 = fmul fast float %237, %193
  %241 = fmul fast float %238, %197
  %242 = fmul fast float %239, %201
  %243 = fmul fast float %220, %132
  %244 = call float @dx.op.tertiary.f32(i32 46, float %221, float %151, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %222, float %170, float %244)  ; FMad(a,b,c)
  %246 = fmul fast float %220, %133
  %247 = call float @dx.op.tertiary.f32(i32 46, float %221, float %152, float %246)  ; FMad(a,b,c)
  %248 = call float @dx.op.tertiary.f32(i32 46, float %222, float %171, float %247)  ; FMad(a,b,c)
  %249 = fmul fast float %220, %134
  %250 = call float @dx.op.tertiary.f32(i32 46, float %221, float %153, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %222, float %172, float %250)  ; FMad(a,b,c)
  %252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.f32 %252, 0
  %254 = extractvalue %dx.types.CBufRet.f32 %252, 1
  %255 = extractvalue %dx.types.CBufRet.f32 %252, 2
  %256 = fmul fast float %253, %245
  %257 = fmul fast float %254, %248
  %258 = fmul fast float %255, %251
  %259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.f32 %259, 0
  %261 = extractvalue %dx.types.CBufRet.f32 %259, 1
  %262 = extractvalue %dx.types.CBufRet.f32 %259, 2
  %263 = fadd fast float %256, %260
  %264 = fadd fast float %257, %261
  %265 = fadd fast float %258, %262
  %266 = fmul fast float %240, %136
  %267 = call float @dx.op.tertiary.f32(i32 46, float %241, float %155, float %266)  ; FMad(a,b,c)
  %268 = call float @dx.op.tertiary.f32(i32 46, float %242, float %174, float %267)  ; FMad(a,b,c)
  %269 = fmul fast float %240, %137
  %270 = call float @dx.op.tertiary.f32(i32 46, float %241, float %156, float %269)  ; FMad(a,b,c)
  %271 = call float @dx.op.tertiary.f32(i32 46, float %242, float %175, float %270)  ; FMad(a,b,c)
  %272 = fmul fast float %240, %138
  %273 = call float @dx.op.tertiary.f32(i32 46, float %241, float %157, float %272)  ; FMad(a,b,c)
  %274 = call float @dx.op.tertiary.f32(i32 46, float %242, float %176, float %273)  ; FMad(a,b,c)
  %275 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %276 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %277 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %278 = fmul fast float %23, %263
  %279 = fmul fast float %24, %264
  %280 = fmul fast float %25, %265
  %281 = fmul fast float %268, %26
  %282 = fmul fast float %281, %275
  %283 = fmul fast float %271, %26
  %284 = fmul fast float %283, %276
  %285 = fmul fast float %274, %26
  %286 = fmul fast float %285, %277
  %287 = fadd fast float %282, %278
  %288 = fadd fast float %284, %279
  %289 = fadd fast float %286, %280
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %292 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %293 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %294 = fmul fast float %291, %26
  %295 = fmul fast float %292, %26
  %296 = fmul fast float %293, %26
  %297 = fsub fast float %294, %287
  %298 = fsub fast float %295, %288
  %299 = fsub fast float %296, %289
  %300 = fmul fast float %297, %15
  %301 = fmul fast float %298, %15
  %302 = fmul fast float %299, %15
  %303 = fadd fast float %300, %287
  %304 = fadd fast float %301, %288
  %305 = fadd fast float %302, %289
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %303)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %304)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %305)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!14}
!dx.entryPoints = !{!15}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!12 = !{!13}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!15 = !{void ()* @PSNormalPixelLightingTxNoSpec, !"PSNormalPixelLightingTxNoSpec", !16, !5, null}
!16 = !{!17, !28, null}
!17 = !{!18, !21, !24, !27}
!18 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !19, i8 2, i32 1, i8 2, i32 0, i8 0, !20}
!19 = !{i32 0}
!20 = !{i32 3, i32 3}
!21 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !23}
!22 = !{i32 1}
!23 = !{i32 3, i32 15}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !26}
!25 = !{i32 2}
!26 = !{i32 3, i32 7}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !19, i8 2, i32 1, i8 4, i32 3, i8 0, !23}
!28 = !{!29}
!29 = !{i32 0, !"SV_Target", i8 9, i8 16, !19, i8 0, i32 1, i8 4, i32 0, i8 0, !23}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 31
;   num_shared_vgprs: 0
;   num_sgprs: 54
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1600
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x4667da04, 0x16a0ddde                // 000000000000: D580DA04 03FE8D67 16A0DDDE
;   v_nop_xbox_data 0x952fab8e, 0x9201253d                // 00000000000C: D580AB8E 03FF2B2F 9201253D
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[28:29], exec                          // 00000000001C: BE9C047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s13, s12                                // 000000000024: BE8D030C
;   s_mov_b32     s12, s11                                // 000000000028: BE8C030B
;   s_mov_b32     s2, s9                                  // 00000000002C: BE820309
;   s_mov_b32     s9, 0                                   // 000000000030: BE890380
;   s_mov_b32     s3, 0                                   // 000000000034: BE830380
;   s_mov_b32     s11, 0                                  // 000000000038: BE8B0380
;   s_load_dwordx8  s[0:7], s[2:3], null                  // 00000000003C: F40C0001 FA000000
;   s_load_dwordx4  s[24:27], s[10:11], null              // 000000000044: F4080605 FA000000
;   s_load_dwordx8  s[16:23], s[8:9], null                // 00000000004C: F40C0404 FA000000
;   s_mov_b32     m0, s15                                 // 000000000054: BEFC030F
;   s_or_b32      s33, s13, lit(0x00100000)               // 000000000058: 8821FF0D 00100000
;   v_interp_p1_f32  v8, v0, attr0.x                      // 000000000060: C8200000
;   v_interp_p1_f32  v9, v0, attr0.y                      // 000000000064: C8240100
;   v_interp_p1_f32  v17, v0, attr1.x                     // 000000000068: C8440400
;   v_interp_p1_f32  v15, v0, attr2.y                     // 00000000006C: C83C0900
;   v_interp_p1_f32  v18, v0, attr1.y                     // 000000000070: C8480500
;   v_interp_p2_f32  v8, v1, attr0.x                      // 000000000074: C8210001
;   v_interp_p2_f32  v9, v1, attr0.y                      // 000000000078: C8250101
;   v_interp_p2_f32  v17, v1, attr1.x                     // 00000000007C: C8450401
;   s_mov_b32     s32, s12                                // 000000000080: BEA0030C
;   s_mov_b32     s34, -1                                 // 000000000084: BEA203C1
;   s_mov_b32     s35, lit(0x11014fac)                    // 000000000088: BEA303FF 11014FAC
;   v_interp_p2_f32  v18, v1, attr1.y                     // 000000000090: C8490501
;   v_interp_p1_f32  v14, v0, attr2.x                     // 000000000094: C8380800
;   v_interp_p2_f32  v15, v1, attr2.y                     // 000000000098: C83D0901
;   s_buffer_load_dwordx8  s[44:51], s[32:35], 0x0000c0   // 00000000009C: F42C0B10 FA0000C0
;   ds_swizzle_b32  v21, v17 offset:32768                 // 0000000000A4: D8D48000 15000011
;   ds_swizzle_b32  v22, v17 offset:32853                 // 0000000000AC: D8D48055 16000011
;   s_waitcnt     lgkmcnt(0)                              // 0000000000B4: BF8CC07F
;   image_sample  v[2:5], v[8:9], s[16:23], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000B8: F0800F08 00C40208
;   image_sample  v[6:7], v[8:9], s[0:7], s[24:27] dmask:0x3 dim:SQ_RSRC_IMG_2D // 0000000000C0: F0800308 00C00608
;   ds_swizzle_b32  v23, v17 offset:32938                 // 0000000000C8: D8D480AA 17000011
;   v_interp_p1_f32  v16, v0, attr2.z                     // 0000000000D0: C8400A00
;   v_interp_p2_f32  v14, v1, attr2.x                     // 0000000000D4: C8390801
;   v_mul_legacy_f32  v20, v15, v15                       // 0000000000D8: 0E281F0F
;   ds_swizzle_b32  v24, v18 offset:32768                 // 0000000000DC: D8D48000 18000012
;   ds_swizzle_b32  v25, v18 offset:32853                 // 0000000000E4: D8D48055 19000012
;   ds_swizzle_b32  v26, v18 offset:32938                 // 0000000000EC: D8D480AA 1A000012
;   v_interp_p1_f32  v10, v0, attr3.x                     // 0000000000F4: C8280C00
;   v_interp_p1_f32  v11, v0, attr3.y                     // 0000000000F8: C82C0D00
;   v_interp_p1_f32  v12, v0, attr3.z                     // 0000000000FC: C8300E00
;   v_interp_p1_f32  v13, v0, attr3.w                     // 000000000100: C8340F00
;   v_interp_p1_f32  v19, v0, attr1.z                     // 000000000104: C84C0600
;   v_interp_p2_f32  v16, v1, attr2.z                     // 000000000108: C8410A01
;   v_fmac_f32    v20, v14, v14                           // 00000000010C: 56281D0E
;   v_interp_p1_f32  v0, v0, attr1.w                      // 000000000110: C8000700
;   v_interp_p2_f32  v10, v1, attr3.x                     // 000000000114: C8290C01
;   v_interp_p2_f32  v11, v1, attr3.y                     // 000000000118: C82D0D01
;   v_interp_p2_f32  v12, v1, attr3.z                     // 00000000011C: C8310E01
;   v_interp_p2_f32  v13, v1, attr3.w                     // 000000000120: C8350F01
;   v_interp_p2_f32  v19, v1, attr1.z                     // 000000000124: C84D0601
;   v_fmac_f32    v20, v16, v16                           // 000000000128: 56282110
;   v_interp_p2_f32  v0, v1, attr1.w                      // 00000000012C: C8010701
;   v_sub_f32     v22, v22, v21                           // 000000000130: 082C2B16
;   s_waitcnt     lgkmcnt(3)                              // 000000000134: BF8CC37F
;   v_sub_f32     v21, v23, v21                           // 000000000138: 082A2B17
;   ds_swizzle_b32  v1, v19 offset:32768                  // 00000000013C: D8D48000 01000013
;   ds_swizzle_b32  v27, v19 offset:32853                 // 000000000144: D8D48055 1B000013
;   v_sub_f32     v18, s45, v18                           // 00000000014C: 0824242D
;   ds_swizzle_b32  v23, v9 offset:32853                  // 000000000150: D8D48055 17000009
;   s_waitcnt     lgkmcnt(4)                              // 000000000158: BF8CC47F
;   v_sub_f32     v25, v25, v24                           // 00000000015C: 08323119
;   s_waitcnt     lgkmcnt(3)                              // 000000000160: BF8CC37F
;   v_sub_f32     v24, v26, v24                           // 000000000164: 0830311A
;   v_sub_f32     v17, s44, v17                           // 000000000168: 0822222C
;   v_mul_legacy_f32  v26, v18, v18                       // 00000000016C: 0E342512
;   v_fmac_f32    v26, v17, v17                           // 000000000170: 56342311
;   s_waitcnt     lgkmcnt(1)                              // 000000000174: BF8CC17F
;   v_sub_f32     v27, v27, v1                            // 000000000178: 0836031B
;   s_waitcnt     vmcnt(1)                                // 00000000017C: BF8C3F71
;   v_mul_legacy_f32  v2, v2, v10                         // 000000000180: 0E041502
;   v_mul_legacy_f32  v3, v3, v11                         // 000000000184: 0E061703
;   v_mul_legacy_f32  v4, v4, v12                         // 000000000188: 0E081904
;   v_mul_legacy_f32  v5, v5, v13                         // 00000000018C: 0E0A1B05
;   v_rsq_f32     v13, v20                                // 000000000190: 7E1A5D14
;   ds_swizzle_b32  v10, v19 offset:32938                 // 000000000194: D8D480AA 0A000013
;   ds_swizzle_b32  v20, v9 offset:32768                  // 00000000019C: D8D48000 14000009
;   ds_swizzle_b32  v11, v8 offset:32768                  // 0000000001A4: D8D48000 0B000008
;   ds_swizzle_b32  v12, v8 offset:32853                  // 0000000001AC: D8D48055 0C000008
;   ds_swizzle_b32  v8, v8 offset:32938                   // 0000000001B4: D8D480AA 08000008
;   s_waitcnt     vmcnt(0)                                // 0000000001BC: BF8C3F70
;   v_fma_f32     v7, v7, 2.0, -1.0                       // 0000000001C0: D54B0007 03CDE907
;   v_fma_f32     v6, v6, 2.0, -1.0                       // 0000000001C8: D54B0006 03CDE906
;   ds_swizzle_b32  v9, v9 offset:32938                   // 0000000001D0: D8D480AA 09000009
;   v_mul_legacy_f32  v14, v13, v14                       // 0000000001D8: 0E1C1D0D
;   v_mul_legacy_f32  v15, v13, v15                       // 0000000001DC: 0E1E1F0D
;   v_mul_legacy_f32  v13, v13, v16                       // 0000000001E0: 0E1A210D
;   v_sub_f32     v16, s46, v19                           // 0000000001E4: 0820262E
;   v_fma_f32     v19, -v7, v7, 1.0                       // 0000000001E8: D54B0013 23CA0F07
;   v_fmac_f32    v26, v16, v16                           // 0000000001F0: 56342110
;   v_fmac_f32    v19, -v6, v6                            // 0000000001F4: D52B0013 20020D06
;   s_waitcnt     lgkmcnt(5)                              // 0000000001FC: BF8CC57F
;   v_sub_f32     v1, v10, v1                             // 000000000200: 0802030A
;   v_rsq_f32     v26, v26                                // 000000000204: 7E345D1A
;   s_waitcnt     lgkmcnt(2)                              // 000000000208: BF8CC27F
;   v_sub_f32     v10, v12, v11                           // 00000000020C: 0814170C
;   v_sub_f32     v12, v23, v20                           // 000000000210: 08182917
;   s_waitcnt     lgkmcnt(1)                              // 000000000214: BF8CC17F
;   v_sub_f32     v8, v8, v11                             // 000000000218: 08101708
;   v_sqrt_f32    v19, v19                                // 00000000021C: 7E266713
;   s_and_b64     exec, exec, s[28:29]                    // 000000000220: 87FE1C7E
;   v_mul_legacy_f32  v11, v21, v25                       // 000000000224: 0E163315
;   v_mul_legacy_f32  v23, v24, v27                       // 000000000228: 0E2E3718
;   v_mul_legacy_f32  v28, v1, v22                        // 00000000022C: 0E382D01
;   s_waitcnt     lgkmcnt(0)                              // 000000000230: BF8CC07F
;   v_sub_f32     v9, v9, v20                             // 000000000234: 08122909
;   s_buffer_load_dwordx16  s[0:15], s[32:35], null       // 000000000238: F4300010 FA000000
;   v_fma_f32     v11, v24, v22, -v11                     // 000000000240: D54B000B 842E2D18
;   v_fma_f32     v23, v1, v25, -v23                      // 000000000248: D54B0017 845E3301
;   v_fma_f32     v28, v21, v27, -v28                     // 000000000250: D54B001C 84723715
;   s_buffer_load_dwordx16  s[16:31], s[32:35], 0x000040  // 000000000258: F4300410 FA000040
;   s_buffer_load_dwordx16  s[32:47], s[32:35], 0x000080  // 000000000260: F4300810 FA000080
;   v_mul_legacy_f32  v29, v11, v21                       // 000000000268: 0E3A2B0B
;   v_mul_legacy_f32  v30, v23, v27                       // 00000000026C: 0E3C3717
;   v_fma_f32     v29, v23, v1, -v29                      // 000000000270: D54B001D 84760317
;   v_mul_legacy_f32  v1, v28, v1                         // 000000000278: 0E02031C
;   v_fma_f32     v20, v11, v22, -v30                     // 00000000027C: D54B0014 847A2D0B
;   v_mul_legacy_f32  v22, v28, v22                       // 000000000284: 0E2C2D1C
;   v_mul_legacy_f32  v30, v29, v10                       // 000000000288: 0E3C151D
;   v_fma_f32     v1, v11, v24, -v1                       // 00000000028C: D54B0001 8406310B
;   v_mul_legacy_f32  v11, v11, v25                       // 000000000294: 0E16330B
;   v_mul_legacy_f32  v29, v29, v12                       // 000000000298: 0E3A191D
;   v_mul_legacy_f32  v24, v23, v24                       // 00000000029C: 0E303117
;   v_fmac_f32    v30, v8, v20                            // 0000000002A0: 563C2908
;   v_fma_f32     v22, v23, v25, -v22                     // 0000000002A4: D54B0016 845A3317
;   v_fma_f32     v11, v28, v27, -v11                     // 0000000002AC: D54B000B 842E371C
;   v_fmac_f32    v29, v9, v20                            // 0000000002B4: 563A2909
;   v_mul_legacy_f32  v20, v1, v10                        // 0000000002B8: 0E281501
;   v_mul_legacy_f32  v1, v1, v12                         // 0000000002BC: 0E021901
;   v_fma_f32     v21, v28, v21, -v24                     // 0000000002C0: D54B0015 84622B1C
;   v_fmac_f32    v20, v8, v11                            // 0000000002C8: 56281708
;   v_fmac_f32    v1, v9, v11                             // 0000000002CC: 56021709
;   v_mul_legacy_f32  v23, v21, v10                       // 0000000002D0: 0E2E1515
;   v_mul_legacy_f32  v11, v21, v12                       // 0000000002D4: 0E161915
;   v_mul_legacy_f32  v21, v30, v30                       // 0000000002D8: 0E2A3D1E
;   v_mul_legacy_f32  v10, v29, v29                       // 0000000002DC: 0E143B1D
;   v_mul_legacy_f32  v12, v30, v6                        // 0000000002E0: 0E180D1E
;   v_fmac_f32    v23, v8, v22                            // 0000000002E4: 562E2D08
;   v_fmac_f32    v11, v9, v22                            // 0000000002E8: 56162D09
;   v_fmac_f32    v21, v20, v20                           // 0000000002EC: 562A2914
;   v_fmac_f32    v10, v1, v1                             // 0000000002F0: 56140301
;   v_mul_legacy_f32  v20, v20, v6                        // 0000000002F4: 0E280D14
;   v_mul_legacy_f32  v6, v23, v6                         // 0000000002F8: 0E0C0D17
;   v_fmac_f32    v21, v23, v23                           // 0000000002FC: 562A2F17
;   v_fmac_f32    v10, v11, v11                           // 000000000300: 5614170B
;   s_waitcnt     lgkmcnt(0)                              // 000000000304: BF8CC07F
;   v_fma_f32     v23, v16, v26, -s22                     // 000000000308: D54B0017 805A3510
;   v_rsq_f32     v9, v21                                 // 000000000310: 7E125D15
;   v_rsq_f32     v8, v10                                 // 000000000314: 7E105D0A
;   v_mul_legacy_f32  v12, v12, v9                        // 000000000318: 0E18130C
;   v_mul_legacy_f32  v21, v8, v29                        // 00000000031C: 0E2A3B08
;   v_mul_legacy_f32  v10, v8, v1                         // 000000000320: 0E140308
;   v_mul_legacy_f32  v1, v6, v9                          // 000000000324: 0E021306
;   v_mul_legacy_f32  v6, v8, v11                         // 000000000328: 0E0C1708
;   v_fma_f32     v8, v18, v26, -s17                      // 00000000032C: D54B0008 80463512
;   v_fmac_f32    v12, v7, v21                            // 000000000334: 56182B07
;   v_mul_legacy_f32  v21, v20, v9                        // 000000000338: 0E2A1314
;   v_fma_f32     v9, v17, v26, -s12                      // 00000000033C: D54B0009 80323511
;   v_fmac_f32    v1, v7, v6                              // 000000000344: 56020D07
;   v_fmac_f32    v12, v19, v15                           // 000000000348: 56181F13
;   v_fmac_f32    v21, v7, v10                            // 00000000034C: 562A1507
;   v_fma_f32     v7, v18, v26, -s13                      // 000000000350: D54B0007 80363512
;   v_fmac_f32    v1, v19, v13                            // 000000000358: 56021B13
;   v_fma_f32     v15, v17, v26, -s16                     // 00000000035C: D54B000F 80423511
;   v_mul_legacy_f32  v6, v12, v12                        // 000000000364: 0E0C190C
;   v_fmac_f32    v21, v19, v14                           // 000000000368: 562A1D13
;   v_mul_legacy_f32  v11, v7, v7                         // 00000000036C: 0E160F07
;   v_fma_f32     v14, v18, v26, -s21                     // 000000000370: D54B000E 80563512
;   v_mul_legacy_f32  v18, v8, v8                         // 000000000378: 0E241108
;   v_fma_f32     v13, v16, v26, -s14                     // 00000000037C: D54B000D 803A3510
;   v_fmac_f32    v6, v21, v21                            // 000000000384: 560C2B15
;   v_fmac_f32    v11, v9, v9                             // 000000000388: 56161309
;   v_fma_f32     v19, v16, v26, -s18                     // 00000000038C: D54B0013 804A3510
;   v_fmac_f32    v18, v15, v15                           // 000000000394: 56241F0F
;   v_fma_f32     v17, v17, v26, -s20                     // 000000000398: D54B0011 80523511
;   v_fmac_f32    v6, v1, v1                              // 0000000003A0: 560C0301
;   v_mul_legacy_f32  v20, v14, v14                       // 0000000003A4: 0E281D0E
;   v_fmac_f32    v11, v13, v13                           // 0000000003A8: 56161B0D
;   v_fmac_f32    v18, v19, v19                           // 0000000003AC: 56242713
;   v_rsq_f32     v6, v6                                  // 0000000003B0: 7E0C5D06
;   v_fmac_f32    v20, v17, v17                           // 0000000003B4: 56282311
;   v_rsq_f32     v22, v11                                // 0000000003B8: 7E2C5D0B
;   v_fmac_f32    v20, v23, v23                           // 0000000003BC: 56282F17
;   v_mul_legacy_f32  v10, v6, v21                        // 0000000003C0: 0E142B06
;   v_rsq_f32     v18, v18                                // 0000000003C4: 7E245D12
;   v_mul_legacy_f32  v12, v6, v12                        // 0000000003C8: 0E181906
;   v_mul_legacy_f32  v16, v6, v1                         // 0000000003CC: 0E200306
;   v_mul_legacy_f32  v9, v9, v10                         // 0000000003D0: 0E121509
;   v_mul_legacy_f32  v21, s12, v10                       // 0000000003D4: 0E2A140C
;   v_rsq_f32     v20, v20                                // 0000000003D8: 7E285D14
;   v_mul_legacy_f32  v11, v22, v13                       // 0000000003DC: 0E161B16
;   v_mul_legacy_f32  v13, v17, v10                       // 0000000003E0: 0E1A1511
;   v_mul_legacy_f32  v17, s16, v10                       // 0000000003E4: 0E221410
;   v_fma_f32     v6, -s13, v12, -v21                     // 0000000003E8: D54B0006 A456180D
;   v_mul_legacy_f32  v15, v15, v10                       // 0000000003F0: 0E1E150F
;   v_mul_legacy_f32  v7, v22, v7                         // 0000000003F4: 0E0E0F16
;   v_mul_legacy_f32  v9, v9, v22                         // 0000000003F8: 0E122D09
;   v_fma_f32     v17, -s17, v12, -v17                    // 0000000003FC: D54B0011 A4461811
;   v_mul_legacy_f32  v10, s20, v10                       // 000000000404: 0E141414
;   v_fmac_f32    v6, -s14, v16                           // 000000000408: D52B0006 2002200E
;   v_mul_legacy_f32  v22, v18, v8                        // 000000000410: 0E2C1112
;   v_fmac_f32    v9, v7, v12                             // 000000000414: 56121907
;   v_mul_legacy_f32  v7, v15, v18                        // 000000000418: 0E0E250F
;   v_fma_f32     v10, -s21, v12, -v10                    // 00000000041C: D54B000A A42A1815
;   v_mul_legacy_f32  v18, v18, v19                       // 000000000424: 0E242712
;   v_mul_legacy_f32  v14, v20, v14                       // 000000000428: 0E1C1D14
;   v_fmac_f32    v9, v11, v16                            // 00000000042C: 5612210B
;   v_fmac_f32    v7, v22, v12                            // 000000000430: 560E1916
;   v_mul_legacy_f32  v13, v13, v20                       // 000000000434: 0E1A290D
;   v_cmp_gt_f32  vcc, 0, v6                              // 000000000438: 7C080C80
;   v_fmac_f32    v17, -s18, v16                          // 00000000043C: D52B0011 20022012
;   v_mul_legacy_f32  v11, v20, v23                       // 000000000444: 0E162F14
;   v_fmac_f32    v7, v18, v16                            // 000000000448: 560E2112
;   v_fmac_f32    v13, v14, v12                           // 00000000044C: 561A190E
;   v_cndmask_b32  v12, 1.0, 0, vcc                       // 000000000450: D501000C 01A900F2
;   v_max_f32     v9, 0, v9                               // 000000000458: 20121280
;   v_cmp_gt_f32  vcc, 0, v17                             // 00000000045C: 7C082280
;   v_fmac_f32    v10, -s22, v16                          // 000000000460: D52B000A 20022016
;   v_fmac_f32    v13, v11, v16                           // 000000000468: 561A210B
;   v_max_f32     v7, 0, v7                               // 00000000046C: 200E0E80
;   v_mul_legacy_f32  v9, v9, v12                         // 000000000470: 0E121909
;   v_cndmask_b32  v14, 1.0, 0, vcc                       // 000000000474: D501000E 01A900F2
;   v_cmp_gt_f32  vcc, 0, v10                             // 00000000047C: 7C081480
;   v_max_f32     v8, 0, v13                              // 000000000480: 20101A80
;   v_mul_legacy_f32  v12, v12, v6                        // 000000000484: 0E180D0C
;   v_log_f32     v9, v9                                  // 000000000488: 7E124F09
;   v_mul_legacy_f32  v7, v7, v14                         // 00000000048C: 0E0E1D07
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000490: D501000B 01A900F2
;   v_mul_legacy_f32  v15, v14, v17                       // 000000000498: 0E1E230E
;   v_mul_legacy_f32  v13, s24, v12                       // 00000000049C: 0E1A1818
;   v_mul_legacy_f32  v14, s25, v12                       // 0000000004A0: 0E1C1819
;   v_log_f32     v7, v7                                  // 0000000004A4: 7E0E4F07
;   v_mul_legacy_f32  v8, v8, v11                         // 0000000004A8: 0E101708
;   v_mul_legacy_f32  v12, s26, v12                       // 0000000004AC: 0E18181A
;   v_mul_legacy_f32  v19, v11, v10                       // 0000000004B0: 0E26150B
;   v_mul_legacy_f32  v9, s11, v9                         // 0000000004B4: 0E12120B
;   v_fmac_f32    v14, s29, v15                           // 0000000004B8: 561C1E1D
;   v_log_f32     v8, v8                                  // 0000000004BC: 7E104F08
;   v_fmac_f32    v12, s30, v15                           // 0000000004C0: 56181E1E
;   v_fmac_f32    v13, s28, v15                           // 0000000004C4: 561A1E1C
;   v_mul_legacy_f32  v7, s11, v7                         // 0000000004C8: 0E0E0E0B
;   v_exp_f32     v9, v9                                  // 0000000004CC: 7E124B09
;   v_fmac_f32    v14, s33, v19                           // 0000000004D0: 561C2621
;   v_fmac_f32    v13, s32, v19                           // 0000000004D4: 561A2620
;   v_fmac_f32    v12, s34, v19                           // 0000000004D8: 56182622
;   v_mul_legacy_f32  v8, s11, v8                         // 0000000004DC: 0E10100B
;   v_exp_f32     v7, v7                                  // 0000000004E0: 7E0E4B07
;   v_fma_f32     v15, s0, v13, s4                        // 0000000004E4: D54B000F 00121A00
;   v_mul_legacy_f32  v6, v9, v6                          // 0000000004EC: 0E0C0D09
;   v_exp_f32     v8, v8                                  // 0000000004F0: 7E104B08
;   v_fma_f32     v9, s1, v14, s5                         // 0000000004F4: D54B0009 00161C01
;   v_mul_legacy_f32  v2, v2, v15                         // 0000000004FC: 0E041F02
;   v_mul_legacy_f32  v11, s37, v6                        // 000000000500: 0E160C25
;   v_mul_legacy_f32  v1, v7, v17                         // 000000000504: 0E022307
;   v_mul_legacy_f32  v7, s38, v6                         // 000000000508: 0E0E0C26
;   v_mul_legacy_f32  v6, s36, v6                         // 00000000050C: 0E0C0C24
;   v_mul_legacy_f32  v3, v3, v9                          // 000000000510: 0E061303
;   v_mul_legacy_f32  v8, v8, v10                         // 000000000514: 0E101508
;   v_fmac_f32    v11, s41, v1                            // 000000000518: 56160229
;   v_fmac_f32    v6, s40, v1                             // 00000000051C: 560C0228
;   v_fmac_f32    v7, s42, v1                             // 000000000520: 560E022A
;   v_fma_f32     v1, s2, v12, s6                         // 000000000524: D54B0001 001A1802
;   v_fmac_f32    v11, s45, v8                            // 00000000052C: 5616102D
;   v_fmac_f32    v6, s44, v8                             // 000000000530: 560C102C
;   v_fmac_f32    v7, s46, v8                             // 000000000534: 560E102E
;   v_mul_legacy_f32  v4, v4, v1                          // 000000000538: 0E080304
;   v_mul_legacy_f32  v1, v6, v5                          // 00000000053C: 0E020B06
;   v_mul_legacy_f32  v6, v11, v5                         // 000000000540: 0E0C0B0B
;   v_mul_legacy_f32  v7, v7, v5                          // 000000000544: 0E0E0B07
;   v_fmac_f32    v2, s8, v1                              // 000000000548: 56040208
;   v_fmac_f32    v3, s9, v6                              // 00000000054C: 56060C09
;   v_fmac_f32    v4, s10, v7                             // 000000000550: 56080E0A
;   v_fma_f32     v1, s48, v5, -v2                        // 000000000554: D54B0001 840A0A30
;   v_fma_f32     v6, s49, v5, -v3                        // 00000000055C: D54B0006 840E0A31
;   v_fma_f32     v7, s50, v5, -v4                        // 000000000564: D54B0007 84120A32
;   v_fmac_f32    v2, v1, v0                              // 00000000056C: 56040101
;   v_fmac_f32    v3, v6, v0                              // 000000000570: 56060106
;   v_fmac_f32    v4, v7, v0                              // 000000000574: 56080107
;   s_nop         0x0000                                  // 000000000578: BF800000
;   s_nop         0x0000                                  // 00000000057C: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000580: 5E000702
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000584: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000588: F8001C0F 00000100
;   s_endpgm                                              // 000000000590: BF810000
;   s_code_end                                            // 000000000594: BF9F0000
;   s_code_end                                            // 000000000598: BF9F0000
;   s_code_end                                            // 00000000059C: BF9F0000
;   s_code_end                                            // 0000000005A0: BF9F0000
;   s_code_end                                            // 0000000005A4: BF9F0000
;   s_code_end                                            // 0000000005A8: BF9F0000
;   s_code_end                                            // 0000000005AC: BF9F0000
;   s_code_end                                            // 0000000005B0: BF9F0000
;   s_code_end                                            // 0000000005B4: BF9F0000
;   s_code_end                                            // 0000000005B8: BF9F0000
;   s_code_end                                            // 0000000005BC: BF9F0000
;   s_code_end                                            // 0000000005C0: BF9F0000
;   s_code_end                                            // 0000000005C4: BF9F0000
;   s_code_end                                            // 0000000005C8: BF9F0000
;   s_code_end                                            // 0000000005CC: BF9F0000
;   s_code_end                                            // 0000000005D0: BF9F0000
;   s_code_end                                            // 0000000005D4: BF9F0000
;   s_code_end                                            // 0000000005D8: BF9F0000
;   s_code_end                                            // 0000000005DC: BF9F0000
;   s_code_end                                            // 0000000005E0: BF9F0000
;   s_code_end                                            // 0000000005E4: BF9F0000
;   s_code_end                                            // 0000000005E8: BF9F0000
;   s_code_end                                            // 0000000005EC: BF9F0000
;   s_code_end                                            // 0000000005F0: BF9F0000
;   s_code_end                                            // 0000000005F4: BF9F0000
;   s_code_end                                            // 0000000005F8: BF9F0000
;   s_code_end                                            // 0000000005FC: BF9F0000
;   s_code_end                                            // 000000000600: BF9F0000
;   s_code_end                                            // 000000000604: BF9F0000
;   s_code_end                                            // 000000000608: BF9F0000
;   s_code_end                                            // 00000000060C: BF9F0000
;   s_code_end                                            // 000000000610: BF9F0000
;   s_code_end                                            // 000000000614: BF9F0000
;   s_code_end                                            // 000000000618: BF9F0000
;   s_code_end                                            // 00000000061C: BF9F0000
;   s_code_end                                            // 000000000620: BF9F0000
;   s_code_end                                            // 000000000624: BF9F0000
;   s_code_end                                            // 000000000628: BF9F0000
;   s_code_end                                            // 00000000062C: BF9F0000
;   s_code_end                                            // 000000000630: BF9F0000
;   s_code_end                                            // 000000000634: BF9F0000
;   s_code_end                                            // 000000000638: BF9F0000
;   s_code_end                                            // 00000000063C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 15
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 13
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 60, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 68, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 76, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
; 
;   // entry used resources info
;   used_resources_count: 4
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 49
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSNormalPixelLightingTxNoSpec)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 30 {
;     scratch_en: 0
;     user_sgpr: 15
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 350
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, off, off, off done vm         // 000000000010: F8001801 00000002
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x302,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v3, off, off done vm          // 000000000010: F8001803 00000302
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x502,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v5, off, off done vm          // 000000000010: F8001803 00000502
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000702,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v3                       // 000000000008: 5E000702
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20702,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v2, v3                      // 000000000000: D7690000 00020702
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20702,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v2, v3                      // 000000000000: D7680000 00020702
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20702,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v2, v3                          // 000000000000: D76A0000 00020702
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20702,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v2, v3                          // 000000000000: D76B0000 00020702
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040302,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v3, v4, v5 done vm            // 000000000010: F800180F 05040302
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=31,NumSGPR=54,LDS=0,Scratch=0,WaveSize=64,Occupancy=16
; VAlu:232,SAlu:30,VMem:2,SMem:7,LDS:15,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTxNoSpec[] = {
  0x44, 0x58, 0x42, 0x43, 0x98, 0x4d, 0xae, 0x48, 0x26, 0x31, 0xb5, 0xf7,
  0xf8, 0xaa, 0x7f, 0xe5, 0xc5, 0xda, 0x8d, 0xb8, 0x01, 0x00, 0x00, 0x00,
  0x50, 0x1c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xbc, 0x02, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x30, 0x04, 0x00, 0x00,
  0x4c, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x88, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54,
  0x78, 0x4e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xcc, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d,
  0x61, 0x6c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x54, 0x78, 0x4e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x2e,
  0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0xda, 0x67, 0x46, 0xde, 0xdd, 0xa0, 0x16,
  0x8e, 0xab, 0x2f, 0x95, 0x3d, 0x25, 0x01, 0x92, 0x44, 0x58, 0x49, 0x4c,
  0xfc, 0x17, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xff, 0x05, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x70, 0x11, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x88, 0x11, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xe8, 0x11, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xfc, 0x11, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0c, 0x12, 0x00, 0x00,
  0xde, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xec, 0x17, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x62, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x70, 0x11, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x59, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x7e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a,
  0xc4, 0x40, 0x0c, 0x03, 0x55, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18,
  0x86, 0xa1, 0x10, 0x17, 0xc1, 0x10, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61,
  0x20, 0x6d, 0x8e, 0x20, 0x28, 0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37,
  0x10, 0x30, 0x8c, 0x40, 0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38,
  0xcc, 0xc3, 0x3c, 0xb8, 0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d,
  0xc8, 0x43, 0x39, 0xc8, 0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38,
  0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38,
  0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e,
  0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e,
  0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2,
  0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea,
  0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6,
  0x81, 0x1e, 0xde, 0x41, 0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2,
  0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90,
  0x00, 0x86, 0x24, 0x0e, 0x23, 0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec,
  0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4,
  0x50, 0x0f, 0xf2, 0x50, 0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5,
  0x30, 0x0e, 0xf4, 0xf0, 0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef,
  0x10, 0x0e, 0xf4, 0xc0, 0x06, 0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e,
  0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4,
  0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60,
  0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0,
  0x87, 0x7a, 0x90, 0x87, 0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28,
  0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78,
  0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0,
  0x03, 0x24, 0x90, 0x25, 0x99, 0x39, 0x40, 0x26, 0x01, 0x78, 0xd5, 0xe1,
  0x48, 0xd3, 0x02, 0x60, 0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31,
  0x11, 0x91, 0x84, 0x1a, 0x90, 0x24, 0x07, 0x14, 0x45, 0x49, 0x12, 0x4c,
  0xd1, 0x94, 0xd4, 0x9b, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6,
  0x59, 0x88, 0x88, 0x9d, 0x80, 0x89, 0x40, 0x01, 0x41, 0x6c, 0x4a, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xa3,
  0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0xa7, 0x03, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x2c, 0x10, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d,
  0xca, 0xa0, 0x3c, 0xca, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42,
  0x28, 0x83, 0x02, 0xa1, 0x71, 0x06, 0x80, 0xce, 0x19, 0x00, 0x5a, 0x67,
  0x00, 0xa8, 0x9d, 0x01, 0x20, 0x77, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00,
  0x8e, 0xe3, 0x38, 0x8e, 0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90,
  0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa,
  0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a,
  0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa,
  0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2,
  0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63,
  0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34,
  0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37,
  0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x2c, 0x13, 0x04, 0x82, 0xd9,
  0x20, 0x18, 0xc7, 0x04, 0x81, 0x68, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e,
  0x6e, 0x82, 0x40, 0x38, 0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x63, 0xb0,
  0x11, 0x98, 0x20, 0x10, 0xcf, 0x04, 0x81, 0x80, 0x36, 0x08, 0x47, 0xb4,
  0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x67, 0xc0,
  0x6d, 0x48, 0x0c, 0xea, 0x39, 0x0c, 0x03, 0x3a, 0xa4, 0x0d, 0xc2, 0x54,
  0x4d, 0x10, 0xd6, 0xa0, 0x9b, 0x20, 0x10, 0xd1, 0x06, 0xe4, 0xb8, 0x9e,
  0xe3, 0x30, 0x30, 0x60, 0x43, 0x90, 0x4d, 0x10, 0xda, 0xc0, 0xdb, 0x80,
  0x1c, 0xdb, 0x73, 0x1c, 0xc6, 0x01, 0x6c, 0x08, 0xb8, 0x0d, 0x84, 0x05,
  0x68, 0xdd, 0x04, 0xc1, 0x0d, 0xbe, 0x0d, 0xc1, 0x37, 0x41, 0x10, 0x00,
  0x76, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78,
  0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78,
  0x4e, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e,
  0x9e, 0xa4, 0x88, 0x26, 0x08, 0x45, 0x35, 0x41, 0x28, 0xac, 0x0d, 0xc1,
  0x31, 0x41, 0x28, 0xae, 0x09, 0x02, 0x21, 0x6d, 0x10, 0xd0, 0x00, 0x0d,
  0x36, 0x2c, 0xc7, 0x18, 0x90, 0x41, 0x19, 0x98, 0xc1, 0x19, 0x18, 0x67,
  0x70, 0x94, 0x41, 0x1a, 0x6c, 0x08, 0x8c, 0x09, 0x42, 0x81, 0x4d, 0x10,
  0x88, 0x69, 0x83, 0x80, 0x06, 0x6d, 0xb0, 0x61, 0x31, 0xc6, 0x80, 0x0c,
  0xca, 0x60, 0x0d, 0xce, 0xc0, 0x60, 0x03, 0xa3, 0x0c, 0xdc, 0x60, 0x43,
  0x00, 0x4d, 0x10, 0x8a, 0x6c, 0x82, 0x40, 0x50, 0x1b, 0x04, 0x34, 0x90,
  0x83, 0x0d, 0x0b, 0x34, 0x06, 0x64, 0x50, 0x06, 0x70, 0x70, 0x06, 0x46,
  0x1c, 0x40, 0x65, 0x30, 0x07, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36,
  0x2c, 0x68, 0x50, 0x07, 0x64, 0x50, 0x06, 0x66, 0x70, 0x06, 0x06, 0x1b,
  0xa0, 0x41, 0x19, 0xb8, 0xc1, 0x06, 0x42, 0x0d, 0xde, 0x80, 0x0e, 0xec,
  0x80, 0xc9, 0x94, 0xd5, 0x17, 0x55, 0x98, 0xdc, 0x59, 0x19, 0xdd, 0x04,
  0xa1, 0xd0, 0x36, 0x2c, 0x07, 0x1e, 0x90, 0x41, 0x1e, 0x98, 0x41, 0x19,
  0x18, 0x6c, 0x70, 0x94, 0x81, 0x1b, 0x6c, 0x08, 0xf4, 0x60, 0xc3, 0x70,
  0x07, 0x7b, 0x00, 0x6c, 0x28, 0xc2, 0x40, 0x0c, 0xf8, 0xc0, 0x03, 0x5a,
  0xe1, 0x89, 0xbd, 0xe1, 0xb9, 0x8c, 0xbd, 0xb5, 0xc1, 0xa5, 0xb1, 0x95,
  0xc9, 0xb9, 0xbc, 0xc1, 0xd1, 0xa5, 0xbd, 0xb9, 0xcd, 0x4d, 0x09, 0x84,
  0x2a, 0x6c, 0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
  0x02, 0xa2, 0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b,
  0xdb, 0x94, 0xe0, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57,
  0x26, 0x37, 0x25, 0x48, 0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91,
  0x95, 0xc9, 0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09, 0x98, 0x32, 0x64,
  0x78, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
  0x82, 0xae, 0x0e, 0x19, 0x9e, 0x8b, 0x5d, 0x5a, 0xd9, 0x5d, 0x12, 0xd9,
  0x14, 0x5d, 0x18, 0x5d, 0xd9, 0x94, 0xe0, 0xab, 0x43, 0x86, 0xe7, 0x52,
  0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37, 0x25,
  0xe0, 0x03, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x2e, 0x00, 0x00, 0x00, 0x06, 0xd0, 0xa5, 0xec, 0xe9, 0x44, 0x0c, 0xb0,
  0xa4, 0xc8, 0x45, 0x2c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0x75,
  0x3a, 0xec, 0x43, 0x08, 0x76, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80,
  0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc2, 0x36, 0x5c, 0xbe, 0xf3,
  0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01,
  0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x29, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f,
  0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x06, 0xce, 0x70,
  0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x64, 0xfb, 0xc5, 0x6d, 0x1b, 0x81, 0x33,
  0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30,
  0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4,
  0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x00, 0xf3,
  0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f,
  0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25,
  0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6,
  0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10,
  0x61, 0x7e, 0x71, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x45, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xc4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x46, 0x59, 0x14, 0x45, 0xc1, 0x14, 0xd7, 0x0c, 0x40, 0x21, 0x94, 0x5d,
  0xb9, 0x95, 0x4c, 0x99, 0x06, 0x14, 0x6a, 0x40, 0x29, 0x94, 0x5c, 0x19,
  0x95, 0x4b, 0xa9, 0x14, 0x5e, 0x61, 0x14, 0x1b, 0x0d, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x33, 0x00, 0x23, 0x00, 0x63, 0x04,
  0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xd0, 0xc9, 0x41, 0x63, 0x06, 0x71, 0x10, 0x07, 0xdc, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x74, 0x73, 0xe0, 0x9c, 0x41, 0x1c, 0xc4,
  0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x1d, 0x1d, 0x3c, 0x65,
  0x20, 0x07, 0x72, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x41, 0x57,
  0x07, 0x10, 0x1a, 0xcc, 0xc1, 0x1c, 0x7c, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xfc, 0x01, 0xe6, 0x06, 0x74, 0xa0, 0x06, 0xd9, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0xa0, 0x90, 0xbd, 0x41, 0x1d, 0x80, 0x81,
  0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x28, 0x68, 0x70, 0x60,
  0x07, 0x6b, 0xb0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a,
  0x5b, 0x1c, 0xdc, 0x81, 0x1a, 0x70, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0x8c, 0x02, 0x57, 0x07, 0x78, 0xe0, 0x06, 0xdd, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0xa4, 0xd0, 0xd9, 0x41, 0x1e, 0x90, 0x81, 0x37,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x29, 0x78, 0x77, 0xa0, 0x07,
  0x6f, 0xf0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x61, 0x0a, 0x1f,
  0x1f, 0xec, 0x41, 0x1c, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xa7, 0x00, 0x06, 0x7d, 0xc0, 0x07, 0x67, 0x10, 0x06, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xa0, 0x42, 0x18, 0xf8, 0x41, 0x1f, 0xc8,
  0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x0a, 0x62,
  0xf0, 0x07, 0x7e, 0x10, 0x07, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x86, 0x2a, 0x8c, 0xc1, 0x1f, 0xfc, 0x41, 0x1d, 0x90, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xab, 0x40, 0x06, 0xa0, 0x00, 0x0a,
  0x6b, 0x50, 0x06, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xd0, 0xa8, 0x82,
  0x06, 0x3d, 0x42, 0x40, 0x51, 0xa1, 0x10, 0x0a, 0x66, 0x40, 0x8d, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0x18, 0x21, 0xc9, 0xc7, 0x08, 0x49, 0x3e, 0x46, 0x48, 0xf2, 0x31, 0x42,
  0x92, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xae, 0xd0, 0x06,
  0x97, 0x18, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0x82, 0x0d, 0x53, 0x7c, 0x6c, 0x98, 0xe2, 0x63, 0xc3, 0x14, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0x72, 0x61, 0x0e, 0x06, 0x21, 0x18,
  0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x5c, 0x98, 0x83,
  0xc0, 0x8a, 0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0xbe, 0x80, 0x07, 0x5e, 0xc7, 0x79,
  0x1d, 0x37, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x91, 0x2f, 0xe0, 0x41,
  0x60, 0x01, 0x18, 0xc8, 0xc7, 0x04, 0x30, 0x90, 0x8f, 0x0d, 0x60, 0x20,
  0x9f, 0x11, 0x83, 0x07, 0x00, 0x41, 0x30, 0x68, 0xc8, 0x81, 0x0e, 0xd6,
  0x20, 0x0d, 0xb8, 0xcd, 0x0d, 0xdc, 0x60, 0x17, 0x76, 0x01, 0x14, 0xdc,
  0x60, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0xc0, 0x84, 0x39, 0x90, 0x8f,
  0x09, 0x74, 0x20, 0x1f, 0x13, 0xec, 0x00, 0x3e, 0x26, 0xdc, 0x01, 0x7c,
  0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x60, 0x42, 0x87, 0x3c, 0x10, 0x02,
  0x21, 0xb0, 0x3b, 0x08, 0xe2, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0xd1, 0x3a, 0xac, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11,
  0x3b, 0x94, 0x82, 0x1a, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xd4,
  0x0e, 0xa6, 0xa0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xb9,
  0xc3, 0x29, 0xa8, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xef,
  0x70, 0x0a, 0x6d, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11, 0x3c,
  0xa0, 0x42, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x14, 0x0f,
  0xa9, 0xd0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xc9, 0xc3,
  0x2a, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xf3, 0xc0,
  0x0a, 0x6c, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11, 0x3d, 0xb0,
  0x82, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x54, 0x0f, 0xad,
  0xe0, 0x06, 0x56, 0x24, 0xf2, 0xb1, 0x23, 0x91, 0x8f, 0x09, 0x41, 0x7c,
  0x4c, 0x59, 0xe4, 0x63, 0x89, 0x23, 0x1f, 0x13, 0x82, 0xf8, 0x18, 0x03,
  0xc9, 0xc7, 0x1c, 0x48, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0xe0, 0x91, 0x8f,
  0x15, 0x8f, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0x4a, 0x24, 0x1f, 0x2b, 0x28,
  0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x14, 0x4b, 0x3e, 0xe6, 0x58, 0xf2, 0x31,
  0x21, 0x88, 0x8f, 0x35, 0x9a, 0x7c, 0x6c, 0xe1, 0xe4, 0x63, 0x42, 0x10,
  0x1f, 0x6b, 0x3e, 0xf9, 0x18, 0xe5, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0x66,
  0x85, 0x81, 0x7c, 0x8c, 0x1a, 0x03, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0xa0,
  0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xb9, 0x44, 0x3c,
  0x78, 0x48, 0x60, 0x4f, 0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x34, 0x98, 0x98, 0x07, 0x30, 0x38, 0x02, 0x73, 0xc6, 0x40, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xc9, 0x44, 0x3d, 0x88, 0x81,
  0x11, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0x83, 0x13, 0xf2, 0x50,
  0x0c, 0x41, 0x31, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xe1,
  0x84, 0x3c, 0x04, 0x86, 0x99, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x40, 0xb3, 0x89, 0x7c, 0x28, 0x03, 0x28, 0xb0, 0x0b, 0x0d, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x1a, 0x4e, 0xec, 0xc3, 0x19,
  0x3c, 0x81, 0x59, 0x6a, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xd0, 0x74, 0xa2, 0x1f, 0xd2, 0xc0, 0x09, 0x46, 0x0c, 0x16, 0x00, 0x04,
  0xc1, 0xe0, 0x01, 0x0b, 0x7d, 0x28, 0x86, 0xa0, 0x18, 0x82, 0x11, 0x03,
  0x03, 0x00, 0x41, 0x30, 0x88, 0xc0, 0x42, 0x1f, 0x02, 0x0b, 0x0e, 0xf9,
  0x98, 0x60, 0xc8, 0xc7, 0x86, 0x42, 0x3e, 0x26, 0xf5, 0x81, 0x7c, 0x2c,
  0x68, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9a, 0x58, 0x94,
  0x84, 0x1f, 0x14, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x63,
  0x61, 0x12, 0x7c, 0x80, 0x0a, 0x81, 0x51, 0xa1, 0x20, 0x1f, 0x0b, 0x22,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x66, 0x16, 0x29, 0x21,
  0x0a, 0x48, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda, 0x59, 0xa8,
  0x04, 0x28, 0xac, 0x42, 0x60, 0x56, 0x29, 0xc8, 0xc7, 0x82, 0x4a, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xa9, 0x45, 0x4b, 0x98, 0xc2,
  0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xb6, 0x16, 0x2e, 0x41,
  0x0a, 0xae, 0x10, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0x13, 0x17,
  0x2b, 0x91, 0x14, 0x41, 0x52, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0x10, 0xc5, 0xc5, 0x4a, 0x04, 0x16, 0x2c, 0xf2, 0x31, 0x01, 0x91, 0x8f,
  0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x93, 0x8b,
  0x98, 0xd8, 0x07, 0xb4, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc0, 0xec, 0xa2,
  0x26, 0xfe, 0x01, 0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x30, 0xbd, 0xc8,
  0x89, 0x91, 0x90, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0xb0, 0x73, 0x58, 0xe2, 0x63, 0xe7, 0xb0, 0xc4, 0xc7, 0xce,
  0x61, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x3c, 0xa5, 0xf1,
  0x13, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0x51, 0x69, 0xfc, 0x44, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x56, 0x1a, 0x64, 0xe1, 0x12, 0x65,
  0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xa5, 0x06, 0x5a, 0xc8, 0x44, 0x5f,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x60, 0xad, 0xc1, 0x16, 0x36, 0x11, 0x17,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xfa,
  0xb0, 0xc4, 0xc7, 0xf4, 0x61, 0x89, 0x8f, 0xe9, 0xc3, 0x12, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x78, 0x70, 0x43, 0x2e, 0x06, 0x21, 0x18,
  0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0xdc, 0x90, 0x8b,
  0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x0c, 0x37, 0xee, 0x22, 0x2c, 0xe4, 0x62, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0x00, 0xe3, 0x8d, 0xbd, 0x28, 0x8b, 0xdb, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41,
  0x30, 0xc0, 0xc0, 0xe3, 0x2f, 0xd2, 0xa2, 0x34, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x5a, 0x62, 0x89, 0x8f, 0xb5,
  0xc4, 0x12, 0x1f, 0x6b, 0x89, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82,
  0x60, 0xf0, 0xac, 0x47, 0x69, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81,
  0x01, 0x80, 0x20, 0x18, 0x44, 0xeb, 0x51, 0x1a, 0x81, 0x05, 0x84, 0x7c,
  0x4c, 0x20, 0xe4, 0x63, 0x78, 0x71, 0x07, 0xf1, 0xb1, 0xbc, 0xb8, 0x83,
  0xf8, 0x98, 0x5e, 0x98, 0x41, 0x7c, 0x6c, 0x2f, 0xcc, 0x20, 0x3e, 0xc6,
  0x17, 0x55, 0x7c, 0xac, 0x2f, 0xaa, 0xf8, 0x98, 0x28, 0xf8, 0x81, 0x7c,
  0xec, 0x2f, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x26,
  0x1f, 0xb5, 0x81, 0x8c, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xda, 0x7c, 0xd8, 0x06, 0x32, 0x0a, 0x81, 0x99, 0xc2, 0x1b, 0xc8, 0xc7,
  0x46, 0x23, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xf6,
  0x91, 0x1b, 0xca, 0x29, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0xdd, 0x87, 0x6e, 0x28, 0xa7, 0x10, 0x98, 0x2a, 0x80, 0x81, 0x7c, 0xec,
  0x34, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xa6, 0x1f,
  0xbd, 0xc1, 0xac, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xda,
  0x7e, 0xf8, 0x06, 0xb3, 0x0a, 0x81, 0xfd, 0x81, 0x2b, 0xc8, 0xc7, 0x02,
  0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xfe, 0x11,
  0x1e, 0x7c, 0xf0, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0xff, 0x21, 0x1e, 0x7c, 0xf0, 0x0a, 0x81, 0xc1, 0x81, 0x2c, 0xc8, 0xc7,
  0x82, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x22,
  0x52, 0x1e, 0x6d, 0x30, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x68, 0x23, 0x62, 0x1e, 0x6d, 0x30, 0x0b, 0x81, 0x85, 0x81, 0x2d, 0xc8,
  0xc7, 0x02, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x99,
  0x48, 0x7a, 0x78, 0xb7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81,
  0x76, 0x22, 0xea, 0xe1, 0xdd, 0x42, 0x30, 0x1c, 0x51, 0xdd, 0x06, 0xf1,
  0x0d, 0x47, 0x48, 0xb8, 0x41, 0x7c, 0xc3, 0x11, 0x4f, 0x6e, 0x10, 0xdf,
  0x74, 0x83, 0x6e, 0xf0, 0xc6, 0x30, 0xdd, 0xb0, 0x1b, 0xbd, 0x31, 0x4c,
  0x37, 0xf0, 0x86, 0x6f, 0x0c, 0x36, 0x6c, 0xf2, 0xb1, 0x01, 0x93, 0x8f,
  0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x93, 0x91,
  0xf8, 0xd8, 0x8d, 0x15, 0x19, 0x4d, 0x08, 0x86, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xa8, 0x6a, 0x84, 0x3d, 0x28, 0xf1, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0xca, 0x46, 0xda, 0x23, 0x1a, 0x8f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xa8, 0x6e, 0xc4, 0x3d, 0x1c, 0xf2, 0xb0, 0x61, 0x91,
  0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x58, 0xe4, 0x33, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0x51, 0x8f, 0xc4, 0xc7, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x91, 0x8f, 0xc8, 0xc7, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06,
  0xd1, 0x8f, 0xcc, 0xc7, 0x60, 0x83, 0x22, 0x1f, 0x1b, 0x16, 0xf9, 0xd8,
  0xc0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x31, 0xb1,
  0x8f, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x32, 0xb9, 0x8f,
  0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x32, 0xc1, 0x8f, 0xc1,
  0x86, 0x37, 0x90, 0x8f, 0x0d, 0x6c, 0x20, 0x1f, 0x1b, 0xd2, 0x40, 0x3e,
  0x76, 0xbd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x40, 0x33,
  0x93, 0x14, 0xb9, 0x7a, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0xed, 0x4c, 0x54, 0xe4, 0x5a, 0x85, 0xc0, 0xb4, 0x78, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x69, 0xc2, 0x22, 0xda, 0x2f, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xa9, 0x49, 0x8b, 0x68, 0xad,
  0x10, 0x58, 0x37, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03,
  0x8d, 0x4d, 0x5e, 0xa4, 0x0b, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb4, 0x36, 0x81, 0x91, 0xee, 0x15, 0x82, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xc0, 0xde, 0xc4, 0x45, 0xf0, 0x63, 0x4d, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x45, 0x3e, 0x36,
  0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x60, 0x76, 0x52, 0x23, 0xff, 0x31, 0x27, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f, 0x3b, 0x06, 0xf8,
  0xd8, 0x31, 0xc0, 0xc7, 0x34, 0x91, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x68, 0x7d, 0x02, 0x26, 0x1a, 0x3c, 0x04, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0xa0, 0xf9, 0x49, 0x98, 0x68, 0xbe, 0x10, 0x58, 0x47,
  0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x0d, 0x54, 0xc6,
  0xa4, 0x93, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0x50,
  0x21, 0x93, 0x0e, 0x1c, 0x02, 0x03, 0x03, 0x93, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x68, 0xa3, 0x62, 0x26, 0x60, 0x40, 0x0f, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0xa4, 0x72, 0x26, 0x60, 0x20,
  0x0e, 0xc1, 0x68, 0x02, 0x1d, 0x00, 0xa3, 0x09, 0x75, 0x10, 0x8c, 0x26,
  0xd8, 0x81, 0x60, 0xff, 0xf1, 0xc8, 0xc7, 0xfe, 0xe3, 0x91, 0x8f, 0xfd,
  0xc7, 0x23, 0x1f, 0x6b, 0xfe, 0x43, 0x3e, 0x16, 0x1c, 0xf2, 0x31, 0x26,
  0x44, 0xe4, 0x63, 0x01, 0x22, 0x1f, 0x5b, 0x46, 0x44, 0x3e, 0x16, 0x24,
  0xf2, 0xb1, 0x22, 0x81, 0x8f, 0x11, 0x09, 0x7c, 0x6c, 0x48, 0xe0, 0x33,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x58, 0xad, 0xd0, 0x89, 0x8f, 0xec,
  0xc9, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8,
  0xc0, 0x22, 0xf2, 0xb1, 0xa1, 0x45, 0xe4, 0x63, 0x83, 0x8b, 0xc8, 0xc7,
  0x06, 0x25, 0x3e, 0x36, 0x28, 0xf1, 0xb1, 0x41, 0x89, 0x8f, 0x0d, 0x3d,
  0x22, 0x1f, 0x1b, 0x7c, 0x44, 0x3e, 0x36, 0xfc, 0x88, 0x7c, 0x6c, 0x80,
  0xe0, 0x63, 0x03, 0x04, 0x1f, 0x1b, 0x20, 0xf8, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x01, 0xb2, 0x2e, 0x7f, 0x12, 0x2e, 0xe1, 0x72, 0x2b, 0xc3,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xeb, 0xf2, 0x27, 0xe1, 0x12,
  0x2e, 0xac, 0x22, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xb2, 0x2e,
  0x7f, 0x12, 0x2e, 0xe1, 0x62, 0x2b, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x20, 0xeb, 0xf2, 0x27, 0xe1, 0x12, 0x2e, 0xb4, 0x82, 0x23, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x97, 0x91, 0x2f, 0x56, 0xf2, 0x3d, 0x41, 0x57, 0x03, 0xba, 0xbe, 0x02,
  0x5b, 0xf3, 0x57, 0x2d, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xc6, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x16, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0xdd, 0x6b, 0x1c, 0x55,
  0x14, 0xbf, 0xf7, 0xce, 0x64, 0xe6, 0xce, 0xce, 0xec, 0x99, 0xd9, 0xd9,
  0x99, 0xd9, 0xd9, 0xcd, 0xee, 0x66, 0x37, 0xd9, 0xa4, 0x9b, 0xdd, 0x6c,
  0x9a, 0xb4, 0x49, 0x5b, 0xdb, 0x14, 0xab, 0xd4, 0xa2, 0xf6, 0x13, 0x6b,
  0xee, 0x43, 0x21, 0xc5, 0x0f, 0x4a, 0x3f, 0xb5, 0xb5, 0x88, 0x14, 0x29,
  0x93, 0x51, 0x17, 0x54, 0x4c, 0x45, 0x7c, 0x16, 0x2c, 0xda, 0x17, 0xa3,
  0x82, 0x7f, 0xc1, 0x6e, 0xab, 0x15, 0x06, 0xc1, 0x37, 0x83, 0x22, 0xd8,
  0x77, 0x41, 0x50, 0xa4, 0x0f, 0xa5, 0x48, 0xeb, 0xbd, 0x3b, 0x9b, 0x36,
  0xe9, 0x07, 0xad, 0x3e, 0x45, 0xc9, 0x81, 0xc3, 0xef, 0xde, 0x7b, 0x7e,
  0xe7, 0x9e, 0x7b, 0xef, 0x39, 0x1b, 0x32, 0x67, 0xc7, 0xfe, 0xfd, 0xbb,
  0x31, 0x46, 0xe8, 0x90, 0x87, 0x3a, 0xa2, 0xc4, 0x80, 0x7e, 0x6f, 0x7d,
  0x79, 0xe5, 0x61, 0xf4, 0xab, 0x7f, 0xc8, 0x5f, 0x54, 0xd2, 0xf5, 0xdb,
  0x8e, 0xfe, 0x9d, 0x2c, 0xee, 0x73, 0x0d, 0xe2, 0xf9, 0x36, 0x65, 0xa9,
  0xd5, 0xbc, 0x8b, 0xbf, 0xc9, 0x8d, 0xf1, 0xa3, 0x2e, 0xf6, 0x70, 0x95,
  0x05, 0x62, 0x82, 0x2e, 0x2e, 0xe1, 0xf5, 0xa1, 0xe7, 0x24, 0xbc, 0x64,
  0xfe, 0x5b, 0x97, 0x2f, 0xd6, 0xc6, 0xb9, 0x16, 0x6e, 0xbd, 0x93, 0x24,
  0x80, 0x28, 0xd8, 0xe4, 0x26, 0x4c, 0x14, 0xa2, 0xf2, 0x2b, 0x11, 0xa2,
  0x48, 0x26, 0x37, 0x48, 0x04, 0xfd, 0xcf, 0x45, 0xbc, 0x5d, 0x71, 0xc9,
  0x58, 0x5c, 0xd8, 0x42, 0xcb, 0x5f, 0x5e, 0xa4, 0xe4, 0x60, 0xe7, 0x31,
  0xc3, 0xf6, 0x52, 0xfd, 0xc0, 0x47, 0xd7, 0xee, 0xbd, 0xeb, 0x72, 0x1e,
  0xe6, 0x3c, 0xf2, 0x10, 0x3c, 0x49, 0xf0, 0xa4, 0x87, 0xe4, 0xf5, 0xdc,
  0x9f, 0x47, 0x54, 0x74, 0x50, 0xd6, 0xc9, 0x41, 0x33, 0xcf, 0xcf, 0x87,
  0xef, 0xc5, 0x3b, 0xfa, 0xa3, 0x48, 0x33, 0xe6, 0xc8, 0x79, 0xe8, 0xfe,
  0xbc, 0x23, 0x5d, 0xde, 0x91, 0x07, 0xf0, 0x8e, 0x75, 0x79, 0xc7, 0x1e,
  0xc0, 0x3b, 0xde, 0xe5, 0x1d, 0x7f, 0x00, 0x6f, 0xf9, 0x7d, 0xcd, 0xce,
  0xbb, 0xc8, 0x77, 0xdd, 0xf8, 0x26, 0x17, 0xb4, 0x2a, 0x2b, 0x4a, 0x56,
  0x73, 0xb2, 0xf2, 0x64, 0x35, 0x27, 0x2b, 0x4f, 0x56, 0x73, 0xb2, 0xf2,
  0x64, 0x35, 0x27, 0x2b, 0x4f, 0x56, 0x73, 0xb2, 0xf2, 0x64, 0x35, 0x27,
  0x2b, 0x57, 0xe4, 0x9f, 0xc3, 0x85, 0xc3, 0xe7, 0x6e, 0x48, 0x57, 0x7e,
  0x39, 0xef, 0xbd, 0xff, 0x79, 0xb8, 0xb0, 0xb6, 0x7e, 0x53, 0xda, 0x3a,
  0x88, 0x3f, 0x94, 0xd0, 0xf9, 0x76, 0x20, 0x7f, 0xd4, 0x0a, 0x12, 0x37,
  0x5a, 0x86, 0x74, 0xae, 0xa5, 0x4b, 0x73, 0x2d, 0x4d, 0x7a, 0xb3, 0x15,
  0x4a, 0xef, 0x72, 0x7d, 0x8b, 0xeb, 0x7b, 0x2d, 0x8c, 0x8c, 0xab, 0x7c,
  0x8b, 0xeb, 0x3d, 0x0a, 0xed, 0xa0, 0x2c, 0xc7, 0x73, 0x53, 0xfa, 0xab,
  0x95, 0xbc, 0x59, 0x7e, 0x27, 0xfe, 0x32, 0x2a, 0x45, 0x08, 0x57, 0x22,
  0x24, 0x6f, 0x8f, 0x90, 0x36, 0x15, 0xa1, 0x9e, 0x27, 0x23, 0x8c, 0xca,
  0x11, 0xc6, 0x83, 0x11, 0x96, 0x9f, 0x88, 0x0c, 0xe9, 0x7c, 0xeb, 0x92,
  0xf4, 0x49, 0xeb, 0xa6, 0xf4, 0x69, 0xeb, 0x8b, 0xbd, 0x38, 0x85, 0x7b,
  0x9e, 0x8a, 0x10, 0xdd, 0x14, 0x61, 0x6d, 0x6b, 0x64, 0xe9, 0x23, 0x57,
  0xf9, 0x37, 0xea, 0x75, 0x14, 0xfe, 0xf0, 0x53, 0x0a, 0x21, 0x77, 0x3a,
  0x46, 0x6f, 0xf6, 0xe2, 0x5c, 0x9b, 0x9a, 0xe1, 0x1f, 0x94, 0x5c, 0x46,
  0x54, 0xe2, 0xa8, 0x5c, 0x44, 0xf3, 0xb1, 0x2d, 0x83, 0x12, 0xdb, 0x22,
  0x4c, 0x1f, 0x89, 0xcc, 0xbe, 0x2a, 0x08, 0x3f, 0x1b, 0x21, 0x7f, 0x3a,
  0xc6, 0xec, 0x7c, 0x8c, 0x39, 0x64, 0x54, 0x23, 0x94, 0x1c, 0x89, 0x10,
  0x8c, 0x45, 0xc8, 0x9c, 0x88, 0x90, 0xb2, 0x2b, 0xc2, 0x89, 0xc7, 0x22,
  0x28, 0x54, 0x19, 0x52, 0x51, 0x84, 0x8d, 0xe1, 0x08, 0x27, 0x1b, 0x11,
  0x86, 0xf1, 0x08, 0x9b, 0x93, 0x11, 0x56, 0x76, 0x47, 0x56, 0xb9, 0xca,
  0xb0, 0x8a, 0x23, 0xaf, 0x3e, 0x42, 0x67, 0xbf, 0x99, 0x6b, 0x67, 0xea,
  0x35, 0x2a, 0xf6, 0x4f, 0xf3, 0x8f, 0xe0, 0xe9, 0x18, 0x7b, 0x1b, 0x95,
  0x0a, 0x15, 0x63, 0x8d, 0x9f, 0x63, 0xf6, 0xf2, 0x5c, 0x3b, 0x3b, 0xbe,
  0xae, 0xc3, 0xcd, 0x8d, 0x8f, 0xd1, 0x91, 0xfe, 0x7e, 0x6a, 0x0f, 0x4e,
  0x40, 0x6a, 0x60, 0x82, 0xcd, 0x5e, 0x9a, 0x6b, 0xf7, 0x4a, 0x1b, 0xe8,
  0x2b, 0x8f, 0xce, 0xb5, 0x89, 0x2b, 0x83, 0x94, 0x51, 0x40, 0xce, 0x52,
  0xe8, 0xe9, 0x4d, 0x80, 0x33, 0x93, 0x0b, 0xe6, 0xe3, 0xfd, 0x12, 0x28,
  0xde, 0xcb, 0x11, 0x48, 0x11, 0xd2, 0xa7, 0x63, 0x34, 0xe6, 0x63, 0xa4,
  0xa7, 0xb8, 0xbf, 0x8a, 0x76, 0x2e, 0xa8, 0xbf, 0x7e, 0x2f, 0x29, 0x1c,
  0x15, 0x8e, 0xf3, 0xb1, 0x8f, 0x96, 0x2c, 0xe4, 0x21, 0xd9, 0x57, 0x84,
  0x64, 0x39, 0x07, 0xa3, 0x43, 0x25, 0x9a, 0x16, 0x3c, 0xf3, 0xbb, 0x01,
  0xab, 0x3c, 0xc1, 0xd2, 0xa8, 0xbe, 0xa0, 0x24, 0x49, 0x69, 0xf6, 0xdb,
  0xb9, 0x76, 0x42, 0x22, 0x34, 0x37, 0x33, 0x11, 0xcc, 0x7e, 0x3d, 0xd7,
  0x36, 0x32, 0x0e, 0xcd, 0x0c, 0xfb, 0x54, 0x9c, 0x8f, 0x66, 0x2c, 0x9a,
  0x3e, 0x3c, 0x14, 0x04, 0xf9, 0x1b, 0x6f, 0xbb, 0xeb, 0x3d, 0xf0, 0x37,
  0x8e, 0x02, 0x6e, 0x6c, 0x02, 0xf1, 0xf6, 0xda, 0xb0, 0x4d, 0x2d, 0x34,
  0xd6, 0xc9, 0xb5, 0xce, 0xf7, 0xf5, 0x1b, 0xa3, 0xcd, 0x0c, 0x47, 0xbc,
  0xfe, 0x60, 0x33, 0xcf, 0xd1, 0xdd, 0x78, 0xba, 0x69, 0xc9, 0x63, 0x57,
  0xb7, 0x71, 0xbb, 0x45, 0xc7, 0xae, 0x86, 0x82, 0x57, 0xdf, 0x0c, 0x99,
  0x8d, 0x53, 0x50, 0xe0, 0xf6, 0x8c, 0xf4, 0x5a, 0x33, 0x2f, 0x11, 0x70,
  0xf8, 0x58, 0x6f, 0xbc, 0xde, 0xcc, 0x37, 0x46, 0xa0, 0xe0, 0x4e, 0x01,
  0x16, 0xf3, 0x71, 0xa5, 0xa9, 0xf3, 0x78, 0x85, 0x2c, 0xe7, 0x8f, 0x8f,
  0x01, 0x1d, 0x9e, 0x62, 0x9e, 0xf0, 0x59, 0x7f, 0xa0, 0x29, 0x62, 0xe5,
  0x37, 0x8e, 0x36, 0xb5, 0xe1, 0xcd, 0x0c, 0xbb, 0x55, 0xc0, 0x59, 0x02,
  0xae, 0x58, 0xab, 0xbf, 0xd0, 0xa4, 0x99, 0x2a, 0xd3, 0x32, 0x84, 0xb9,
  0xee, 0x28, 0xb8, 0x59, 0x0f, 0x8a, 0x5b, 0x6b, 0x50, 0xd8, 0xe2, 0x40,
  0x31, 0xe9, 0x03, 0x6d, 0x8c, 0x32, 0xad, 0xe1, 0x31, 0x67, 0xb8, 0xc6,
  0xb0, 0xe4, 0x30, 0x27, 0x59, 0x85, 0x4c, 0xd2, 0x80, 0xcc, 0xda, 0x1a,
  0xd3, 0x33, 0x0e, 0x13, 0x77, 0x12, 0xe7, 0xb7, 0x26, 0x0f, 0x84, 0xee,
  0x8c, 0x1d, 0x24, 0x66, 0xac, 0xc0, 0x48, 0x73, 0xbf, 0x2d, 0x35, 0xa0,
  0x92, 0x03, 0x4a, 0x9a, 0x00, 0xcd, 0x18, 0x40, 0x39, 0xc7, 0x9e, 0xdc,
  0x11, 0xaa, 0x75, 0x9f, 0x39, 0xe9, 0x1a, 0x68, 0x7c, 0x9e, 0x9a, 0x5c,
  0x17, 0xaa, 0x49, 0xc2, 0xd2, 0x7d, 0x3e, 0x53, 0xdd, 0x1a, 0x53, 0x3b,
  0x9c, 0x0d, 0x61, 0xba, 0x97, 0x30, 0xb3, 0x63, 0x7f, 0x3c, 0x34, 0xb2,
  0x06, 0xa4, 0x0b, 0xdc, 0x66, 0x7a, 0x00, 0x1d, 0x3b, 0x0b, 0x69, 0xaa,
  0x02, 0xc9, 0x4e, 0xcc, 0xcd, 0xa1, 0x5b, 0x37, 0x98, 0x96, 0xf6, 0x58,
  0xba, 0x33, 0x7f, 0x3a, 0x34, 0xfb, 0x2a, 0x2c, 0xd5, 0xf1, 0x7d, 0x26,
  0xc4, 0x92, 0xc1, 0x78, 0x5d, 0x42, 0xb2, 0x97, 0xdb, 0xd7, 0x54, 0x98,
  0x32, 0x63, 0x04, 0xa9, 0x81, 0x2a, 0xd3, 0x67, 0x46, 0x82, 0xcc, 0xda,
  0x2a, 0x53, 0xea, 0x0e, 0xd8, 0x33, 0x95, 0x40, 0xc9, 0xfa, 0xa0, 0x48,
  0x25, 0xd0, 0x5c, 0x1b, 0x0c, 0xa7, 0xc6, 0xeb, 0xa8, 0x1a, 0x78, 0xbd,
  0x1e, 0xa4, 0xdc, 0x1c, 0x58, 0x4e, 0x3f, 0x88, 0xfa, 0x48, 0xfa, 0xec,
  0x82, 0xe9, 0x16, 0xc1, 0x33, 0x01, 0xb4, 0x86, 0x0d, 0x9d, 0x18, 0xfe,
  0x8e, 0x0b, 0x8e, 0xc3, 0xef, 0xc8, 0x6b, 0x02, 0x4a, 0xa4, 0x64, 0xa7,
  0x46, 0x40, 0xcd, 0xda, 0xcc, 0x1c, 0x04, 0x48, 0x88, 0x5c, 0xfa, 0xb5,
  0x0b, 0xf6, 0x9a, 0x0a, 0x38, 0xbc, 0x9e, 0xf4, 0xb2, 0xcd, 0xbc, 0x2c,
  0xb0, 0xe4, 0x70, 0x0e, 0x42, 0x83, 0x9e, 0x4d, 0x71, 0x1f, 0x9b, 0xfb,
  0x38, 0x6b, 0x3d, 0xb0, 0xcb, 0xc0, 0x20, 0x9b, 0x63, 0x06, 0xc2, 0x0b,
  0x7f, 0xa2, 0xcf, 0x70, 0x68, 0xdb, 0xa5, 0xb0, 0x9f, 0x9e, 0x4d, 0x70,
  0x8e, 0xc7, 0x39, 0x7a, 0x39, 0xc7, 0x42, 0x80, 0x92, 0x96, 0xb5, 0xf9,
  0x1b, 0x74, 0x39, 0x0e, 0x3d, 0x1b, 0xe6, 0xac, 0x92, 0xc1, 0x73, 0xa4,
  0xed, 0xb5, 0x03, 0xb5, 0x00, 0xa0, 0x77, 0x6d, 0x30, 0x50, 0x04, 0xdf,
  0xcf, 0x41, 0xd6, 0xcf, 0x83, 0xba, 0x17, 0x02, 0x5e, 0x8f, 0x90, 0xf3,
  0x7d, 0xd0, 0xdd, 0x21, 0xd0, 0x6d, 0x1b, 0x0a, 0xc5, 0x3c, 0xa3, 0x7b,
  0xad, 0xa0, 0x58, 0xf4, 0x59, 0xbe, 0x98, 0x63, 0x3a, 0xf0, 0x3b, 0xed,
  0xb4, 0x83, 0xf2, 0x50, 0x9e, 0x95, 0x86, 0x72, 0xac, 0x7f, 0xc8, 0x67,
  0xba, 0x65, 0x81, 0xba, 0x13, 0x02, 0x91, 0x07, 0x94, 0xb3, 0xf9, 0x8f,
  0x82, 0xe7, 0x70, 0xa7, 0x15, 0x88, 0xbc, 0xe1, 0xbc, 0x87, 0x48, 0x9f,
  0x0c, 0x83, 0x86, 0x07, 0xea, 0x00, 0x81, 0x21, 0x03, 0xa0, 0x62, 0x18,
  0x20, 0xa5, 0x15, 0xa0, 0xae, 0x05, 0xc3, 0xc4, 0x63, 0x55, 0x62, 0xb0,
  0x1a, 0x01, 0x26, 0xea, 0x92, 0xf8, 0x39, 0xd4, 0xb0, 0x3c, 0x36, 0x62,
  0x19, 0x6c, 0xd4, 0x02, 0x26, 0x4b, 0x14, 0x14, 0x9d, 0x80, 0xae, 0x1b,
  0xa0, 0xf2, 0xe0, 0x94, 0xc8, 0x4c, 0x33, 0x14, 0x96, 0x00, 0xda, 0xe1,
  0x8f, 0x25, 0x12, 0x4d, 0xf1, 0xe6, 0xe3, 0x09, 0x68, 0x8a, 0x9a, 0x58,
  0x97, 0xb0, 0x9b, 0x18, 0xcb, 0x4c, 0xc1, 0x0a, 0x53, 0x31, 0x65, 0xf7,
  0xef, 0xbd, 0xbc, 0xc1, 0xd7, 0x3f, 0xfe, 0xcf, 0xe8, 0x62, 0xfb, 0x69,
  0xb1, 0x2d, 0xc3, 0xff, 0x2e, 0xa1, 0xa5, 0x6b, 0x42, 0x35, 0xbc, 0x7c,
  0x4d, 0x48, 0x82, 0xdc, 0x1e, 0x2f, 0xf6, 0xba, 0x74, 0x69, 0xf9, 0x9a,
  0x18, 0x27, 0xe5, 0x25, 0x1b, 0xa2, 0xb8, 0xe7, 0x46, 0x97, 0x04, 0xc1,
  0x8b, 0x6b, 0x3c, 0x08, 0xbe, 0xa3, 0x17, 0x26, 0xf3, 0x20, 0xe4, 0x8e,
  0x7e, 0x91, 0xac, 0xdf, 0x26, 0xdd, 0xfe, 0xbf, 0xa4, 0x80, 0xf6, 0xed,
  0xdf, 0x73, 0xf2, 0xf4, 0x4b, 0xcf, 0x9f, 0xd8, 0x77, 0xf4, 0xcc, 0xa1,
  0x13, 0xbb, 0x8e, 0x1e, 0x3e, 0xf2, 0xea, 0xd1, 0x97, 0x0f, 0x3f, 0x7b,
  0x66, 0xcf, 0xc9, 0xfd, 0xa7, 0x0e, 0xbd, 0xb8, 0xd8, 0x74, 0x9d, 0xec,
  0x36, 0x41, 0xc7, 0xb8, 0xaa, 0x5c, 0xa7, 0x3a, 0x07, 0x20, 0xb7, 0x0e,
  0x2d, 0x9a, 0xba, 0x58, 0x82, 0x5b, 0x01, 0x76, 0x75, 0xed, 0xb1, 0x20,
  0xf4, 0x37, 0x95, 0x68, 0x38, 0x13, 0x00, 0x00, 0x04, 0xda, 0x67, 0x46,
  0xde, 0xdd, 0xa0, 0x16, 0x8e, 0xab, 0x2f, 0x95, 0x3d, 0x25, 0x01, 0x92
};
