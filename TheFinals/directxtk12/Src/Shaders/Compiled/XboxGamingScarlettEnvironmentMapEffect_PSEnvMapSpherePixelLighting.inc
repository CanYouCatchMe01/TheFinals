#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapSpherePixelLighting.pdb
; shader hash: dcdd62b8089d1b10b1fc3d34c846483c
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapSpherePixelLighting
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapSpherePixelLighting() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = extractvalue %dx.types.ResRet.f32 %19, 2
  %23 = extractvalue %dx.types.ResRet.f32 %19, 3
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = fmul fast float %23, %9
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = fsub fast float %31, %15
  %35 = call float @dx.op.dot3.f32(i32 55, float %32, float %33, float %34, float %32, float %33, float %34)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 25, float %35)  ; Rsqrt(value)
  %37 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %38 = call float @dx.op.unary.f32(i32 25, float %37)  ; Rsqrt(value)
  %39 = fmul fast float %38, %10
  %40 = fmul fast float %38, %11
  %41 = fmul fast float %38, %12
  %42 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.f32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.f32 %42, 1
  %45 = extractvalue %dx.types.CBufRet.f32 %42, 2
  %46 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.f32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.f32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.f32 %46, 2
  %50 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.f32 %50, 0
  %52 = extractvalue %dx.types.CBufRet.f32 %50, 1
  %53 = extractvalue %dx.types.CBufRet.f32 %50, 2
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = fsub fast float -0.000000e+00, %44
  %67 = fsub fast float -0.000000e+00, %45
  %68 = fsub fast float -0.000000e+00, %52
  %69 = fsub fast float -0.000000e+00, %53
  %70 = fsub fast float -0.000000e+00, %60
  %71 = fsub fast float -0.000000e+00, %61
  %72 = fmul fast float %39, %43
  %73 = fsub fast float -0.000000e+00, %72
  %74 = call float @dx.op.tertiary.f32(i32 46, float %66, float %40, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %67, float %41, float %74)  ; FMad(a,b,c)
  %76 = fmul fast float %39, %51
  %77 = fsub fast float -0.000000e+00, %76
  %78 = call float @dx.op.tertiary.f32(i32 46, float %68, float %40, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %69, float %41, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %39, %59
  %81 = fsub fast float -0.000000e+00, %80
  %82 = call float @dx.op.tertiary.f32(i32 46, float %70, float %40, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %71, float %41, float %82)  ; FMad(a,b,c)
  %84 = fcmp fast olt float %75, 0.000000e+00
  %85 = fcmp fast olt float %79, 0.000000e+00
  %86 = fcmp fast olt float %83, 0.000000e+00
  %87 = select i1 %84, float 0.000000e+00, float 1.000000e+00
  %88 = select i1 %85, float 0.000000e+00, float 1.000000e+00
  %89 = select i1 %86, float 0.000000e+00, float 1.000000e+00
  %90 = fmul fast float %87, %75
  %91 = fmul fast float %88, %79
  %92 = fmul fast float %89, %83
  %93 = fmul fast float %90, %47
  %94 = call float @dx.op.tertiary.f32(i32 46, float %91, float %55, float %93)  ; FMad(a,b,c)
  %95 = call float @dx.op.tertiary.f32(i32 46, float %92, float %63, float %94)  ; FMad(a,b,c)
  %96 = fmul fast float %90, %48
  %97 = call float @dx.op.tertiary.f32(i32 46, float %91, float %56, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %92, float %64, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %90, %49
  %100 = call float @dx.op.tertiary.f32(i32 46, float %91, float %57, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %92, float %65, float %100)  ; FMad(a,b,c)
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = fmul fast float %103, %95
  %107 = fmul fast float %104, %98
  %108 = fmul fast float %105, %101
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = fadd fast float %106, %110
  %114 = fadd fast float %107, %111
  %115 = fadd fast float %108, %112
  %116 = fmul fast float %24, %113
  %117 = fmul fast float %25, %114
  %118 = fmul fast float %26, %115
  %119 = fmul fast float %36, %32
  %120 = fsub fast float -0.000000e+00, %119
  %121 = fmul fast float %36, %33
  %122 = fsub fast float -0.000000e+00, %121
  %123 = fmul fast float %36, %34
  %124 = fsub fast float -0.000000e+00, %123
  %125 = call float @dx.op.dot3.f32(i32 55, float %120, float %122, float %124, float %39, float %40, float %41)  ; Dot3(ax,ay,az,bx,by,bz)
  %126 = fmul fast float %125, 2.000000e+00
  %127 = fmul fast float %126, %39
  %128 = fmul fast float %126, %40
  %129 = fmul fast float %126, %41
  %130 = fsub fast float %120, %127
  %131 = fsub fast float %122, %128
  %132 = fsub fast float %124, %129
  %133 = fmul fast float %130, %130
  %134 = fmul fast float %131, %131
  %135 = fadd fast float %133, %134
  %136 = fadd fast float %132, 1.000000e+00
  %137 = fmul fast float %136, %136
  %138 = fadd fast float %135, %137
  %139 = call float @dx.op.unary.f32(i32 24, float %138)  ; Sqrt(value)
  %140 = fmul fast float %139, 2.000000e+00
  %141 = fdiv fast float %130, %140
  %142 = fadd fast float %141, 5.000000e-01
  %143 = fdiv fast float %131, %140
  %144 = fadd fast float %143, 5.000000e-01
  %145 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %142, float %144, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %146 = extractvalue %dx.types.ResRet.f32 %145, 0
  %147 = extractvalue %dx.types.ResRet.f32 %145, 1
  %148 = extractvalue %dx.types.ResRet.f32 %145, 2
  %149 = extractvalue %dx.types.ResRet.f32 %145, 3
  %150 = fmul fast float %146, %27
  %151 = fmul fast float %147, %27
  %152 = fmul fast float %148, %27
  %153 = fmul fast float %149, %27
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = fsub fast float %150, %116
  %157 = fsub fast float %151, %117
  %158 = fsub fast float %152, %118
  %159 = fmul fast float %156, %155
  %160 = fmul fast float %157, %155
  %161 = fmul fast float %158, %155
  %162 = fadd fast float %159, %116
  %163 = fadd fast float %160, %117
  %164 = fadd fast float %161, %118
  %165 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.f32 %165, 0
  %167 = extractvalue %dx.types.CBufRet.f32 %165, 1
  %168 = extractvalue %dx.types.CBufRet.f32 %165, 2
  %169 = fmul fast float %166, %153
  %170 = fmul fast float %167, %153
  %171 = fmul fast float %168, %153
  %172 = fadd fast float %162, %169
  %173 = fadd fast float %163, %170
  %174 = fadd fast float %164, %171
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %179 = fmul fast float %176, %27
  %180 = fmul fast float %177, %27
  %181 = fmul fast float %178, %27
  %182 = fsub fast float %179, %172
  %183 = fsub fast float %180, %173
  %184 = fsub fast float %181, %174
  %185 = fmul fast float %182, %16
  %186 = fmul fast float %183, %16
  %187 = fmul fast float %184, %16
  %188 = fadd fast float %185, %172
  %189 = fadd fast float %186, %173
  %190 = fadd fast float %187, %174
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %188)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %189)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %190)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapSpherePixelLighting, !"PSEnvMapSpherePixelLighting", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !28}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!26 = !{i32 2}
!27 = !{i32 3, i32 7}
!28 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !24}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 54
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 896
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0xb862dddc, 0x101b9d08                // 000000000000: D580DDDC 03FF7162 101B9D08
;   v_nop_xbox_data 0x343dfcb1, 0x3c4846c8                // 00000000000C: D580FCB1 03FE693D 3C4846C8
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[48:49], exec                          // 00000000001C: BEB0047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s2, s9                                  // 000000000024: BE820309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     s3, 0                                   // 00000000002C: BE830380
;   s_mov_b32     m0, s14                                 // 000000000030: BEFC030E
;   s_load_dwordx4  s[24:27], s[2:3], null                // 000000000034: F4080601 FA000000
;   s_load_dwordx8  s[0:7], s[8:9], null                  // 00000000003C: F40C0004 FA000000
;   v_interp_p1_f32  v2, v0, attr0.x                      // 000000000044: C8080000
;   v_interp_p1_f32  v3, v0, attr0.y                      // 000000000048: C80C0100
;   s_mov_b32     s47, lit(0x11014fac)                    // 00000000004C: BEAF03FF 11014FAC
;   s_mov_b32     s46, -1                                 // 000000000054: BEAE03C1
;   s_mov_b32     s44, s12                                // 000000000058: BEAC030C
;   v_interp_p2_f32  v2, v1, attr0.x                      // 00000000005C: C8090001
;   v_interp_p2_f32  v3, v1, attr0.y                      // 000000000060: C80D0101
;   s_or_b32      s45, s13, lit(0x00100000)               // 000000000064: 882DFF0D 00100000
;   v_interp_p1_f32  v6, v0, attr1.y                      // 00000000006C: C8180500
;   s_buffer_load_dwordx8  s[28:35], s[44:47], 0x0000a0   // 000000000070: F42C0716 FA0000A0
;   v_interp_p1_f32  v7, v0, attr2.y                      // 000000000078: C81C0900
;   v_interp_p1_f32  v8, v0, attr1.x                      // 00000000007C: C8200400
;   v_interp_p1_f32  v10, v0, attr2.x                     // 000000000080: C8280800
;   v_interp_p2_f32  v6, v1, attr1.y                      // 000000000084: C8190501
;   v_interp_p1_f32  v15, v0, attr1.z                     // 000000000088: C83C0600
;   v_interp_p2_f32  v7, v1, attr2.y                      // 00000000008C: C81D0901
;   v_interp_p2_f32  v8, v1, attr1.x                      // 000000000090: C8210401
;   v_interp_p1_f32  v11, v0, attr2.z                     // 000000000094: C82C0A00
;   v_interp_p2_f32  v10, v1, attr2.x                     // 000000000098: C8290801
;   s_waitcnt     lgkmcnt(0)                              // 00000000009C: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000A0: F0800F08 00C00202
;   v_mul_legacy_f32  v12, v7, v7                         // 0000000000A8: 0E180F07
;   v_interp_p2_f32  v15, v1, attr1.z                     // 0000000000AC: C83D0601
;   v_interp_p2_f32  v11, v1, attr2.z                     // 0000000000B0: C82D0A01
;   s_mov_b32     s50, s11                                // 0000000000B4: BEB2030B
;   s_mov_b32     s11, 0                                  // 0000000000B8: BE8B0380
;   v_fmac_f32    v12, v10, v10                           // 0000000000BC: 5618150A
;   s_load_dwordx8  s[36:43], s[10:11], null              // 0000000000C0: F40C0905 FA000000
;   s_buffer_load_dword  s35, s[44:47], 0x000010          // 0000000000C8: F42008D6 FA000010
;   s_buffer_load_dwordx16  s[0:15], s[44:47], 0x000020   // 0000000000D0: F4300016 FA000020
;   v_sub_f32     v6, s29, v6                             // 0000000000D8: 080C0C1D
;   v_sub_f32     v8, s28, v8                             // 0000000000DC: 0810101C
;   v_fmac_f32    v12, v11, v11                           // 0000000000E0: 5618170B
;   v_sub_f32     v19, s30, v15                           // 0000000000E4: 08261E1E
;   s_buffer_load_dwordx16  s[16:31], s[44:47], 0x000060  // 0000000000E8: F4300416 FA000060
;   v_mul_legacy_f32  v13, v6, v6                         // 0000000000F0: 0E1A0D06
;   s_mov_b32     s51, 0                                  // 0000000000F4: BEB30380
;   v_rsq_f32     v12, v12                                // 0000000000F8: 7E185D0C
;   v_interp_p1_f32  v17, v0, attr3.y                     // 0000000000FC: C8440D00
;   v_fmac_f32    v13, v8, v8                             // 000000000100: 561A1108
;   v_interp_p2_f32  v17, v1, attr3.y                     // 000000000104: C8450D01
;   v_fmac_f32    v13, v19, v19                           // 000000000108: 561A2713
;   v_mul_legacy_f32  v10, v12, v10                       // 00000000010C: 0E14150C
;   v_mul_legacy_f32  v7, v12, v7                         // 000000000110: 0E0E0F0C
;   v_mul_legacy_f32  v11, v12, v11                       // 000000000114: 0E16170C
;   v_rsq_f32     v13, v13                                // 000000000118: 7E1A5D0D
;   s_waitcnt     lgkmcnt(0)                              // 00000000011C: BF8CC07F
;   v_mul_legacy_f32  v14, s8, v10                        // 000000000120: 0E1C1408
;   v_mul_legacy_f32  v16, s12, v10                       // 000000000124: 0E20140C
;   v_mul_legacy_f32  v22, s16, v10                       // 000000000128: 0E2C1410
;   v_fma_f32     v12, -s9, v7, -v14                      // 00000000012C: D54B000C A43A0E09
;   v_fma_f32     v14, -s13, v7, -v16                     // 000000000134: D54B000E A4420E0D
;   v_fma_f32     v22, -s17, v7, -v22                     // 00000000013C: D54B0016 A45A0E11
;   v_mul_legacy_f32  v6, v13, v6                         // 000000000144: 0E0C0D0D
;   v_mul_legacy_f32  v8, v13, v8                         // 000000000148: 0E10110D
;   v_fmac_f32    v12, -s10, v11                          // 00000000014C: D52B000C 2002160A
;   v_mul_legacy_f32  v18, v13, v19                       // 000000000154: 0E24270D
;   v_fmac_f32    v14, -s14, v11                          // 000000000158: D52B000E 2002160E
;   v_mul_legacy_f32  v15, v6, v7                         // 000000000160: 0E1E0F06
;   v_fmac_f32    v22, -s18, v11                          // 000000000164: D52B0016 20021612
;   v_cmp_gt_f32  vcc, 0, v12                             // 00000000016C: 7C081880
;   s_buffer_load_dwordx4  s[8:11], s[44:47], null        // 000000000170: F4280216 FA000000
;   s_load_dwordx4  s[12:15], s[50:51], null              // 000000000178: F4080319 FA000000
;   v_fma_f32     v13, -v8, v10, -v15                     // 000000000180: D54B000D A43E1508
;   v_interp_p1_f32  v16, v0, attr3.x                     // 000000000188: C8400C00
;   v_cndmask_b32  v15, 1.0, 0, vcc                       // 00000000018C: D501000F 01A900F2
;   v_cmp_gt_f32  vcc, 0, v14                             // 000000000194: 7C081C80
;   v_fmac_f32    v13, -v18, v11 mul:2                    // 000000000198: D52B000D 28021712
;   v_interp_p2_f32  v16, v1, attr3.x                     // 0000000001A0: C8410C01
;   v_fma_f32     v19, -v13, v7, -v6                      // 0000000001A4: D54B0013 A41A0F0D
;   v_fma_f32     v9, -v13, v11, -v18                     // 0000000001AC: D54B0009 A44A170D
;   v_mul_legacy_f32  v7, v15, v12                        // 0000000001B4: 0E0E190F
;   v_cndmask_b32  v12, 1.0, 0, vcc                       // 0000000001B8: D501000C 01A900F2
;   v_fma_f32     v8, -v13, v10, -v8                      // 0000000001C0: D54B0008 A422150D
;   v_mul_legacy_f32  v10, v19, v19                       // 0000000001C8: 0E142713
;   v_cmp_gt_f32  vcc, 0, v22                             // 0000000001CC: 7C082C80
;   v_mul_legacy_f32  v13, s22, v7                        // 0000000001D0: 0E1A0E16
;   v_mul_legacy_f32  v20, v12, v14                       // 0000000001D4: 0E281D0C
;   v_mul_legacy_f32  v14, s21, v7                        // 0000000001D8: 0E1C0E15
;   v_mul_legacy_f32  v7, s20, v7                         // 0000000001DC: 0E0E0E14
;   v_cndmask_b32  v12, 1.0, 0, vcc                       // 0000000001E0: D501000C 01A900F2
;   v_fmac_f32    v10, v8, v8                             // 0000000001E8: 56141108
;   v_add_f32     v9, 1.0, v9                             // 0000000001EC: 061212F2
;   v_interp_p1_f32  v18, v0, attr3.z                     // 0000000001F0: C8480E00
;   v_fmac_f32    v7, s24, v20                            // 0000000001F4: 560E2818
;   v_mul_legacy_f32  v12, v12, v22                       // 0000000001F8: 0E182D0C
;   v_fmac_f32    v14, s25, v20                           // 0000000001FC: 561C2819
;   v_fmac_f32    v13, s26, v20                           // 000000000200: 561A281A
;   v_fmac_f32    v10, v9, v9                             // 000000000204: 56141309
;   v_interp_p1_f32  v15, v0, attr3.w                     // 000000000208: C83C0F00
;   v_interp_p2_f32  v18, v1, attr3.z                     // 00000000020C: C8490E01
;   v_fmac_f32    v14, s29, v12                           // 000000000210: 561C181D
;   v_fmac_f32    v13, s30, v12                           // 000000000214: 561A181E
;   v_fmac_f32    v7, s28, v12                            // 000000000218: 560E181C
;   v_rsq_f32     v10, v10 div:2                          // 00000000021C: D5AE000A 1800010A
;   v_interp_p1_f32  v11, v0, attr1.w                     // 000000000224: C82C0700
;   v_interp_p2_f32  v15, v1, attr3.w                     // 000000000228: C83D0F01
;   v_fma_f32     v12, s2, v13, s6                        // 00000000022C: D54B000C 001A1A02
;   v_fma_f32     v0, s0, v7, s4                          // 000000000234: D54B0000 00120E00
;   v_fma_f32     v7, s1, v14, s5                         // 00000000023C: D54B0007 00161C01
;   v_interp_p2_f32  v11, v1, attr1.w                     // 000000000244: C82D0701
;   v_fma_f32     v14, v19, v10, 0.5                      // 000000000248: D54B000E 03C21513
;   v_fma_f32     v13, v8, v10, 0.5                       // 000000000250: D54B000D 03C21508
;   s_waitcnt     vmcnt(0)                                // 000000000258: BF8C3F70
;   v_mul_legacy_f32  v23, v4, v18                        // 00000000025C: 0E2E2504
;   v_mul_legacy_f32  v6, v3, v17                         // 000000000260: 0E0C2303
;   v_mul_legacy_f32  v2, v2, v16                         // 000000000264: 0E042102
;   v_mul_legacy_f32  v5, v5, v15                         // 000000000268: 0E0A1F05
;   v_mul_legacy_f32  v4, v23, v12                        // 00000000026C: 0E081917
;   v_mul_legacy_f32  v7, v6, v7                          // 000000000270: 0E0E0F06
;   v_mul_legacy_f32  v6, v2, v0                          // 000000000274: 0E0C0102
;   s_and_b64     exec, exec, s[48:49]                    // 000000000278: 87FE307E
;   s_waitcnt     lgkmcnt(0)                              // 00000000027C: BF8CC07F
;   image_sample  v[0:3], v[13:14], s[36:43], s[12:15] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000280: F0800F08 0069000D
;   s_waitcnt     vmcnt(0)                                // 000000000288: BF8C3F70
;   v_fma_f32     v0, v0, v5, -v6                         // 00000000028C: D54B0000 841A0B00
;   v_fma_f32     v1, v1, v5, -v7                         // 000000000294: D54B0001 841E0B01
;   v_fma_f32     v2, v2, v5, -v4                         // 00000000029C: D54B0002 84120B02
;   v_mul_legacy_f32  v9, v3, v5                          // 0000000002A4: 0E120B03
;   v_fmac_f32    v6, s35, v0                             // 0000000002A8: 560C0023
;   v_fmac_f32    v7, s35, v1                             // 0000000002AC: 560E0223
;   v_fmac_f32    v4, s35, v2                             // 0000000002B0: 56080423
;   v_fmac_f32    v6, s8, v9                              // 0000000002B4: 560C1208
;   v_fmac_f32    v7, s9, v9                              // 0000000002B8: 560E1209
;   v_fmac_f32    v4, s10, v9                             // 0000000002BC: 5608120A
;   v_fma_f32     v0, s32, v5, -v6                        // 0000000002C0: D54B0000 841A0A20
;   v_fma_f32     v1, s33, v5, -v7                        // 0000000002C8: D54B0001 841E0A21
;   v_fma_f32     v2, s34, v5, -v4                        // 0000000002D0: D54B0002 84120A22
;   v_fmac_f32    v6, v0, v11                             // 0000000002D8: 560C1700
;   v_fmac_f32    v7, v1, v11                             // 0000000002DC: 560E1701
;   v_fmac_f32    v4, v2, v11                             // 0000000002E0: 56081702
;   s_nop         0x0000                                  // 0000000002E4: BF800000
;   s_nop         0x0000                                  // 0000000002E8: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v6, v7                       // 0000000002EC: 5E000F06
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000002F0: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002F4: F8001C0F 00000100
;   s_endpgm                                              // 0000000002FC: BF810000
;   s_code_end                                            // 000000000300: BF9F0000
;   s_code_end                                            // 000000000304: BF9F0000
;   s_code_end                                            // 000000000308: BF9F0000
;   s_code_end                                            // 00000000030C: BF9F0000
;   s_code_end                                            // 000000000310: BF9F0000
;   s_code_end                                            // 000000000314: BF9F0000
;   s_code_end                                            // 000000000318: BF9F0000
;   s_code_end                                            // 00000000031C: BF9F0000
;   s_code_end                                            // 000000000320: BF9F0000
;   s_code_end                                            // 000000000324: BF9F0000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 52, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[1] {  instr_offset: 60, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[2] {  instr_offset: 192, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 376, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 47
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapSpherePixelLighting)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 185
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x6,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, off, off, off done vm         // 000000000010: F8001801 00000006
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x706,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v7, off, off done vm          // 000000000010: F8001803 00000706
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x506,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v5, off, off done vm          // 000000000010: F8001803 00000506
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000f06,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v6, v7                       // 000000000008: 5E000F06
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20f06,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v6, v7                      // 000000000000: D7690000 00020F06
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20f06,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v6, v7                      // 000000000000: D7680000 00020F06
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20f06,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v6, v7                          // 000000000000: D76A0000 00020F06
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20f06,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v6, v7                          // 000000000000: D76B0000 00020F06
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040706,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v6, v7, v4, v5 done vm            // 000000000010: F800180F 05040706
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=54,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:111,SAlu:23,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapSpherePixelLighting[] = {
  0x44, 0x58, 0x42, 0x43, 0x4f, 0x4a, 0x1d, 0xf7, 0x51, 0x9f, 0xe2, 0x27,
  0x7a, 0xf3, 0xfd, 0xc5, 0x23, 0xc4, 0xac, 0x53, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xd4, 0x02, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
  0x7c, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xa0, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x53, 0x70,
  0x68, 0x65, 0x72, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x50, 0x69, 0x78,
  0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xdc, 0xdd, 0x62, 0xb8, 0x08, 0x9d, 0x1b, 0x10,
  0xb1, 0xfc, 0x3d, 0x34, 0xc8, 0x46, 0x48, 0x3c, 0x44, 0x58, 0x49, 0x4c,
  0x80, 0x11, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0xe4, 0x0c, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xfc, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5c, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x70, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x80, 0x0d, 0x00, 0x00,
  0xee, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x70, 0x11, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xe4, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x36, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x5a, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4,
  0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88, 0x61, 0x18,
  0x86, 0x42, 0x4c, 0x04, 0x43, 0x10, 0x55, 0x8a, 0x81, 0x18, 0x86, 0x81,
  0xac, 0x39, 0x82, 0xa0, 0x18, 0x0c, 0x51, 0x10, 0x04, 0x46, 0xd9, 0x40,
  0xc0, 0x30, 0x02, 0x31, 0xcc, 0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30,
  0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20,
  0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40,
  0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40,
  0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0,
  0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00,
  0x0f, 0xe5, 0x80, 0x02, 0x62, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87,
  0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07,
  0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07,
  0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07,
  0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0x02,
  0xd7, 0x91, 0x37, 0x8c, 0x30, 0x0c, 0x39, 0x00, 0x26, 0x01, 0x77, 0xd5,
  0xe1, 0x48, 0xd3, 0x02, 0x60, 0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c,
  0x31, 0x11, 0x91, 0x84, 0x1a, 0x70, 0x18, 0x38, 0x30, 0x0c, 0x41, 0x90,
  0x13, 0x43, 0x91, 0xc6, 0x9b, 0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01,
  0xe6, 0x59, 0x88, 0x88, 0x9d, 0x80, 0x89, 0x40, 0x01, 0x41, 0x65, 0x4a,
  0x10, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x28, 0x20, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc9, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0b, 0x04,
  0x12, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x00, 0x0d, 0xca, 0xa0, 0x3c, 0xca,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x6f, 0x06, 0x80, 0xc8, 0x19, 0x00, 0x32, 0x67, 0x00, 0xe8, 0x1c, 0x4b,
  0x82, 0x88, 0xe7, 0x01, 0x80, 0xe3, 0x38, 0x8e, 0xe3, 0x38, 0x80, 0x40,
  0x20, 0x1e, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x24,
  0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x58, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x30, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x5f, 0x46, 0x60, 0x82, 0x40, 0x34, 0x13, 0x04, 0xc2, 0xd9,
  0x20, 0x1c, 0xd1, 0x86, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0xa0, 0x43, 0xda,
  0x90, 0x18, 0xce, 0x73, 0x18, 0x06, 0x74, 0x48, 0x1b, 0x84, 0x89, 0x9a,
  0x20, 0x90, 0x81, 0x36, 0x41, 0x20, 0x9e, 0x0d, 0xc8, 0x61, 0x3d, 0xc7,
  0x61, 0x5c, 0xc0, 0x86, 0x00, 0x9b, 0x20, 0x98, 0xc1, 0xb6, 0x01, 0x39,
  0xb4, 0xe7, 0x38, 0x8c, 0x03, 0xd8, 0x80, 0x18, 0xda, 0x73, 0x18, 0xc6,
  0x01, 0x6c, 0x10, 0x36, 0x6e, 0x03, 0x51, 0x01, 0x59, 0x37, 0x41, 0x38,
  0x03, 0x6e, 0x43, 0xf0, 0x4d, 0x10, 0x04, 0x80, 0x1b, 0xd4, 0x54, 0x91,
  0x9b, 0x5d, 0x53, 0x18, 0xdc, 0x14, 0x1c, 0x5a, 0x99, 0x5c, 0x19, 0x54,
  0x1a, 0x5e, 0x19, 0x1b, 0x53, 0xda, 0x19, 0x1a, 0x5d, 0x9a, 0xdb, 0x19,
  0x11, 0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x31,
  0x4d, 0x10, 0x0a, 0x6a, 0x43, 0x70, 0x4c, 0x10, 0x8a, 0x6a, 0x82, 0x40,
  0x40, 0x1b, 0x04, 0x34, 0x40, 0x83, 0x0d, 0xcb, 0x31, 0x06, 0x64, 0x50,
  0x06, 0x66, 0x70, 0x06, 0xc6, 0x19, 0x1c, 0x65, 0x90, 0x06, 0x1b, 0x02,
  0x63, 0x82, 0x50, 0x58, 0x13, 0x04, 0x22, 0xda, 0x20, 0xa0, 0x41, 0x1b,
  0x6c, 0x58, 0x8c, 0x31, 0x20, 0x83, 0x32, 0x58, 0x83, 0x33, 0x30, 0xd8,
  0xc0, 0x28, 0x03, 0x37, 0xd8, 0x10, 0x40, 0x13, 0x84, 0xe2, 0x9a, 0x20,
  0x10, 0xd2, 0x06, 0x01, 0x0d, 0xe4, 0x60, 0xc3, 0x02, 0x8d, 0x01, 0x19,
  0x94, 0x01, 0x1c, 0x9c, 0x81, 0x11, 0x07, 0x50, 0x19, 0xcc, 0x01, 0x8b,
  0xa1, 0x27, 0xa6, 0x27, 0xa9, 0x0d, 0x0b, 0x1a, 0xd4, 0x01, 0x19, 0x94,
  0x81, 0x19, 0x9c, 0x81, 0xc1, 0x06, 0x68, 0x50, 0x06, 0x6e, 0xb0, 0x81,
  0x50, 0x83, 0x37, 0xa0, 0x03, 0x3b, 0x60, 0x32, 0x65, 0xf5, 0x45, 0x15,
  0x26, 0x77, 0x56, 0x46, 0x37, 0x41, 0x28, 0xb0, 0x0d, 0xcb, 0x81, 0x07,
  0x64, 0x90, 0x07, 0x66, 0x50, 0x06, 0x06, 0x1b, 0x1c, 0x65, 0xe0, 0x06,
  0x1b, 0x02, 0x3d, 0xd8, 0x30, 0xdc, 0xc1, 0x1e, 0x00, 0x1b, 0x8a, 0x30,
  0x10, 0x03, 0x3e, 0xf0, 0x80, 0x56, 0x78, 0x62, 0x6f, 0x78, 0x2e, 0x63,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x74, 0x69,
  0x6f, 0x6e, 0x73, 0x53, 0x02, 0xa1, 0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b,
  0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94, 0x80, 0xa8, 0x42, 0x86, 0xe7, 0x62,
  0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36, 0x25, 0x38, 0x9a, 0x90, 0xe1,
  0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9, 0x4d, 0x09, 0x92, 0x3a, 0x64,
  0x78, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
  0x6c, 0x53, 0x02, 0xa6, 0x0c, 0x19, 0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b,
  0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94, 0xa0, 0xab, 0x43, 0x86, 0xe7, 0x62,
  0x97, 0x56, 0x76, 0x97, 0x44, 0x36, 0x45, 0x17, 0x46, 0x57, 0x36, 0x25,
  0xf8, 0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9, 0xd1, 0xc9, 0xe5, 0x41, 0xbd,
  0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0xf8, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x06, 0xb0, 0xa5, 0xac,
  0xd7, 0x54, 0x26, 0xf0, 0xb0, 0xcf, 0x41, 0x44, 0x44, 0x8a, 0x5c, 0xc4,
  0x52, 0x22, 0xc6, 0x31, 0x21, 0x8d, 0x61, 0x06, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x7e, 0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x11, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3,
  0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e,
  0x71, 0xdb, 0x36, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf,
  0x42, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2,
  0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0xdb, 0x81,
  0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e,
  0x71, 0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11,
  0xe6, 0x17, 0xb7, 0x0d, 0x61, 0x20, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x84, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94, 0x45, 0xc1, 0x14, 0x45,
  0xc9, 0xcc, 0x00, 0x14, 0x42, 0xd9, 0x15, 0x57, 0xc9, 0x95, 0x42, 0xb9,
  0x15, 0x1e, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x37, 0x46, 0x00,
  0x82, 0x20, 0x08, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0x8d,
  0x00, 0xcc, 0x00, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xa0, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa5, 0x81, 0xd2, 0xa1, 0x01,
  0x1a, 0x50, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa9, 0xc1, 0xe2,
  0xa1, 0x01, 0x1a, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xad,
  0x01, 0xc3, 0xa9, 0x81, 0x1a, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x90, 0xb1, 0x41, 0xd3, 0xa9, 0x81, 0x1a, 0x5c, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x90, 0xb5, 0x81, 0x03, 0x06, 0x6b, 0xb0, 0x06, 0xd8, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x75, 0x20, 0x99, 0x01, 0x1b, 0x88,
  0xc1, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1d, 0x4c, 0x67,
  0xd0, 0x06, 0x19, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1d,
  0x50, 0x68, 0xe0, 0x06, 0x63, 0x50, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x81, 0x07, 0x55, 0x1a, 0xbc, 0x81, 0x18, 0x58, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xe4, 0x81, 0xd5, 0x06, 0x70, 0x60, 0x06, 0xd7,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7a, 0x70, 0xb9, 0x41, 0x1c,
  0x74, 0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7b, 0x80, 0xbd,
  0x81, 0x1c, 0x9c, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06,
  0x1f, 0x64, 0x74, 0x30, 0x07, 0x69, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0xd1, 0x07, 0x5a, 0x1d, 0xd0, 0x01, 0x18, 0x6c, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0xc1, 0x66, 0x07, 0x75, 0xa0, 0x06,
  0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7f, 0xc0, 0xdd, 0x81,
  0x1d, 0xa4, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x28,
  0x74, 0x77, 0x70, 0x07, 0x6d, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x11, 0x0a, 0x1e, 0x1e, 0xe0, 0x01, 0x19, 0x7c, 0x23, 0x06, 0x0f,
  0x00, 0x82, 0x60, 0xd0, 0x80, 0x42, 0x16, 0x3d, 0x42, 0x40, 0x51, 0x79,
  0x90, 0x07, 0x60, 0x40, 0x8d, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c,
  0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x21, 0xc9, 0xc7, 0x08, 0x49,
  0x3e, 0x46, 0x48, 0xf2, 0x31, 0x42, 0x92, 0xcf, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x50, 0xa6, 0x70, 0x06, 0xd7, 0x1a, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x53, 0x7c, 0x6c, 0x98,
  0xe2, 0x63, 0xc3, 0x14, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x78,
  0x5e, 0x41, 0x0d, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0xa2, 0x57, 0x90, 0x83, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0x9e, 0x58, 0x60, 0x83, 0x4d, 0xcb, 0x36, 0x2d, 0x1b, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x83, 0x28, 0x16, 0xe8, 0x20, 0xb0, 0xa0, 0x93, 0x8f,
  0x09, 0x9d, 0x7c, 0x6c, 0xe8, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x14, 0x2d, 0xd4, 0x41, 0x19, 0xd8, 0xc1, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x01, 0x85, 0x0b, 0x79, 0x90, 0x06, 0xac, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x40, 0xf1, 0x42, 0x1f, 0xb4, 0x81, 0x1e, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x50, 0xe0, 0x10, 0x0a, 0x71, 0xb0, 0x0b, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x14, 0x39, 0x94, 0x42, 0x1d, 0xf8, 0xc2, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01,
  0x85, 0x0e, 0xa9, 0x90, 0x07, 0xe0, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0x26, 0x0a, 0x56, 0x7c, 0x6c, 0x14, 0xac,
  0xf8, 0x18, 0x29, 0x40, 0xf1, 0xb1, 0x52, 0x80, 0xe2, 0x63, 0xa6, 0xa0,
  0xc4, 0xc7, 0x4e, 0x41, 0x89, 0x8f, 0x85, 0x41, 0x27, 0x1f, 0x4b, 0x85,
  0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60, 0xcd, 0x03, 0x2d,
  0x20, 0x62, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x45, 0x0f,
  0xb5, 0x80, 0x88, 0x41, 0x60, 0x65, 0x90, 0xc9, 0xc7, 0x5a, 0x21, 0x88,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0xf7, 0x80, 0x0b, 0x8a,
  0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60, 0xe1, 0x43, 0x2e,
  0x28, 0x66, 0x10, 0x58, 0x1a, 0x54, 0xf2, 0xb1, 0x58, 0x08, 0xe2, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd6, 0x3e, 0xf0, 0x02, 0xa3, 0x06,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0xfc, 0xd0, 0x0b, 0x8c,
  0x1a, 0x04, 0xc3, 0x11, 0x89, 0x2d, 0x10, 0xdf, 0x70, 0x84, 0x71, 0x0b,
  0xc4, 0x37, 0x1c, 0x31, 0xe0, 0x02, 0xf1, 0x4d, 0x37, 0xe4, 0x82, 0x2e,
  0x0c, 0xd3, 0x0d, 0xba, 0xb0, 0x0b, 0xc3, 0x74, 0xc3, 0x2e, 0xf0, 0xc2,
  0x60, 0xc3, 0x23, 0x1f, 0x1b, 0x18, 0xf9, 0xd8, 0x90, 0xc8, 0xc7, 0x06,
  0x37, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0x27, 0x81,
  0x0e, 0xc3, 0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60, 0xa1,
  0x44, 0x3a, 0x0c, 0x60, 0x10, 0x98, 0x01, 0x07, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x03, 0x4b, 0x25, 0xd6, 0xc1, 0x48, 0x83, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0xac, 0x95, 0x60, 0x07, 0x43, 0x0c, 0x02,
  0x4b, 0xe4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60, 0xb5,
  0x84, 0x3b, 0x24, 0x6b, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81,
  0xe5, 0x12, 0xef, 0x90, 0x90, 0x41, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x14, 0x4c, 0xc4, 0x43, 0x38, 0xa4, 0xc4, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x44,
  0x3e, 0x36, 0x1c, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xea,
  0x26, 0xf0, 0x01, 0x1d, 0x5a, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0xec, 0x18, 0xe0, 0x63, 0xc7, 0x00, 0x1f, 0x3b,
  0x06, 0xf8, 0x18, 0x2f, 0x0c, 0xf2, 0x31, 0x5e, 0x18, 0xe4, 0x63, 0xbc,
  0x30, 0xc8, 0xc7, 0x66, 0xe1, 0x16, 0xe4, 0x63, 0xf8, 0x10, 0xc4, 0xc7,
  0x6a, 0x01, 0x17, 0xe4, 0x63, 0xfa, 0x10, 0xc4, 0xc7, 0x6e, 0x21, 0x17,
  0xe4, 0x63, 0xfc, 0x10, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c,
  0x9e, 0xb4, 0x20, 0x89, 0x62, 0x08, 0x6c, 0xa1, 0x16, 0x68, 0xc1, 0x02,
  0x91, 0x90, 0x8f, 0x05, 0xb8, 0x20, 0x1f, 0x13, 0x70, 0x41, 0x3e, 0x36,
  0xe0, 0x82, 0x7c, 0x4c, 0x19, 0xe2, 0x63, 0xc9, 0x10, 0x1f, 0x43, 0x86,
  0xf8, 0xd8, 0x30, 0xc8, 0xc7, 0x86, 0x41, 0x3e, 0x26, 0x04, 0xf0, 0x31,
  0x62, 0x25, 0xe0, 0x63, 0x41, 0x20, 0x1f, 0x1b, 0x02, 0xf8, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x41, 0x64, 0x17, 0x3b, 0x11, 0x58, 0x00, 0x13,
  0xf2, 0xb1, 0x25, 0xa0, 0x8f, 0x05, 0x33, 0x01, 0x1f, 0x63, 0x06, 0xfa,
  0x58, 0x50, 0x13, 0xf0, 0x19, 0x31, 0x78, 0x00, 0x10, 0x04, 0x83, 0xc6,
  0x2f, 0x6e, 0x02, 0x26, 0x5c, 0x62, 0x08, 0x64, 0x42, 0x26, 0xee, 0xe2,
  0x2e, 0x7c, 0x42, 0x26, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x8c, 0xd8, 0x07, 0xf9, 0x18, 0xc1,
  0x0f, 0xf2, 0x31, 0xa2, 0x1f, 0xe4, 0x63, 0x84, 0x3f, 0xc8, 0x67, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x28, 0xd2, 0x28, 0x8b, 0x9a, 0x08, 0x8d,
  0xd1, 0x84, 0x00, 0x30, 0x03, 0x0d, 0xe2, 0x63, 0x06, 0x1a, 0xc4, 0xc7,
  0x0c, 0x34, 0x88, 0x8f, 0x0d, 0x84, 0x7c, 0x6c, 0x28, 0xe4, 0x63, 0x83,
  0x21, 0x1f, 0x1b, 0xdc, 0x00, 0x3e, 0x36, 0xb8, 0x01, 0x7c, 0x6c, 0x70,
  0x03, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xf5, 0x1a, 0x70,
  0x01, 0x16, 0xab, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0x36, 0x40, 0xf2, 0xb1, 0x21, 0x92, 0x8f, 0x0d, 0x92, 0x7c,
  0x4c, 0x19, 0xe0, 0x63, 0xca, 0x00, 0x1f, 0x53, 0x06, 0xf8, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0x01, 0x95, 0x1b, 0x7a, 0xa1, 0x16, 0xa0, 0x31,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0xe0,
  0x84, 0x7c, 0x6c, 0xc8, 0x09, 0xf9, 0xd8, 0xa0, 0x13, 0xf2, 0xb1, 0x41,
  0x89, 0x8f, 0x0d, 0x4a, 0x7c, 0x6c, 0x50, 0xe2, 0x63, 0x43, 0x5a, 0xc8,
  0xc7, 0x06, 0xb5, 0x90, 0x8f, 0x0d, 0x6b, 0x21, 0x1f, 0x1b, 0x20, 0xf8,
  0xd8, 0x00, 0xc1, 0xc7, 0x06, 0x08, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x80, 0xb4, 0xc7, 0x69, 0x94, 0x47, 0x79, 0xec, 0xc6, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0x7b, 0x9c, 0x46, 0x79, 0x94, 0x47,
  0x6c, 0x08, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xb4, 0xc7, 0x69,
  0x94, 0x47, 0x79, 0xe8, 0x46, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x48, 0x7b, 0x9c, 0x46, 0x79, 0x94, 0x07, 0x6e, 0x90, 0x05, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c,
  0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xd6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0x13, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
  0x14, 0x7f, 0x33, 0xb3, 0x5e, 0x8f, 0xd7, 0xb3, 0x6f, 0xed, 0xf5, 0xbf,
  0xf5, 0x76, 0x63, 0x9c, 0x06, 0x88, 0x11, 0x09, 0xe4, 0xc0, 0x09, 0x25,
  0x10, 0x50, 0x5b, 0x15, 0x4a, 0x45, 0xa5, 0x48, 0x7b, 0x40, 0x6a, 0x55,
  0x90, 0xa2, 0xc6, 0x2d, 0x2a, 0x01, 0x21, 0x94, 0x43, 0x65, 0x16, 0x88,
  0x54, 0x10, 0x3d, 0xf0, 0x05, 0x10, 0x3d, 0xf8, 0x82, 0x54, 0x4a, 0x81,
  0x13, 0x97, 0x4d, 0xe8, 0x85, 0xf9, 0x02, 0x6e, 0x2f, 0x85, 0xaf, 0xd0,
  0xaa, 0xf2, 0xa1, 0xaa, 0xaa, 0x84, 0xd9, 0x5d, 0x9b, 0xd8, 0x4d, 0xa3,
  0x04, 0x2e, 0x58, 0xc8, 0x4f, 0x7a, 0x7a, 0x33, 0x6f, 0x7e, 0xef, 0xcf,
  0xbc, 0xb7, 0x5a, 0x69, 0xde, 0xb1, 0xa5, 0xa5, 0x93, 0x84, 0x00, 0xfc,
  0x5e, 0x80, 0x98, 0xf4, 0x44, 0xc0, 0xdd, 0xf0, 0x87, 0x3f, 0x0f, 0xc2,
  0x37, 0xfe, 0x21, 0xbe, 0xcf, 0xb4, 0x67, 0x77, 0x04, 0xfe, 0x1d, 0xf5,
  0xfd, 0x3c, 0xc0, 0x64, 0x1f, 0xb0, 0xc1, 0x53, 0xdc, 0x85, 0x5f, 0xb3,
  0x13, 0x79, 0xa7, 0x27, 0x53, 0x7d, 0x26, 0x14, 0x36, 0x07, 0x70, 0x0e,
  0x9c, 0x65, 0x64, 0x60, 0xbf, 0xd8, 0xab, 0x4b, 0xa4, 0x7b, 0x51, 0xf1,
  0x07, 0x7f, 0xd7, 0x29, 0x0e, 0x48, 0x75, 0x62, 0xa9, 0x23, 0x42, 0x75,
  0x9a, 0x56, 0x57, 0xa2, 0x54, 0x67, 0x96, 0x3a, 0x60, 0x14, 0xfe, 0xe7,
  0xa4, 0x29, 0xf6, 0x06, 0xd6, 0xd1, 0x85, 0x73, 0x8a, 0xad, 0x01, 0x4c,
  0xf4, 0x2d, 0xfd, 0x1a, 0xaf, 0x82, 0x8d, 0x41, 0xfe, 0xc6, 0x81, 0x07,
  0x4f, 0xf6, 0x3a, 0x8c, 0x23, 0x0a, 0xa7, 0x1f, 0x00, 0xc7, 0x22, 0x5c,
  0xfa, 0x80, 0xb8, 0xd4, 0xde, 0x38, 0xdd, 0x82, 0x33, 0x5a, 0x96, 0x9e,
  0xb1, 0x3c, 0x95, 0x1f, 0x79, 0x12, 0xae, 0x79, 0x5b, 0xb7, 0xa8, 0x3a,
  0x6a, 0xde, 0x56, 0x38, 0xd8, 0x1b, 0xb7, 0xd2, 0xc3, 0xad, 0xec, 0x83,
  0x3b, 0xdf, 0xc3, 0x9d, 0xdf, 0x07, 0x77, 0xa1, 0x87, 0xbb, 0xb0, 0x0f,
  0x6e, 0xf8, 0xbe, 0x56, 0x5c, 0x17, 0x6d, 0xd7, 0x8d, 0xb7, 0x15, 0xc1,
  0x98, 0x46, 0x8a, 0xc6, 0x3d, 0x19, 0x3d, 0x1a, 0xf7, 0x64, 0xf4, 0x68,
  0xdc, 0x93, 0xd1, 0xa3, 0x71, 0x4f, 0x46, 0x8f, 0xc6, 0x3d, 0x19, 0x3d,
  0x1a, 0xf7, 0x64, 0x74, 0xe9, 0xce, 0x1f, 0x41, 0xe7, 0xbd, 0x0f, 0xb7,
  0x19, 0xff, 0xf6, 0x50, 0xee, 0xa7, 0x47, 0x41, 0x67, 0xa1, 0xb9, 0xc5,
  0xe4, 0xb1, 0xe3, 0xf3, 0x0c, 0xae, 0x6e, 0xb4, 0xb4, 0x1b, 0x61, 0xcb,
  0xd8, 0x0a, 0x33, 0xec, 0xf3, 0x30, 0x60, 0x5f, 0x29, 0xfe, 0x22, 0x44,
  0xf6, 0x28, 0x24, 0x3a, 0xef, 0x2a, 0xd3, 0x87, 0x1a, 0x88, 0x58, 0x02,
  0x70, 0x09, 0x44, 0xc8, 0x6d, 0xf6, 0x63, 0x78, 0xed, 0x6d, 0x92, 0xff,
  0x8d, 0x5d, 0x0f, 0x05, 0xbb, 0x16, 0x12, 0xc8, 0x48, 0x42, 0x4c, 0x69,
  0x6e, 0xcf, 0x7e, 0x19, 0xbf, 0x92, 0x52, 0x8e, 0x2c, 0xa7, 0x67, 0xba,
  0x57, 0x23, 0x9b, 0x8c, 0x27, 0x41, 0xab, 0x4b, 0xe0, 0x0d, 0x49, 0x52,
  0x55, 0x09, 0xfa, 0xbc, 0x24, 0x99, 0x09, 0x49, 0xb4, 0x49, 0x09, 0xc6,
  0x8c, 0x24, 0xfc, 0x39, 0xf9, 0xe9, 0xe6, 0x95, 0x0d, 0x6e, 0x05, 0xf7,
  0x28, 0xdd, 0x84, 0xb4, 0xe5, 0x20, 0xd1, 0x17, 0x24, 0x31, 0x66, 0x65,
  0x96, 0xfd, 0xac, 0x72, 0xf9, 0x3a, 0x34, 0x4a, 0x8e, 0x9f, 0xca, 0x24,
  0x39, 0xdc, 0xe2, 0xf5, 0xae, 0x8a, 0xf0, 0xb0, 0x0c, 0x73, 0xdd, 0xba,
  0x92, 0x13, 0x42, 0x70, 0x2f, 0x97, 0xe3, 0xd9, 0x8a, 0xe3, 0xd7, 0x6a,
  0xcf, 0xf2, 0xb2, 0x36, 0xd7, 0x3d, 0xab, 0xf4, 0xba, 0xe9, 0x62, 0xc0,
  0x7e, 0x09, 0xc5, 0x69, 0xa7, 0x05, 0xe6, 0x11, 0xc9, 0xf3, 0xae, 0x4f,
  0xcc, 0xa3, 0xb2, 0x30, 0xed, 0xfa, 0xa2, 0x54, 0x44, 0x61, 0x21, 0x8a,
  0x4a, 0x19, 0xcd, 0xd3, 0x6e, 0x2b, 0x8e, 0x5f, 0xf4, 0x50, 0x14, 0xeb,
  0x98, 0x2b, 0xce, 0xa0, 0x80, 0x13, 0x9d, 0x0c, 0xbe, 0xdc, 0x46, 0x25,
  0x4d, 0x7c, 0xbd, 0x5d, 0x56, 0x32, 0x8f, 0xef, 0xb4, 0x4d, 0x53, 0xa0,
  0x99, 0xcf, 0xa9, 0xf3, 0xe7, 0x3b, 0x46, 0x99, 0xd6, 0xcd, 0xe9, 0xa7,
  0x11, 0xd5, 0x1a, 0xd5, 0x5a, 0xb7, 0x6a, 0x58, 0x56, 0x6b, 0x5b, 0xad,
  0x03, 0x87, 0x5f, 0x2a, 0xd3, 0x46, 0x9c, 0x6f, 0x95, 0x25, 0x35, 0x34,
  0x95, 0x0f, 0x5e, 0x7a, 0xa5, 0x0d, 0x62, 0x51, 0x5a, 0x40, 0x3a, 0xf7,
  0xe1, 0x7b, 0x12, 0x78, 0xfc, 0x92, 0x19, 0xd9, 0x54, 0x68, 0x83, 0x88,
  0xd7, 0x64, 0x21, 0x8a, 0x67, 0xb9, 0xed, 0x4c, 0x24, 0x2b, 0x6f, 0xb6,
  0xad, 0xaa, 0xca, 0xb1, 0x87, 0xe5, 0x91, 0xae, 0x74, 0xb8, 0x5d, 0x98,
  0x2e, 0x62, 0x30, 0xa3, 0xfc, 0xa3, 0x8b, 0x62, 0xa2, 0x81, 0x25, 0xf4,
  0xb0, 0x88, 0x03, 0xb8, 0x7c, 0xd1, 0xbf, 0x6f, 0xdb, 0x3a, 0xe0, 0x71,
  0xe9, 0x34, 0xd0, 0x17, 0xb3, 0x0e, 0x56, 0x1b, 0x9e, 0xef, 0x36, 0x5c,
  0x3f, 0x53, 0x28, 0xfa, 0x60, 0xa9, 0xfa, 0xe3, 0x1b, 0x72, 0xc2, 0xf1,
  0xfc, 0x9a, 0xe3, 0xfa, 0x9e, 0x83, 0xbe, 0x01, 0xd7, 0x3b, 0x06, 0x01,
  0x07, 0xd2, 0xaa, 0x1f, 0xd6, 0x82, 0x8c, 0xee, 0x4f, 0x5d, 0x57, 0xa5,
  0x7d, 0xa2, 0x03, 0x68, 0x43, 0x5a, 0x49, 0xe2, 0x95, 0x81, 0xa4, 0x67,
  0x65, 0x54, 0x93, 0x42, 0xe9, 0x26, 0x4b, 0xee, 0x73, 0x93, 0xad, 0xbe,
  0x7a, 0x65, 0x43, 0x7b, 0xe6, 0x05, 0x64, 0x53, 0x02, 0xe9, 0xa4, 0x86,
  0xa9, 0xa7, 0x0c, 0xac, 0x54, 0x39, 0xea, 0xaa, 0xbe, 0x94, 0x08, 0x6c,
  0xcd, 0x6d, 0x5d, 0xee, 0xf7, 0xd7, 0x84, 0x26, 0x44, 0xf8, 0xd8, 0x6f,
  0xd6, 0x5d, 0x27, 0x91, 0xdf, 0x6c, 0x6d, 0x9d, 0x46, 0xf1, 0xb2, 0xf6,
  0x3a, 0xcb, 0xda, 0x38, 0x05, 0xc2, 0x9f, 0xa2, 0xe8, 0x4f, 0x69, 0xdc,
  0xe7, 0xb6, 0xf0, 0x33, 0xb6, 0xca, 0xcf, 0xe6, 0x7e, 0x64, 0x53, 0x37,
  0x12, 0x9b, 0x49, 0x23, 0xb1, 0x39, 0x6c, 0xd8, 0xeb, 0x50, 0x11, 0x3e,
  0xa9, 0xa0, 0x4f, 0x2b, 0x11, 0x66, 0xaf, 0x77, 0xee, 0x67, 0x4a, 0xff,
  0xdd, 0x7f, 0xca, 0xfd, 0xf1, 0x4d, 0xff, 0x59, 0xcb, 0x15, 0x3f, 0xae,
  0xcb, 0x90, 0x61, 0x5d, 0xc4, 0x06, 0xdd, 0xad, 0xcb, 0xb2, 0x1d, 0x9b,
  0xfe, 0x20, 0x46, 0x68, 0x03, 0x0e, 0x21, 0x99, 0x59, 0x70, 0x15, 0x84,
  0xb0, 0xe1, 0xff, 0x80, 0x36, 0x10, 0x84, 0xf4, 0x71, 0x2a, 0x08, 0x61,
  0xc3, 0xb9, 0x68, 0x2a, 0x08, 0x7d, 0xec, 0x0d, 0xae, 0xc5, 0x41, 0x12,
  0xda, 0xf9, 0xd7, 0x1f, 0x82, 0x53, 0x4b, 0x47, 0x2f, 0x7e, 0x72, 0xf2,
  0xdd, 0xd5, 0xa5, 0xd5, 0x95, 0xe5, 0x8f, 0x96, 0x4f, 0x35, 0xd7, 0x96,
  0xdf, 0x7f, 0xab, 0x79, 0x6e, 0xe5, 0xe3, 0xe6, 0xc5, 0x73, 0xfd, 0x31,
  0xd6, 0xe5, 0xde, 0x58, 0x69, 0x51, 0x71, 0x34, 0xc9, 0x78, 0x29, 0x0a,
  0xc5, 0x76, 0xc6, 0x58, 0xf3, 0x71, 0xe8, 0x9d, 0xa9, 0xd2, 0x66, 0x6f,
  0xdf, 0xcf, 0x60, 0x8d, 0x24, 0xf8, 0x64, 0x0f, 0xf0, 0x17, 0x5f, 0x5e,
  0xa2, 0x53, 0x00, 0x00, 0xdc, 0xdd, 0x62, 0xb8, 0x08, 0x9d, 0x1b, 0x10,
  0xb1, 0xfc, 0x3d, 0x34, 0xc8, 0x46, 0x48, 0x3c
};
