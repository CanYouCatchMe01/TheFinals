#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettNormalMapEffect_PSNormalPixelLightingTxNoFog.pdb
; shader hash: 5fcf554f11715ce45e14f01e6b907435
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSNormalPixelLightingTxNoFog
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSNormalPixelLightingTxNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = fmul fast float %22, %9
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = fsub fast float %30, %15
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = fmul fast float %31, %35
  %37 = fmul fast float %32, %35
  %38 = fmul fast float %33, %35
  %39 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %40 = call float @dx.op.unary.f32(i32 25, float %39)  ; Rsqrt(value)
  %41 = fmul fast float %40, %10
  %42 = fmul fast float %40, %11
  %43 = fmul fast float %40, %12
  %44 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %45 = extractvalue %dx.types.ResRet.f32 %44, 0
  %46 = extractvalue %dx.types.ResRet.f32 %44, 1
  %47 = fmul fast float %45, 2.000000e+00
  %48 = fmul fast float %46, 2.000000e+00
  %49 = fadd fast float %47, -1.000000e+00
  %50 = fadd fast float %48, -1.000000e+00
  %51 = call float @dx.op.dot2.f32(i32 54, float %49, float %50, float %49, float %50)  ; Dot2(ax,ay,bx,by)
  %52 = fsub fast float 1.000000e+00, %51
  %53 = call float @dx.op.unary.f32(i32 24, float %52)  ; Sqrt(value)
  %54 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %55 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %57 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %59 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %60 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %61 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %62 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %63 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %64 = fmul fast float %59, %55
  %65 = fmul fast float %58, %56
  %66 = fsub fast float %64, %65
  %67 = fmul fast float %57, %56
  %68 = fmul fast float %59, %54
  %69 = fsub fast float %67, %68
  %70 = fmul fast float %58, %54
  %71 = fmul fast float %57, %55
  %72 = fsub fast float %70, %71
  %73 = fmul fast float %72, %58
  %74 = fmul fast float %69, %59
  %75 = fsub fast float %73, %74
  %76 = fmul fast float %66, %59
  %77 = fmul fast float %72, %57
  %78 = fsub fast float %76, %77
  %79 = fmul fast float %69, %57
  %80 = fmul fast float %66, %58
  %81 = fsub fast float %79, %80
  %82 = fmul fast float %69, %56
  %83 = fmul fast float %72, %55
  %84 = fsub fast float %82, %83
  %85 = fmul fast float %72, %54
  %86 = fmul fast float %66, %56
  %87 = fsub fast float %85, %86
  %88 = fmul fast float %66, %55
  %89 = fmul fast float %69, %54
  %90 = fsub fast float %88, %89
  %91 = fmul fast float %75, %60
  %92 = call float @dx.op.tertiary.f32(i32 46, float %62, float %84, float %91)  ; FMad(a,b,c)
  %93 = fmul fast float %78, %60
  %94 = call float @dx.op.tertiary.f32(i32 46, float %62, float %87, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %81, %60
  %96 = call float @dx.op.tertiary.f32(i32 46, float %62, float %90, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.dot3.f32(i32 55, float %92, float %94, float %96, float %92, float %94, float %96)  ; Dot3(ax,ay,az,bx,by,bz)
  %98 = call float @dx.op.unary.f32(i32 25, float %97)  ; Rsqrt(value)
  %99 = fmul fast float %75, %61
  %100 = call float @dx.op.tertiary.f32(i32 46, float %63, float %84, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %78, %61
  %102 = call float @dx.op.tertiary.f32(i32 46, float %63, float %87, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %81, %61
  %104 = call float @dx.op.tertiary.f32(i32 46, float %63, float %90, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.dot3.f32(i32 55, float %100, float %102, float %104, float %100, float %102, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %106 = call float @dx.op.unary.f32(i32 25, float %105)  ; Rsqrt(value)
  %107 = fmul fast float %106, %100
  %108 = fmul fast float %106, %102
  %109 = fmul fast float %106, %104
  %110 = fmul fast float %92, %49
  %111 = fmul fast float %110, %98
  %112 = call float @dx.op.tertiary.f32(i32 46, float %50, float %107, float %111)  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %53, float %41, float %112)  ; FMad(a,b,c)
  %114 = fmul fast float %94, %49
  %115 = fmul fast float %114, %98
  %116 = call float @dx.op.tertiary.f32(i32 46, float %50, float %108, float %115)  ; FMad(a,b,c)
  %117 = call float @dx.op.tertiary.f32(i32 46, float %53, float %42, float %116)  ; FMad(a,b,c)
  %118 = fmul fast float %96, %49
  %119 = fmul fast float %118, %98
  %120 = call float @dx.op.tertiary.f32(i32 46, float %50, float %109, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %53, float %43, float %120)  ; FMad(a,b,c)
  %122 = call float @dx.op.dot3.f32(i32 55, float %113, float %117, float %121, float %113, float %117, float %121)  ; Dot3(ax,ay,az,bx,by,bz)
  %123 = call float @dx.op.unary.f32(i32 25, float %122)  ; Rsqrt(value)
  %124 = fmul fast float %123, %113
  %125 = fmul fast float %123, %117
  %126 = fmul fast float %123, %121
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = fsub fast float %36, %128
  %140 = fsub fast float %37, %129
  %141 = fsub fast float %38, %130
  %142 = call float @dx.op.dot3.f32(i32 55, float %139, float %140, float %141, float %139, float %140, float %141)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = call float @dx.op.unary.f32(i32 25, float %142)  ; Rsqrt(value)
  %144 = fmul fast float %143, %140
  %145 = fmul fast float %143, %141
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 1
  %149 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = fsub fast float %36, %147
  %159 = fsub fast float %37, %148
  %160 = fsub fast float %38, %149
  %161 = call float @dx.op.dot3.f32(i32 55, float %158, float %159, float %160, float %158, float %159, float %160)  ; Dot3(ax,ay,az,bx,by,bz)
  %162 = call float @dx.op.unary.f32(i32 25, float %161)  ; Rsqrt(value)
  %163 = fmul fast float %162, %159
  %164 = fmul fast float %162, %160
  %165 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.f32 %165, 0
  %167 = extractvalue %dx.types.CBufRet.f32 %165, 1
  %168 = extractvalue %dx.types.CBufRet.f32 %165, 2
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %174 = extractvalue %dx.types.CBufRet.f32 %173, 0
  %175 = extractvalue %dx.types.CBufRet.f32 %173, 1
  %176 = extractvalue %dx.types.CBufRet.f32 %173, 2
  %177 = fsub fast float %36, %166
  %178 = fsub fast float %37, %167
  %179 = fsub fast float %38, %168
  %180 = call float @dx.op.dot3.f32(i32 55, float %177, float %178, float %179, float %177, float %178, float %179)  ; Dot3(ax,ay,az,bx,by,bz)
  %181 = call float @dx.op.unary.f32(i32 25, float %180)  ; Rsqrt(value)
  %182 = fmul fast float %181, %178
  %183 = fmul fast float %181, %179
  %184 = fsub fast float -0.000000e+00, %129
  %185 = fsub fast float -0.000000e+00, %130
  %186 = fsub fast float -0.000000e+00, %148
  %187 = fsub fast float -0.000000e+00, %149
  %188 = fsub fast float -0.000000e+00, %167
  %189 = fsub fast float -0.000000e+00, %168
  %190 = fmul fast float %124, %128
  %191 = fsub fast float -0.000000e+00, %190
  %192 = call float @dx.op.tertiary.f32(i32 46, float %184, float %125, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %185, float %126, float %192)  ; FMad(a,b,c)
  %194 = fmul fast float %124, %147
  %195 = fsub fast float -0.000000e+00, %194
  %196 = call float @dx.op.tertiary.f32(i32 46, float %186, float %125, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %187, float %126, float %196)  ; FMad(a,b,c)
  %198 = fmul fast float %124, %166
  %199 = fsub fast float -0.000000e+00, %198
  %200 = call float @dx.op.tertiary.f32(i32 46, float %188, float %125, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %189, float %126, float %200)  ; FMad(a,b,c)
  %202 = fmul fast float %139, %124
  %203 = fmul fast float %202, %143
  %204 = call float @dx.op.tertiary.f32(i32 46, float %144, float %125, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %145, float %126, float %204)  ; FMad(a,b,c)
  %206 = fmul fast float %158, %124
  %207 = fmul fast float %206, %162
  %208 = call float @dx.op.tertiary.f32(i32 46, float %163, float %125, float %207)  ; FMad(a,b,c)
  %209 = call float @dx.op.tertiary.f32(i32 46, float %164, float %126, float %208)  ; FMad(a,b,c)
  %210 = fmul fast float %177, %124
  %211 = fmul fast float %210, %181
  %212 = call float @dx.op.tertiary.f32(i32 46, float %182, float %125, float %211)  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %183, float %126, float %212)  ; FMad(a,b,c)
  %214 = fcmp fast olt float %193, 0.000000e+00
  %215 = fcmp fast olt float %197, 0.000000e+00
  %216 = fcmp fast olt float %201, 0.000000e+00
  %217 = select i1 %214, float 0.000000e+00, float 1.000000e+00
  %218 = select i1 %215, float 0.000000e+00, float 1.000000e+00
  %219 = select i1 %216, float 0.000000e+00, float 1.000000e+00
  %220 = fmul fast float %217, %193
  %221 = fmul fast float %218, %197
  %222 = fmul fast float %219, %201
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %225 = call float @dx.op.binary.f32(i32 35, float %205, float 0.000000e+00)  ; FMax(a,b)
  %226 = call float @dx.op.binary.f32(i32 35, float %209, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %213, float 0.000000e+00)  ; FMax(a,b)
  %228 = fmul fast float %225, %217
  %229 = fmul fast float %226, %218
  %230 = fmul fast float %227, %219
  %231 = call float @dx.op.unary.f32(i32 23, float %228)  ; Log(value)
  %232 = call float @dx.op.unary.f32(i32 23, float %229)  ; Log(value)
  %233 = call float @dx.op.unary.f32(i32 23, float %230)  ; Log(value)
  %234 = fmul fast float %231, %224
  %235 = fmul fast float %232, %224
  %236 = fmul fast float %233, %224
  %237 = call float @dx.op.unary.f32(i32 21, float %234)  ; Exp(value)
  %238 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
  %239 = call float @dx.op.unary.f32(i32 21, float %236)  ; Exp(value)
  %240 = fmul fast float %237, %193
  %241 = fmul fast float %238, %197
  %242 = fmul fast float %239, %201
  %243 = fmul fast float %220, %132
  %244 = call float @dx.op.tertiary.f32(i32 46, float %221, float %151, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %222, float %170, float %244)  ; FMad(a,b,c)
  %246 = fmul fast float %220, %133
  %247 = call float @dx.op.tertiary.f32(i32 46, float %221, float %152, float %246)  ; FMad(a,b,c)
  %248 = call float @dx.op.tertiary.f32(i32 46, float %222, float %171, float %247)  ; FMad(a,b,c)
  %249 = fmul fast float %220, %134
  %250 = call float @dx.op.tertiary.f32(i32 46, float %221, float %153, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %222, float %172, float %250)  ; FMad(a,b,c)
  %252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.f32 %252, 0
  %254 = extractvalue %dx.types.CBufRet.f32 %252, 1
  %255 = extractvalue %dx.types.CBufRet.f32 %252, 2
  %256 = fmul fast float %253, %245
  %257 = fmul fast float %254, %248
  %258 = fmul fast float %255, %251
  %259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.f32 %259, 0
  %261 = extractvalue %dx.types.CBufRet.f32 %259, 1
  %262 = extractvalue %dx.types.CBufRet.f32 %259, 2
  %263 = fadd fast float %256, %260
  %264 = fadd fast float %257, %261
  %265 = fadd fast float %258, %262
  %266 = fmul fast float %240, %136
  %267 = call float @dx.op.tertiary.f32(i32 46, float %241, float %155, float %266)  ; FMad(a,b,c)
  %268 = call float @dx.op.tertiary.f32(i32 46, float %242, float %174, float %267)  ; FMad(a,b,c)
  %269 = fmul fast float %240, %137
  %270 = call float @dx.op.tertiary.f32(i32 46, float %241, float %156, float %269)  ; FMad(a,b,c)
  %271 = call float @dx.op.tertiary.f32(i32 46, float %242, float %175, float %270)  ; FMad(a,b,c)
  %272 = fmul fast float %240, %138
  %273 = call float @dx.op.tertiary.f32(i32 46, float %241, float %157, float %272)  ; FMad(a,b,c)
  %274 = call float @dx.op.tertiary.f32(i32 46, float %242, float %176, float %273)  ; FMad(a,b,c)
  %275 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %276 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %277 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %278 = fmul fast float %23, %263
  %279 = fmul fast float %24, %264
  %280 = fmul fast float %25, %265
  %281 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %282 = extractvalue %dx.types.ResRet.f32 %281, 0
  %283 = extractvalue %dx.types.ResRet.f32 %281, 1
  %284 = extractvalue %dx.types.ResRet.f32 %281, 2
  %285 = fmul fast float %268, %26
  %286 = fmul fast float %285, %275
  %287 = fmul fast float %286, %282
  %288 = fmul fast float %271, %26
  %289 = fmul fast float %288, %276
  %290 = fmul fast float %289, %283
  %291 = fmul fast float %274, %26
  %292 = fmul fast float %291, %277
  %293 = fmul fast float %292, %284
  %294 = fadd fast float %287, %278
  %295 = fadd fast float %290, %279
  %296 = fadd fast float %293, %280
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %294)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %295)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %296)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !11, !13}
!6 = !{!7, !9, !10}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !8}
!11 = !{!12}
!12 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!13 = !{!14}
!14 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSNormalPixelLightingTxNoFog, !"PSNormalPixelLightingTxNoFog", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !27}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 7}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !24}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !28}
!28 = !{i32 3, i32 15}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !28}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 31
;   num_shared_vgprs: 0
;   num_sgprs: 50
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1536
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x4f55cf5f, 0xe45c7111                // 000000000000: D580CF5F 03FE9F55 E45C7111
;   v_nop_xbox_data 0x1ef0145e, 0x3574906b                // 00000000000C: D580145E 03FE3DF0 3574906B
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[18:19], exec                          // 00000000001C: BE92047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s20, s11                                // 000000000024: BE94030B
;   s_mov_b32     s14, s15                                // 000000000028: BE8E030F
;   s_mov_b32     s2, s9                                  // 00000000002C: BE820309
;   s_mov_b32     s9, 0                                   // 000000000030: BE890380
;   s_mov_b32     s3, 0                                   // 000000000034: BE830380
;   s_mov_b32     s11, 0                                  // 000000000038: BE8B0380
;   s_mov_b32     s15, 0                                  // 00000000003C: BE8F0380
;   s_mov_b32     s21, s12                                // 000000000040: BE95030C
;   s_load_dwordx8  s[0:7], s[2:3], null                  // 000000000044: F40C0001 FA000000
;   s_load_dwordx4  s[44:47], s[10:11], null              // 00000000004C: F4080B05 FA000000
;   s_load_dwordx8  s[32:39], s[14:15], null              // 000000000054: F40C0807 FA000000
;   s_load_dwordx8  s[8:15], s[8:9], null                 // 00000000005C: F40C0204 FA000000
;   s_mov_b32     m0, s16                                 // 000000000064: BEFC0310
;   s_or_b32      s41, s21, lit(0x00100000)               // 000000000068: 8829FF15 00100000
;   v_interp_p1_f32  v8, v0, attr0.x                      // 000000000070: C8200000
;   v_interp_p1_f32  v9, v0, attr0.y                      // 000000000074: C8240100
;   v_interp_p1_f32  v18, v0, attr1.y                     // 000000000078: C8480500
;   v_interp_p1_f32  v15, v0, attr2.y                     // 00000000007C: C83C0900
;   v_interp_p1_f32  v17, v0, attr1.x                     // 000000000080: C8440400
;   v_interp_p2_f32  v8, v1, attr0.x                      // 000000000084: C8210001
;   v_interp_p2_f32  v9, v1, attr0.y                      // 000000000088: C8250101
;   v_interp_p2_f32  v18, v1, attr1.y                     // 00000000008C: C8490501
;   s_mov_b32     s40, s20                                // 000000000090: BEA80314
;   s_mov_b32     s42, -1                                 // 000000000094: BEAA03C1
;   s_mov_b32     s43, lit(0x11014fac)                    // 000000000098: BEAB03FF 11014FAC
;   v_interp_p2_f32  v17, v1, attr1.x                     // 0000000000A0: C8450401
;   v_interp_p1_f32  v10, v0, attr3.x                     // 0000000000A4: C8280C00
;   v_interp_p1_f32  v11, v0, attr3.y                     // 0000000000A8: C82C0D00
;   v_interp_p1_f32  v12, v0, attr3.z                     // 0000000000AC: C8300E00
;   v_interp_p1_f32  v13, v0, attr3.w                     // 0000000000B0: C8340F00
;   v_interp_p1_f32  v14, v0, attr2.x                     // 0000000000B4: C8380800
;   s_waitcnt     lgkmcnt(0)                              // 0000000000B8: BF8CC07F
;   image_sample  v[2:5], v[8:9], s[8:15], s[44:47] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000BC: F0800F08 01620208
;   image_sample  v[6:7], v[8:9], s[0:7], s[44:47] dmask:0x3 dim:SQ_RSRC_IMG_2D // 0000000000C4: F0800308 01600608
;   v_interp_p1_f32  v16, v0, attr2.z                     // 0000000000CC: C8400A00
;   v_interp_p1_f32  v0, v0, attr1.z                      // 0000000000D0: C8000600
;   s_buffer_load_dwordx4  s[0:3], s[40:43], 0x0000c0     // 0000000000D4: F4280014 FA0000C0
;   v_interp_p2_f32  v15, v1, attr2.y                     // 0000000000DC: C83D0901
;   ds_swizzle_b32  v21, v18 offset:32768                 // 0000000000E0: D8D48000 15000012
;   ds_swizzle_b32  v23, v18 offset:32853                 // 0000000000E8: D8D48055 17000012
;   ds_swizzle_b32  v25, v18 offset:32938                 // 0000000000F0: D8D480AA 19000012
;   v_interp_p2_f32  v0, v1, attr1.z                      // 0000000000F8: C8010601
;   v_interp_p2_f32  v10, v1, attr3.x                     // 0000000000FC: C8290C01
;   v_interp_p2_f32  v11, v1, attr3.y                     // 000000000100: C82D0D01
;   v_interp_p2_f32  v12, v1, attr3.z                     // 000000000104: C8310E01
;   v_interp_p2_f32  v13, v1, attr3.w                     // 000000000108: C8350F01
;   v_interp_p2_f32  v14, v1, attr2.x                     // 00000000010C: C8390801
;   v_interp_p2_f32  v16, v1, attr2.z                     // 000000000110: C8410A01
;   v_mul_legacy_f32  v1, v15, v15                        // 000000000114: 0E021F0F
;   ds_swizzle_b32  v19, v17 offset:32768                 // 000000000118: D8D48000 13000011
;   ds_swizzle_b32  v20, v17 offset:32853                 // 000000000120: D8D48055 14000011
;   ds_swizzle_b32  v22, v17 offset:32938                 // 000000000128: D8D480AA 16000011
;   ds_swizzle_b32  v24, v0 offset:32768                  // 000000000130: D8D48000 18000000
;   v_fmac_f32    v1, v14, v14                            // 000000000138: 56021D0E
;   ds_swizzle_b32  v26, v0 offset:32853                  // 00000000013C: D8D48055 1A000000
;   ds_swizzle_b32  v27, v0 offset:32938                  // 000000000144: D8D480AA 1B000000
;   s_waitcnt     lgkmcnt(0)                              // 00000000014C: BF8CC07F
;   v_sub_f32     v18, s1, v18                            // 000000000150: 08242401
;   v_sub_f32     v17, s0, v17                            // 000000000154: 08222200
;   v_fmac_f32    v1, v16, v16                            // 000000000158: 56022110
;   v_sub_f32     v23, v23, v21                           // 00000000015C: 082E2B17
;   v_sub_f32     v21, v25, v21                           // 000000000160: 082A2B19
;   ds_swizzle_b32  v25, v8 offset:32938                  // 000000000164: D8D480AA 19000008
;   v_sub_f32     v0, s2, v0                              // 00000000016C: 08000002
;   v_rsq_f32     v1, v1                                  // 000000000170: 7E025D01
;   v_sub_f32     v20, v20, v19                           // 000000000174: 08282714
;   v_sub_f32     v19, v22, v19                           // 000000000178: 08262716
;   v_mul_legacy_f32  v22, v18, v18                       // 00000000017C: 0E2C2512
;   v_mul_legacy_f32  v14, v1, v14                        // 000000000180: 0E1C1D01
;   v_mul_legacy_f32  v15, v1, v15                        // 000000000184: 0E1E1F01
;   v_mul_legacy_f32  v16, v1, v16                        // 000000000188: 0E202101
;   v_sub_f32     v26, v26, v24                           // 00000000018C: 0834311A
;   v_fmac_f32    v22, v17, v17                           // 000000000190: 562C2311
;   v_sub_f32     v24, v27, v24                           // 000000000194: 0830311B
;   ds_swizzle_b32  v27, v9 offset:32938                  // 000000000198: D8D480AA 1B000009
;   v_fmac_f32    v22, v0, v0                             // 0000000001A0: 562C0100
;   v_rsq_f32     v22, v22                                // 0000000001A4: 7E2C5D16
;   s_waitcnt     vmcnt(1)                                // 0000000001A8: BF8C3F71
;   v_mul_legacy_f32  v10, v2, v10                        // 0000000001AC: 0E141502
;   v_mul_legacy_f32  v3, v3, v11                         // 0000000001B0: 0E061703
;   v_mul_legacy_f32  v4, v4, v12                         // 0000000001B4: 0E081904
;   v_mul_legacy_f32  v5, v5, v13                         // 0000000001B8: 0E0A1B05
;   ds_swizzle_b32  v2, v8 offset:32768                   // 0000000001BC: D8D48000 02000008
;   ds_swizzle_b32  v11, v8 offset:32853                  // 0000000001C4: D8D48055 0B000008
;   ds_swizzle_b32  v12, v9 offset:32768                  // 0000000001CC: D8D48000 0C000009
;   ds_swizzle_b32  v13, v9 offset:32853                  // 0000000001D4: D8D48055 0D000009
;   s_waitcnt     vmcnt(0)                                // 0000000001DC: BF8C3F70
;   v_fma_f32     v7, v7, 2.0, -1.0                       // 0000000001E0: D54B0007 03CDE907
;   v_fma_f32     v1, v6, 2.0, -1.0                       // 0000000001E8: D54B0001 03CDE906
;   v_fma_f32     v6, -v7, v7, 1.0                        // 0000000001F0: D54B0006 23CA0F07
;   v_fmac_f32    v6, -v1, v1                             // 0000000001F8: D52B0006 20020301
;   v_sqrt_f32    v6, v6                                  // 000000000200: 7E0C6706
;   s_waitcnt     lgkmcnt(2)                              // 000000000204: BF8CC27F
;   v_sub_f32     v11, v11, v2                            // 000000000208: 0816050B
;   v_sub_f32     v2, v25, v2                             // 00000000020C: 08040519
;   s_waitcnt     lgkmcnt(0)                              // 000000000210: BF8CC07F
;   v_sub_f32     v13, v13, v12                           // 000000000214: 081A190D
;   s_and_b64     exec, exec, s[18:19]                    // 000000000218: 87FE127E
;   v_sub_f32     v12, v27, v12                           // 00000000021C: 0818191B
;   v_mul_legacy_f32  v27, v19, v23                       // 000000000220: 0E362F13
;   v_mul_legacy_f32  v25, v21, v26                       // 000000000224: 0E323515
;   v_mul_legacy_f32  v28, v24, v20                       // 000000000228: 0E382918
;   s_buffer_load_dwordx16  s[0:15], s[40:43], null       // 00000000022C: F4300014 FA000000
;   s_buffer_load_dwordx16  s[16:31], s[40:43], 0x000040  // 000000000234: F4300414 FA000040
;   v_fma_f32     v27, v21, v20, -v27                     // 00000000023C: D54B001B 846E2915
;   v_fma_f32     v25, v24, v23, -v25                     // 000000000244: D54B0019 84662F18
;   v_fma_f32     v28, v19, v26, -v28                     // 00000000024C: D54B001C 84723513
;   v_mul_legacy_f32  v29, v27, v19                       // 000000000254: 0E3A271B
;   v_fma_f32     v29, v25, v24, -v29                     // 000000000258: D54B001D 84763119
;   v_mul_legacy_f32  v24, v28, v24                       // 000000000260: 0E30311C
;   v_fma_f32     v24, v27, v21, -v24                     // 000000000264: D54B0018 84622B1B
;   v_mul_legacy_f32  v21, v25, v21                       // 00000000026C: 0E2A2B19
;   v_fma_f32     v19, v28, v19, -v21                     // 000000000270: D54B0013 8456271C
;   v_mul_legacy_f32  v21, v27, v23                       // 000000000278: 0E2A2F1B
;   v_fma_f32     v21, v28, v26, -v21                     // 00000000027C: D54B0015 8456351C
;   v_mul_legacy_f32  v26, v25, v26                       // 000000000284: 0E343519
;   v_fma_f32     v26, v27, v20, -v26                     // 000000000288: D54B001A 846A291B
;   v_mul_legacy_f32  v20, v28, v20                       // 000000000290: 0E28291C
;   v_mul_legacy_f32  v27, v29, v13                       // 000000000294: 0E361B1D
;   s_waitcnt     lgkmcnt(0)                              // 000000000298: BF8CC07F
;   v_fma_f32     v28, v0, v22, -s18                      // 00000000029C: D54B001C 804A2D00
;   v_fma_f32     v20, v25, v23, -v20                     // 0000000002A4: D54B0014 84522F19
;   v_mul_legacy_f32  v23, v29, v11                       // 0000000002AC: 0E2E171D
;   v_mul_legacy_f32  v25, v24, v11                       // 0000000002B0: 0E321718
;   v_mul_legacy_f32  v11, v19, v11                       // 0000000002B4: 0E161713
;   v_mul_legacy_f32  v24, v24, v13                       // 0000000002B8: 0E301B18
;   v_mul_legacy_f32  v13, v19, v13                       // 0000000002BC: 0E1A1B13
;   v_fmac_f32    v23, v2, v26                            // 0000000002C0: 562E3502
;   v_fmac_f32    v25, v2, v21                            // 0000000002C4: 56322B02
;   v_fmac_f32    v11, v2, v20                            // 0000000002C8: 56162902
;   v_fmac_f32    v27, v12, v26                           // 0000000002CC: 5636350C
;   v_fmac_f32    v24, v12, v21                           // 0000000002D0: 56302B0C
;   v_mul_legacy_f32  v2, v23, v23                        // 0000000002D4: 0E042F17
;   v_fmac_f32    v13, v12, v20                           // 0000000002D8: 561A290C
;   v_mul_legacy_f32  v20, v23, v1                        // 0000000002DC: 0E280317
;   v_fma_f32     v19, v17, v22, -s12                     // 0000000002E0: D54B0013 80322D11
;   v_fma_f32     v21, v18, v22, -s13                     // 0000000002E8: D54B0015 80362D12
;   v_fmac_f32    v2, v25, v25                            // 0000000002F0: 56043319
;   v_mul_legacy_f32  v12, v25, v1                        // 0000000002F4: 0E180319
;   v_fma_f32     v25, v17, v22, -s16                     // 0000000002F8: D54B0019 80422D11
;   v_fma_f32     v26, v18, v22, -s17                     // 000000000300: D54B001A 80462D12
;   v_mul_legacy_f32  v23, v11, v1                        // 000000000308: 0E2E030B
;   v_fmac_f32    v2, v11, v11                            // 00000000030C: 5604170B
;   v_fma_f32     v11, v0, v22, -s14                      // 000000000310: D54B000B 803A2D00
;   v_fma_f32     v17, v17, v22, -s20                     // 000000000318: D54B0011 80522D11
;   v_fma_f32     v18, v18, v22, -s21                     // 000000000320: D54B0012 80562D12
;   v_fma_f32     v22, v0, v22, -s22                      // 000000000328: D54B0016 805A2D00
;   v_mul_legacy_f32  v0, v27, v27                        // 000000000330: 0E00371B
;   v_rsq_f32     v30, v2                                 // 000000000334: 7E3C5D02
;   v_fmac_f32    v0, v24, v24                            // 000000000338: 56003118
;   v_fmac_f32    v0, v13, v13                            // 00000000033C: 56001B0D
;   v_mul_legacy_f32  v20, v20, v30                       // 000000000340: 0E283D14
;   v_mul_legacy_f32  v23, v23, v30                       // 000000000344: 0E2E3D17
;   v_rsq_f32     v29, v0                                 // 000000000348: 7E3A5D00
;   v_mul_legacy_f32  v2, v29, v27                        // 00000000034C: 0E04371D
;   v_fmac_f32    v20, v7, v2                             // 000000000350: 56280507
;   image_sample  v[0:2], v[8:9], s[32:39], s[44:47] dmask:0x7 dim:SQ_RSRC_IMG_2D // 000000000354: F0800708 01680008
;   v_mul_legacy_f32  v9, v12, v30                        // 00000000035C: 0E123D0C
;   v_mul_legacy_f32  v8, v29, v24                        // 000000000360: 0E10311D
;   v_mul_legacy_f32  v12, v29, v13                       // 000000000364: 0E181B1D
;   v_fmac_f32    v20, v6, v15                            // 000000000368: 56281F06
;   v_mul_legacy_f32  v13, v21, v21                       // 00000000036C: 0E1A2B15
;   v_mul_legacy_f32  v15, v18, v18                       // 000000000370: 0E1E2512
;   v_fmac_f32    v9, v7, v8                              // 000000000374: 56121107
;   v_fmac_f32    v23, v7, v12                            // 000000000378: 562E1907
;   v_mul_legacy_f32  v8, v26, v26                        // 00000000037C: 0E10351A
;   v_fmac_f32    v13, v19, v19                           // 000000000380: 561A2713
;   v_fmac_f32    v15, v17, v17                           // 000000000384: 561E2311
;   v_fmac_f32    v9, v6, v14                             // 000000000388: 56121D06
;   v_mul_legacy_f32  v14, v20, v20                       // 00000000038C: 0E1C2914
;   v_fmac_f32    v23, v6, v16                            // 000000000390: 562E2106
;   v_fmac_f32    v13, v11, v11                           // 000000000394: 561A170B
;   v_fmac_f32    v8, v25, v25                            // 000000000398: 56103319
;   v_fmac_f32    v15, v22, v22                           // 00000000039C: 561E2D16
;   v_fmac_f32    v14, v9, v9                             // 0000000003A0: 561C1309
;   s_buffer_load_dwordx16  s[32:47], s[40:43], 0x000080  // 0000000003A4: F4300814 FA000080
;   v_rsq_f32     v6, v13                                 // 0000000003AC: 7E0C5D0D
;   v_fmac_f32    v8, v28, v28                            // 0000000003B0: 5610391C
;   v_fmac_f32    v14, v23, v23                           // 0000000003B4: 561C2F17
;   v_rsq_f32     v12, v15                                // 0000000003B8: 7E185D0F
;   v_rsq_f32     v7, v14                                 // 0000000003BC: 7E0E5D0E
;   v_mul_legacy_f32  v13, v6, v21                        // 0000000003C0: 0E1A2B06
;   v_mul_legacy_f32  v11, v6, v11                        // 0000000003C4: 0E161706
;   v_rsq_f32     v8, v8                                  // 0000000003C8: 7E105D08
;   v_mul_legacy_f32  v16, v12, v18                       // 0000000003CC: 0E20250C
;   v_mul_legacy_f32  v18, v12, v22                       // 0000000003D0: 0E242D0C
;   v_mul_legacy_f32  v9, v7, v9                          // 0000000003D4: 0E121307
;   v_mul_legacy_f32  v20, v7, v20                        // 0000000003D8: 0E282907
;   v_mul_legacy_f32  v7, v7, v23                         // 0000000003DC: 0E0E2F07
;   v_mul_legacy_f32  v19, v19, v9                        // 0000000003E0: 0E261313
;   v_mul_legacy_f32  v21, s12, v9                        // 0000000003E4: 0E2A120C
;   v_mul_legacy_f32  v22, s16, v9                        // 0000000003E8: 0E2C1210
;   v_mul_legacy_f32  v23, s20, v9                        // 0000000003EC: 0E2E1214
;   v_mul_legacy_f32  v24, v25, v9                        // 0000000003F0: 0E301319
;   v_mul_legacy_f32  v9, v17, v9                         // 0000000003F4: 0E121311
;   v_fma_f32     v17, -s13, v20, -v21                    // 0000000003F8: D54B0011 A456280D
;   v_mul_legacy_f32  v6, v19, v6                         // 000000000400: 0E0C0D13
;   v_fma_f32     v22, -s17, v20, -v22                    // 000000000404: D54B0016 A45A2811
;   v_mul_legacy_f32  v14, v8, v26                        // 00000000040C: 0E1C3508
;   v_mul_legacy_f32  v15, v8, v28                        // 000000000410: 0E1E3908
;   v_mul_legacy_f32  v8, v24, v8                         // 000000000414: 0E101118
;   v_fmac_f32    v6, v13, v20                            // 000000000418: 560C290D
;   v_fmac_f32    v17, -s14, v7                           // 00000000041C: D52B0011 20020E0E
;   v_fma_f32     v21, -s21, v20, -v23                    // 000000000424: D54B0015 A45E2815
;   v_mul_legacy_f32  v9, v9, v12                         // 00000000042C: 0E121909
;   v_fmac_f32    v8, v14, v20                            // 000000000430: 5610290E
;   v_fmac_f32    v6, v11, v7                             // 000000000434: 560C0F0B
;   v_cmp_gt_f32  vcc, 0, v17                             // 000000000438: 7C082280
;   v_fmac_f32    v22, -s18, v7                           // 00000000043C: D52B0016 20020E12
;   v_fmac_f32    v9, v16, v20                            // 000000000444: 56122910
;   v_fmac_f32    v8, v15, v7                             // 000000000448: 56100F0F
;   v_fmac_f32    v21, -s22, v7                           // 00000000044C: D52B0015 20020E16
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000454: D501000B 01A900F2
;   v_max_f32     v6, 0, v6                               // 00000000045C: 200C0C80
;   v_cmp_gt_f32  vcc, 0, v22                             // 000000000460: 7C082C80
;   v_fmac_f32    v9, v18, v7                             // 000000000464: 56120F12
;   v_max_f32     v8, 0, v8                               // 000000000468: 20101080
;   v_mul_legacy_f32  v6, v6, v11                         // 00000000046C: 0E0C1706
;   v_cndmask_b32  v7, 1.0, 0, vcc                        // 000000000470: D5010007 01A900F2
;   v_cmp_gt_f32  vcc, 0, v21                             // 000000000478: 7C082A80
;   v_max_f32     v9, 0, v9                               // 00000000047C: 20121280
;   v_mul_legacy_f32  v11, v11, v17                       // 000000000480: 0E16230B
;   v_log_f32     v6, v6                                  // 000000000484: 7E0C4F06
;   v_mul_legacy_f32  v8, v8, v7                          // 000000000488: 0E100F08
;   v_cndmask_b32  v12, 1.0, 0, vcc                       // 00000000048C: D501000C 01A900F2
;   v_mul_legacy_f32  v16, v7, v22                        // 000000000494: 0E202D07
;   v_mul_legacy_f32  v13, s24, v11                       // 000000000498: 0E1A1618
;   v_mul_legacy_f32  v14, s25, v11                       // 00000000049C: 0E1C1619
;   v_log_f32     v8, v8                                  // 0000000004A0: 7E104F08
;   v_mul_legacy_f32  v9, v9, v12                         // 0000000004A4: 0E121909
;   v_mul_legacy_f32  v11, s26, v11                       // 0000000004A8: 0E16161A
;   v_mul_legacy_f32  v12, v12, v21                       // 0000000004AC: 0E182B0C
;   v_mul_legacy_f32  v6, s11, v6                         // 0000000004B0: 0E0C0C0B
;   v_fmac_f32    v13, s28, v16                           // 0000000004B4: 561A201C
;   v_log_f32     v9, v9                                  // 0000000004B8: 7E124F09
;   v_fmac_f32    v14, s29, v16                           // 0000000004BC: 561C201D
;   v_fmac_f32    v11, s30, v16                           // 0000000004C0: 5616201E
;   v_mul_legacy_f32  v8, s11, v8                         // 0000000004C4: 0E10100B
;   v_exp_f32     v6, v6                                  // 0000000004C8: 7E0C4B06
;   s_waitcnt     lgkmcnt(0)                              // 0000000004CC: BF8CC07F
;   v_fmac_f32    v13, s32, v12                           // 0000000004D0: 561A1820
;   v_fmac_f32    v14, s33, v12                           // 0000000004D4: 561C1821
;   v_fmac_f32    v11, s34, v12                           // 0000000004D8: 56161822
;   v_mul_legacy_f32  v9, s11, v9                         // 0000000004DC: 0E12120B
;   v_exp_f32     v8, v8                                  // 0000000004E0: 7E104B08
;   v_fma_f32     v7, s0, v13, s4                         // 0000000004E4: D54B0007 00121A00
;   v_fma_f32     v12, s1, v14, s5                        // 0000000004EC: D54B000C 00161C01
;   v_mul_legacy_f32  v6, v6, v17                         // 0000000004F4: 0E0C2306
;   v_exp_f32     v19, v9                                 // 0000000004F8: 7E264B09
;   v_mul_legacy_f32  v7, v10, v7                         // 0000000004FC: 0E0E0F0A
;   v_mul_legacy_f32  v3, v3, v12                         // 000000000500: 0E061903
;   v_mul_legacy_f32  v15, s37, v6                        // 000000000504: 0E1E0C25
;   v_mul_legacy_f32  v17, v8, v22                        // 000000000508: 0E222D08
;   v_mul_legacy_f32  v8, s36, v6                         // 00000000050C: 0E100C24
;   v_mul_legacy_f32  v6, s38, v6                         // 000000000510: 0E0C0C26
;   v_mul_legacy_f32  v9, v19, v21                        // 000000000514: 0E122B13
;   v_fmac_f32    v8, s40, v17                            // 000000000518: 56102228
;   v_fmac_f32    v15, s41, v17                           // 00000000051C: 561E2229
;   v_fmac_f32    v6, s42, v17                            // 000000000520: 560C222A
;   v_fmac_f32    v8, s44, v9                             // 000000000524: 5610122C
;   v_fmac_f32    v15, s45, v9                            // 000000000528: 561E122D
;   v_fmac_f32    v6, s46, v9                             // 00000000052C: 560C122E
;   v_fma_f32     v9, s2, v11, s6                         // 000000000530: D54B0009 001A1602
;   v_mul_legacy_f32  v8, v8, v5                          // 000000000538: 0E100B08
;   v_mul_legacy_f32  v10, v15, v5                        // 00000000053C: 0E140B0F
;   v_mul_legacy_f32  v6, v6, v5                          // 000000000540: 0E0C0B06
;   v_mul_legacy_f32  v4, v4, v9                          // 000000000544: 0E081304
;   v_mul_legacy_f32  v14, s8, v8                         // 000000000548: 0E1C1008
;   v_mul_legacy_f32  v10, s9, v10                        // 00000000054C: 0E141409
;   v_mul_legacy_f32  v11, s10, v6                        // 000000000550: 0E160C0A
;   s_waitcnt     vmcnt(0)                                // 000000000554: BF8C3F70
;   v_fmac_f32    v7, v14, v0                             // 000000000558: 560E010E
;   v_fmac_f32    v3, v10, v1                             // 00000000055C: 5606030A
;   v_fmac_f32    v4, v11, v2                             // 000000000560: 5608050B
;   s_nop         0x0000                                  // 000000000564: BF800000
;   s_nop         0x0000                                  // 000000000568: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v3                       // 00000000056C: 5E000707
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000570: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000574: F8001C0F 00000100
;   s_endpgm                                              // 00000000057C: BF810000
;   s_code_end                                            // 000000000580: BF9F0000
;   s_code_end                                            // 000000000584: BF9F0000
;   s_code_end                                            // 000000000588: BF9F0000
;   s_code_end                                            // 00000000058C: BF9F0000
;   s_code_end                                            // 000000000590: BF9F0000
;   s_code_end                                            // 000000000594: BF9F0000
;   s_code_end                                            // 000000000598: BF9F0000
;   s_code_end                                            // 00000000059C: BF9F0000
;   s_code_end                                            // 0000000005A0: BF9F0000
;   s_code_end                                            // 0000000005A4: BF9F0000
;   s_code_end                                            // 0000000005A8: BF9F0000
;   s_code_end                                            // 0000000005AC: BF9F0000
;   s_code_end                                            // 0000000005B0: BF9F0000
;   s_code_end                                            // 0000000005B4: BF9F0000
;   s_code_end                                            // 0000000005B8: BF9F0000
;   s_code_end                                            // 0000000005BC: BF9F0000
;   s_code_end                                            // 0000000005C0: BF9F0000
;   s_code_end                                            // 0000000005C4: BF9F0000
;   s_code_end                                            // 0000000005C8: BF9F0000
;   s_code_end                                            // 0000000005CC: BF9F0000
;   s_code_end                                            // 0000000005D0: BF9F0000
;   s_code_end                                            // 0000000005D4: BF9F0000
;   s_code_end                                            // 0000000005D8: BF9F0000
;   s_code_end                                            // 0000000005DC: BF9F0000
;   s_code_end                                            // 0000000005E0: BF9F0000
;   s_code_end                                            // 0000000005E4: BF9F0000
;   s_code_end                                            // 0000000005E8: BF9F0000
;   s_code_end                                            // 0000000005EC: BF9F0000
;   s_code_end                                            // 0000000005F0: BF9F0000
;   s_code_end                                            // 0000000005F4: BF9F0000
;   s_code_end                                            // 0000000005F8: BF9F0000
;   s_code_end                                            // 0000000005FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 16
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 6
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 13
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 15
;       orig_rootsig_slot_id: 5
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 68, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 76, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 84, resource_class: 0 (SRV), index: 2, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 92, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 2
;       allocated_offset : 15
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 48
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSNormalPixelLightingTxNoFog)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 32 {
;     scratch_en: 0
;     user_sgpr: 16
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 345
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x7,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, off, off, off done vm         // 000000000010: F8001801 00000007
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x307,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v3, off, off done vm          // 000000000010: F8001803 00000307
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x507,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v5, off, off done vm          // 000000000010: F8001803 00000507
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000707,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v3                       // 000000000008: 5E000707
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20707,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v7, v3                      // 000000000000: D7690000 00020707
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20707,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v7, v3                      // 000000000000: D7680000 00020707
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20707,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v7, v3                          // 000000000000: D76A0000 00020707
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20707,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v7, v3                          // 000000000000: D76B0000 00020707
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040307,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v3, v4, v5 done vm            // 000000000010: F800180F 05040307
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=31,NumSGPR=50,LDS=0,Scratch=0,WaveSize=64,Occupancy=16
; VAlu:227,SAlu:29,VMem:3,SMem:8,LDS:15,WaitCntOnVMem:3,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char NormalMapEffect_PSNormalPixelLightingTxNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0xfb, 0xd9, 0xda, 0x60, 0xe9, 0xd3, 0x2a, 0xf4,
  0xfd, 0x0d, 0x38, 0xe8, 0xf1, 0x97, 0xe8, 0x28, 0x01, 0x00, 0x00, 0x00,
  0x84, 0x1c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xd4, 0x02, 0x00, 0x00, 0xd4, 0x03, 0x00, 0x00, 0x74, 0x04, 0x00, 0x00,
  0x90, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xa0, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54,
  0x78, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xf8, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e,
  0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x4e, 0x6f,
  0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63,
  0x74, 0x5f, 0x50, 0x53, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54,
  0x78, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x5f, 0xcf, 0x55, 0x4f, 0x11, 0x71, 0x5c, 0xe4, 0x5e, 0x14, 0xf0, 0x1e,
  0x6b, 0x90, 0x74, 0x35, 0x44, 0x58, 0x49, 0x4c, 0xec, 0x17, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xfb, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x60, 0x11, 0x00, 0x00,
  0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x78, 0x11, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0xd8, 0x11, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0xec, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0xfc, 0x11, 0x00, 0x00, 0xe0, 0x05, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xdc, 0x17, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x5e, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x11, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x55, 0x04, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff,
  0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84,
  0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c,
  0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xbc, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a,
  0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10,
  0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6,
  0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9,
  0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a,
  0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0x4d, 0x41,
  0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14,
  0x15, 0x63, 0x20, 0x86, 0x61, 0x18, 0x68, 0x2a, 0xc4, 0x40, 0x0c, 0x03,
  0x55, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15,
  0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0xa1, 0x10, 0x17,
  0xc1, 0x10, 0x84, 0x95, 0x62, 0x20, 0x86, 0x61, 0x20, 0x6d, 0x8e, 0x20,
  0x28, 0x06, 0x43, 0x14, 0x04, 0xc1, 0x51, 0x37, 0x10, 0x30, 0x8c, 0x40,
  0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8,
  0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8,
  0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8,
  0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80,
  0x01, 0x1d, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4,
  0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0,
  0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1,
  0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41,
  0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41,
  0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00,
  0x0c, 0xe8, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x00, 0x86, 0x24, 0x0e,
  0x23, 0x0c, 0xc3, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30,
  0x0f, 0x6e, 0x40, 0x0b, 0xe5, 0x80, 0x0f, 0xf4, 0x50, 0x0f, 0xf2, 0x50,
  0x0e, 0x72, 0x40, 0x0a, 0x7c, 0x60, 0x0f, 0xe5, 0x30, 0x0e, 0xf4, 0xf0,
  0x0e, 0xf2, 0xc0, 0x07, 0xe6, 0xc0, 0x0e, 0xef, 0x10, 0x0e, 0xf4, 0xc0,
  0x06, 0x60, 0x30, 0x07, 0x7e, 0x00, 0x06, 0x7e, 0xa0, 0x07, 0x7a, 0xd0,
  0x0e, 0xe9, 0x00, 0x0f, 0xf3, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50,
  0x0e, 0x28, 0x20, 0x66, 0x12, 0x83, 0x71, 0x60, 0x87, 0x70, 0x98, 0x87,
  0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c, 0xa0, 0x87, 0x7a, 0x90, 0x87,
  0x72, 0x90, 0x03, 0x52, 0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87,
  0x77, 0x90, 0x07, 0x3e, 0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07,
  0x36, 0x00, 0x83, 0x39, 0xf0, 0x03, 0x30, 0xf0, 0x03, 0x24, 0x90, 0x25,
  0x99, 0x39, 0x40, 0x26, 0x01, 0x78, 0xd5, 0xe1, 0x48, 0xd3, 0x02, 0x60,
  0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31, 0x11, 0x91, 0x84, 0x1a,
  0x90, 0x24, 0x07, 0x14, 0x45, 0x49, 0x12, 0x4c, 0xd1, 0x94, 0xd4, 0x9b,
  0xa4, 0x29, 0xa2, 0x84, 0xc9, 0x67, 0x01, 0xe6, 0x59, 0x88, 0x88, 0x9d,
  0x80, 0x89, 0x40, 0x01, 0x41, 0x6c, 0x4a, 0x10, 0x00, 0x00, 0x00, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xa3, 0x01, 0x01, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0xa7, 0x03, 0x02, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d, 0xca, 0xa0, 0x1c, 0xca,
  0x83, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x71, 0x06, 0x80, 0xce, 0x19, 0x00, 0x5a, 0x67, 0x00, 0xa8, 0x9d, 0x01,
  0x20, 0x77, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x00, 0x8e,
  0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x8f, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x2c, 0x13, 0x04, 0x82, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x68, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x38,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x63, 0xb0, 0x11, 0x98, 0x20, 0x10,
  0xcf, 0x04, 0x81, 0x80, 0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7,
  0x38, 0x0c, 0xe8, 0x90, 0x26, 0x08, 0x67, 0xc0, 0x6d, 0x48, 0x0c, 0xea,
  0x39, 0x0c, 0x03, 0x3a, 0xa4, 0x0d, 0x09, 0x44, 0x3d, 0x07, 0x64, 0x40,
  0x87, 0xb4, 0x61, 0x98, 0x2a, 0x6b, 0x82, 0xb0, 0x06, 0xdd, 0x04, 0x81,
  0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c, 0x87, 0x91, 0x01, 0x1b, 0x02, 0x6d,
  0x82, 0xd0, 0x06, 0xde, 0x06, 0xe4, 0xe0, 0x9e, 0xe3, 0x30, 0x0e, 0x60,
  0x43, 0xd0, 0x6d, 0x20, 0x2e, 0x60, 0xf3, 0x26, 0x08, 0x6e, 0xf0, 0x6d,
  0x08, 0xc0, 0x60, 0x82, 0x20, 0x00, 0xe4, 0xa0, 0xa6, 0x9c, 0xde, 0xe4,
  0xda, 0xc2, 0xd8, 0xa0, 0xd2, 0xf0, 0xca, 0xd8, 0x98, 0xd2, 0xce, 0xd0,
  0xe8, 0xd2, 0xdc, 0xce, 0xa8, 0xf0, 0x9c, 0xde, 0x8c, 0xde, 0xce, 0x88,
  0x50, 0x15, 0x61, 0x0d, 0x3d, 0x3d, 0x49, 0x11, 0x4d, 0x10, 0x8a, 0x6a,
  0x82, 0x50, 0x58, 0x1b, 0x82, 0x63, 0x82, 0x50, 0x5c, 0x13, 0x04, 0x42,
  0xda, 0x20, 0xa4, 0x41, 0x1a, 0x6c, 0x58, 0x0e, 0x32, 0x28, 0x03, 0x33,
  0x38, 0x03, 0x34, 0x30, 0xd0, 0xe0, 0x30, 0x03, 0x35, 0xd8, 0x10, 0x18,
  0x13, 0x84, 0x02, 0x9b, 0x20, 0x10, 0xd3, 0x06, 0x21, 0x0d, 0xdc, 0x60,
  0xc3, 0x62, 0x90, 0x41, 0x19, 0x98, 0x01, 0x1b, 0xa0, 0x81, 0xd1, 0x06,
  0x86, 0x19, 0xbc, 0xc1, 0x86, 0x00, 0x9a, 0x20, 0x14, 0xd9, 0x86, 0x05,
  0x22, 0x83, 0x32, 0x30, 0x83, 0x38, 0x40, 0x03, 0x43, 0x0e, 0x20, 0x33,
  0x78, 0x03, 0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x13, 0x04, 0x82, 0xda,
  0x20, 0xa4, 0x41, 0x1d, 0x6c, 0x58, 0xd2, 0x80, 0x0e, 0xca, 0xc0, 0x0c,
  0xce, 0x00, 0x0d, 0x8c, 0x36, 0x48, 0x03, 0x33, 0xb0, 0x83, 0x0d, 0xc4,
  0x1a, 0xc0, 0xc1, 0x1c, 0xdc, 0x01, 0x93, 0x29, 0xab, 0x2f, 0xaa, 0x30,
  0xb9, 0xb3, 0x32, 0xba, 0x09, 0x42, 0xa1, 0x6d, 0x58, 0x8e, 0x3c, 0x28,
  0x03, 0x3d, 0x38, 0x03, 0x33, 0x30, 0xda, 0xe0, 0x30, 0x03, 0x3b, 0xd8,
  0x10, 0xec, 0xc1, 0x86, 0x01, 0x0f, 0xf8, 0x00, 0xd8, 0x50, 0x88, 0xc1,
  0x18, 0xf4, 0xc1, 0x07, 0xb4, 0xc2, 0x13, 0x7b, 0xc3, 0x73, 0x19, 0x7b,
  0x6b, 0x83, 0x4b, 0x63, 0x2b, 0x93, 0x73, 0x79, 0x83, 0xa3, 0x4b, 0x7b,
  0x73, 0x9b, 0x9b, 0x12, 0x08, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2,
  0xc8, 0xca, 0xdc, 0xe8, 0xa6, 0x04, 0x44, 0x15, 0x32, 0x3c, 0x17, 0xbb,
  0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29, 0xc1, 0xd1, 0x84, 0x0c, 0xcf,
  0xc5, 0x2e, 0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x90, 0xd4, 0x21, 0xc3,
  0x73, 0x99, 0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63,
  0x9b, 0x12, 0x30, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea,
  0xe4, 0xc6, 0xca, 0xe6, 0xa6, 0x04, 0x5e, 0x1d, 0x32, 0x3c, 0x17, 0xbb,
  0xb4, 0xb2, 0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x01,
  0x18, 0xd4, 0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a,
  0x4b, 0x73, 0xa3, 0x9b, 0x9b, 0x12, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec,
  0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33,
  0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d,
  0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e,
  0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
  0x06, 0xc0, 0xa5, 0xec, 0xe9, 0x44, 0x0c, 0xb0, 0xa4, 0xc8, 0x45, 0x2c,
  0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0x75, 0x3a, 0x9f, 0x63, 0xd8,
  0x01, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x01, 0xd2, 0x00, 0x11, 0xe6, 0x17,
  0xb7, 0x6d, 0x08, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14,
  0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb,
  0xa6, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84,
  0x40, 0x33, 0x2c, 0x84, 0x19, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38,
  0x93, 0xed, 0x17, 0xb7, 0x6d, 0x04, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f,
  0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x5b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3, 0xf8,
  0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x0d, 0x40,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x01, 0xcc, 0xb3, 0x10, 0x7e, 0x71, 0xdb,
  0x26, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52,
  0xd3, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x96, 0x20, 0x0d, 0x97, 0xef, 0x3c,
  0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x15, 0x3c,
  0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03,
  0x61, 0x20, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc4, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x94, 0x45, 0x51, 0x14, 0x4c, 0xb1, 0x15, 0xd7, 0x0c,
  0x40, 0x21, 0x94, 0x5d, 0xb9, 0x95, 0x4c, 0xc9, 0x95, 0x69, 0x40, 0xa1,
  0x06, 0x94, 0x42, 0xe1, 0x95, 0x51, 0xb9, 0x94, 0x4a, 0x61, 0xd0, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x88, 0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20,
  0x08, 0x06, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x02, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x08, 0x82, 0xc2, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xc5, 0xc1, 0x53, 0x06, 0x6c,
  0xc0, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x74, 0x72, 0x00,
  0x99, 0x41, 0x1c, 0xc4, 0x01, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0xdd, 0x1c, 0x44, 0x67, 0x10, 0x07, 0x71, 0xd0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x41, 0x47, 0x07, 0x52, 0x19, 0xc8, 0x81, 0x1c, 0x78, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0xd0, 0xd5, 0xc1, 0x84, 0x06, 0x73, 0x30,
  0x07, 0xdf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7f, 0x80, 0xb9,
  0x01, 0x1d, 0xa8, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06,
  0x28, 0x64, 0x6f, 0x50, 0x07, 0x60, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0x11, 0x0a, 0x1a, 0x1c, 0xd8, 0xc1, 0x1a, 0x6c, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0x88, 0xc2, 0x16, 0x07, 0x77, 0xa0, 0x06,
  0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa3, 0xc0, 0xd5, 0x01,
  0x1e, 0xb8, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x29,
  0x74, 0x76, 0x90, 0x07, 0x64, 0xe0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x51, 0x0a, 0xde, 0x1d, 0xe8, 0xc1, 0x1b, 0x7c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0x98, 0xc2, 0xc7, 0x07, 0x7b, 0x10, 0x07, 0x60,
  0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x29, 0x80, 0x41, 0x1f,
  0xf0, 0xc1, 0x19, 0x84, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa8, 0x10, 0x06, 0x7e, 0xd0, 0x07, 0x72, 0x20, 0x06, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xa4, 0x82, 0x18, 0xf8, 0x81, 0x1f, 0xd0, 0xc1,
  0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x0a, 0x63, 0xf0,
  0x07, 0x7f, 0xa0, 0x06, 0x64, 0x30, 0x62, 0xf0, 0x00, 0x20, 0x08, 0x06,
  0x4d, 0x2a, 0x70, 0x8f, 0x23, 0x04, 0x92, 0x04, 0x0a, 0xa0, 0x50, 0x06,
  0xd2, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x26, 0x10, 0x83, 0x11, 0x91, 0x7c, 0x8c, 0x88, 0xe4, 0x63, 0x44, 0x24,
  0x1f, 0x23, 0x22, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0xd6,
  0x0a, 0x6c, 0x60, 0x85, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0xd8, 0x20, 0xc5, 0xc7, 0x06, 0x29, 0x3e, 0x36, 0x48,
  0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x07, 0x17, 0xe4, 0x60,
  0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0xc2,
  0x05, 0x39, 0x08, 0xac, 0x08, 0xe4, 0x63, 0x85, 0x20, 0x1f, 0x2b, 0x06,
  0xf9, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0xc1, 0xd3, 0x0b, 0x77, 0xd0,
  0x71, 0x5b, 0xc7, 0x6d, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xf5,
  0xc2, 0x1d, 0x04, 0x16, 0x7c, 0xf2, 0x31, 0xe1, 0x93, 0x8f, 0x0d, 0x9f,
  0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1, 0xa0, 0x19, 0x07, 0x3b, 0x50,
  0x03, 0x34, 0xe0, 0x36, 0x36, 0x60, 0x03, 0x5d, 0xd0, 0x85, 0x3f, 0x60,
  0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x02, 0x13, 0xe6, 0x40, 0x3e,
  0x26, 0xd0, 0x81, 0x7c, 0x4c, 0xb0, 0x03, 0xf8, 0x98, 0x70, 0x07, 0xf0,
  0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x83, 0xe9, 0x1c, 0x50, 0x41, 0x08,
  0x84, 0xc0, 0xee, 0x20, 0x88, 0xcf, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0xea, 0xb0, 0x0a, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44,
  0xeb, 0x30, 0x0a, 0x69, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11,
  0x3b, 0x90, 0x42, 0x1a, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xd4,
  0x0e, 0xa5, 0x90, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xb9,
  0x43, 0x29, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xef,
  0x60, 0x0a, 0x6c, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11, 0x3c,
  0x9c, 0x02, 0x1b, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x14, 0x0f,
  0xa9, 0xc0, 0x06, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xc9, 0x83,
  0x2a, 0xb0, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x44, 0xf3, 0xa0,
  0x0a, 0x6e, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11, 0x3d, 0xac,
  0x82, 0x1b, 0x58, 0x91, 0xc8, 0xc7, 0x8e, 0x44, 0x3e, 0x26, 0x04, 0xf1,
  0x31, 0x65, 0x91, 0x8f, 0x25, 0x8e, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0x0c,
  0x24, 0x1f, 0x73, 0x20, 0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x82, 0x47, 0x3e,
  0x56, 0x3c, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x29, 0x91, 0x7c, 0xac, 0xa0,
  0xe4, 0x63, 0x42, 0x10, 0x1f, 0x53, 0x2c, 0xf9, 0x98, 0x63, 0xc9, 0xc7,
  0x84, 0x20, 0x3e, 0xd6, 0x68, 0xf2, 0xb1, 0x85, 0x93, 0x8f, 0x09, 0x41,
  0x7c, 0xac, 0xf9, 0xe4, 0x63, 0x94, 0x27, 0x1f, 0x13, 0x82, 0xf8, 0x98,
  0x15, 0x06, 0xf2, 0x31, 0x6a, 0x0c, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x83,
  0x3e, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0xd6, 0x12, 0xf0,
  0xe0, 0x21, 0x81, 0x3d, 0x61, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0x5e, 0x42, 0x1e, 0xc0, 0xe0, 0x08, 0xcc, 0x19, 0x03, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x16, 0x13, 0xf4, 0x20, 0x06,
  0x46, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xcf, 0x4d, 0xc4, 0x43,
  0x31, 0x04, 0xc5, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0x74,
  0x13, 0xf1, 0x10, 0x18, 0x66, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x03, 0xad, 0x26, 0xf0, 0xa1, 0x0c, 0xa0, 0xc0, 0x2e, 0x34, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x37, 0xa1, 0x0f, 0x67,
  0xf0, 0x04, 0x66, 0xa9, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0x40, 0xcb, 0x09, 0x7e, 0x48, 0x03, 0x27, 0x18, 0x31, 0x58, 0x00, 0x10,
  0x04, 0x83, 0xe7, 0x27, 0xf2, 0xa1, 0x18, 0x82, 0x62, 0x08, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0x20, 0xfa, 0x89, 0x7c, 0x08, 0x2c, 0x38, 0xe4,
  0x63, 0x82, 0x21, 0x1f, 0x1b, 0x0a, 0xf9, 0x98, 0xd4, 0x07, 0xf2, 0xb1,
  0xa0, 0x91, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x61, 0x41,
  0x12, 0x7e, 0x50, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x89,
  0x45, 0x49, 0xf0, 0x01, 0x2a, 0x04, 0x46, 0x85, 0x82, 0x7c, 0x2c, 0x88,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5a, 0x59, 0xa0, 0x84,
  0x28, 0x20, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68, 0x66, 0x91,
  0x12, 0xa0, 0xb0, 0x0a, 0x81, 0x59, 0xa5, 0x20, 0x1f, 0x0b, 0x2a, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x96, 0x16, 0x2c, 0x61, 0x0a,
  0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x9a, 0x5a, 0xb4, 0x04,
  0x29, 0xb8, 0x42, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x0f, 0x5c,
  0xa8, 0x44, 0x52, 0x04, 0x49, 0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x41, 0x04, 0x17, 0x2a, 0x11, 0x58, 0xb0, 0xc8, 0xc7, 0x04, 0x44, 0x3e,
  0x36, 0x14, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x2c, 0x2e,
  0x60, 0x42, 0x1f, 0xce, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60,
  0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0xab, 0x0b,
  0x9a, 0xf0, 0x87, 0xb7, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xc0, 0xf2, 0x02,
  0x27, 0x44, 0x22, 0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0xc1, 0xce, 0x61, 0x89, 0x8f, 0x9d, 0xc3, 0x12, 0x1f, 0x3b,
  0x87, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xf0, 0x90, 0x86,
  0x4f, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0xa4, 0xe1, 0x13, 0x81, 0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x33,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x18, 0x69, 0x8c, 0x45, 0x4b, 0x90,
  0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x01, 0x86, 0x1a, 0x67, 0x11, 0x13, 0x7d,
  0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x80, 0xb1, 0xc6, 0x5a, 0xd4, 0x44, 0x5c,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0xe9,
  0xc3, 0x12, 0x1f, 0xd3, 0x87, 0x25, 0x3e, 0xa6, 0x0f, 0x4b, 0x7c, 0x46,
  0x0c, 0x16, 0x00, 0x04, 0xc1, 0xe0, 0xb9, 0x8d, 0xb8, 0x18, 0x84, 0x60,
  0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0x6e, 0x23, 0x2e,
  0x02, 0x0b, 0x08, 0xf9, 0x98, 0x40, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xb0, 0xdb, 0xb0, 0x0b, 0xb0, 0x80, 0x8b, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0x6c, 0x37, 0xf4, 0x82, 0x2c, 0x6c, 0x63, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0x00, 0xfb, 0x0d, 0xbf, 0x40, 0x8b, 0xd2, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x6b, 0x89, 0x25, 0x3e, 0xd6,
  0x12, 0x4b, 0x7c, 0xac, 0x25, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0xc1, 0xa3, 0x1e, 0xa4, 0x31, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0x10, 0xa9, 0x07, 0x69, 0x04, 0x16, 0x10, 0xf2,
  0x31, 0x81, 0x90, 0x8f, 0xe5, 0xc5, 0x1d, 0xc4, 0xc7, 0xf4, 0xe2, 0x0e,
  0xe2, 0x63, 0x7b, 0x61, 0x06, 0xf1, 0x31, 0xbe, 0x30, 0x83, 0xf8, 0x58,
  0x5f, 0x54, 0xf1, 0x31, 0xbf, 0xa8, 0xe2, 0x63, 0xa2, 0xe0, 0x07, 0xf2,
  0x31, 0xd0, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5a,
  0x7c, 0xd0, 0x06, 0x32, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x68, 0xf2, 0x51, 0x1b, 0xc8, 0x28, 0x04, 0x66, 0x0a, 0x6f, 0x20, 0x1f,
  0x23, 0x8d, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xd5,
  0x07, 0x6e, 0x28, 0xa7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81,
  0x66, 0x1f, 0xb9, 0xa1, 0x9c, 0x42, 0x60, 0xaa, 0x00, 0x06, 0xf2, 0x31,
  0xd4, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x5a, 0x7e,
  0xf0, 0x06, 0xb3, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x68,
  0xfa, 0xd1, 0x1b, 0xcc, 0x2a, 0x04, 0xf6, 0x07, 0xae, 0x20, 0x1f, 0x0b,
  0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xf5, 0x07,
  0x78, 0xf0, 0xc1, 0x2b, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0,
  0xf9, 0x47, 0x78, 0xf0, 0xc1, 0x2b, 0x04, 0x06, 0x07, 0xb2, 0x20, 0x1f,
  0x0b, 0xda, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x85,
  0x08, 0x79, 0xb4, 0xc1, 0x2c, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0xa0, 0x89, 0x48, 0x79, 0xb4, 0xc1, 0x2c, 0x04, 0x16, 0x06, 0xb6, 0x20,
  0x1f, 0x0b, 0x3c, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x56,
  0x22, 0xe8, 0xe1, 0xdd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x9a, 0x89, 0xa4, 0x87, 0x77, 0x0b, 0xc1, 0x70, 0x44, 0x85, 0x1b, 0xc4,
  0x37, 0x1c, 0x21, 0xe5, 0x06, 0xf1, 0x0d, 0x47, 0x3c, 0xba, 0x41, 0x7c,
  0xd3, 0x0d, 0xbb, 0xc1, 0x1b, 0xc3, 0x74, 0x03, 0x6f, 0xf4, 0xc6, 0x30,
  0xdd, 0xd0, 0x1b, 0xbe, 0x31, 0xd8, 0xb0, 0xc9, 0xc7, 0x06, 0x4c, 0x3e,
  0x36, 0x54, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x2c, 0x46,
  0xe0, 0x43, 0x37, 0x54, 0x64, 0x34, 0x21, 0x18, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0xa2, 0x11, 0xf5, 0xa0, 0xc6, 0x63, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xaa, 0x1a, 0x59, 0x8f, 0x88, 0x3c, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0xb2, 0x11, 0xf6, 0x70, 0xca, 0xc3, 0x86, 0x45,
  0x3e, 0x36, 0x2c, 0xf2, 0xb1, 0x61, 0x91, 0xcf, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x44, 0x3c, 0xf2, 0x1e, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x44, 0x3d, 0x02, 0x1f, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x44, 0x3e, 0x12, 0x1f, 0x83, 0x0d, 0x8a, 0x7c, 0x6c, 0x58, 0xe4, 0x63,
  0x03, 0x23, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xc4, 0x84,
  0x3e, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xc6, 0xa4, 0x3e,
  0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x88, 0xc8, 0xc4, 0x3e, 0x06,
  0x1b, 0xde, 0x40, 0x3e, 0x36, 0xb0, 0x81, 0x7c, 0x6c, 0x48, 0x03, 0xf9,
  0xd8, 0xf5, 0x0e, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0xad,
  0x4c, 0x50, 0xe4, 0xea, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x34, 0x33, 0x49, 0x91, 0x6b, 0x15, 0x02, 0xd3, 0xe2, 0x41, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0xa1, 0xc9, 0x8a, 0x68, 0xbf, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x81, 0x96, 0x26, 0x2c, 0xa2, 0xb5,
  0x42, 0x60, 0xdd, 0x3c, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xb4, 0x35, 0x71, 0x91, 0x2e, 0x1c, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xd0, 0xd8, 0xe4, 0x45, 0xba, 0x57, 0x08, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x00, 0x73, 0x93, 0x16, 0xb9, 0x0f, 0x35, 0x19, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0x16, 0xf9, 0xd8,
  0x90, 0xc8, 0xc7, 0x86, 0x43, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x80, 0xd5, 0x09, 0x8d, 0xf8, 0x87, 0x9c, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x1d, 0x03, 0x7c, 0xec, 0x18, 0xe0,
  0x63, 0xc7, 0x00, 0x1f, 0xd3, 0x44, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0xa0, 0xf1, 0xc9, 0x8f, 0x68, 0xf0, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x81, 0xd6, 0x27, 0x60, 0xa2, 0xf9, 0x42, 0x60, 0x1d,
  0x49, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb4, 0x3f, 0x11,
  0x93, 0x4e, 0x1e, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xd0, 0x40,
  0x65, 0x4c, 0x3a, 0x70, 0x08, 0x0c, 0x0c, 0x4c, 0x42, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0xa0, 0x89, 0x4a, 0x99, 0x80, 0x01, 0x3d, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xa0, 0x8d, 0x8a, 0x99, 0x80, 0x81,
  0x38, 0x04, 0xa3, 0x09, 0x74, 0x00, 0x8c, 0x26, 0xd4, 0x41, 0x30, 0x9a,
  0x60, 0x07, 0x82, 0xfd, 0xc7, 0x23, 0x1f, 0xfb, 0x8f, 0x47, 0x3e, 0xf6,
  0x1f, 0x8f, 0x7c, 0x46, 0x0c, 0x1e, 0x00, 0x04, 0xc1, 0xa0, 0x81, 0x95,
  0x31, 0xc1, 0x91, 0x1a, 0x49, 0x11, 0x14, 0xc9, 0x91, 0x1c, 0x39, 0x95,
  0x53, 0x61, 0x93, 0x1c, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18,
  0x4d, 0x18, 0x04, 0x8b, 0x46, 0x44, 0x3e, 0x16, 0x2c, 0xf2, 0xb1, 0xa0,
  0x90, 0x8f, 0x45, 0x26, 0x22, 0x1f, 0x0b, 0x1a, 0xf9, 0x58, 0x70, 0xc8,
  0xc7, 0xa2, 0x14, 0x91, 0x8f, 0x05, 0x8f, 0x7c, 0x2c, 0x48, 0xe4, 0x63,
  0x07, 0x04, 0x1f, 0x2b, 0x20, 0xf8, 0xd8, 0x00, 0xc1, 0x67, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x90, 0x70, 0xa1, 0x93, 0x5b, 0xb9, 0x95, 0x56,
  0x19, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x09, 0x17, 0x3a, 0xb9,
  0x95, 0x5b, 0x11, 0x15, 0x61, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90,
  0x70, 0xa1, 0x93, 0x5b, 0xb9, 0x15, 0x56, 0x09, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x00, 0x09, 0x17, 0x3a, 0xb9, 0x95, 0x5b, 0x51, 0x95, 0x17,
  0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x12, 0x1c, 0x44, 0x47, 0x58, 0x43, 0x3f, 0x80,
  0x0c, 0x69, 0x63, 0x1f, 0x78, 0x6f, 0x51, 0xac, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0xc8, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x6c, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58,
  0xcd, 0x8f, 0xdb, 0x44, 0x14, 0x9f, 0xb1, 0x1d, 0x7b, 0xb2, 0x9e, 0x3c,
  0x3b, 0x8e, 0xe3, 0xd8, 0x8e, 0x93, 0x66, 0xbf, 0xba, 0xc9, 0x66, 0x93,
  0xcd, 0xb6, 0x4d, 0xbf, 0xd4, 0x15, 0x1f, 0x2a, 0x15, 0xb0, 0xa5, 0xad,
  0xda, 0xee, 0x48, 0x54, 0xdd, 0x05, 0x2a, 0x41, 0x3f, 0xe9, 0x97, 0x2a,
  0xd4, 0x43, 0xe5, 0x1a, 0x88, 0x04, 0x88, 0x0a, 0x2a, 0x04, 0xe7, 0x72,
  0xe8, 0x01, 0x0a, 0x48, 0xfc, 0x05, 0xd9, 0xc2, 0xc9, 0x42, 0x42, 0x5c,
  0xba, 0x82, 0x13, 0x27, 0x2e, 0x9c, 0xa8, 0x50, 0x0f, 0x55, 0x85, 0xb6,
  0x8c, 0x9d, 0xa4, 0xbb, 0xdb, 0x0f, 0xb5, 0x70, 0x61, 0x85, 0xf6, 0x49,
  0x4f, 0x6f, 0xe6, 0xbd, 0xdf, 0xbc, 0x37, 0xef, 0xcd, 0x38, 0xca, 0xbc,
  0x1d, 0xfb, 0xf6, 0xbd, 0x84, 0x31, 0x42, 0x07, 0x2d, 0x14, 0x93, 0xdc,
  0x11, 0xe8, 0x8f, 0xf6, 0x37, 0xbf, 0x3e, 0x09, 0x7f, 0xfb, 0x0f, 0xf1,
  0x3d, 0x16, 0xba, 0xeb, 0xb6, 0xa3, 0x7f, 0x47, 0x3d, 0x3f, 0xb7, 0x01,
  0x2d, 0xdf, 0x78, 0x4c, 0xfa, 0x03, 0xf8, 0xdb, 0x66, 0x47, 0x9e, 0xce,
  0x2e, 0xc2, 0x13, 0x11, 0x63, 0x01, 0x5d, 0x5f, 0x82, 0x5b, 0x83, 0x4a,
  0x22, 0x5e, 0x32, 0xbf, 0xd1, 0xc5, 0x47, 0xba, 0x06, 0x67, 0xe9, 0x5e,
  0x9d, 0xc4, 0x48, 0x08, 0x32, 0xd6, 0xb8, 0x09, 0x0b, 0xb2, 0xa0, 0xf0,
  0x94, 0x04, 0x41, 0x16, 0x35, 0x6e, 0x10, 0x05, 0xf4, 0x3f, 0x27, 0x89,
  0x73, 0x69, 0xc9, 0x38, 0x4a, 0x38, 0xaa, 0xba, 0xb6, 0x04, 0x13, 0xd5,
  0xf8, 0xe5, 0xb8, 0x98, 0xc1, 0xdc, 0x52, 0xbe, 0x6c, 0xa3, 0xdb, 0x0f,
  0xf7, 0xba, 0x1c, 0x87, 0x39, 0x4e, 0x79, 0x02, 0x9c, 0x18, 0xe1, 0xc4,
  0x27, 0xc4, 0x25, 0x1e, 0x8d, 0x53, 0x14, 0x34, 0x2b, 0xa9, 0xc2, 0xac,
  0xe6, 0xf1, 0xfd, 0xe1, 0x87, 0xe1, 0x8e, 0xfe, 0xac, 0xf0, 0x63, 0xc6,
  0x5c, 0x72, 0x1c, 0x7a, 0x34, 0xee, 0x48, 0x17, 0x77, 0xe4, 0x31, 0xb8,
  0x63, 0x5d, 0xdc, 0xb1, 0xc7, 0xe0, 0x8e, 0x77, 0x71, 0xc7, 0x1f, 0x83,
  0x5b, 0x9e, 0xaf, 0x16, 0xd7, 0x45, 0x7a, 0x20, 0xe3, 0xbb, 0x9c, 0xd0,
  0x2a, 0xad, 0x28, 0x5a, 0x3d, 0x93, 0x95, 0x47, 0xab, 0x67, 0xb2, 0xf2,
  0x68, 0xf5, 0x4c, 0x56, 0x1e, 0xad, 0x9e, 0xc9, 0xca, 0xa3, 0xd5, 0x33,
  0x59, 0x79, 0xb4, 0x7a, 0x26, 0x2b, 0x97, 0x5e, 0xf9, 0x29, 0x98, 0x9f,
  0xbe, 0xb2, 0x20, 0xa6, 0xcf, 0x1c, 0xfc, 0x6d, 0xd6, 0x0c, 0xe6, 0x6f,
  0x4e, 0x2e, 0x88, 0xc7, 0x2f, 0x9f, 0x6b, 0x8a, 0xe8, 0xf3, 0x39, 0x5f,
  0xfa, 0xa4, 0xed, 0xf7, 0x2d, 0xb4, 0x55, 0xf1, 0xd3, 0xb6, 0x26, 0x7e,
  0xd4, 0x4e, 0x8a, 0xef, 0xb4, 0x03, 0xf1, 0x03, 0xce, 0xef, 0x72, 0xfe,
  0x90, 0xf3, 0xc7, 0x6d, 0x2a, 0x7e, 0xd6, 0xc6, 0x88, 0xde, 0xe2, 0xae,
  0xee, 0x24, 0x54, 0x12, 0x4b, 0x85, 0x74, 0xe6, 0x92, 0xd0, 0x91, 0xba,
  0xf8, 0x57, 0x3b, 0x7b, 0xb7, 0xf2, 0x7e, 0xe7, 0xa5, 0x54, 0x0a, 0x11,
  0x1e, 0x0a, 0x51, 0xe2, 0xf9, 0x10, 0x25, 0xb7, 0x85, 0x48, 0xda, 0x1e,
  0x62, 0xd4, 0x1f, 0x62, 0x3c, 0x1c, 0xe2, 0xc4, 0x0b, 0xa1, 0x29, 0x7e,
  0xd1, 0xfe, 0x4e, 0xbc, 0xd6, 0xbe, 0x2b, 0x7e, 0xd5, 0xfe, 0x7a, 0x37,
  0x4e, 0x63, 0xe9, 0xb9, 0x10, 0xd1, 0x72, 0x88, 0x52, 0x63, 0x21, 0x82,
  0x46, 0x88, 0xb4, 0x0d, 0x21, 0x22, 0x9b, 0xc3, 0x8b, 0xd7, 0x2f, 0xcd,
  0x11, 0x2d, 0xb8, 0x49, 0x84, 0x43, 0x98, 0x88, 0x5c, 0xca, 0xaf, 0x62,
  0xd4, 0xf7, 0x74, 0xc8, 0x1f, 0x5f, 0xa1, 0x89, 0xca, 0xb7, 0xf8, 0xdb,
  0xf6, 0x0e, 0x4e, 0x4e, 0x86, 0x28, 0xb8, 0xf1, 0x8b, 0x81, 0x50, 0x76,
  0xba, 0x23, 0x73, 0xd7, 0x3a, 0xd2, 0xc1, 0x32, 0x0e, 0x31, 0xad, 0x84,
  0x38, 0x55, 0x0b, 0x31, 0x4c, 0x84, 0x58, 0x6b, 0x86, 0x98, 0x6c, 0x09,
  0x71, 0xdf, 0x33, 0xa1, 0xb6, 0x46, 0x80, 0x68, 0x5d, 0x1a, 0xa1, 0xcc,
  0x74, 0x47, 0x9a, 0xd7, 0x3a, 0xd2, 0x8a, 0xf4, 0x3c, 0x09, 0x1b, 0x0a,
  0x02, 0x9b, 0xee, 0x8c, 0xdd, 0x6b, 0x1d, 0x99, 0x8f, 0xf6, 0x84, 0x87,
  0x86, 0x08, 0x1a, 0x18, 0x20, 0x7a, 0xbf, 0xc0, 0x72, 0xd5, 0x3a, 0x71,
  0xaa, 0xa3, 0x24, 0xb2, 0x13, 0x1e, 0x93, 0xbf, 0x15, 0x09, 0x9e, 0x11,
  0x7c, 0x73, 0xa4, 0x4c, 0xac, 0x91, 0xb5, 0xc4, 0x18, 0x1e, 0x03, 0x5c,
  0xf0, 0x00, 0xaf, 0x29, 0x02, 0xee, 0x2f, 0x81, 0x3b, 0xb1, 0x81, 0xa4,
  0x07, 0xc7, 0x58, 0x7e, 0xa2, 0x11, 0xaf, 0x49, 0x72, 0x9f, 0x08, 0x8f,
  0x31, 0x6b, 0x66, 0xcc, 0x3f, 0xf3, 0xd4, 0xa5, 0x39, 0x21, 0x6b, 0x82,
  0x98, 0x93, 0x41, 0x72, 0x08, 0x24, 0xf2, 0x7d, 0xf1, 0x1e, 0xb9, 0x5f,
  0x61, 0xba, 0x23, 0x55, 0xd4, 0x59, 0x43, 0xa7, 0x3b, 0x32, 0x75, 0x9a,
  0xaf, 0x51, 0xd0, 0xd4, 0xbc, 0xf2, 0xfb, 0x8f, 0xfc, 0x6d, 0x3f, 0x35,
  0x2f, 0x73, 0x29, 0x47, 0x73, 0xed, 0x87, 0x41, 0x19, 0x55, 0xe7, 0xb1,
  0x28, 0x94, 0xe4, 0xc3, 0xd4, 0xbf, 0xf8, 0xfd, 0xa5, 0x39, 0x35, 0x61,
  0x11, 0x27, 0x21, 0x91, 0x28, 0x87, 0x94, 0xe3, 0x12, 0xdf, 0x58, 0x78,
  0x2f, 0xef, 0xd8, 0x24, 0x33, 0xbe, 0x11, 0xb2, 0xcd, 0x75, 0x60, 0x57,
  0x36, 0x83, 0x89, 0x1a, 0xf1, 0x79, 0x9a, 0x52, 0xe3, 0xd6, 0xd3, 0x5c,
  0xe6, 0xb9, 0xaf, 0x6c, 0xe5, 0x64, 0xcb, 0xe1, 0xd2, 0x1e, 0x7f, 0xa3,
  0xe5, 0x71, 0x99, 0x69, 0x9e, 0x6d, 0xe5, 0x47, 0xb6, 0x42, 0x81, 0x8f,
  0x9d, 0x89, 0xb7, 0x5a, 0xde, 0x44, 0x03, 0x6c, 0x3e, 0xce, 0x57, 0x0f,
  0xb5, 0x78, 0x2d, 0x20, 0xc3, 0xc7, 0xde, 0x08, 0x6b, 0xe5, 0xc7, 0x47,
  0x21, 0x1b, 0x8d, 0x9b, 0xac, 0xe5, 0x34, 0x37, 0x80, 0x1b, 0x61, 0x2a,
  0xc7, 0x5a, 0x5e, 0xa5, 0x0c, 0x85, 0xfc, 0x46, 0x88, 0xf6, 0x11, 0xf9,
  0x43, 0xb5, 0x17, 0x03, 0x33, 0xf2, 0x35, 0xbe, 0xb7, 0x55, 0xc8, 0xd5,
  0xc1, 0xce, 0xad, 0x83, 0x4c, 0xce, 0x02, 0x3b, 0xdf, 0x80, 0x4c, 0xde,
  0x05, 0xa1, 0x59, 0x67, 0x42, 0x75, 0x1d, 0x13, 0x2a, 0x16, 0xa3, 0xcd,
  0x8d, 0x8c, 0x56, 0x1b, 0x2c, 0x37, 0x2e, 0x01, 0xad, 0xb8, 0x2c, 0x27,
  0x96, 0xe3, 0x78, 0xe9, 0xda, 0xba, 0x20, 0x8a, 0x65, 0xd4, 0x36, 0x06,
  0xce, 0x7a, 0x89, 0x39, 0xa2, 0x0d, 0x4e, 0xac, 0x7f, 0x36, 0x70, 0x63,
  0xfd, 0x8e, 0x40, 0x15, 0xeb, 0xa0, 0xe6, 0x24, 0xa6, 0xc6, 0x31, 0xb7,
  0x06, 0xe9, 0xd8, 0xbe, 0x37, 0x30, 0x62, 0x3b, 0x0b, 0xac, 0x58, 0x7f,
  0x20, 0xc8, 0x6f, 0x42, 0x20, 0xcc, 0x6c, 0xf3, 0xed, 0x09, 0xc4, 0x52,
  0x79, 0xc4, 0xcc, 0xc9, 0x32, 0xe4, 0x26, 0xeb, 0x80, 0x66, 0xb6, 0xfa,
  0x85, 0x4d, 0x12, 0x28, 0x89, 0x32, 0x23, 0x0a, 0xbf, 0x8f, 0xe8, 0x08,
  0xa6, 0x93, 0x06, 0x14, 0x26, 0x74, 0x9e, 0x8f, 0x0d, 0xf2, 0x9a, 0x32,
  0xcb, 0x56, 0x5d, 0x30, 0x86, 0x8b, 0xa0, 0xa4, 0x0d, 0xa6, 0x38, 0x75,
  0xe6, 0x36, 0x75, 0xc8, 0x8c, 0xb8, 0x2c, 0x3d, 0x58, 0x64, 0x72, 0xc1,
  0x60, 0x66, 0xc5, 0x03, 0xb9, 0xbf, 0xce, 0xd4, 0x9c, 0xcb, 0x9c, 0xf5,
  0x3a, 0xb3, 0x6a, 0x45, 0x96, 0xcc, 0x78, 0xcc, 0x24, 0x8d, 0x5b, 0x01,
  0xaf, 0x77, 0x6a, 0x86, 0xfa, 0xde, 0x16, 0x9d, 0xe7, 0xe7, 0x31, 0x6d,
  0xc6, 0xf6, 0x61, 0x06, 0x7c, 0x99, 0xfb, 0x94, 0x79, 0x3d, 0xc8, 0x8c,
  0xee, 0xd3, 0xe1, 0x12, 0xd0, 0xda, 0x10, 0x28, 0x19, 0x03, 0x14, 0x5e,
  0x47, 0x65, 0x1c, 0x20, 0x93, 0x59, 0x0b, 0xd4, 0x18, 0x05, 0xdd, 0x18,
  0x03, 0xd3, 0xa8, 0x83, 0x93, 0x69, 0x40, 0x9a, 0xdb, 0xa3, 0xfc, 0x52,
  0x65, 0x76, 0x35, 0x93, 0xa2, 0x10, 0xe5, 0x96, 0x2e, 0x1f, 0xb8, 0x4a,
  0x9a, 0x1e, 0x90, 0x2d, 0x45, 0xb0, 0xd3, 0x3a, 0xa4, 0x2a, 0x94, 0xa5,
  0xf9, 0x1d, 0x01, 0x10, 0x4a, 0x51, 0xed, 0xb2, 0xe5, 0xd9, 0xab, 0x49,
  0xc7, 0x00, 0xa8, 0xe8, 0x4c, 0xd5, 0x28, 0x0b, 0x06, 0xc8, 0x05, 0x8b,
  0xdb, 0x0d, 0x6e, 0xd7, 0x2b, 0x06, 0xd3, 0x34, 0x9d, 0x65, 0xf9, 0xdc,
  0xe2, 0x73, 0x15, 0xe1, 0xf9, 0x3f, 0xd1, 0x97, 0x38, 0xa0, 0xb4, 0x14,
  0x8c, 0x91, 0x0b, 0x86, 0x66, 0xb0, 0x40, 0xd7, 0x4b, 0x72, 0x8e, 0x82,
  0xd2, 0xb3, 0x8d, 0x92, 0x0b, 0x81, 0x61, 0x94, 0xd4, 0x41, 0x0b, 0xe4,
  0xdd, 0xd4, 0x27, 0x9a, 0x0e, 0xb4, 0x6b, 0x53, 0x6a, 0x25, 0xb0, 0x2d,
  0x17, 0x1c, 0x8b, 0xef, 0x67, 0xb7, 0xee, 0x47, 0x71, 0x5d, 0xcb, 0x02,
  0x5a, 0xb5, 0x41, 0xa5, 0x14, 0xbc, 0x92, 0xcb, 0x92, 0xbb, 0x0d, 0xbf,
  0x50, 0xf2, 0x58, 0xb1, 0x64, 0x31, 0x55, 0xd7, 0x41, 0x9e, 0xe2, 0xf7,
  0x98, 0xdf, 0x99, 0x92, 0xed, 0xb2, 0x7e, 0xdb, 0x63, 0x03, 0x36, 0xd7,
  0x1b, 0x06, 0x90, 0x29, 0xdd, 0x8f, 0xbe, 0x01, 0xe4, 0x1a, 0x88, 0x72,
  0x89, 0x3d, 0x0b, 0xc9, 0x83, 0x14, 0x92, 0x53, 0x6b, 0xfd, 0x3e, 0x0d,
  0x40, 0x74, 0x64, 0x18, 0xa6, 0x45, 0x20, 0xb5, 0x01, 0x18, 0xa2, 0x3a,
  0xac, 0xe5, 0xfe, 0x33, 0x55, 0x03, 0xca, 0x03, 0x3a, 0xab, 0x0c, 0x14,
  0xd9, 0xe8, 0x00, 0x65, 0x63, 0x86, 0xce, 0x6a, 0x46, 0x91, 0xd5, 0x0d,
  0xca, 0x92, 0xdc, 0x87, 0x60, 0xb9, 0x88, 0xa8, 0x3a, 0x68, 0xaa, 0x09,
  0xb2, 0x4a, 0x41, 0xca, 0x10, 0x20, 0xba, 0x07, 0x49, 0xd3, 0x84, 0x3e,
  0x6a, 0x41, 0xf4, 0xdd, 0x01, 0x06, 0xd6, 0x27, 0xca, 0x4c, 0x4d, 0x10,
  0xf6, 0xe8, 0x3e, 0xcb, 0xdb, 0x5c, 0x7f, 0xe5, 0x3f, 0xe5, 0x5e, 0xfb,
  0xa8, 0xd7, 0x56, 0xe1, 0xbf, 0x23, 0x68, 0xa9, 0x2e, 0xe2, 0x24, 0x5e,
  0xae, 0x8b, 0xa8, 0x4f, 0x58, 0x1c, 0xf7, 0x9a, 0x7e, 0xaa, 0xb8, 0x5c,
  0x17, 0x8d, 0x53, 0xd2, 0xf2, 0xb5, 0x91, 0x5e, 0x4b, 0x2c, 0x09, 0x82,
  0x3a, 0x7d, 0x34, 0xb2, 0x24, 0x30, 0xee, 0xe9, 0x78, 0x60, 0x7c, 0x5f,
  0x7f, 0x4b, 0xe2, 0x81, 0x85, 0xfb, 0x7a, 0x40, 0x52, 0x14, 0x58, 0x5c,
  0x8c, 0x1b, 0xaf, 0xd5, 0x16, 0xdb, 0x3f, 0x8b, 0xff, 0x3f, 0x3c, 0xb4,
  0x67, 0xdf, 0xae, 0x53, 0x67, 0xdf, 0x7c, 0xed, 0xc4, 0x9e, 0xa3, 0xe7,
  0x5f, 0x3f, 0xb1, 0xf3, 0xe8, 0xe1, 0x23, 0xe7, 0x8e, 0x9e, 0x3c, 0xbc,
  0xff, 0xfc, 0xae, 0x53, 0x3b, 0x4e, 0x1d, 0xee, 0xf5, 0x56, 0xbd, 0x6e,
  0xaf, 0x93, 0xff, 0xc6, 0xa1, 0xa8, 0x0f, 0xb7, 0x3d, 0xde, 0x93, 0x70,
  0x2f, 0xb7, 0x9d, 0xd1, 0x5c, 0x84, 0x7b, 0xfe, 0xf7, 0x77, 0xed, 0xbd,
  0x3a, 0x1c, 0xec, 0xce, 0x3b, 0x84, 0xd0, 0xdf, 0x3a, 0x1c, 0x22, 0x98,
  0x5f, 0xcf, 0x55, 0x4f, 0x11, 0x71, 0x5c, 0xe4, 0x5e, 0x14, 0xf0, 0x1e,
  0x6b, 0x90, 0x74, 0x35
};
