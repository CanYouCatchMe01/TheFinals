#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xyzw
; TEXCOORD                 1   xyz         1     NONE   float   xyz 
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_PSBasicPixelLighting.pdb
; shader hash: 370313ad8a4bb7282143e174ca4c5fde
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSBasicPixelLighting
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 8, 11 }
;   output 1 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 9, 11 }
;   output 2 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 10, 11 }
;   output 3 depends on inputs: { 11 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @PSBasicPixelLighting() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %17 = fsub fast float %14, %9
  %18 = fsub fast float %15, %10
  %19 = fsub fast float %16, %11
  %20 = call float @dx.op.dot3.f32(i32 55, float %17, float %18, float %19, float %17, float %18, float %19)  ; Dot3(ax,ay,az,bx,by,bz)
  %21 = call float @dx.op.unary.f32(i32 25, float %20)  ; Rsqrt(value)
  %22 = fmul fast float %17, %21
  %23 = fmul fast float %18, %21
  %24 = fmul fast float %19, %21
  %25 = call float @dx.op.dot3.f32(i32 55, float %6, float %7, float %8, float %6, float %7, float %8)  ; Dot3(ax,ay,az,bx,by,bz)
  %26 = call float @dx.op.unary.f32(i32 25, float %25)  ; Rsqrt(value)
  %27 = fmul fast float %26, %6
  %28 = fmul fast float %26, %7
  %29 = fmul fast float %26, %8
  %30 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %31 = extractvalue %dx.types.CBufRet.f32 %30, 0
  %32 = extractvalue %dx.types.CBufRet.f32 %30, 1
  %33 = extractvalue %dx.types.CBufRet.f32 %30, 2
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = fsub fast float %22, %31
  %43 = fsub fast float %23, %32
  %44 = fsub fast float %24, %33
  %45 = call float @dx.op.dot3.f32(i32 55, float %42, float %43, float %44, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %46 = call float @dx.op.unary.f32(i32 25, float %45)  ; Rsqrt(value)
  %47 = fmul fast float %46, %43
  %48 = fmul fast float %46, %44
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = fsub fast float %22, %50
  %62 = fsub fast float %23, %51
  %63 = fsub fast float %24, %52
  %64 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float %61, float %62, float %63)  ; Dot3(ax,ay,az,bx,by,bz)
  %65 = call float @dx.op.unary.f32(i32 25, float %64)  ; Rsqrt(value)
  %66 = fmul fast float %65, %62
  %67 = fmul fast float %65, %63
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = fsub fast float %22, %69
  %81 = fsub fast float %23, %70
  %82 = fsub fast float %24, %71
  %83 = call float @dx.op.dot3.f32(i32 55, float %80, float %81, float %82, float %80, float %81, float %82)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 25, float %83)  ; Rsqrt(value)
  %85 = fmul fast float %84, %81
  %86 = fmul fast float %84, %82
  %87 = fsub fast float -0.000000e+00, %32
  %88 = fsub fast float -0.000000e+00, %33
  %89 = fsub fast float -0.000000e+00, %51
  %90 = fsub fast float -0.000000e+00, %52
  %91 = fsub fast float -0.000000e+00, %70
  %92 = fsub fast float -0.000000e+00, %71
  %93 = fmul fast float %27, %31
  %94 = fsub fast float -0.000000e+00, %93
  %95 = call float @dx.op.tertiary.f32(i32 46, float %87, float %28, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %88, float %29, float %95)  ; FMad(a,b,c)
  %97 = fmul fast float %27, %50
  %98 = fsub fast float -0.000000e+00, %97
  %99 = call float @dx.op.tertiary.f32(i32 46, float %89, float %28, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %90, float %29, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %27, %69
  %102 = fsub fast float -0.000000e+00, %101
  %103 = call float @dx.op.tertiary.f32(i32 46, float %91, float %28, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %92, float %29, float %103)  ; FMad(a,b,c)
  %105 = fmul fast float %42, %27
  %106 = fmul fast float %105, %46
  %107 = call float @dx.op.tertiary.f32(i32 46, float %47, float %28, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.tertiary.f32(i32 46, float %48, float %29, float %107)  ; FMad(a,b,c)
  %109 = fmul fast float %61, %27
  %110 = fmul fast float %109, %65
  %111 = call float @dx.op.tertiary.f32(i32 46, float %66, float %28, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %67, float %29, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %80, %27
  %114 = fmul fast float %113, %84
  %115 = call float @dx.op.tertiary.f32(i32 46, float %85, float %28, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %86, float %29, float %115)  ; FMad(a,b,c)
  %117 = fcmp fast olt float %96, 0.000000e+00
  %118 = fcmp fast olt float %100, 0.000000e+00
  %119 = fcmp fast olt float %104, 0.000000e+00
  %120 = select i1 %117, float 0.000000e+00, float 1.000000e+00
  %121 = select i1 %118, float 0.000000e+00, float 1.000000e+00
  %122 = select i1 %119, float 0.000000e+00, float 1.000000e+00
  %123 = fmul fast float %120, %96
  %124 = fmul fast float %121, %100
  %125 = fmul fast float %122, %104
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %128 = call float @dx.op.binary.f32(i32 35, float %108, float 0.000000e+00)  ; FMax(a,b)
  %129 = call float @dx.op.binary.f32(i32 35, float %112, float 0.000000e+00)  ; FMax(a,b)
  %130 = call float @dx.op.binary.f32(i32 35, float %116, float 0.000000e+00)  ; FMax(a,b)
  %131 = fmul fast float %128, %120
  %132 = fmul fast float %129, %121
  %133 = fmul fast float %130, %122
  %134 = call float @dx.op.unary.f32(i32 23, float %131)  ; Log(value)
  %135 = call float @dx.op.unary.f32(i32 23, float %132)  ; Log(value)
  %136 = call float @dx.op.unary.f32(i32 23, float %133)  ; Log(value)
  %137 = fmul fast float %134, %127
  %138 = fmul fast float %135, %127
  %139 = fmul fast float %136, %127
  %140 = call float @dx.op.unary.f32(i32 21, float %137)  ; Exp(value)
  %141 = call float @dx.op.unary.f32(i32 21, float %138)  ; Exp(value)
  %142 = call float @dx.op.unary.f32(i32 21, float %139)  ; Exp(value)
  %143 = fmul fast float %140, %96
  %144 = fmul fast float %141, %100
  %145 = fmul fast float %142, %104
  %146 = fmul fast float %123, %35
  %147 = call float @dx.op.tertiary.f32(i32 46, float %124, float %54, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %125, float %73, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %123, %36
  %150 = call float @dx.op.tertiary.f32(i32 46, float %124, float %55, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %125, float %74, float %150)  ; FMad(a,b,c)
  %152 = fmul fast float %123, %37
  %153 = call float @dx.op.tertiary.f32(i32 46, float %124, float %56, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %125, float %75, float %153)  ; FMad(a,b,c)
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = fmul fast float %156, %148
  %160 = fmul fast float %157, %151
  %161 = fmul fast float %158, %154
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = fadd fast float %159, %163
  %167 = fadd fast float %160, %164
  %168 = fadd fast float %161, %165
  %169 = fmul fast float %143, %39
  %170 = call float @dx.op.tertiary.f32(i32 46, float %144, float %58, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %145, float %77, float %170)  ; FMad(a,b,c)
  %172 = fmul fast float %143, %40
  %173 = call float @dx.op.tertiary.f32(i32 46, float %144, float %59, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %145, float %78, float %173)  ; FMad(a,b,c)
  %175 = fmul fast float %143, %41
  %176 = call float @dx.op.tertiary.f32(i32 46, float %144, float %60, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %145, float %79, float %176)  ; FMad(a,b,c)
  %178 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %179 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %180 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %181 = fmul fast float %166, %2
  %182 = fmul fast float %167, %3
  %183 = fmul fast float %168, %4
  %184 = fmul fast float %171, %5
  %185 = fmul fast float %184, %178
  %186 = fmul fast float %174, %5
  %187 = fmul fast float %186, %179
  %188 = fmul fast float %177, %5
  %189 = fmul fast float %188, %180
  %190 = fadd fast float %185, %181
  %191 = fadd fast float %187, %182
  %192 = fadd fast float %189, %183
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 1
  %196 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %197 = fmul fast float %194, %5
  %198 = fmul fast float %195, %5
  %199 = fmul fast float %196, %5
  %200 = fsub fast float %197, %190
  %201 = fsub fast float %198, %191
  %202 = fsub fast float %199, %192
  %203 = fmul fast float %200, %12
  %204 = fmul fast float %201, %12
  %205 = fmul fast float %202, %12
  %206 = fadd fast float %203, %190
  %207 = fadd fast float %204, %191
  %208 = fadd fast float %205, %192
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %207)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %208)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[14 x i32] [i32 12, i32 4, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!9 = !{void ()* @PSBasicPixelLighting, !"PSBasicPixelLighting", !10, !5, null}
!10 = !{!11, !19, null}
!11 = !{!12, !15, !18}
!12 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 1, i8 0, !17}
!16 = !{i32 1}
!17 = !{i32 3, i32 7}
!18 = !{i32 2, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 2, i8 0, !14}
!19 = !{!20}
!20 = !{i32 0, !"SV_Target", i8 9, i8 16, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 54
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 960
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0xad130337, 0x28b74b8a                // 000000000000: D5800337 03FF5B13 28B74B8A
;   v_nop_xbox_data 0x74e14321, 0xde5f4cca                // 00000000000C: D5804321 03FEE9E1 DE5F4CCA
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_or_b32      s33, s9, lit(0x00100000)                // 00000000001C: 8821FF09 00100000
;   s_mov_b32     s32, s8                                 // 000000000024: BEA00308
;   s_mov_b32     s34, -1                                 // 000000000028: BEA203C1
;   s_mov_b32     s35, lit(0x11014fac)                    // 00000000002C: BEA303FF 11014FAC
;   s_mov_b32     m0, s10                                 // 000000000034: BEFC030A
;   s_buffer_load_dwordx8  s[44:51], s[32:35], 0x0000c0   // 000000000038: F42C0B10 FA0000C0
;   v_interp_p1_f32  v2, v0, attr0.y                      // 000000000040: C8080100
;   v_interp_p1_f32  v3, v0, attr0.x                      // 000000000044: C80C0000
;   v_interp_p1_f32  v4, v0, attr0.z                      // 000000000048: C8100200
;   s_buffer_load_dwordx16  s[0:15], s[32:35], null       // 00000000004C: F4300010 FA000000
;   v_interp_p1_f32  v6, v0, attr1.y                      // 000000000054: C8180500
;   v_interp_p2_f32  v2, v1, attr0.y                      // 000000000058: C8090101
;   v_interp_p2_f32  v3, v1, attr0.x                      // 00000000005C: C80D0001
;   v_interp_p2_f32  v4, v1, attr0.z                      // 000000000060: C8110201
;   s_buffer_load_dwordx16  s[16:31], s[32:35], 0x000040  // 000000000064: F4300410 FA000040
;   v_interp_p1_f32  v7, v0, attr1.x                      // 00000000006C: C81C0400
;   v_interp_p2_f32  v6, v1, attr1.y                      // 000000000070: C8190501
;   v_interp_p1_f32  v8, v0, attr1.z                      // 000000000074: C8200600
;   v_interp_p1_f32  v11, v0, attr2.x                     // 000000000078: C82C0800
;   v_interp_p1_f32  v14, v0, attr2.y                     // 00000000007C: C8380900
;   v_interp_p2_f32  v7, v1, attr1.x                      // 000000000080: C81D0401
;   v_mul_legacy_f32  v9, v6, v6                          // 000000000084: 0E120D06
;   v_interp_p2_f32  v8, v1, attr1.z                      // 000000000088: C8210601
;   v_interp_p2_f32  v11, v1, attr2.x                     // 00000000008C: C82D0801
;   v_interp_p2_f32  v14, v1, attr2.y                     // 000000000090: C8390901
;   s_waitcnt     lgkmcnt(0)                              // 000000000094: BF8CC07F
;   v_sub_f32     v2, s45, v2                             // 000000000098: 0804042D
;   v_sub_f32     v3, s44, v3                             // 00000000009C: 0806062C
;   v_sub_f32     v4, s46, v4                             // 0000000000A0: 0808082E
;   v_fmac_f32    v9, v7, v7                              // 0000000000A4: 56120F07
;   s_buffer_load_dwordx16  s[32:47], s[32:35], 0x000080  // 0000000000A8: F4300810 FA000080
;   v_mul_legacy_f32  v5, v2, v2                          // 0000000000B0: 0E0A0502
;   v_fmac_f32    v9, v8, v8                              // 0000000000B4: 56121108
;   v_fmac_f32    v5, v3, v3                              // 0000000000B8: 560A0703
;   v_rsq_f32     v9, v9                                  // 0000000000BC: 7E125D09
;   v_fmac_f32    v5, v4, v4                              // 0000000000C0: 560A0904
;   v_rsq_f32     v5, v5                                  // 0000000000C4: 7E0A5D05
;   v_mul_legacy_f32  v7, v9, v7                          // 0000000000C8: 0E0E0F09
;   v_mul_legacy_f32  v6, v9, v6                          // 0000000000CC: 0E0C0D09
;   v_mul_legacy_f32  v8, v9, v8                          // 0000000000D0: 0E101109
;   v_mul_legacy_f32  v9, s12, v7                         // 0000000000D4: 0E120E0C
;   v_fma_f32     v10, v2, v5, -s13                       // 0000000000D8: D54B000A 80360B02
;   v_fma_f32     v15, v2, v5, -s17                       // 0000000000E0: D54B000F 80460B02
;   v_fma_f32     v12, v3, v5, -s12                       // 0000000000E8: D54B000C 80320B03
;   v_fma_f32     v16, v4, v5, -s14                       // 0000000000F0: D54B0010 803A0B04
;   v_fma_f32     v17, v3, v5, -s16                       // 0000000000F8: D54B0011 80420B03
;   v_mul_legacy_f32  v13, v10, v10                       // 000000000100: 0E1A150A
;   v_mul_legacy_f32  v19, v15, v15                       // 000000000104: 0E261F0F
;   v_fma_f32     v2, v2, v5, -s21                        // 000000000108: D54B0002 80560B02
;   v_fma_f32     v22, v3, v5, -s20                       // 000000000110: D54B0016 80520B03
;   v_fma_f32     v18, v4, v5, -s18                       // 000000000118: D54B0012 804A0B04
;   v_fmac_f32    v13, v12, v12                           // 000000000120: 561A190C
;   v_fmac_f32    v19, v17, v17                           // 000000000124: 56262311
;   v_fma_f32     v4, v4, v5, -s22                        // 000000000128: D54B0004 805A0B04
;   v_mul_legacy_f32  v5, v2, v2                          // 000000000130: 0E0A0502
;   v_mul_legacy_f32  v12, v12, v7                        // 000000000134: 0E180F0C
;   v_fmac_f32    v13, v16, v16                           // 000000000138: 561A2110
;   v_fmac_f32    v19, v18, v18                           // 00000000013C: 56262512
;   v_fma_f32     v9, -s13, v6, -v9                       // 000000000140: D54B0009 A4260C0D
;   v_fmac_f32    v5, v22, v22                            // 000000000148: 560A2D16
;   v_mul_legacy_f32  v17, v17, v7                        // 00000000014C: 0E220F11
;   v_rsq_f32     v13, v13                                // 000000000150: 7E1A5D0D
;   v_mul_legacy_f32  v3, v22, v7                         // 000000000154: 0E060F16
;   v_fmac_f32    v9, -s14, v8                            // 000000000158: D52B0009 2002100E
;   v_fmac_f32    v5, v4, v4                              // 000000000160: 560A0904
;   v_rsq_f32     v20, v19                                // 000000000164: 7E285D13
;   v_interp_p1_f32  v19, v0, attr2.z                     // 000000000168: C84C0A00
;   v_cmp_gt_f32  vcc, 0, v9                              // 00000000016C: 7C081280
;   v_rsq_f32     v5, v5                                  // 000000000170: 7E0A5D05
;   v_mul_legacy_f32  v23, v13, v10                       // 000000000174: 0E2E150D
;   v_mul_legacy_f32  v12, v12, v13                       // 000000000178: 0E181B0C
;   v_mul_legacy_f32  v21, v13, v16                       // 00000000017C: 0E2A210D
;   v_mul_legacy_f32  v13, s16, v7                        // 000000000180: 0E1A0E10
;   v_mul_legacy_f32  v7, s20, v7                         // 000000000184: 0E0E0E14
;   v_mul_legacy_f32  v15, v20, v15                       // 000000000188: 0E1E1F14
;   v_mul_legacy_f32  v17, v17, v20                       // 00000000018C: 0E222911
;   v_fmac_f32    v12, v23, v6                            // 000000000190: 56180D17
;   v_fma_f32     v13, -s17, v6, -v13                     // 000000000194: D54B000D A4360C11
;   v_fma_f32     v7, -s21, v6, -v7                       // 00000000019C: D54B0007 A41E0C15
;   v_mul_legacy_f32  v18, v20, v18                       // 0000000001A4: 0E242514
;   v_fmac_f32    v17, v15, v6                            // 0000000001A8: 56220D0F
;   v_mul_legacy_f32  v16, v5, v2                         // 0000000001AC: 0E200505
;   v_mul_legacy_f32  v3, v3, v5                          // 0000000001B0: 0E060B03
;   v_fmac_f32    v12, v21, v8                            // 0000000001B4: 56181115
;   v_fmac_f32    v13, -s18, v8                           // 0000000001B8: D52B000D 20021012
;   v_cndmask_b32  v15, 1.0, 0, vcc                       // 0000000001C0: D501000F 01A900F2
;   v_fmac_f32    v7, -s22, v8                            // 0000000001C8: D52B0007 20021016
;   v_mul_legacy_f32  v22, v5, v4                         // 0000000001D0: 0E2C0905
;   v_fmac_f32    v3, v16, v6                             // 0000000001D4: 56060D10
;   v_max_f32     v2, 0, v12                              // 0000000001D8: 20041880
;   v_fmac_f32    v17, v18, v8                            // 0000000001DC: 56221112
;   v_cmp_gt_f32  vcc, 0, v13                             // 0000000001E0: 7C081A80
;   v_interp_p1_f32  v10, v0, attr2.w                     // 0000000001E4: C8280B00
;   v_fmac_f32    v3, v22, v8                             // 0000000001E8: 56061116
;   v_mul_legacy_f32  v2, v2, v15                         // 0000000001EC: 0E041F02
;   v_max_f32     v4, 0, v17                              // 0000000001F0: 20082280
;   v_cndmask_b32  v23, 1.0, 0, vcc                       // 0000000001F4: D5010017 01A900F2
;   v_cmp_gt_f32  vcc, 0, v7                              // 0000000001FC: 7C080E80
;   v_max_f32     v3, 0, v3                               // 000000000200: 20060680
;   v_log_f32     v2, v2                                  // 000000000204: 7E044F02
;   v_mul_legacy_f32  v8, v15, v9                         // 000000000208: 0E10130F
;   v_mul_legacy_f32  v4, v4, v23                         // 00000000020C: 0E082F04
;   v_cndmask_b32  v6, 1.0, 0, vcc                        // 000000000210: D5010006 01A900F2
;   v_mul_legacy_f32  v5, v23, v13                        // 000000000218: 0E0A1B17
;   v_interp_p2_f32  v10, v1, attr2.w                     // 00000000021C: C8290B01
;   v_mul_legacy_f32  v12, s24, v8                        // 000000000220: 0E181018
;   v_log_f32     v4, v4                                  // 000000000224: 7E084F04
;   v_mul_legacy_f32  v3, v3, v6                          // 000000000228: 0E060D03
;   v_mul_legacy_f32  v15, s25, v8                        // 00000000022C: 0E1E1019
;   v_mul_legacy_f32  v2, s11, v2                         // 000000000230: 0E04040B
;   v_mul_legacy_f32  v8, s26, v8                         // 000000000234: 0E10101A
;   v_mul_legacy_f32  v6, v6, v7                          // 000000000238: 0E0C0F06
;   v_log_f32     v3, v3                                  // 00000000023C: 7E064F03
;   v_fmac_f32    v12, s28, v5                            // 000000000240: 56180A1C
;   v_fmac_f32    v15, s29, v5                            // 000000000244: 561E0A1D
;   v_fmac_f32    v8, s30, v5                             // 000000000248: 56100A1E
;   v_mul_legacy_f32  v4, s11, v4                         // 00000000024C: 0E08080B
;   v_exp_f32     v2, v2                                  // 000000000250: 7E044B02
;   s_waitcnt     lgkmcnt(0)                              // 000000000254: BF8CC07F
;   v_fmac_f32    v12, s32, v6                            // 000000000258: 56180C20
;   v_fmac_f32    v15, s33, v6                            // 00000000025C: 561E0C21
;   v_fmac_f32    v8, s34, v6                             // 000000000260: 56100C22
;   v_interp_p2_f32  v19, v1, attr2.z                     // 000000000264: C84D0A01
;   v_exp_f32     v4, v4                                  // 000000000268: 7E084B04
;   v_mul_legacy_f32  v3, s11, v3                         // 00000000026C: 0E06060B
;   v_fma_f32     v5, s0, v12, s4                         // 000000000270: D54B0005 00121800
;   v_fma_f32     v12, s1, v15, s5                        // 000000000278: D54B000C 00161E01
;   v_interp_p1_f32  v0, v0, attr0.w                      // 000000000280: C8000300
;   v_mul_legacy_f32  v2, v2, v9                          // 000000000284: 0E041302
;   v_exp_f32     v18, v3                                 // 000000000288: 7E244B03
;   v_mul_legacy_f32  v5, v5, v11                         // 00000000028C: 0E0A1705
;   v_interp_p2_f32  v0, v1, attr0.w                      // 000000000290: C8010301
;   v_mul_legacy_f32  v4, v4, v13                         // 000000000294: 0E081B04
;   v_mul_legacy_f32  v13, s36, v2                        // 000000000298: 0E1A0424
;   v_mul_legacy_f32  v9, s37, v2                         // 00000000029C: 0E120425
;   v_mul_legacy_f32  v17, s38, v2                        // 0000000002A0: 0E220426
;   v_mul_legacy_f32  v3, v18, v7                         // 0000000002A4: 0E060F12
;   v_fmac_f32    v13, s40, v4                            // 0000000002A8: 561A0828
;   v_fmac_f32    v9, s41, v4                             // 0000000002AC: 56120829
;   v_fmac_f32    v17, s42, v4                            // 0000000002B0: 5622082A
;   v_fma_f32     v4, s2, v8, s6                          // 0000000002B4: D54B0004 001A1002
;   v_fmac_f32    v13, s44, v3                            // 0000000002BC: 561A062C
;   v_fmac_f32    v9, s45, v3                             // 0000000002C0: 5612062D
;   v_fmac_f32    v17, s46, v3                            // 0000000002C4: 5622062E
;   v_mul_legacy_f32  v3, v12, v14                        // 0000000002C8: 0E061D0C
;   v_mul_legacy_f32  v4, v4, v19                         // 0000000002CC: 0E082704
;   v_mul_legacy_f32  v6, v13, v10                        // 0000000002D0: 0E0C150D
;   v_mul_legacy_f32  v14, v9, v10                        // 0000000002D4: 0E1C1509
;   v_mul_legacy_f32  v2, v17, v10                        // 0000000002D8: 0E041511
;   v_fmac_f32    v5, s8, v6                              // 0000000002DC: 560A0C08
;   v_fmac_f32    v3, s9, v14                             // 0000000002E0: 56061C09
;   v_fmac_f32    v4, s10, v2                             // 0000000002E4: 5608040A
;   v_fma_f32     v7, s48, v10, -v5                       // 0000000002E8: D54B0007 84161430
;   v_fma_f32     v2, s49, v10, -v3                       // 0000000002F0: D54B0002 840E1431
;   v_fma_f32     v6, s50, v10, -v4                       // 0000000002F8: D54B0006 84121432
;   v_fmac_f32    v5, v7, v0                              // 000000000300: 560A0107
;   v_fmac_f32    v3, v2, v0                              // 000000000304: 56060102
;   v_fmac_f32    v4, v6, v0                              // 000000000308: 56080106
;   s_nop         0x0000                                  // 00000000030C: BF800000
;   s_nop         0x0000                                  // 000000000310: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v5, v3                       // 000000000314: 5E000705
;   v_cvt_pkrtz_f16_f32  v1, v4, v10                      // 000000000318: 5E021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 00000000031C: F8001C0F 00000100
;   s_endpgm                                              // 000000000324: BF810000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 10
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 1
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 40
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSBasicPixelLighting)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 15
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 3 {
;     num_interp: 3
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 195
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x5,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, off, off, off done vm         // 000000000010: F8001801 00000005
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x305,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v3, off, off done vm          // 000000000010: F8001803 00000305
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xa05,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v10, off, off done vm         // 000000000010: F8001803 00000A05
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000705,
;        0x5e021504,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v5, v3                       // 000000000008: 5E000705
;   v_cvt_pkrtz_f16_f32  v1, v4, v10                      // 00000000000C: 5E021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20705,
;        0xd7690001,
;        0x21504,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v5, v3                      // 000000000000: D7690000 00020705
;   v_cvt_pknorm_u16_f32  v1, v4, v10                     // 000000000008: D7690001 00021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20705,
;        0xd7680001,
;        0x21504,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v5, v3                      // 000000000000: D7680000 00020705
;   v_cvt_pknorm_i16_f32  v1, v4, v10                     // 000000000008: D7680001 00021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20705,
;        0xd76a0001,
;        0x21504,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v5, v3                          // 000000000000: D76A0000 00020705
;   v_cvt_pk_u16_u32  v1, v4, v10                         // 000000000008: D76A0001 00021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20705,
;        0xd76b0001,
;        0x21504,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v5, v3                          // 000000000000: D76B0000 00020705
;   v_cvt_pk_i16_i32  v1, v4, v10                         // 000000000008: D76B0001 00021504
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0xa040305,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v5, v3, v4, v10 done vm           // 000000000010: F800180F 0A040305
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=54,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:149,SAlu:11,VMem:0,SMem:4,LDS:0,WaitCntOnVMem:0,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char BasicEffect_PSBasicPixelLighting[] = {
  0x44, 0x58, 0x42, 0x43, 0x66, 0x5d, 0xc6, 0xdd, 0xb4, 0x6e, 0x32, 0x68,
  0xc7, 0xb9, 0x5a, 0x05, 0x2e, 0x66, 0x3a, 0x7e, 0x01, 0x00, 0x00, 0x00,
  0xfc, 0x13, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00,
  0x20, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0xec, 0x02, 0x00, 0x00,
  0x08, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x78, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65,
  0x74, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x0c, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x03,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x50, 0x53, 0x42,
  0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x30, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x4c, 0x44, 0x4e, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63,
  0x74, 0x5f, 0x50, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x78,
  0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x37, 0x03, 0x13, 0xad, 0x8a, 0x4b, 0xb7, 0x28,
  0x21, 0x43, 0xe1, 0x74, 0xca, 0x4c, 0x5f, 0xde, 0x44, 0x58, 0x49, 0x4c,
  0xec, 0x10, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x3b, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x88, 0x0c, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xa0, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x14, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x24, 0x0d, 0x00, 0x00,
  0xb7, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xdc, 0x10, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x88, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x1f, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x2e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x88, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3, 0x30, 0x0c, 0xa4, 0x94,
  0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3, 0x40, 0xce, 0x51, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x3e, 0xb7, 0x51, 0xc5, 0x4a, 0x4c, 0x7e,
  0x71, 0xdb, 0x88, 0x18, 0x86, 0x61, 0xa0, 0xe2, 0x9e, 0xe1, 0xf2, 0x27,
  0xec, 0x21, 0x24, 0x3f, 0x04, 0x9a, 0x61, 0x21, 0x50, 0x10, 0x15, 0x02,
  0x22, 0x24, 0x82, 0xa6, 0x52, 0x0c, 0xc4, 0x30, 0x0c, 0x54, 0xcd, 0x11,
  0x04, 0xc5, 0x90, 0x88, 0x82, 0x20, 0x2e, 0xc2, 0x06, 0x02, 0x86, 0x11,
  0x88, 0x61, 0x18, 0x61, 0x18, 0x72, 0x80, 0x4b, 0x82, 0xed, 0xaa, 0xc3,
  0x91, 0xa6, 0x05, 0xc0, 0x1c, 0x6a, 0xf2, 0x53, 0x20, 0x02, 0x18, 0x62,
  0x22, 0x22, 0x09, 0x35, 0x1b, 0xc7, 0x0d, 0x5d, 0xd7, 0x71, 0xdc, 0xe6,
  0x75, 0x1e, 0x7d, 0xe9, 0x40, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xc1, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x0b, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x80, 0x0d, 0xca, 0xa0, 0x3c,
  0xca, 0xa1, 0x08, 0xa8, 0x28, 0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32,
  0x28, 0x10, 0x02, 0x67, 0x00, 0x28, 0x1c, 0xcb, 0x61, 0x88, 0xe3, 0x38,
  0x8e, 0xe3, 0x38, 0x80, 0x40, 0x20, 0x1e, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x72, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x24, 0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x58, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x30,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x60, 0x80, 0x11, 0x98, 0x20, 0x10,
  0xcd, 0x06, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d,
  0x20, 0x00, 0x40, 0x02, 0x26, 0x08, 0x61, 0x90, 0x6d, 0x08, 0xa8, 0x09,
  0x82, 0x00, 0x90, 0x82, 0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0x83, 0x4a,
  0xc3, 0x2b, 0x63, 0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0x23,
  0x42, 0x55, 0x84, 0x35, 0xf4, 0xf4, 0x24, 0x45, 0x34, 0x41, 0x28, 0xa4,
  0x09, 0x42, 0x31, 0x6d, 0x08, 0x8e, 0x09, 0x42, 0x41, 0x4d, 0x10, 0x8a,
  0x6a, 0x82, 0x40, 0x38, 0x13, 0x04, 0xe2, 0xd9, 0x20, 0x78, 0xdf, 0x86,
  0xe5, 0xc0, 0x32, 0x6d, 0xe3, 0x8c, 0xee, 0xd0, 0xc0, 0x60, 0x43, 0x60,
  0x4c, 0x10, 0x0a, 0x6b, 0x82, 0x40, 0x40, 0x1b, 0x04, 0x8f, 0x0c, 0x36,
  0x2c, 0x06, 0x96, 0x69, 0x62, 0xc0, 0x19, 0x63, 0x60, 0x68, 0x65, 0x30,
  0x41, 0x20, 0x22, 0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x1b, 0x96, 0x33,
  0x40, 0x83, 0x4c, 0xdb, 0x38, 0xa3, 0x3b, 0x03, 0x0d, 0x0c, 0x36, 0x0c,
  0x61, 0x60, 0x06, 0x69, 0xc0, 0x64, 0xca, 0xea, 0x8b, 0x2a, 0x4c, 0xee,
  0xac, 0x8c, 0x6e, 0x82, 0x50, 0x5c, 0x1b, 0x96, 0x63, 0x0d, 0x32, 0x36,
  0xd8, 0x34, 0xa3, 0x3b, 0x34, 0x30, 0xd8, 0x10, 0xb4, 0xc1, 0x86, 0x41,
  0x0d, 0xdc, 0x00, 0xd8, 0x50, 0x58, 0xd7, 0x1b, 0x4c, 0x40, 0x2b, 0x3c,
  0xb1, 0x37, 0x3c, 0x97, 0xb1, 0xb7, 0x36, 0xb8, 0x34, 0xb6, 0x32, 0x39,
  0x97, 0x37, 0x38, 0xba, 0xb4, 0x37, 0xb7, 0xb9, 0x29, 0x81, 0x50, 0x85,
  0x8d, 0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x40,
  0x54, 0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b,
  0x12, 0x1c, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4,
  0xa6, 0x04, 0x49, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32,
  0xb9, 0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x01, 0x53, 0x86, 0x0c, 0xcf,
  0x45, 0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0x20,
  0xd5, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2,
  0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x50, 0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc,
  0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0x6f,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x25, 0x00, 0x00, 0x00, 0x06, 0x40, 0xa5, 0xec, 0x06, 0x48, 0x88, 0x90,
  0x22, 0x17, 0xb1, 0x94, 0x88, 0x71, 0x4c, 0x48, 0x63, 0x58, 0x01, 0x34,
  0x5c, 0xbe, 0xf3, 0xf8, 0x01, 0xd2, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d,
  0x06, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54,
  0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb, 0x86, 0x20,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33,
  0x2c, 0x84, 0x0d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed,
  0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30,
  0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26, 0x50, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43, 0x4d, 0x7e, 0x71,
  0xdb, 0x76, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x44, 0x13, 0x02,
  0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f,
  0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x89, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x74, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x46, 0x71, 0x95, 0x5d, 0x21, 0xcc, 0x00, 0x94, 0x5b, 0xc9, 0x94, 0x42,
  0x19, 0x95, 0x4b, 0xa9, 0x94, 0x5c, 0x61, 0x94, 0x44, 0x51, 0x94, 0x05,
  0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x02, 0x30, 0x46, 0x00,
  0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0x9d, 0x01, 0xb2, 0x95, 0x41, 0x19, 0x54, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xbc, 0x41, 0xf4, 0x99, 0x41, 0x07, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x01, 0x07, 0x12, 0x18, 0x9c, 0x81,
  0x15, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x11, 0x07, 0x53, 0x18,
  0xa0, 0x81, 0x27, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x07,
  0x94, 0x18, 0xa4, 0x41, 0x37, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0x31, 0x07, 0xd5, 0x1a, 0xa8, 0x41, 0x18, 0x50, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xd0, 0x81, 0xc5, 0x06, 0x6b, 0xa0, 0x55, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xd4, 0xc1, 0xd5, 0x06, 0x6c, 0x20, 0x06,
  0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76, 0x80, 0xb5, 0x41,
  0x1b, 0x90, 0xc1, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1d,
  0x64, 0x6e, 0xe0, 0x06, 0x1d, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x1e, 0x68, 0x6f, 0xf0, 0x06, 0x65, 0x90, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x91, 0x07, 0x1b, 0x1c, 0xc0, 0x01, 0x19, 0x68, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xd5, 0x41, 0xc7, 0x4c, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0x03, 0x12, 0x1f,
  0x1b, 0x90, 0xf8, 0xd8, 0x80, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0x94, 0x3f, 0x08, 0x83, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0xe6, 0x0f, 0xc2, 0x20, 0xb0, 0x22, 0x90, 0x8f,
  0x15, 0x82, 0x7c, 0xac, 0x18, 0xe4, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08,
  0x06, 0x0a, 0x29, 0x98, 0xc1, 0x24, 0x45, 0x93, 0x14, 0x8d, 0x18, 0x18,
  0x00, 0x08, 0x82, 0x01, 0x43, 0x0a, 0x66, 0x10, 0x58, 0x50, 0xc9, 0xc7,
  0x84, 0x4a, 0x3e, 0x36, 0x54, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x83, 0xc9, 0x14, 0xdc, 0xa0, 0xf3, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0x49, 0x15, 0xe4, 0x20, 0x0c, 0x48, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x60,
  0x72, 0x05, 0x3b, 0x28, 0x83, 0x35, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0xa3, 0x96, 0xf8, 0x18, 0xb5, 0xc4, 0xc7,
  0xa8, 0x25, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0xe0, 0x82,
  0x1e, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x30, 0xb8, 0xa0, 0x07, 0x81, 0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x33,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x53, 0x2e, 0x84, 0x02, 0x1c, 0x80,
  0xc2, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xd4, 0x0b, 0xa5, 0x40, 0x07, 0xb3,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x85, 0x43, 0x2a, 0xe0, 0x41, 0x1f,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x9d,
  0xc1, 0x12, 0x1f, 0x3b, 0x83, 0x25, 0x3e, 0x76, 0x06, 0x4b, 0x7c, 0x46,
  0x0c, 0x16, 0x00, 0x04, 0xc1, 0x40, 0x59, 0x87, 0x56, 0x18, 0x84, 0x60,
  0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xd6, 0xa1, 0x15,
  0x02, 0x0b, 0x08, 0xf9, 0x98, 0x40, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0x26, 0x76, 0xa0, 0x85, 0x51, 0x78, 0x85, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x09, 0x1e, 0x70, 0xe1, 0x14, 0xd6, 0x61, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0x60, 0xa2, 0x07, 0x5e, 0x58, 0x85, 0x57, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0xd3, 0x83, 0x25, 0x3e, 0xa6,
  0x07, 0x4b, 0x7c, 0x4c, 0x0f, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00, 0x08,
  0x82, 0x81, 0xe2, 0x0f, 0xe0, 0x30, 0x08, 0xc1, 0x20, 0x04, 0x23, 0x06,
  0x06, 0x00, 0x82, 0x60, 0xc0, 0xf8, 0x03, 0x38, 0x04, 0x16, 0x10, 0xf2,
  0x31, 0x81, 0x90, 0x8f, 0xdd, 0xc2, 0x1d, 0xc4, 0xc7, 0x70, 0xe1, 0x0e,
  0xe2, 0x63, 0xb9, 0x60, 0x06, 0xf1, 0x31, 0x5d, 0x30, 0x83, 0xf8, 0xd8,
  0x2e, 0x54, 0xf1, 0x31, 0x5e, 0xa8, 0xe2, 0x63, 0xa2, 0xe0, 0x07, 0xf2,
  0x31, 0x5f, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x95,
  0x49, 0xc0, 0x03, 0x32, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x54, 0x27, 0x11, 0x0f, 0xc8, 0x28, 0x04, 0x66, 0x0a, 0x6f, 0x20, 0x1f,
  0x13, 0x87, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xa9,
  0x04, 0x3d, 0x28, 0xa7, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0xb5, 0x12, 0xf5, 0xa0, 0x9c, 0x42, 0x60, 0xaa, 0x00, 0x06, 0xf2, 0x31,
  0x73, 0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x95, 0x4b,
  0xe0, 0x03, 0xb3, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54,
  0x2f, 0x91, 0x0f, 0xcc, 0x2a, 0x04, 0xf6, 0x07, 0xae, 0x20, 0x1f, 0x0b,
  0xf8, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xc9, 0x04,
  0x3f, 0xf0, 0xc1, 0x2b, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0xcd, 0x44, 0x3f, 0xf0, 0xc1, 0x2b, 0x04, 0x06, 0x07, 0xb2, 0x20, 0x1f,
  0x0b, 0xda, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xd9,
  0x04, 0x48, 0xb4, 0xc1, 0x2c, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x50, 0xdd, 0x44, 0x48, 0xb4, 0xc1, 0x2c, 0x04, 0x16, 0x06, 0xb6, 0x20,
  0x1f, 0x0b, 0x3c, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa5,
  0x13, 0x24, 0xe1, 0xdd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd5, 0x4e, 0x94, 0x84, 0x77, 0x0b, 0xc1, 0x70, 0x44, 0x65, 0x0f, 0xc4,
  0x37, 0x1c, 0x21, 0xdd, 0x03, 0xf1, 0x0d, 0x47, 0x3c, 0xf8, 0x40, 0x7c,
  0xd3, 0x0d, 0xf9, 0xa0, 0x0f, 0xc3, 0x74, 0x83, 0x3e, 0xec, 0xc3, 0x30,
  0xdd, 0xb0, 0x0f, 0xfc, 0x30, 0xd8, 0xb0, 0xc9, 0xc7, 0x06, 0x4c, 0x3e,
  0x36, 0x54, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xc9, 0x2c,
  0x5c, 0xa2, 0x1f, 0x76, 0x62, 0x34, 0x21, 0x18, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xc0, 0x49, 0x0b, 0x95, 0xa0, 0x42, 0x62, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x1c, 0xb5, 0x58, 0x89, 0x48, 0x24, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xc0, 0x59, 0x0b, 0x96, 0x70, 0x46, 0xc2, 0x86, 0x45,
  0x3e, 0x36, 0x2c, 0xf2, 0xb1, 0x61, 0x91, 0xcf, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x30, 0x70, 0xf1, 0x12, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20,
  0x18, 0x30, 0x71, 0x01, 0x13, 0xc3, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x30, 0x72, 0x11, 0x13, 0x83, 0x0d, 0x8a, 0x7c, 0x6c, 0x58, 0xe4, 0x63,
  0x03, 0x23, 0x9f, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xec, 0x82,
  0x26, 0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xee, 0xa2, 0x26,
  0x86, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xf0, 0xc2, 0x26, 0x06,
  0x1b, 0xde, 0x40, 0x3e, 0x36, 0xb0, 0x81, 0x7c, 0x6c, 0x48, 0x03, 0xf9,
  0xd8, 0xf5, 0x0e, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4a,
  0x2f, 0xc8, 0xe2, 0xea, 0x85, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xaa, 0xbd, 0x28, 0x8b, 0x6b, 0x15, 0x02, 0xd3, 0xe2, 0x41, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xf5, 0xc5, 0x59, 0x68, 0xbf, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xe5, 0x17, 0x68, 0xa1, 0xb5,
  0x42, 0x60, 0xdd, 0x3c, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x2a, 0xd0, 0x50, 0x8b, 0x2e, 0x1c, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xa8, 0x42, 0x63, 0x2d, 0xba, 0x57, 0x08, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0x60, 0x1a, 0x8d, 0xb5, 0xd0, 0x89, 0xbf, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0x16, 0xf9, 0xd8,
  0x90, 0xc8, 0xc7, 0x86, 0x43, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x30, 0xa9, 0x86, 0x5c, 0x84, 0xc5, 0x69, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x1d, 0x03, 0x7c, 0xec, 0x18, 0xe0,
  0x63, 0xc7, 0x00, 0x1f, 0xd3, 0x44, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0xc5, 0xc6, 0x5e, 0x68, 0xf0, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x25, 0x1b, 0x7c, 0xa1, 0xf9, 0x42, 0x60, 0x1d,
  0x49, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2a, 0xda, 0xf0,
  0x8b, 0x4e, 0x1e, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x6a,
  0xe3, 0x2f, 0x3a, 0x70, 0x08, 0x0c, 0x0c, 0x4c, 0x42, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x50, 0xdd, 0x46, 0x68, 0x80, 0x01, 0x3d, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xe1, 0x86, 0x68, 0x80, 0x81,
  0x38, 0x04, 0xa3, 0x09, 0x74, 0x00, 0x8c, 0x26, 0xd4, 0x41, 0x30, 0x9a,
  0x60, 0x07, 0x82, 0x3d, 0x73, 0x21, 0x1f, 0x7b, 0xe6, 0x42, 0x3e, 0xf6,
  0xcc, 0x85, 0x7c, 0xac, 0x99, 0x0b, 0xf9, 0x58, 0x70, 0xc8, 0xc7, 0x98,
  0xba, 0x90, 0x8f, 0x05, 0x88, 0x7c, 0x6c, 0xb9, 0x0b, 0xf9, 0x58, 0x90,
  0xc8, 0xc7, 0x8a, 0x04, 0x3e, 0x46, 0x24, 0xf0, 0xb1, 0x21, 0x81, 0xcf,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xe9, 0x11, 0x1b, 0xa0, 0x31,
  0x1b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60,
  0x03, 0x68, 0xc8, 0xc7, 0x86, 0xd0, 0x90, 0x8f, 0x0d, 0xa2, 0x21, 0x1f,
  0x1b, 0x94, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x06, 0x25, 0x3e, 0x36, 0xfc,
  0x85, 0x7c, 0x6c, 0x00, 0x0d, 0xf9, 0xd8, 0x10, 0x1a, 0xf2, 0xb1, 0x01,
  0x82, 0x8f, 0x0d, 0x10, 0x7c, 0x6c, 0x80, 0xe0, 0x33, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x48, 0x7f, 0xf0, 0x46, 0x7d, 0xd4, 0x07, 0x7b, 0x0c,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xf4, 0x07, 0x6f, 0xd4, 0x47,
  0x7d, 0x90, 0x87, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0x7f,
  0xf0, 0x46, 0x7d, 0xd4, 0xc7, 0x7a, 0x04, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x80, 0xf4, 0x07, 0x6f, 0xd4, 0x47, 0x7d, 0xa4, 0x07, 0x6b, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0xa4, 0x54, 0xd6, 0x2b, 0x42, 0x70, 0x01, 0x65,
  0x6f, 0xd4, 0x97, 0x34, 0x25, 0xcd, 0x2a, 0xeb, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x98,
  0xcf, 0x6f, 0x1b, 0x45, 0x14, 0xc7, 0x67, 0x66, 0x67, 0xc7, 0xb3, 0xbf,
  0xde, 0xce, 0xae, 0x7f, 0x64, 0xb3, 0x71, 0x1c, 0xdb, 0x24, 0xc6, 0x69,
  0x9d, 0x10, 0x7a, 0x28, 0x3f, 0x4e, 0xa8, 0xa0, 0x1e, 0x70, 0xaa, 0x54,
  0x44, 0x9a, 0x43, 0x51, 0x5a, 0x50, 0x55, 0x35, 0x6e, 0x11, 0x17, 0x38,
  0x70, 0x88, 0x96, 0x45, 0xca, 0x01, 0x21, 0x0e, 0xfc, 0x07, 0x54, 0x90,
  0x0b, 0x12, 0x48, 0xdc, 0xe0, 0xe4, 0x04, 0x71, 0x19, 0x21, 0xae, 0x56,
  0x6f, 0x15, 0x1c, 0x39, 0x21, 0xa1, 0x1c, 0xaa, 0x0a, 0x11, 0x66, 0x37,
  0x8e, 0xea, 0xfe, 0x88, 0x12, 0x38, 0x59, 0xaa, 0xbf, 0xd2, 0xd3, 0x9b,
  0x37, 0xf3, 0xd9, 0xf9, 0xf5, 0x46, 0x96, 0x9e, 0x2f, 0xae, 0xaf, 0x5f,
  0xc2, 0x18, 0x21, 0x5e, 0x44, 0xb9, 0xd8, 0xa1, 0x43, 0x7f, 0xf6, 0xbf,
  0xbb, 0x77, 0x1a, 0xfb, 0xfe, 0x3f, 0xf2, 0x47, 0x46, 0x86, 0xdf, 0xbd,
  0x81, 0xfe, 0x9f, 0x8e, 0xe6, 0xb9, 0x0f, 0x87, 0xf1, 0x9e, 0x31, 0x3a,
  0x6a, 0x3f, 0xc1, 0xff, 0x18, 0x1e, 0xfa, 0x5f, 0x87, 0x1e, 0x0f, 0xcd,
  0xc4, 0x04, 0xed, 0x8d, 0x70, 0x11, 0x7a, 0xc7, 0xc0, 0x23, 0xf1, 0x6f,
  0x23, 0x7c, 0x7b, 0x64, 0x5d, 0x86, 0xfc, 0xac, 0x9b, 0x30, 0x5c, 0xd0,
  0x43, 0x98, 0x30, 0xe2, 0xeb, 0x23, 0x11, 0x82, 0x9e, 0x11, 0x65, 0xd7,
  0x5d, 0x1a, 0x69, 0x67, 0x07, 0x17, 0xda, 0xfc, 0x11, 0x26, 0x7b, 0x4b,
  0x3f, 0xe7, 0xad, 0x74, 0x77, 0xd4, 0xbe, 0x88, 0xd0, 0xfd, 0xa7, 0xcf,
  0xfa, 0x28, 0x87, 0x35, 0x67, 0x9e, 0x82, 0x33, 0x32, 0xce, 0x38, 0x25,
  0x67, 0x1f, 0xcf, 0x99, 0x05, 0x74, 0x95, 0x96, 0xc9, 0x55, 0xbf, 0xaa,
  0xf7, 0x87, 0x9f, 0xc6, 0xf5, 0xee, 0x9a, 0x05, 0xa2, 0x87, 0x7a, 0x77,
  0x35, 0x87, 0x8e, 0xe7, 0x36, 0x87, 0xdc, 0xe6, 0x09, 0xdc, 0xad, 0x21,
  0x77, 0xeb, 0x04, 0xee, 0xf6, 0x90, 0xbb, 0x7d, 0x02, 0xf7, 0xe8, 0x79,
  0xfd, 0xfc, 0x5e, 0xe8, 0x13, 0x27, 0x3e, 0xd0, 0x42, 0x13, 0x8d, 0x95,
  0x26, 0x39, 0x19, 0x3f, 0x4d, 0x72, 0x32, 0x7e, 0x9a, 0xe4, 0x64, 0xfc,
  0x34, 0xc9, 0xc9, 0xf8, 0x69, 0x92, 0x93, 0xf1, 0xd3, 0x24, 0x27, 0xe3,
  0xab, 0x97, 0x8c, 0x74, 0x50, 0x7c, 0xfb, 0xc0, 0xf8, 0xac, 0xfb, 0x43,
  0xbb, 0xf1, 0x7a, 0x3a, 0xf8, 0xfd, 0x8f, 0x7f, 0x8c, 0x5f, 0x56, 0xaf,
  0xdd, 0x33, 0xd0, 0x9d, 0x5d, 0xeb, 0xa0, 0xf1, 0x69, 0x56, 0xdd, 0x70,
  0xe3, 0x4e, 0xff, 0x27, 0xe3, 0xab, 0xfe, 0x81, 0xf1, 0x75, 0xff, 0xdb,
  0x35, 0x1c, 0xd8, 0xc6, 0xdf, 0x7d, 0xe1, 0x74, 0xf6, 0x75, 0xfd, 0xf8,
  0x00, 0x61, 0xae, 0x10, 0x72, 0x15, 0x22, 0x42, 0x09, 0xb4, 0xb2, 0x8f,
  0xb2, 0x3e, 0x33, 0x52, 0x18, 0x5b, 0x0a, 0x23, 0x4f, 0x61, 0x12, 0x28,
  0x41, 0x57, 0xf6, 0x5f, 0xcb, 0xfa, 0x69, 0x55, 0x61, 0x73, 0x5a, 0x21,
  0x56, 0x57, 0x88, 0x77, 0x14, 0xb2, 0x5e, 0x56, 0x98, 0xce, 0x2a, 0xe6,
  0x85, 0x80, 0x59, 0x43, 0x61, 0xbe, 0xa4, 0xb0, 0xf5, 0x8a, 0xfa, 0x78,
  0xef, 0xf3, 0xdd, 0x25, 0x4a, 0x79, 0x87, 0x31, 0xbe, 0xcc, 0x39, 0x2f,
  0xf8, 0xa1, 0x14, 0x7c, 0x65, 0x3f, 0xd5, 0x73, 0x10, 0xd3, 0x06, 0x1e,
  0x84, 0xd2, 0x28, 0xd8, 0xd2, 0xda, 0x08, 0x13, 0x6a, 0xd9, 0xd2, 0xdc,
  0xb0, 0x13, 0xcb, 0x07, 0xb0, 0x3c, 0x17, 0xac, 0x40, 0x80, 0x0b, 0x21,
  0xd8, 0xa8, 0x3b, 0x20, 0xce, 0xf9, 0xd4, 0xcf, 0xfd, 0xc5, 0xd4, 0xd5,
  0xde, 0x70, 0xce, 0xa5, 0x42, 0x7b, 0xea, 0xbc, 0x9a, 0x06, 0x79, 0x7c,
  0x21, 0xb5, 0xcb, 0x31, 0xf8, 0x73, 0x2d, 0x20, 0x39, 0x27, 0xd3, 0x4a,
  0xde, 0xff, 0x56, 0x1a, 0xe6, 0xdc, 0x9b, 0xa9, 0x3b, 0x1d, 0xcb, 0xe0,
  0xb9, 0x96, 0xa4, 0x79, 0x7c, 0x25, 0xcd, 0xd6, 0x77, 0xfd, 0x08, 0x44,
  0x23, 0x96, 0xe1, 0x42, 0x4b, 0x5a, 0xba, 0xdf, 0x73, 0x5b, 0x3b, 0x95,
  0x25, 0x5b, 0x06, 0x7e, 0x13, 0xbc, 0x8d, 0x38, 0xa9, 0xf8, 0x0c, 0x2c,
  0x74, 0x76, 0x00, 0x82, 0xd4, 0xb3, 0xfd, 0x15, 0x37, 0xda, 0x09, 0xb2,
  0x57, 0x55, 0x1a, 0xf2, 0xad, 0x6c, 0xaf, 0x5e, 0x79, 0x19, 0xdc, 0x99,
  0x08, 0xbc, 0xc6, 0x19, 0x10, 0x10, 0x43, 0x09, 0x00, 0x4a, 0x73, 0x35,
  0x08, 0x16, 0x9b, 0x30, 0xe5, 0x45, 0xd2, 0xd3, 0x73, 0x06, 0xee, 0xf9,
  0x9d, 0x82, 0xf6, 0x65, 0xb7, 0xb6, 0x53, 0x5a, 0x98, 0x07, 0xdf, 0x6b,
  0x4a, 0xd3, 0xac, 0x83, 0xe1, 0x30, 0x28, 0x07, 0x19, 0x73, 0x76, 0x10,
  0xea, 0xf9, 0x7d, 0x84, 0x07, 0x7f, 0xa1, 0x6f, 0x70, 0x41, 0xc7, 0x15,
  0x1d, 0x9b, 0x56, 0x07, 0x84, 0xc7, 0x64, 0x1a, 0xd1, 0x7a, 0x18, 0x34,
  0x65, 0x1a, 0xf3, 0x2d, 0xe4, 0xb4, 0x55, 0x25, 0x60, 0x92, 0xcc, 0x51,
  0x48, 0x9b, 0xbc, 0x3e, 0x35, 0xfc, 0x26, 0x05, 0xbe, 0x95, 0x32, 0x56,
  0x27, 0x6b, 0x34, 0xf1, 0x8b, 0x02, 0xe8, 0x0b, 0x1c, 0xd8, 0x70, 0x6c,
  0x6a, 0xc6, 0x06, 0xec, 0x2c, 0xaa, 0x48, 0x44, 0x40, 0xd7, 0x78, 0x62,
  0x78, 0x0c, 0xa6, 0x45, 0x0d, 0x1c, 0x4a, 0x21, 0x16, 0x02, 0x98, 0xef,
  0x82, 0xb1, 0xc6, 0x92, 0xaa, 0x1d, 0xc9, 0x59, 0xbb, 0x26, 0x6b, 0xb6,
  0x90, 0x0e, 0xe7, 0x40, 0xba, 0x34, 0xc9, 0xf2, 0x57, 0x77, 0x23, 0xd9,
  0x70, 0x6b, 0xb2, 0xe9, 0x0a, 0x89, 0xed, 0x4b, 0x8a, 0x76, 0x79, 0xe2,
  0x30, 0x06, 0xa6, 0x3e, 0x13, 0x8a, 0x42, 0x94, 0xe5, 0x03, 0xd7, 0x2a,
  0x59, 0x11, 0xad, 0x48, 0x91, 0x82, 0xd1, 0x9d, 0x4f, 0xcc, 0x29, 0xbd,
  0xa6, 0x81, 0x15, 0x9d, 0xe1, 0x30, 0x4f, 0x63, 0x58, 0xa0, 0x21, 0xb4,
  0x68, 0x13, 0x42, 0x7d, 0x9f, 0x6d, 0x1e, 0xcb, 0x45, 0x1e, 0xca, 0x33,
  0xbc, 0x99, 0xe7, 0x82, 0x88, 0x18, 0x75, 0x58, 0x2c, 0x97, 0x58, 0x28,
  0x97, 0x59, 0x53, 0xba, 0xb3, 0x0c, 0xe8, 0xf3, 0x1c, 0xbc, 0xb2, 0x7e,
  0x03, 0xe5, 0x2a, 0x04, 0x65, 0x0a, 0xdc, 0xd5, 0x6f, 0xa4, 0xca, 0xa4,
  0x4d, 0xb9, 0xcc, 0xee, 0x72, 0xa5, 0x54, 0xd9, 0xce, 0xf2, 0xfc, 0x62,
  0x09, 0xb6, 0x99, 0xf6, 0xe7, 0x4a, 0xe1, 0x76, 0x01, 0xdb, 0x92, 0x60,
  0x26, 0x19, 0xe6, 0xf2, 0xf8, 0x7a, 0xf8, 0x13, 0xdd, 0xff, 0xe5, 0x58,
  0xda, 0x51, 0x39, 0x7c, 0xf4, 0x07, 0x0c, 0xcf, 0xda, 0x8f, 0xd5, 0xc8,
  0x94, 0x3f, 0x6c, 0x3f, 0xfc, 0x2d, 0x2e, 0xa1, 0xcb, 0xeb, 0x17, 0xde,
  0xfd, 0xa0, 0x77, 0xfd, 0x72, 0xef, 0xa3, 0x1b, 0xef, 0xad, 0xf6, 0x6e,
  0x6e, 0x7e, 0xd8, 0x7b, 0xff, 0xe6, 0xbf, 0x6a, 0xaa, 0x89, 0x1c, 0x00,
  0x37, 0x03, 0x13, 0xad, 0x8a, 0x4b, 0xb7, 0x28, 0x21, 0x43, 0xe1, 0x74,
  0xca, 0x4c, 0x5f, 0xde
};
