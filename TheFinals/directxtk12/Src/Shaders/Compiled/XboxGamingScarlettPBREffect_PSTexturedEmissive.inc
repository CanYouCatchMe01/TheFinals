#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_PSTexturedEmissive.pdb
; shader hash: 6d220d681b01e4c926f38168deaf6318
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSTexturedEmissive
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32          2d      T1             t1     1
;                                   texture     f32          2d      T2             t2     1
;                                   texture     f32          2d      T3             t3     1
;                                   texture     f32        cube      T4             t4     1
;                                   texture     f32        cube      T5             t5     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10 }
;   output 3 depends on inputs: { 0, 1 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 3> >" = type { <3 x float> }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%struct.SamplerState = type { i32 }

define void @PSTexturedEmissive() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 5, i32 5, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 4, i32 4, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 3, i32 3, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %19 = extractvalue %dx.types.CBufRet.f32 %18, 0
  %20 = extractvalue %dx.types.CBufRet.f32 %18, 1
  %21 = extractvalue %dx.types.CBufRet.f32 %18, 2
  %22 = fsub fast float %19, %13
  %23 = fsub fast float %20, %14
  %24 = fsub fast float %21, %15
  %25 = call float @dx.op.dot3.f32(i32 55, float %22, float %23, float %24, float %22, float %23, float %24)  ; Dot3(ax,ay,az,bx,by,bz)
  %26 = call float @dx.op.unary.f32(i32 25, float %25)  ; Rsqrt(value)
  %27 = fmul fast float %22, %26
  %28 = fmul fast float %23, %26
  %29 = fmul fast float %24, %26
  %30 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %5, %dx.types.Handle %8, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 0
  %32 = extractvalue %dx.types.ResRet.f32 %30, 1
  %33 = fmul fast float %31, 2.000000e+00
  %34 = fmul fast float %32, 2.000000e+00
  %35 = fadd fast float %33, -1.000000e+00
  %36 = fadd fast float %34, -1.000000e+00
  %37 = call float @dx.op.dot2.f32(i32 54, float %35, float %36, float %35, float %36)  ; Dot2(ax,ay,bx,by)
  %38 = fsub fast float 1.000000e+00, %37
  %39 = call float @dx.op.unary.f32(i32 24, float %38)  ; Sqrt(value)
  %40 = call float @dx.op.unary.f32(i32 83, float %13)  ; DerivCoarseX(value)
  %41 = call float @dx.op.unary.f32(i32 83, float %14)  ; DerivCoarseX(value)
  %42 = call float @dx.op.unary.f32(i32 83, float %15)  ; DerivCoarseX(value)
  %43 = call float @dx.op.unary.f32(i32 84, float %13)  ; DerivCoarseY(value)
  %44 = call float @dx.op.unary.f32(i32 84, float %14)  ; DerivCoarseY(value)
  %45 = call float @dx.op.unary.f32(i32 84, float %15)  ; DerivCoarseY(value)
  %46 = call float @dx.op.unary.f32(i32 83, float %16)  ; DerivCoarseX(value)
  %47 = call float @dx.op.unary.f32(i32 83, float %17)  ; DerivCoarseX(value)
  %48 = call float @dx.op.unary.f32(i32 84, float %16)  ; DerivCoarseY(value)
  %49 = call float @dx.op.unary.f32(i32 84, float %17)  ; DerivCoarseY(value)
  %50 = fmul fast float %45, %41
  %51 = fmul fast float %44, %42
  %52 = fsub fast float %50, %51
  %53 = fmul fast float %43, %42
  %54 = fmul fast float %45, %40
  %55 = fsub fast float %53, %54
  %56 = fmul fast float %44, %40
  %57 = fmul fast float %43, %41
  %58 = fsub fast float %56, %57
  %59 = fmul fast float %58, %44
  %60 = fmul fast float %55, %45
  %61 = fsub fast float %59, %60
  %62 = fmul fast float %52, %45
  %63 = fmul fast float %58, %43
  %64 = fsub fast float %62, %63
  %65 = fmul fast float %55, %43
  %66 = fmul fast float %52, %44
  %67 = fsub fast float %65, %66
  %68 = fmul fast float %55, %42
  %69 = fmul fast float %58, %41
  %70 = fsub fast float %68, %69
  %71 = fmul fast float %58, %40
  %72 = fmul fast float %52, %42
  %73 = fsub fast float %71, %72
  %74 = fmul fast float %52, %41
  %75 = fmul fast float %55, %40
  %76 = fsub fast float %74, %75
  %77 = fmul fast float %61, %46
  %78 = call float @dx.op.tertiary.f32(i32 46, float %48, float %70, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %64, %46
  %80 = call float @dx.op.tertiary.f32(i32 46, float %48, float %73, float %79)  ; FMad(a,b,c)
  %81 = fmul fast float %67, %46
  %82 = call float @dx.op.tertiary.f32(i32 46, float %48, float %76, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.dot3.f32(i32 55, float %78, float %80, float %82, float %78, float %80, float %82)  ; Dot3(ax,ay,az,bx,by,bz)
  %84 = call float @dx.op.unary.f32(i32 25, float %83)  ; Rsqrt(value)
  %85 = fmul fast float %61, %47
  %86 = call float @dx.op.tertiary.f32(i32 46, float %49, float %70, float %85)  ; FMad(a,b,c)
  %87 = fmul fast float %64, %47
  %88 = call float @dx.op.tertiary.f32(i32 46, float %49, float %73, float %87)  ; FMad(a,b,c)
  %89 = fmul fast float %67, %47
  %90 = call float @dx.op.tertiary.f32(i32 46, float %49, float %76, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.dot3.f32(i32 55, float %86, float %88, float %90, float %86, float %88, float %90)  ; Dot3(ax,ay,az,bx,by,bz)
  %92 = call float @dx.op.unary.f32(i32 25, float %91)  ; Rsqrt(value)
  %93 = fmul fast float %92, %86
  %94 = fmul fast float %92, %88
  %95 = fmul fast float %92, %90
  %96 = fmul fast float %78, %35
  %97 = fmul fast float %96, %84
  %98 = call float @dx.op.tertiary.f32(i32 46, float %36, float %93, float %97)  ; FMad(a,b,c)
  %99 = call float @dx.op.tertiary.f32(i32 46, float %39, float %10, float %98)  ; FMad(a,b,c)
  %100 = fmul fast float %80, %35
  %101 = fmul fast float %100, %84
  %102 = call float @dx.op.tertiary.f32(i32 46, float %36, float %94, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %39, float %11, float %102)  ; FMad(a,b,c)
  %104 = fmul fast float %82, %35
  %105 = fmul fast float %104, %84
  %106 = call float @dx.op.tertiary.f32(i32 46, float %36, float %95, float %105)  ; FMad(a,b,c)
  %107 = call float @dx.op.tertiary.f32(i32 46, float %39, float %12, float %106)  ; FMad(a,b,c)
  %108 = call float @dx.op.dot3.f32(i32 55, float %99, float %103, float %107, float %99, float %103, float %107)  ; Dot3(ax,ay,az,bx,by,bz)
  %109 = call float @dx.op.unary.f32(i32 25, float %108)  ; Rsqrt(value)
  %110 = fmul fast float %109, %99
  %111 = fmul fast float %109, %103
  %112 = fmul fast float %109, %107
  %113 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %6, %dx.types.Handle %8, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %114 = extractvalue %dx.types.ResRet.f32 %113, 0
  %115 = extractvalue %dx.types.ResRet.f32 %113, 1
  %116 = extractvalue %dx.types.ResRet.f32 %113, 2
  %117 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %4, %dx.types.Handle %8, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %118 = extractvalue %dx.types.ResRet.f32 %117, 0
  %119 = extractvalue %dx.types.ResRet.f32 %117, 1
  %120 = extractvalue %dx.types.ResRet.f32 %117, 2
  %121 = call float @dx.op.dot3.f32(i32 55, float %110, float %111, float %112, float %27, float %28, float %29)  ; Dot3(ax,ay,az,bx,by,bz)
  %122 = call float @dx.op.unary.f32(i32 7, float %121)  ; Saturate(value)
  %123 = fmul fast float %119, %119
  %124 = fmul fast float %120, %114
  %125 = fmul fast float %120, %115
  %126 = fmul fast float %120, %116
  %127 = fsub fast float %114, %124
  %128 = fsub fast float %115, %125
  %129 = fsub fast float %116, %126
  %130 = fmul fast float %127, %118
  %131 = fmul fast float %128, %118
  %132 = fmul fast float %129, %118
  %133 = fadd fast float %114, 0xBFA47AE140000000
  %134 = fadd fast float %115, 0xBFA47AE140000000
  %135 = fadd fast float %116, 0xBFA47AE140000000
  %136 = fmul fast float %120, %133
  %137 = fmul fast float %120, %134
  %138 = fmul fast float %120, %135
  %139 = fadd fast float %136, 0x3FA47AE140000000
  %140 = fadd fast float %137, 0x3FA47AE140000000
  %141 = fadd fast float %138, 0x3FA47AE140000000
  %142 = fmul fast float %139, %118
  %143 = fmul fast float %140, %118
  %144 = fmul fast float %141, %118
  br label %145

; <label>:145                                     ; preds = %145, %0
  %146 = phi float [ 0.000000e+00, %0 ], [ %242, %145 ]
  %147 = phi float [ 0.000000e+00, %0 ], [ %243, %145 ]
  %148 = phi float [ 0.000000e+00, %0 ], [ %244, %145 ]
  %149 = phi i32 [ 0, %0 ], [ %245, %145 ]
  %150 = add nuw nsw i32 %149, 16
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 %150)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = fsub fast float -0.000000e+00, %152
  %156 = fsub fast float -0.000000e+00, %153
  %157 = fsub fast float -0.000000e+00, %154
  %158 = call float @dx.op.dot3.f32(i32 55, float %155, float %156, float %157, float %155, float %156, float %157)  ; Dot3(ax,ay,az,bx,by,bz)
  %159 = call float @dx.op.unary.f32(i32 25, float %158)  ; Rsqrt(value)
  %160 = fmul fast float %159, %155
  %161 = fmul fast float %159, %156
  %162 = fmul fast float %159, %157
  %163 = fadd fast float %160, %27
  %164 = fadd fast float %161, %28
  %165 = fadd fast float %162, %29
  %166 = call float @dx.op.dot3.f32(i32 55, float %163, float %164, float %165, float %163, float %164, float %165)  ; Dot3(ax,ay,az,bx,by,bz)
  %167 = call float @dx.op.unary.f32(i32 25, float %166)  ; Rsqrt(value)
  %168 = fmul fast float %163, %167
  %169 = fmul fast float %164, %167
  %170 = fmul fast float %165, %167
  %171 = call float @dx.op.dot3.f32(i32 55, float %110, float %111, float %112, float %160, float %161, float %162)  ; Dot3(ax,ay,az,bx,by,bz)
  %172 = call float @dx.op.unary.f32(i32 7, float %171)  ; Saturate(value)
  %173 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %168, float %169, float %170)  ; Dot3(ax,ay,az,bx,by,bz)
  %174 = call float @dx.op.unary.f32(i32 7, float %173)  ; Saturate(value)
  %175 = call float @dx.op.dot3.f32(i32 55, float %110, float %111, float %112, float %168, float %169, float %170)  ; Dot3(ax,ay,az,bx,by,bz)
  %176 = call float @dx.op.unary.f32(i32 7, float %175)  ; Saturate(value)
  %177 = fmul fast float %119, 2.000000e+00
  %178 = fmul fast float %174, %174
  %179 = fmul fast float %178, %177
  %180 = fadd fast float %179, -5.000000e-01
  %181 = fsub fast float 1.000000e+00, %172
  %182 = fmul fast float %181, %181
  %183 = fmul fast float %182, %182
  %184 = fmul fast float %183, %181
  %185 = fmul fast float %184, %180
  %186 = fadd fast float %185, 1.000000e+00
  %187 = fsub fast float 1.000000e+00, %122
  %188 = fmul fast float %187, %187
  %189 = fmul fast float %188, %188
  %190 = fmul fast float %189, %187
  %191 = fmul fast float %190, %180
  %192 = fadd fast float %191, 1.000000e+00
  %193 = fmul fast float %186, %192
  %194 = fmul fast float %123, %123
  %195 = fadd fast float %194, -1.000000e+00
  %196 = fmul fast float %176, %176
  %197 = fmul fast float %196, %195
  %198 = fadd fast float %197, 1.000000e+00
  %199 = fmul fast float %198, %198
  %200 = fmul fast float %199, 0x400921FB60000000
  %201 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %200)  ; FMax(a,b)
  %202 = fdiv fast float %194, %201
  %203 = fsub fast float 1.000000e+00, %142
  %204 = fsub fast float 1.000000e+00, %143
  %205 = fsub fast float 1.000000e+00, %144
  %206 = fsub fast float 1.000000e+00, %174
  %207 = fmul fast float %206, %206
  %208 = fmul fast float %207, %207
  %209 = fmul fast float %208, %206
  %210 = fmul fast float %209, %203
  %211 = fmul fast float %209, %204
  %212 = fmul fast float %209, %205
  %213 = fadd fast float %210, %142
  %214 = fadd fast float %211, %143
  %215 = fadd fast float %212, %144
  %216 = fsub fast float 1.000000e+00, %178
  %217 = fmul fast float %194, 2.500000e-01
  %218 = fmul fast float %217, %216
  %219 = fadd fast float %218, %178
  %220 = fdiv fast float 1.000000e+00, %219
  %221 = fmul fast float %220, %202
  %222 = fmul fast float %221, %213
  %223 = fmul fast float %221, %214
  %224 = fmul fast float %221, %215
  %225 = add nuw nsw i32 %149, 19
  %226 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 %225)  ; CBufferLoadLegacy(handle,regIndex)
  %227 = extractvalue %dx.types.CBufRet.f32 %226, 0
  %228 = extractvalue %dx.types.CBufRet.f32 %226, 1
  %229 = extractvalue %dx.types.CBufRet.f32 %226, 2
  %230 = fmul fast float %227, %172
  %231 = fmul fast float %228, %172
  %232 = fmul fast float %229, %172
  %233 = fmul fast float %193, %130
  %234 = fmul fast float %193, %131
  %235 = fmul fast float %193, %132
  %236 = fadd fast float %222, %233
  %237 = fadd fast float %223, %234
  %238 = fadd fast float %224, %235
  %239 = fmul fast float %230, %236
  %240 = fmul fast float %231, %237
  %241 = fmul fast float %232, %238
  %242 = fadd fast float %239, %146
  %243 = fadd fast float %240, %147
  %244 = fadd fast float %241, %148
  %245 = add nuw nsw i32 %149, 1
  %246 = icmp eq i32 %245, 3
  br i1 %246, label %247, label %145

; <label>:247                                     ; preds = %145
  %248 = extractvalue %dx.types.ResRet.f32 %113, 3
  %249 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %7, float %110, float %111, float %112, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %250 = extractvalue %dx.types.ResRet.f32 %249, 0
  %251 = extractvalue %dx.types.ResRet.f32 %249, 1
  %252 = extractvalue %dx.types.ResRet.f32 %249, 2
  %253 = fmul fast float %250, %130
  %254 = fmul fast float %251, %131
  %255 = fmul fast float %252, %132
  %256 = fadd fast float %253, %242
  %257 = fadd fast float %254, %243
  %258 = fadd fast float %255, %244
  %259 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %9, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.i32 %259, 2
  %261 = sitofp i32 %260 to float
  %262 = fmul fast float %261, %119
  %263 = fsub fast float -0.000000e+00, %27
  %264 = fsub fast float -0.000000e+00, %28
  %265 = fsub fast float -0.000000e+00, %29
  %266 = call float @dx.op.dot3.f32(i32 55, float %263, float %264, float %265, float %110, float %111, float %112)  ; Dot3(ax,ay,az,bx,by,bz)
  %267 = fmul fast float %266, 2.000000e+00
  %268 = fmul fast float %267, %110
  %269 = fmul fast float %267, %111
  %270 = fmul fast float %267, %112
  %271 = fsub fast float %263, %268
  %272 = fsub fast float %264, %269
  %273 = fsub fast float %265, %270
  %274 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2, %dx.types.Handle %7, float %271, float %272, float %273, float undef, i32 undef, i32 undef, i32 undef, float %262)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %275 = extractvalue %dx.types.ResRet.f32 %274, 0
  %276 = extractvalue %dx.types.ResRet.f32 %274, 1
  %277 = extractvalue %dx.types.ResRet.f32 %274, 2
  %278 = fmul fast float %275, %142
  %279 = fmul fast float %276, %143
  %280 = fmul fast float %277, %144
  %281 = fadd fast float %256, %278
  %282 = fadd fast float %257, %279
  %283 = fadd fast float %258, %280
  %284 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %3, %dx.types.Handle %8, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %285 = extractvalue %dx.types.ResRet.f32 %284, 0
  %286 = extractvalue %dx.types.ResRet.f32 %284, 1
  %287 = extractvalue %dx.types.ResRet.f32 %284, 2
  %288 = fadd fast float %281, %285
  %289 = fadd fast float %282, %286
  %290 = fadd fast float %283, %287
  %291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %9, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.f32 %291, 3
  %293 = fmul fast float %292, %248
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %289)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %290)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %293)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!19}
!dx.entryPoints = !{!20}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !14, !16}
!6 = !{!7, !9, !10, !11, !12, !13}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !8}
!10 = !{i32 2, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !8}
!11 = !{i32 3, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !8}
!12 = !{i32 4, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 5, i32 0, !8}
!13 = !{i32 5, %"class.TextureCube<vector<float, 3> >"* undef, !"", i32 0, i32 5, i32 1, i32 5, i32 0, !8}
!14 = !{!15}
!15 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!16 = !{!17, !18}
!17 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!18 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!19 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0]}
!20 = !{void ()* @PSTexturedEmissive, !"PSTexturedEmissive", !21, !5, null}
!21 = !{!22, !32, null}
!22 = !{!23, !26, !29, !31}
!23 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 2, i32 0, i8 0, !25}
!24 = !{i32 0}
!25 = !{i32 3, i32 3}
!26 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 4, i32 1, i8 0, !28}
!27 = !{i32 1}
!28 = !{i32 3, i32 7}
!29 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !30, i8 2, i32 1, i8 3, i32 2, i8 0, !28}
!30 = !{i32 2}
!31 = !{i32 3, !"COLOR", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 3, i8 0, null}
!32 = !{!33}
!33 = !{i32 0, !"SV_Target", i8 9, i8 16, !24, i8 0, i32 1, i8 4, i32 0, i8 0, !34}
!34 = !{i32 3, i32 15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 35
;   num_shared_vgprs: 0
;   num_sgprs: 82
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 2624
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x680d226d, 0xc9e4011b                // 000000000000: D580226D 03FED10D C9E4011B
;   v_nop_xbox_data 0x6881f326, 0x1863afde                // 00000000000C: D580F326 03FED181 1863AFDE
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[22:23], exec                          // 00000000001C: BE96047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s18, s15                                // 000000000024: BE92030F
;   s_mov_b32     s4, s13                                 // 000000000028: BE84030D
;   s_mov_b32     s2, s11                                 // 00000000002C: BE82030B
;   s_mov_b32     s48, s9                                 // 000000000030: BEB00309
;   s_mov_b32     s9, 0                                   // 000000000034: BE890380
;   s_mov_b32     s49, 0                                  // 000000000038: BEB10380
;   s_mov_b32     s11, 0                                  // 00000000003C: BE8B0380
;   s_mov_b32     s3, 0                                   // 000000000040: BE830380
;   s_mov_b32     s13, 0                                  // 000000000044: BE8D0380
;   s_mov_b32     s5, 0                                   // 000000000048: BE850380
;   s_mov_b32     s15, 0                                  // 00000000004C: BE8F0380
;   s_mov_b32     s19, 0                                  // 000000000050: BE930380
;   s_load_dwordx8  s[40:47], s[4:5], null                // 000000000054: F40C0A02 FA000000
;   s_load_dwordx8  s[24:31], s[12:13], null              // 00000000005C: F40C0606 FA000000
;   s_load_dwordx8  s[32:39], s[2:3], null                // 000000000064: F40C0801 FA000000
;   s_load_dwordx8  s[0:7], s[10:11], null                // 00000000006C: F40C0005 FA000000
;   s_load_dwordx8  s[56:63], s[48:49], null              // 000000000074: F40C0E18 FA000000
;   s_load_dwordx8  s[48:55], s[8:9], null                // 00000000007C: F40C0C04 FA000000
;   s_load_dwordx4  s[64:67], s[18:19], null              // 000000000084: F4081009 FA000000
;   s_load_dwordx4  s[76:79], s[14:15], null              // 00000000008C: F4081307 FA000000
;   s_bitset1_b32  s17, 20                                // 000000000094: BE911D94
;   s_mov_b32     s18, -1                                 // 000000000098: BE9203C1
;   s_mov_b32     s19, lit(0x11014fac)                    // 00000000009C: BE9303FF 11014FAC
;   s_mov_b32     m0, s20                                 // 0000000000A4: BEFC0314
;   s_buffer_load_dwordx4  s[8:11], s[16:19], null        // 0000000000A8: F4280208 FA000000
;   v_interp_p1_f32  v6, v0, attr1.y                      // 0000000000B0: C8180500
;   v_interp_p1_f32  v2, v0, attr2.x                      // 0000000000B4: C8080800
;   v_interp_p1_f32  v3, v0, attr2.y                      // 0000000000B8: C80C0900
;   v_interp_p1_f32  v4, v0, attr2.z                      // 0000000000BC: C8100A00
;   v_interp_p1_f32  v23, v0, attr1.x                     // 0000000000C0: C85C0400
;   v_interp_p2_f32  v6, v1, attr1.y                      // 0000000000C4: C8190501
;   v_interp_p1_f32  v7, v0, attr1.z                      // 0000000000C8: C81C0600
;   v_interp_p1_f32  v8, v0, attr0.x                      // 0000000000CC: C8200000
;   v_interp_p1_f32  v9, v0, attr0.y                      // 0000000000D0: C8240100
;   v_interp_p2_f32  v23, v1, attr1.x                     // 0000000000D4: C85D0401
;   v_interp_p2_f32  v2, v1, attr2.x                      // 0000000000D8: C8090801
;   v_interp_p2_f32  v7, v1, attr1.z                      // 0000000000DC: C81D0601
;   v_interp_p2_f32  v8, v1, attr0.x                      // 0000000000E0: C8210001
;   v_interp_p2_f32  v9, v1, attr0.y                      // 0000000000E4: C8250101
;   v_interp_p2_f32  v3, v1, attr2.y                      // 0000000000E8: C80D0901
;   v_interp_p2_f32  v4, v1, attr2.z                      // 0000000000EC: C8110A01
;   ds_swizzle_b32  v14, v23 offset:32768                 // 0000000000F0: D8D48000 0E000017
;   ds_swizzle_b32  v15, v23 offset:32853                 // 0000000000F8: D8D48055 0F000017
;   ds_swizzle_b32  v5, v23 offset:32938                  // 000000000100: D8D480AA 05000017
;   s_waitcnt     lgkmcnt(0)                              // 000000000108: BF8CC07F
;   v_sub_f32     v1, s9, v6                              // 00000000010C: 08020C09
;   v_sub_f32     v0, s8, v23                             // 000000000110: 08002E08
;   v_sub_f32     v10, s10, v7                            // 000000000114: 08140E0A
;   ds_swizzle_b32  v16, v6 offset:32768                  // 000000000118: D8D48000 10000006
;   ds_swizzle_b32  v17, v6 offset:32853                  // 000000000120: D8D48055 11000006
;   v_mul_legacy_f32  v11, v1, v1                         // 000000000128: 0E160301
;   ds_swizzle_b32  v6, v6 offset:32938                   // 00000000012C: D8D480AA 06000006
;   ds_swizzle_b32  v18, v7 offset:32768                  // 000000000134: D8D48000 12000007
;   ds_swizzle_b32  v19, v7 offset:32853                  // 00000000013C: D8D48055 13000007
;   ds_swizzle_b32  v7, v7 offset:32938                   // 000000000144: D8D480AA 07000007
;   v_fmac_f32    v11, v0, v0                             // 00000000014C: 56160100
;   ds_swizzle_b32  v21, v8 offset:32938                  // 000000000150: D8D480AA 15000008
;   ds_swizzle_b32  v20, v9 offset:32853                  // 000000000158: D8D48055 14000009
;   v_fmac_f32    v11, v10, v10                           // 000000000160: 5616150A
;   v_sub_f32     v15, v15, v14                           // 000000000164: 081E1D0F
;   v_sub_f32     v5, v5, v14                             // 000000000168: 080A1D05
;   v_rsq_f32     v11, v11                                // 00000000016C: 7E165D0B
;   ds_swizzle_b32  v14, v8 offset:32768                  // 000000000170: D8D48000 0E000008
;   s_waitcnt     lgkmcnt(7)                              // 000000000178: BF8CC77F
;   v_sub_f32     v17, v17, v16                           // 00000000017C: 08222111
;   s_waitcnt     lgkmcnt(6)                              // 000000000180: BF8CC67F
;   v_sub_f32     v6, v6, v16                             // 000000000184: 080C2106
;   ds_swizzle_b32  v16, v8 offset:32853                  // 000000000188: D8D48055 10000008
;   s_waitcnt     lgkmcnt(5)                              // 000000000190: BF8CC57F
;   v_sub_f32     v19, v19, v18                           // 000000000194: 08262513
;   s_waitcnt     lgkmcnt(4)                              // 000000000198: BF8CC47F
;   v_sub_f32     v7, v7, v18                             // 00000000019C: 080E2507
;   v_mul_legacy_f32  v12, v0, v11                        // 0000000001A0: 0E181700
;   v_mul_legacy_f32  v13, v1, v11                        // 0000000001A4: 0E1A1701
;   image_sample  v[0:1], v[8:9], s[56:63], s[76:79] dmask:0x3 dim:SQ_RSRC_IMG_2D // 0000000001A8: F0800308 026E0008
;   ds_swizzle_b32  v18, v9 offset:32768                  // 0000000001B0: D8D48000 12000009
;   v_mul_legacy_f32  v22, v6, v19                        // 0000000001B8: 0E2C2706
;   v_mul_legacy_f32  v23, v5, v17                        // 0000000001BC: 0E2E2305
;   v_mul_legacy_f32  v10, v10, v11                       // 0000000001C0: 0E14170A
;   v_fma_f32     v23, v6, v15, -v23                      // 0000000001C4: D54B0017 845E1F06
;   v_mul_legacy_f32  v25, v23, v5                        // 0000000001CC: 0E320B17
;   s_waitcnt     lgkmcnt(1)                              // 0000000001D0: BF8CC17F
;   v_sub_f32     v16, v16, v14                           // 0000000001D4: 08201D10
;   v_sub_f32     v14, v21, v14                           // 0000000001D8: 081C1D15
;   ds_swizzle_b32  v21, v9 offset:32938                  // 0000000001DC: D8D480AA 15000009
;   s_waitcnt     lgkmcnt(1)                              // 0000000001E4: BF8CC17F
;   v_sub_f32     v20, v20, v18                           // 0000000001E8: 08282514
;   s_waitcnt     lgkmcnt(0)                              // 0000000001EC: BF8CC07F
;   v_sub_f32     v18, v21, v18                           // 0000000001F0: 08242515
;   v_fma_f32     v21, v7, v17, -v22                      // 0000000001F4: D54B0015 845A2307
;   v_mul_legacy_f32  v22, v7, v15                        // 0000000001FC: 0E2C1F07
;   v_fma_f32     v22, v5, v19, -v22                      // 000000000200: D54B0016 845A2705
;   v_mul_legacy_f32  v24, v22, v7                        // 000000000208: 0E300F16
;   v_fma_f32     v7, v21, v7, -v25                       // 00000000020C: D54B0007 84660F15
;   v_fma_f32     v24, v23, v6, -v24                      // 000000000214: D54B0018 84620D17
;   v_mul_legacy_f32  v6, v21, v6                         // 00000000021C: 0E0C0D15
;   v_fma_f32     v5, v22, v5, -v6                        // 000000000220: D54B0005 841A0B16
;   v_mul_legacy_f32  v6, v23, v17                        // 000000000228: 0E0C2317
;   v_fma_f32     v6, v22, v19, -v6                       // 00000000022C: D54B0006 841A2716
;   v_mul_legacy_f32  v19, v21, v19                       // 000000000234: 0E262715
;   v_fma_f32     v19, v23, v15, -v19                     // 000000000238: D54B0013 844E1F17
;   v_mul_legacy_f32  v15, v22, v15                       // 000000000240: 0E1E1F16
;   v_mul_legacy_f32  v22, v24, v20                       // 000000000244: 0E2C2918
;   v_fma_f32     v15, v21, v17, -v15                     // 000000000248: D54B000F 843E2315
;   v_mul_legacy_f32  v17, v24, v16                       // 000000000250: 0E222118
;   v_fmac_f32    v22, v18, v6                            // 000000000254: 562C0D12
;   v_mul_legacy_f32  v21, v7, v16                        // 000000000258: 0E2A2107
;   v_mul_legacy_f32  v16, v5, v16                        // 00000000025C: 0E202105
;   v_mul_legacy_f32  v5, v5, v20                         // 000000000260: 0E0A2905
;   v_fmac_f32    v17, v14, v6                            // 000000000264: 56220D0E
;   v_mul_legacy_f32  v6, v7, v20                         // 000000000268: 0E0C2907
;   v_fmac_f32    v21, v14, v19                           // 00000000026C: 562A270E
;   v_fmac_f32    v16, v14, v15                           // 000000000270: 56201F0E
;   v_fmac_f32    v5, v18, v15                            // 000000000274: 560A1F12
;   v_fmac_f32    v6, v18, v19                            // 000000000278: 560C2712
;   v_mul_legacy_f32  v14, v21, v21                       // 00000000027C: 0E1C2B15
;   v_mul_legacy_f32  v7, v6, v6                          // 000000000280: 0E0E0D06
;   v_fmac_f32    v14, v17, v17                           // 000000000284: 561C2311
;   v_fmac_f32    v7, v22, v22                            // 000000000288: 560E2D16
;   v_fmac_f32    v14, v16, v16                           // 00000000028C: 561C2110
;   v_fmac_f32    v7, v5, v5                              // 000000000290: 560E0B05
;   v_rsq_f32     v14, v14                                // 000000000294: 7E1C5D0E
;   v_rsq_f32     v7, v7                                  // 000000000298: 7E0E5D07
;   v_mul_legacy_f32  v15, v7, v22                        // 00000000029C: 0E1E2D07
;   v_mul_legacy_f32  v6, v7, v6                          // 0000000002A0: 0E0C0D07
;   v_mul_legacy_f32  v19, v7, v5                         // 0000000002A4: 0E260B07
;   s_waitcnt     vmcnt(0)                                // 0000000002A8: BF8C3F70
;   v_fma_f32     v0, v0, 2.0, -1.0                       // 0000000002AC: D54B0000 03CDE900
;   v_fma_f32     v1, v1, 2.0, -1.0                       // 0000000002B4: D54B0001 03CDE901
;   v_mul_legacy_f32  v7, v17, v0                         // 0000000002BC: 0E0E0111
;   v_fma_f32     v11, -v1, v1, 1.0                       // 0000000002C0: D54B000B 23CA0301
;   v_mul_legacy_f32  v18, v7, v14                        // 0000000002C8: 0E241D07
;   v_fmac_f32    v11, -v0, v0                            // 0000000002CC: D52B000B 20020100
;   v_fmac_f32    v18, v1, v15                            // 0000000002D4: 56241F01
;   v_mul_legacy_f32  v15, v21, v0                        // 0000000002D8: 0E1E0115
;   v_sqrt_f32    v11, v11                                // 0000000002DC: 7E16670B
;   v_mul_legacy_f32  v0, v16, v0                         // 0000000002E0: 0E000110
;   v_mul_legacy_f32  v20, v15, v14                       // 0000000002E4: 0E281D0F
;   v_fmac_f32    v20, v1, v6                             // 0000000002E8: 56280D01
;   v_mul_legacy_f32  v6, v0, v14                         // 0000000002EC: 0E0C1D00
;   v_fmac_f32    v18, v11, v2                            // 0000000002F0: 5624050B
;   v_fmac_f32    v20, v11, v3                            // 0000000002F4: 5628070B
;   v_fmac_f32    v6, v1, v19                             // 0000000002F8: 560C2701
;   v_mul_legacy_f32  v1, v20, v20                        // 0000000002FC: 0E022914
;   v_fmac_f32    v6, v11, v4                             // 000000000300: 560C090B
;   v_fmac_f32    v1, v18, v18                            // 000000000304: 56022512
;   v_fmac_f32    v1, v6, v6                              // 000000000308: 56020D06
;   v_rsq_f32     v1, v1                                  // 00000000030C: 7E025D01
;   v_mul_legacy_f32  v14, v1, v20                        // 000000000310: 0E1C2901
;   v_mul_legacy_f32  v11, v1, v18                        // 000000000314: 0E162501
;   v_mul_legacy_f32  v15, v1, v6                         // 000000000318: 0E1E0D01
;   image_sample  v[0:3], v[8:9], s[48:55], s[76:79] dmask:0xf dim:SQ_RSRC_IMG_2D // 00000000031C: F0800F08 026C0008
;   image_sample  v[4:6], v[8:9], s[0:7], s[76:79] dmask:0x7 dim:SQ_RSRC_IMG_2D // 000000000324: F0800708 02600408
;   v_nop                                                 // 00000000032C: 7E000000
;   s_buffer_load_dwordx16  s[0:15], s[16:19], 0x000100   // 000000000330: F4300008 FA000100
;   v_mul_legacy_f32  v7, v14, v13                        // 000000000338: 0E0E1B0E
;   v_fma_f32     v16, v11, v12, v7                       // 00000000033C: D54B0010 041E190B
;   v_fmac_f32    v16, v15, v10                           // 000000000344: 5620150F
;   v_sub_f32     v16, 1.0, v16 clamp                     // 000000000348: D5048010 000220F2
;   s_waitcnt     vmcnt(1)                                // 000000000350: BF8C3F71
;   v_add_f32     v23, lit(0xbd23d70a), v2                // 000000000354: 062E04FF BD23D70A
;   s_waitcnt     vmcnt(0)                                // 00000000035C: BF8C3F70
;   v_fma_f32     v17, v0, -v6, v0                        // 000000000360: D54B0011 44020D00
;   v_fma_f32     v18, v1, -v6, v1                        // 000000000368: D54B0012 44060D01
;   v_add_f32     v0, lit(0xbd23d70a), v0                 // 000000000370: 060000FF BD23D70A
;   v_add_f32     v1, lit(0xbd23d70a), v1                 // 000000000378: 060202FF BD23D70A
;   v_fma_f32     v19, v2, -v6, v2                        // 000000000380: D54B0013 440A0D02
;   v_fma_f32     v2, v6, v23, lit(0x3d23d70a)            // 000000000388: D54B0002 03FE2F06 3D23D70A
;   v_mul_legacy_f32  v17, v17, v4                        // 000000000394: 0E220911
;   v_fma_f32     v0, v6, v0, lit(0x3d23d70a)             // 000000000398: D54B0000 03FE0106 3D23D70A
;   v_fma_f32     v1, v6, v1, lit(0x3d23d70a)             // 0000000003A4: D54B0001 03FE0306 3D23D70A
;   s_waitcnt     lgkmcnt(0)                              // 0000000003B0: BF8CC07F
;   v_mul_legacy_f32  v6, s0, s0                          // 0000000003B4: D5070006 00000000
;   v_mul_legacy_f32  v22, v2, v4                         // 0000000003BC: 0E2C0902
;   v_mul_legacy_f32  v18, v18, v4                        // 0000000003C0: 0E240912
;   v_mul_legacy_f32  v20, v0, v4                         // 0000000003C4: 0E280900
;   v_mul_legacy_f32  v21, v1, v4                         // 0000000003C8: 0E2A0901
;   v_fmac_f32    v6, s1, s1                              // 0000000003CC: D52B0006 00000201
;   v_mul_legacy_f32  v19, v19, v4                        // 0000000003D4: 0E260913
;   v_fma_f32     v0, -v0, v4, 1.0                        // 0000000003D8: D54B0000 23CA0900
;   v_fma_f32     v1, -v1, v4, 1.0                        // 0000000003E0: D54B0001 23CA0901
;   v_fma_f32     v2, -v2, v4, 1.0                        // 0000000003E8: D54B0002 23CA0902
;   v_fmac_f32    v6, s2, s2                              // 0000000003F0: D52B0006 00000402
;   v_rsq_f32     v6, v6                                  // 0000000003F8: 7E0C5D06
;   v_fma_f32     v27, -s1, v6, v13                       // 0000000003FC: D54B001B 24360C01
;   v_fma_f32     v26, -s0, v6, v12                       // 000000000404: D54B001A 24320C00
;   v_mul_legacy_f32  v23, v6, -s0                        // 00000000040C: D5070017 40000106
;   v_mul_legacy_f32  v24, v6, -s1                        // 000000000414: D5070018 40000306
;   v_mul_legacy_f32  v25, v6, -s2                        // 00000000041C: D5070019 40000506
;   v_mul_legacy_f32  v28, v27, v27                       // 000000000424: 0E38371B
;   v_fma_f32     v6, -s2, v6, v10                        // 000000000428: D54B0006 242A0C02
;   v_fmac_f32    v28, v26, v26                           // 000000000430: 5638351A
;   v_fmac_f32    v28, v6, v6                             // 000000000434: 56380D06
;   v_rsq_f32     v28, v28                                // 000000000438: 7E385D1C
;   v_mul_legacy_f32  v26, v26, v28                       // 00000000043C: 0E34391A
;   v_mul_legacy_f32  v27, v27, v28                       // 000000000440: 0E36391B
;   v_mul_legacy_f32  v6, v6, v28                         // 000000000444: 0E0C3906
;   v_mul_legacy_f32  v28, v14, v24                       // 000000000448: 0E38310E
;   v_mul_legacy_f32  v24, v24, v27                       // 00000000044C: 0E303718
;   v_fmac_f32    v28, v11, v23                           // 000000000450: 56382F0B
;   v_fmac_f32    v24, v23, v26                           // 000000000454: 56303517
;   v_fmac_f32    v28, v15, v25                           // 000000000458: 5638330F
;   v_fmac_f32    v24, v25, v6                            // 00000000045C: 56300D19
;   v_mul_legacy_f32  v25, v14, v27                       // 000000000460: 0E32370E
;   v_max_f32     v29, v28, v28 clamp                     // 000000000464: D510801D 0002391C
;   v_sub_f32     v28, 1.0, v28 clamp                     // 00000000046C: D504801C 000238F2
;   v_max_f32     v23, v24, v24 clamp                     // 000000000474: D5108017 00023118
;   v_fmac_f32    v25, v11, v26                           // 00000000047C: 5632350B
;   v_add_f32     v26, v5, v5                             // 000000000480: 06340B05
;   v_mul_legacy_f32  v30, v28, v28                       // 000000000484: 0E3C391C
;   v_sub_f32     v4, 1.0, v24 clamp                      // 000000000488: D5048004 000230F2
;   v_fmac_f32    v25, v15, v6 clamp                      // 000000000490: D52B8019 00020D0F
;   v_mul_legacy_f32  v6, v23, v23                        // 000000000498: 0E0C2F17
;   v_mul_legacy_f32  v30, v30, v30                       // 00000000049C: 0E3C3D1E
;   v_fma_f32     v23, -v23, v23, 1.0                     // 0000000004A0: D54B0017 23CA2F17
;   v_mul_legacy_f32  v24, v4, v4                         // 0000000004A8: 0E300904
;   v_mul_legacy_f32  v25, v25, v25                       // 0000000004AC: 0E323319
;   v_fma_f32     v27, v6, v26, -0.5                      // 0000000004B0: D54B001B 03C63506
;   v_mul_legacy_f32  v28, v30, v28                       // 0000000004B8: 0E38391E
;   v_mul_legacy_f32  v30, v16, v16                       // 0000000004BC: 0E3C2110
;   v_mul_legacy_f32  v24, v24, v24                       // 0000000004C0: 0E303118
;   v_fma_f32     v28, v28, v27, 1.0                      // 0000000004C4: D54B001C 03CA371C
;   v_mul_legacy_f32  v30, v30, v30                       // 0000000004CC: 0E3C3D1E
;   v_mul_legacy_f32  v4, v24, v4                         // 0000000004D0: 0E080918
;   v_mul_legacy_f32  v16, v30, v16                       // 0000000004D4: 0E20211E
;   v_fma_f32     v24, v4, v0, v20                        // 0000000004D8: D54B0018 04520104
;   v_fma_f32     v31, v4, v1, v21                        // 0000000004E0: D54B001F 04560304
;   v_fma_f32     v4, v4, v2, v22                         // 0000000004E8: D54B0004 045A0504
;   v_fma_f32     v27, v16, v27, 1.0                      // 0000000004F0: D54B001B 03CA3710
;   v_mul_legacy_f32  v27, v28, v27                       // 0000000004F8: 0E36371C
;   v_mul_legacy_f32  v28, v5, v5                         // 0000000004FC: 0E380B05
;   v_mul_legacy_f32  v33, v27, v17                       // 000000000500: 0E42231B
;   v_mul_legacy_f32  v30, v28, v28                       // 000000000504: 0E3C391C
;   v_fma_f32     v28, v28, v28, -1.0                     // 000000000508: D54B001C 03CE391C
;   v_mul_legacy_f32  v34, v27, v18                       // 000000000510: 0E44251B
;   v_mul_legacy_f32  v27, v27, v19                       // 000000000514: 0E36271B
;   v_mul_legacy_f32  v32, lit(0x3e800000), v30           // 000000000518: 0E403CFF 3E800000
;   v_fma_f32     v25, v25, v28, 1.0                      // 000000000520: D54B0019 03CA3919
;   v_fmac_f32    v6, v32, v23                            // 000000000528: 560C2F20
;   v_mul_legacy_f32  v25, v25, v25                       // 00000000052C: 0E323319
;   v_mul_legacy_f32  v23, s12, v29                       // 000000000530: 0E2E3A0C
;   v_rcp_f32     v6, v6                                  // 000000000534: 7E0C5506
;   v_mul_legacy_f32  v25, lit(0x40490fdb), v25           // 000000000538: 0E3232FF 40490FDB
;   v_max_f32     v25, lit(0x358637bd), v25               // 000000000540: 203232FF 358637BD
;   v_rcp_f32     v25, v25                                // 000000000548: 7E325519
;   v_mul_legacy_f32  v25, v30, v25                       // 00000000054C: 0E32331E
;   v_mul_legacy_f32  v6, v6, v25                         // 000000000550: 0E0C3306
;   v_mul_legacy_f32  v25, s13, v29                       // 000000000554: 0E323A0D
;   v_mul_legacy_f32  v29, s14, v29                       // 000000000558: 0E3A3A0E
;   v_fmac_f32    v33, v6, v24                            // 00000000055C: 56423106
;   v_fmac_f32    v27, v6, v4                             // 000000000560: 56360906
;   v_fmac_f32    v34, v6, v31                            // 000000000564: 56443F06
;   v_mul_legacy_f32  v6, s4, s4                          // 000000000568: D5070006 00000804
;   v_mul_legacy_f32  v4, v23, v33                        // 000000000570: 0E084317
;   v_mul_legacy_f32  v24, v29, v27                       // 000000000574: 0E30371D
;   v_mul_legacy_f32  v23, v25, v34                       // 000000000578: 0E2E4519
;   v_fmac_f32    v6, s5, s5                              // 00000000057C: D52B0006 00000A05
;   v_fmac_f32    v6, s6, s6                              // 000000000584: D52B0006 00000C06
;   v_rsq_f32     v6, v6                                  // 00000000058C: 7E0C5D06
;   v_mul_legacy_f32  v27, v6, -s6                        // 000000000590: D507001B 40000D06
;   v_fma_f32     v29, -s5, v6, v13                       // 000000000598: D54B001D 24360C05
;   v_mul_legacy_f32  v25, v6, -s4                        // 0000000005A0: D5070019 40000906
;   v_readfirstlane_b32  s1, v27                          // 0000000005A8: 7E02051B
;   v_fma_f32     v27, -s4, v6, v12                       // 0000000005AC: D54B001B 24320C04
;   v_mul_legacy_f32  v31, v29, v29                       // 0000000005B4: 0E3E3B1D
;   v_readfirstlane_b32  s0, v25                          // 0000000005B8: 7E000519
;   v_mul_legacy_f32  v25, v6, -s5                        // 0000000005BC: D5070019 40000B06
;   v_fma_f32     v6, -s6, v6, v10                        // 0000000005C4: D54B0006 242A0C06
;   v_fmac_f32    v31, v27, v27                           // 0000000005CC: 563E371B
;   v_fmac_f32    v31, v6, v6                             // 0000000005D0: 563E0D06
;   v_rsq_f32     v31, v31                                // 0000000005D4: 7E3E5D1F
;   v_mul_legacy_f32  v27, v27, v31                       // 0000000005D8: 0E363F1B
;   v_mul_legacy_f32  v29, v29, v31                       // 0000000005DC: 0E3A3F1D
;   v_mul_legacy_f32  v6, v6, v31                         // 0000000005E0: 0E0C3F06
;   v_mul_legacy_f32  v31, v14, v25                       // 0000000005E4: 0E3E330E
;   v_mul_legacy_f32  v25, v25, v29                       // 0000000005E8: 0E323B19
;   v_mul_legacy_f32  v29, v14, v29                       // 0000000005EC: 0E3A3B0E
;   v_fmac_f32    v31, s0, v11                            // 0000000005F0: 563E1600
;   v_fmac_f32    v25, s0, v27                            // 0000000005F4: 56323600
;   v_fmac_f32    v29, v11, v27                           // 0000000005F8: 563A370B
;   v_fmac_f32    v31, s1, v15                            // 0000000005FC: 563E1E01
;   v_fmac_f32    v25, s1, v6                             // 000000000600: 56320C01
;   v_fmac_f32    v29, v15, v6 clamp                      // 000000000604: D52B801D 00020D0F
;   v_sub_f32     v27, 1.0, v31 clamp                     // 00000000060C: D504801B 00023EF2
;   v_max_f32     v33, v31, v31 clamp                     // 000000000614: D5108021 00023F1F
;   s_buffer_load_dwordx8  s[0:7], s[16:19], 0x000140     // 00000000061C: F42C0008 FA000140
;   v_max_f32     v34, v25, v25 clamp                     // 000000000624: D5108022 00023319
;   v_sub_f32     v25, 1.0, v25 clamp                     // 00000000062C: D5048019 000232F2
;   v_mul_legacy_f32  v31, v27, v27                       // 000000000634: 0E3E371B
;   v_mul_legacy_f32  v6, v34, v34                        // 000000000638: 0E0C4522
;   v_mul_legacy_f32  v31, v31, v31                       // 00000000063C: 0E3E3F1F
;   v_fma_f32     v26, v6, v26, -0.5                      // 000000000640: D54B001A 03C63506
;   v_mul_legacy_f32  v27, v31, v27                       // 000000000648: 0E36371F
;   v_fma_f32     v27, v27, v26, 1.0                      // 00000000064C: D54B001B 03CA351B
;   v_fma_f32     v26, v16, v26, 1.0                      // 000000000654: D54B001A 03CA3510
;   s_waitcnt     lgkmcnt(0)                              // 00000000065C: BF8CC07F
;   v_mul_legacy_f32  v31, s2, v33                        // 000000000660: 0E3E4202
;   v_mul_legacy_f32  v26, v27, v26                       // 000000000664: 0E34351B
;   v_mul_legacy_f32  v27, v29, v29                       // 000000000668: 0E363B1D
;   v_fma_f32     v27, v27, v28, 1.0                      // 00000000066C: D54B001B 03CA391B
;   v_mul_legacy_f32  v28, v25, v25                       // 000000000674: 0E383319
;   v_mul_legacy_f32  v27, v27, v27                       // 000000000678: 0E36371B
;   v_mul_legacy_f32  v28, v28, v28                       // 00000000067C: 0E38391C
;   v_mul_legacy_f32  v27, lit(0x40490fdb), v27           // 000000000680: 0E3636FF 40490FDB
;   v_mul_legacy_f32  v25, v28, v25                       // 000000000688: 0E32331C
;   v_max_f32     v27, lit(0x358637bd), v27               // 00000000068C: 203636FF 358637BD
;   v_fma_f32     v28, v25, v0, v20                       // 000000000694: D54B001C 04520119
;   v_fma_f32     v29, v25, v1, v21                       // 00000000069C: D54B001D 04560319
;   v_fma_f32     v25, v25, v2, v22                       // 0000000006A4: D54B0019 045A0519
;   v_rcp_f32     v27, v27                                // 0000000006AC: 7E36551B
;   v_mul_legacy_f32  v27, v30, v27                       // 0000000006B0: 0E36371E
;   v_fma_f32     v30, -v34, v34, 1.0                     // 0000000006B4: D54B001E 23CA4522
;   v_fmac_f32    v6, v32, v30                            // 0000000006BC: 560C3D20
;   v_mul_legacy_f32  v30, s1, v33                        // 0000000006C0: 0E3C4201
;   v_mul_legacy_f32  v32, v26, v17                       // 0000000006C4: 0E40231A
;   v_rcp_f32     v6, v6                                  // 0000000006C8: 7E0C5506
;   v_mul_legacy_f32  v6, v6, v27                         // 0000000006CC: 0E0C3706
;   v_mul_legacy_f32  v27, s0, v33                        // 0000000006D0: 0E364200
;   v_mul_legacy_f32  v33, v26, v18                       // 0000000006D4: 0E42251A
;   v_mul_legacy_f32  v26, v26, v19                       // 0000000006D8: 0E34271A
;   v_fmac_f32    v32, v6, v28                            // 0000000006DC: 56403906
;   v_fmac_f32    v33, v6, v29                            // 0000000006E0: 56423B06
;   v_fmac_f32    v26, v6, v25                            // 0000000006E4: 56343306
;   v_mul_legacy_f32  v6, s8, s8                          // 0000000006E8: D5070006 00001008
;   v_fmac_f32    v4, v27, v32                            // 0000000006F0: 5608411B
;   v_fmac_f32    v23, v30, v33                           // 0000000006F4: 562E431E
;   v_fmac_f32    v24, v31, v26                           // 0000000006F8: 5630351F
;   v_fmac_f32    v6, s9, s9                              // 0000000006FC: D52B0006 00001209
;   v_fmac_f32    v6, s10, s10                            // 000000000704: D52B0006 0000140A
;   v_rsq_f32     v6, v6                                  // 00000000070C: 7E0C5D06
;   v_fma_f32     v27, -s9, v6, v13                       // 000000000710: D54B001B 24360C09
;   v_fma_f32     v26, -s8, v6, v12                       // 000000000718: D54B001A 24320C08
;   v_mul_legacy_f32  v31, v6, -s8                        // 000000000720: D507001F 40001106
;   v_mul_legacy_f32  v30, v6, -s10                       // 000000000728: D507001E 40001506
;   v_mul_legacy_f32  v25, v6, -s9                        // 000000000730: D5070019 40001306
;   v_mul_legacy_f32  v28, v27, v27                       // 000000000738: 0E38371B
;   v_fma_f32     v6, -s10, v6, v10                       // 00000000073C: D54B0006 242A0C0A
;   v_fmac_f32    v28, v26, v26                           // 000000000744: 5638351A
;   v_fmac_f32    v28, v6, v6                             // 000000000748: 56380D06
;   v_rsq_f32     v28, v28                                // 00000000074C: 7E385D1C
;   v_mul_legacy_f32  v26, v26, v28                       // 000000000750: 0E34391A
;   v_mul_legacy_f32  v27, v27, v28                       // 000000000754: 0E36391B
;   v_mul_legacy_f32  v6, v6, v28                         // 000000000758: 0E0C3906
;   v_mul_legacy_f32  v28, v14, v25                       // 00000000075C: 0E38330E
;   v_mul_legacy_f32  v25, v25, v27                       // 000000000760: 0E323719
;   v_mul_legacy_f32  v27, v14, v27                       // 000000000764: 0E36370E
;   v_fmac_f32    v28, v11, v31                           // 000000000768: 56383F0B
;   v_fmac_f32    v25, v31, v26                           // 00000000076C: 5632351F
;   v_fmac_f32    v27, v11, v26                           // 000000000770: 5636350B
;   v_fmac_f32    v28, v15, v30                           // 000000000774: 56383D0F
;   v_add_f32     v26, v5, v5                             // 000000000778: 06340B05
;   v_fmac_f32    v25, v30, v6                            // 00000000077C: 56320D1E
;   v_fmac_f32    v27, v15, v6 clamp                      // 000000000780: D52B801B 00020D0F
;   v_max_f32     v29, v28, v28 clamp                     // 000000000788: D510801D 0002391C
;   v_sub_f32     v28, 1.0, v28 clamp                     // 000000000790: D504801C 000238F2
;   v_max_f32     v30, v25, v25 clamp                     // 000000000798: D510801E 00023319
;   v_sub_f32     v25, 1.0, v25 clamp                     // 0000000007A0: D5048019 000232F2
;   v_mul_legacy_f32  v31, v28, v28                       // 0000000007A8: 0E3E391C
;   v_mul_legacy_f32  v6, v30, v30                        // 0000000007AC: 0E0C3D1E
;   v_mul_legacy_f32  v31, v31, v31                       // 0000000007B0: 0E3E3F1F
;   v_fma_f32     v26, v6, v26, -0.5                      // 0000000007B4: D54B001A 03C63506
;   v_mul_legacy_f32  v28, v31, v28                       // 0000000007BC: 0E38391F
;   v_fma_f32     v16, v16, v26, 1.0                      // 0000000007C0: D54B0010 03CA3510
;   v_fma_f32     v28, v28, v26, 1.0                      // 0000000007C8: D54B001C 03CA351C
;   v_mul_legacy_f32  v26, v27, v27                       // 0000000007D0: 0E34371B
;   v_mul_legacy_f32  v27, v5, v5                         // 0000000007D4: 0E360B05
;   v_mul_legacy_f32  v16, v28, v16                       // 0000000007D8: 0E20211C
;   v_fma_f32     v27, v27, v27, -1.0                     // 0000000007DC: D54B001B 03CE371B
;   v_mul_legacy_f32  v28, v16, v17                       // 0000000007E4: 0E382310
;   v_fma_f32     v26, v26, v27, 1.0                      // 0000000007E8: D54B001A 03CA371A
;   v_mul_legacy_f32  v27, v5, v5                         // 0000000007F0: 0E360B05
;   v_mul_legacy_f32  v26, v26, v26                       // 0000000007F4: 0E34351A
;   v_mul_legacy_f32  v27, v27, v27                       // 0000000007F8: 0E36371B
;   v_mul_legacy_f32  v26, lit(0x40490fdb), v26           // 0000000007FC: 0E3434FF 40490FDB
;   v_max_f32     v26, lit(0x358637bd), v26               // 000000000804: 203434FF 358637BD
;   v_rcp_f32     v26, v26                                // 00000000080C: 7E34551A
;   v_mul_legacy_f32  v26, v27, v26                       // 000000000810: 0E34351B
;   v_mul_legacy_f32  v27, v25, v25                       // 000000000814: 0E363319
;   v_mul_legacy_f32  v27, v27, v27                       // 000000000818: 0E36371B
;   v_mul_legacy_f32  v25, v27, v25                       // 00000000081C: 0E32331B
;   v_mul_legacy_f32  v27, v5, v5                         // 000000000820: 0E360B05
;   v_fma_f32     v0, v25, v0, v20                        // 000000000824: D54B0000 04520119
;   v_mul_legacy_f32  v27, v27, v27                       // 00000000082C: 0E36371B
;   v_fma_f32     v1, v25, v1, v21                        // 000000000830: D54B0001 04560319
;   v_fma_f32     v2, v25, v2, v22                        // 000000000838: D54B0002 045A0519
;   v_fma_f32     v25, -v30, v30, 1.0                     // 000000000840: D54B0019 23CA3D1E
;   v_mul_legacy_f32  v27, lit(0x3e800000), v27           // 000000000848: 0E3636FF 3E800000
;   v_fmac_f32    v6, v27, v25                            // 000000000850: 560C331B
;   v_mul_legacy_f32  v25, s4, v29                        // 000000000854: 0E323A04
;   v_mul_legacy_f32  v27, s6, v29                        // 000000000858: 0E363A06
;   v_rcp_f32     v6, v6                                  // 00000000085C: 7E0C5506
;   v_mul_legacy_f32  v6, v6, v26                         // 000000000860: 0E0C3506
;   v_mul_legacy_f32  v26, s5, v29                        // 000000000864: 0E343A05
;   v_mul_legacy_f32  v29, v16, v18                       // 000000000868: 0E3A2510
;   v_mul_legacy_f32  v16, v16, v19                       // 00000000086C: 0E202710
;   v_fmac_f32    v28, v6, v0                             // 000000000870: 56380106
;   v_cubema_f32  v0, v11, v14, v15                       // 000000000874: D5470000 043E1D0B
;   v_fmac_f32    v29, v6, v1                             // 00000000087C: 563A0306
;   v_fmac_f32    v16, v6, v2                             // 000000000880: 56200506
;   v_cubesc_f32  v1, v11, v14, v15                       // 000000000884: D5450001 043E1D0B
;   v_cubetc_f32  v2, v11, v14, v15                       // 00000000088C: D5460002 043E1D0B
;   v_rcp_f32     v0, abs(v0)                             // 000000000894: D5AA0100 00000100
;   v_fmac_f32    v4, v25, v28                            // 00000000089C: 56083919
;   v_fmac_f32    v24, v27, v16                           // 0000000008A0: 5630211B
;   v_mov_b32     v16, lit(0x3fc00000)                    // 0000000008A4: 7E2002FF 3FC00000
;   v_fmac_f32    v23, v26, v29                           // 0000000008AC: 562E3B1A
;   v_cubeid_f32  v6, v11, v14, v15                       // 0000000008B0: D5440006 043E1D0B
;   v_mad_f32     v1, v1, v0, v16                         // 0000000008B8: D5410001 04420101
;   v_mad_f32     v0, v2, v0, v16                         // 0000000008C0: D5410000 04420102
;   s_and_b64     exec, exec, s[22:23]                    // 0000000008C8: 87FE167E
;   v_fma_f32     v25, -v12, v11, -v7                     // 0000000008CC: D54B0019 A41E170C
;   s_buffer_load_dword  s0, s[16:19], 0x00016c           // 0000000008D4: F4200008 FA00016C
;   s_buffer_load_dword  s1, s[16:19], 0x000178           // 0000000008DC: F4200048 FA000178
;   image_sample  v[0:2], [v1,v0,v6], s[40:47], s[64:67] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 0000000008E4: F080071A 020A0001 00000600
;   image_sample  v[6:8], v[8:9], s[32:39], s[76:79] dmask:0x7 dim:SQ_RSRC_IMG_2D // 0000000008F0: F0800708 02680608
;   v_fmac_f32    v25, -v10, v15 mul:2                    // 0000000008F8: D52B0019 28021F0A
;   v_fma_f32     v9, -v25, v11, -v12                     // 000000000900: D54B0009 A4321719
;   v_fma_f32     v11, -v25, v14, -v13                    // 000000000908: D54B000B A4361D19
;   v_fma_f32     v10, -v25, v15, -v10                    // 000000000910: D54B000A A42A1F19
;   v_cubema_f32  v12, v9, v11, v10                       // 000000000918: D547000C 042A1709
;   v_cubesc_f32  v13, v9, v11, v10                       // 000000000920: D545000D 042A1709
;   v_cubetc_f32  v15, v9, v11, v10                       // 000000000928: D546000F 042A1709
;   v_cubeid_f32  v14, v9, v11, v10                       // 000000000930: D544000E 042A1709
;   s_waitcnt     lgkmcnt(0)                              // 000000000938: BF8CC07F
;   v_mul_legacy_f32  v3, s0, v3                          // 00000000093C: 0E060600
;   v_rcp_f32     v10, abs(v12)                           // 000000000940: D5AA010A 0000010C
;   v_cvt_f32_i32  v11, s1                                // 000000000948: 7E160A01
;   v_mul_legacy_f32  v5, v11, v5                         // 00000000094C: 0E0A0B0B
;   v_mad_f32     v11, v13, v10, v16                      // 000000000950: D541000B 0442150D
;   v_mac_f32     v16, v15, v10                           // 000000000958: 3E20150F
;   image_sample_l  v[9:11], [v11,v16,v14,v5], s[24:31], s[64:67] dmask:0x7 dim:SQ_RSRC_IMG_CUBE // 00000000095C: F090071A 0206090B 00050E10
;   s_waitcnt     vmcnt(2)                                // 000000000968: BF8C3F72
;   v_fmac_f32    v4, v0, v17                             // 00000000096C: 56082300
;   v_fmac_f32    v23, v1, v18                            // 000000000970: 562E2501
;   v_fmac_f32    v24, v2, v19                            // 000000000974: 56302702
;   s_waitcnt     vmcnt(0)                                // 000000000978: BF8C3F70
;   v_fmac_f32    v4, v9, v20                             // 00000000097C: 56082909
;   v_fmac_f32    v24, v11, v22                           // 000000000980: 56302D0B
;   v_fmac_f32    v23, v10, v21                           // 000000000984: 562E2B0A
;   v_add_f32     v2, v4, v6                              // 000000000988: 06040D04
;   v_add_f32     v5, v24, v8                             // 00000000098C: 060A1118
;   v_add_f32     v4, v23, v7                             // 000000000990: 06080F17
;   s_nop         0x0000                                  // 000000000994: BF800000
;   s_nop         0x0000                                  // 000000000998: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v4                       // 00000000099C: 5E000902
;   v_cvt_pkrtz_f16_f32  v1, v5, v3                       // 0000000009A0: 5E020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000009A4: F8001C0F 00000100
;   s_endpgm                                              // 0000000009AC: BF810000
;   s_code_end                                            // 0000000009B0: BF9F0000
;   s_code_end                                            // 0000000009B4: BF9F0000
;   s_code_end                                            // 0000000009B8: BF9F0000
;   s_code_end                                            // 0000000009BC: BF9F0000
;   s_code_end                                            // 0000000009C0: BF9F0000
;   s_code_end                                            // 0000000009C4: BF9F0000
;   s_code_end                                            // 0000000009C8: BF9F0000
;   s_code_end                                            // 0000000009CC: BF9F0000
;   s_code_end                                            // 0000000009D0: BF9F0000
;   s_code_end                                            // 0000000009D4: BF9F0000
;   s_code_end                                            // 0000000009D8: BF9F0000
;   s_code_end                                            // 0000000009DC: BF9F0000
;   s_code_end                                            // 0000000009E0: BF9F0000
;   s_code_end                                            // 0000000009E4: BF9F0000
;   s_code_end                                            // 0000000009E8: BF9F0000
;   s_code_end                                            // 0000000009EC: BF9F0000
;   s_code_end                                            // 0000000009F0: BF9F0000
;   s_code_end                                            // 0000000009F4: BF9F0000
;   s_code_end                                            // 0000000009F8: BF9F0000
;   s_code_end                                            // 0000000009FC: BF9F0000
;   s_code_end                                            // 000000000A00: BF9F0000
;   s_code_end                                            // 000000000A04: BF9F0000
;   s_code_end                                            // 000000000A08: BF9F0000
;   s_code_end                                            // 000000000A0C: BF9F0000
;   s_code_end                                            // 000000000A10: BF9F0000
;   s_code_end                                            // 000000000A14: BF9F0000
;   s_code_end                                            // 000000000A18: BF9F0000
;   s_code_end                                            // 000000000A1C: BF9F0000
;   s_code_end                                            // 000000000A20: BF9F0000
;   s_code_end                                            // 000000000A24: BF9F0000
;   s_code_end                                            // 000000000A28: BF9F0000
;   s_code_end                                            // 000000000A2C: BF9F0000
;   s_code_end                                            // 000000000A30: BF9F0000
;   s_code_end                                            // 000000000A34: BF9F0000
;   s_code_end                                            // 000000000A38: BF9F0000
;   s_code_end                                            // 000000000A3C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 84, resource_class: 0 (SRV), index: 5, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[1] {  instr_offset: 92, resource_class: 0 (SRV), index: 4, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[2] {  instr_offset: 100, resource_class: 0 (SRV), index: 3, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[3] {  instr_offset: 108, resource_class: 0 (SRV), index: 2, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[4] {  instr_offset: 116, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[5] {  instr_offset: 124, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[6] {  instr_offset: 132, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[7] {  instr_offset: 140, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 9
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 2
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 3
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 4
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[5] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 5
;       allocated_offset : 13
;       orig_rootsig_slot_id: 5
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[6] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 14
;       orig_rootsig_slot_id: 6
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[7] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 15
;       orig_rootsig_slot_id: 7
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[8] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 38
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSTexturedEmissive)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 3 {
;     num_interp: 3
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 613
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x2,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, off, off, off done vm         // 000000000010: F8001801 00000002
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x402,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v4, off, off done vm          // 000000000010: F8001803 00000402
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x302,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v3, off, off done vm          // 000000000010: F8001803 00000302
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000902,
;        0x5e020705,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v2, v4                       // 000000000008: 5E000902
;   v_cvt_pkrtz_f16_f32  v1, v5, v3                       // 00000000000C: 5E020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20902,
;        0xd7690001,
;        0x20705,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v2, v4                      // 000000000000: D7690000 00020902
;   v_cvt_pknorm_u16_f32  v1, v5, v3                      // 000000000008: D7690001 00020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20902,
;        0xd7680001,
;        0x20705,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v2, v4                      // 000000000000: D7680000 00020902
;   v_cvt_pknorm_i16_f32  v1, v5, v3                      // 000000000008: D7680001 00020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20902,
;        0xd76a0001,
;        0x20705,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v2, v4                          // 000000000000: D76A0000 00020902
;   v_cvt_pk_u16_u32  v1, v5, v3                          // 000000000008: D76A0001 00020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20902,
;        0xd76b0001,
;        0x20705,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v2, v4                          // 000000000000: D76B0000 00020902
;   v_cvt_pk_i16_i32  v1, v5, v3                          // 000000000008: D76B0001 00020705
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x3050402,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v2, v4, v5, v3 done vm            // 000000000010: F800180F 03050402
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=35,NumSGPR=82,LDS=0,Scratch=0,WaveSize=64,Occupancy=14
; VAlu:377,SAlu:39,VMem:6,SMem:13,LDS:15,WaitCntOnVMem:5,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char PBREffect_PSTexturedEmissive[] = {
  0x44, 0x58, 0x42, 0x43, 0x2d, 0x55, 0xbb, 0x3f, 0xff, 0x4a, 0x2b, 0x9e,
  0x22, 0xeb, 0x5c, 0x0f, 0x36, 0x64, 0x4a, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x14, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0x2c, 0x03, 0x00, 0x00, 0xdc, 0x04, 0x00, 0x00, 0x6c, 0x05, 0x00, 0x00,
  0x88, 0x05, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xf8, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x64,
  0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0xa8, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x90, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x9c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x50, 0x42,
  0x52, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x54, 0x65,
  0x78, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69,
  0x76, 0x65, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x22, 0x0d, 0x68,
  0x1b, 0x01, 0xe4, 0xc9, 0x26, 0xf3, 0x81, 0x68, 0xde, 0xaf, 0x63, 0x18,
  0x44, 0x58, 0x49, 0x4c, 0x84, 0x1a, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xa1, 0x06, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x54, 0x11, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x6c, 0x11, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xcc, 0x11, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0xe0, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0xf0, 0x11, 0x00, 0x00, 0x81, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x74, 0x1a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x5b, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x54, 0x11, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x52, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xd4, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x6e, 0x1a, 0x2e, 0x7f,
  0xc2, 0x1e, 0x42, 0xf2, 0x57, 0x42, 0x5a, 0x89, 0xc9, 0x2f, 0x6e, 0x1b,
  0x15, 0xc3, 0x30, 0x0c, 0x04, 0x15, 0xf7, 0x0c, 0x97, 0x3f, 0x61, 0x0f,
  0x21, 0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x82, 0xa7, 0x30, 0x0e, 0x01,
  0x41, 0xc3, 0x30, 0x0c, 0x04, 0x41, 0x0c, 0x14, 0x15, 0x63, 0x20, 0x86,
  0x61, 0x18, 0x68, 0x2a, 0xc4, 0x40, 0x0c, 0x03, 0x55, 0x47, 0x0d, 0x97,
  0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc8,
  0x6d, 0x23, 0x82, 0x20, 0x08, 0xa2, 0x10, 0x17, 0x01, 0x11, 0x84, 0x1d,
  0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4,
  0xe4, 0x17, 0xb7, 0x8d, 0x88, 0x61, 0x18, 0x86, 0x42, 0x68, 0x04, 0x44,
  0xd0, 0x56, 0x8a, 0x81, 0x18, 0x86, 0x81, 0xba, 0x39, 0x82, 0xa0, 0x18,
  0x10, 0x51, 0x10, 0xc4, 0x47, 0xe0, 0x40, 0xc0, 0x30, 0x02, 0x31, 0xcc,
  0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4,
  0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4,
  0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c,
  0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74,
  0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0, 0x07, 0xed, 0x90, 0x0e, 0xf0,
  0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00, 0x0f, 0xe5, 0x80, 0x02, 0x62,
  0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07, 0x37, 0xa0,
  0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20,
  0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07, 0x7a, 0x78, 0x07, 0x79, 0xe0,
  0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07, 0x7a, 0x60, 0x03, 0x30, 0xa0,
  0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0xc2, 0x48, 0x52, 0x39, 0x8c, 0x30,
  0x0c, 0x33, 0xb5, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8,
  0x01, 0x2d, 0x94, 0x03, 0x3e, 0xd0, 0x43, 0x3d, 0xc8, 0x43, 0x39, 0xc8,
  0x01, 0x29, 0xf0, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8,
  0x03, 0x1f, 0x98, 0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80,
  0xc1, 0x1c, 0xf8, 0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4,
  0x03, 0x3c, 0xcc, 0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0,
  0x80, 0x98, 0x49, 0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1,
  0x0d, 0x68, 0xa1, 0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41,
  0x0e, 0x48, 0x81, 0x0f, 0xec, 0xa1, 0x1c, 0xc6, 0x81, 0x1e, 0xde, 0x41,
  0x1e, 0xf8, 0xc0, 0x1c, 0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00,
  0x0c, 0xe6, 0xc0, 0x0f, 0xc0, 0xc0, 0x0f, 0x90, 0x70, 0xa2, 0x94, 0xce,
  0x44, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4,
  0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x30, 0x0a, 0xf5,
  0x20, 0x0e, 0xe5, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef,
  0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c,
  0x00, 0x06, 0x73, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x28, 0x38, 0x69, 0x4d,
  0x82, 0x31, 0x07, 0xce, 0xa3, 0x0e, 0x47, 0x9a, 0x16, 0x00, 0x73, 0xa8,
  0xc9, 0xe7, 0x9c, 0x46, 0x9a, 0x80, 0x66, 0x92, 0x90, 0x73, 0xb6, 0x6e,
  0xdb, 0xba, 0xee, 0x39, 0x0c, 0x03, 0x31, 0x0c, 0xf4, 0xde, 0x24, 0x4d,
  0x11, 0x25, 0x4c, 0x3e, 0x0b, 0x30, 0xcf, 0x42, 0x44, 0xec, 0x04, 0x4c,
  0x04, 0x0a, 0x08, 0x8a, 0x53, 0x82, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x8f, 0x02, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x1e, 0x06, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x89, 0x80, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x83, 0x01, 0x01, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x67, 0x03, 0x02, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x07, 0x04,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x30,
  0x00, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x18,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x0c, 0x0a,
  0xa1, 0x14, 0x0a, 0xd1, 0xa0, 0x1c, 0xca, 0x83, 0x8a, 0x92, 0x18, 0x01,
  0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0x21, 0x73, 0x06, 0x80, 0xd4, 0x19,
  0x00, 0x62, 0x67, 0x00, 0x08, 0x9e, 0x01, 0x20, 0x79, 0x06, 0x80, 0xe6,
  0xb1, 0x24, 0x88, 0x78, 0x1e, 0x00, 0x38, 0x8e, 0x03, 0x38, 0x8e, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x34,
  0x13, 0x04, 0xc2, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x78, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x40, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x66, 0xf0, 0x11, 0x98, 0x20, 0x10, 0xd1, 0x04, 0x81, 0x90,
  0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90,
  0x26, 0x08, 0x6a, 0x00, 0x06, 0x1b, 0x12, 0x83, 0x7a, 0x0e, 0xc3, 0x80,
  0x0e, 0x69, 0x43, 0x02, 0x51, 0xcf, 0x01, 0x19, 0xd0, 0x21, 0x4d, 0x10,
  0x88, 0x69, 0x43, 0x72, 0x51, 0xcf, 0x71, 0x19, 0xd0, 0x21, 0x4d, 0x10,
  0x08, 0x6a, 0x82, 0xc0, 0x06, 0x61, 0x30, 0x41, 0x20, 0xaa, 0x0d, 0x49,
  0xa6, 0x3d, 0x47, 0x66, 0x6c, 0x87, 0xb4, 0x21, 0xd9, 0xb4, 0xe7, 0xd8,
  0x8c, 0xed, 0x90, 0x36, 0x18, 0x53, 0x65, 0x61, 0x5c, 0x37, 0x41, 0x80,
  0x03, 0x31, 0x98, 0x20, 0x10, 0xd6, 0x06, 0xe4, 0xf8, 0x9e, 0xe3, 0x30,
  0xc0, 0x00, 0xd8, 0x10, 0x84, 0xc1, 0x04, 0x41, 0x0e, 0xc6, 0x60, 0x03,
  0x72, 0x8c, 0xc1, 0x73, 0x1c, 0xc6, 0x01, 0x6c, 0x40, 0x8c, 0x31, 0x78,
  0x0e, 0xc3, 0x38, 0x80, 0x0d, 0x02, 0x19, 0x94, 0xc1, 0x06, 0xc2, 0x03,
  0xc4, 0xc0, 0x0c, 0x26, 0x08, 0x73, 0x40, 0x06, 0x1b, 0x02, 0x34, 0x98,
  0x20, 0x08, 0x00, 0x25, 0xa8, 0x29, 0xaa, 0x32, 0x3c, 0xba, 0x3a, 0xb9,
  0x32, 0xb2, 0xa2, 0xb6, 0xb4, 0xb9, 0xb9, 0x34, 0xbb, 0x32, 0x22, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x13, 0x84, 0x22, 0x9b, 0x20,
  0x14, 0xda, 0x86, 0xe0, 0x98, 0x20, 0x14, 0xdb, 0x06, 0xe1, 0xba, 0x36,
  0x2c, 0x07, 0x1b, 0xb4, 0x81, 0x1b, 0xbc, 0x01, 0x1c, 0x18, 0x70, 0x70,
  0xb8, 0x41, 0x1c, 0x6c, 0x08, 0x8c, 0x09, 0x42, 0xc1, 0x4d, 0x10, 0x88,
  0x6b, 0x83, 0x70, 0xd5, 0xc1, 0x86, 0xc5, 0x60, 0x83, 0x36, 0x70, 0x83,
  0x39, 0x80, 0x03, 0x83, 0x0e, 0x0c, 0x37, 0xb0, 0x83, 0x0d, 0x01, 0x34,
  0x41, 0x28, 0xba, 0x0d, 0x0b, 0xc4, 0x06, 0x6d, 0xe0, 0x06, 0x78, 0x00,
  0x07, 0x46, 0x1e, 0x40, 0x6e, 0x60, 0x07, 0x2c, 0x86, 0x9e, 0x98, 0x9e,
  0xa4, 0x36, 0x2c, 0xd7, 0x1e, 0xb4, 0x81, 0x1b, 0xbc, 0x01, 0x1c, 0x18,
  0x74, 0x70, 0xb9, 0x01, 0xb0, 0x81, 0x90, 0x83, 0x3b, 0xd0, 0x03, 0x3e,
  0x60, 0x32, 0x65, 0xf5, 0x45, 0x15, 0x26, 0x77, 0x56, 0x46, 0x37, 0x41,
  0x28, 0xbc, 0x09, 0x02, 0x81, 0x6d, 0x10, 0x2e, 0x50, 0xd8, 0xb0, 0x1c,
  0x7e, 0xd0, 0x06, 0x7f, 0xf0, 0x06, 0x6e, 0x60, 0xd0, 0xc1, 0xe1, 0x06,
  0xa1, 0xb0, 0x21, 0x10, 0x85, 0x0d, 0x43, 0x1f, 0x8c, 0x02, 0xb0, 0xa1,
  0x50, 0x83, 0x35, 0x20, 0x85, 0x33, 0x00, 0x5a, 0xe1, 0x89, 0xbd, 0xe1,
  0xb9, 0x8c, 0xbd, 0xb5, 0xc1, 0xa5, 0xb1, 0x95, 0xc9, 0xb9, 0xbc, 0xc1,
  0xd1, 0xa5, 0xbd, 0xb9, 0xcd, 0x4d, 0x09, 0x84, 0x2a, 0x6c, 0x6c, 0x76,
  0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x02, 0xa2, 0x0a, 0x19,
  0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda, 0x9b, 0xdb, 0x94, 0xe0, 0x68,
  0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66, 0x57, 0x26, 0x37, 0x25, 0x48,
  0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85, 0x91, 0x95, 0xc9, 0x35, 0xbd,
  0x91, 0x95, 0xb1, 0x4d, 0x09, 0x98, 0x32, 0x64, 0x78, 0x2e, 0x72, 0x65,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x02, 0x33, 0xa8, 0x43,
  0x86, 0xe7, 0x62, 0x97, 0x56, 0x76, 0x97, 0x44, 0x36, 0x45, 0x17, 0x46,
  0x57, 0x36, 0x25, 0x40, 0x83, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e, 0x74,
  0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x52, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x30, 0x83, 0x81,
  0xc8, 0x01, 0x1f, 0xdc, 0x40, 0x1c, 0xe4, 0xa1, 0x1c, 0xc2, 0x61, 0x1d,
  0xdc, 0x40, 0x1c, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x06, 0x20, 0xa5, 0x6c, 0x4b, 0x5c, 0x13, 0x15,
  0x11, 0x83, 0xc7, 0x20, 0x92, 0x84, 0x54, 0x84, 0x1d, 0x40, 0xc3, 0xe5,
  0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0xa6, 0xb0,
  0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03,
  0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xdb, 0x70,
  0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50,
  0x12, 0x06, 0x20, 0x60, 0x3e, 0x72, 0xdb, 0xc6, 0x20, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x19,
  0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x93, 0xed, 0x17, 0xb7, 0x6d,
  0x03, 0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d,
  0x5b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3,
  0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x15, 0x40, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f,
  0x01, 0xcc, 0xb3, 0x10, 0x7e, 0x71, 0xdb, 0x86, 0x50, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42, 0x94, 0x44, 0x45, 0x2c, 0x7e, 0x71,
  0xdb, 0x26, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81,
  0x52, 0xd3, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0xb6, 0x20, 0x0d, 0x97, 0xef,
  0x3c, 0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x11,
  0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d,
  0x03, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00,
  0x13, 0x04, 0x43, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0xf4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x4b, 0xf1, 0x95, 0x4b,
  0x99, 0x94, 0x51, 0x81, 0x14, 0x4c, 0xb1, 0x15, 0x6a, 0x40, 0x99, 0x06,
  0xcc, 0x00, 0x14, 0x57, 0xb9, 0x95, 0x5c, 0xc9, 0x94, 0x5d, 0xe1, 0xd1,
  0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7e, 0x63, 0x04, 0x7d, 0xdf, 0xb2,
  0xb8, 0x36, 0x46, 0xb0, 0xfb, 0xa3, 0x4c, 0x82, 0xc1, 0x18, 0x01, 0x08,
  0x82, 0x20, 0xfc, 0x0b, 0x23, 0x00, 0x63, 0x04, 0x2a, 0x5e, 0x9f, 0xb2,
  0x37, 0x46, 0xa0, 0xe2, 0xf5, 0x29, 0xfb, 0xc2, 0x18, 0x01, 0x08, 0x82,
  0x20, 0xfe, 0x0b, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x18, 0x8c, 0x11,
  0x80, 0x20, 0x08, 0x82, 0xa0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f,
  0x33, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x06,
  0x78, 0x00, 0xa9, 0xc1, 0x1b, 0xbc, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x60, 0x90, 0x07, 0xd1, 0x1a, 0xc4, 0x41, 0x1c, 0x80, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x80, 0x81, 0x1e, 0x48, 0x6c, 0x30,
  0x07, 0x73, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x00, 0x06,
  0x7b, 0x30, 0xb5, 0x81, 0x1d, 0xd8, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x01, 0x18, 0xf0, 0x01, 0xe5, 0x06, 0x7b, 0xb0, 0x07, 0x63,
  0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x60, 0xd0, 0x07, 0xd5, 0x1b,
  0xec, 0xc1, 0x1e, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x80,
  0x81, 0x1f, 0x58, 0x6d, 0xd0, 0x07, 0x7d, 0x50, 0x06, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x00, 0x06, 0x7f, 0x70, 0xb9, 0x41, 0x1f, 0xf4, 0x81,
  0x19, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x18, 0x80, 0x02, 0x16,
  0x07, 0x7e, 0xe0, 0x07, 0x67, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x2b, 0xe4, 0x01, 0x1f, 0xfc, 0xc1, 0x1c, 0x70, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xb4, 0x82, 0x1e, 0xf4, 0x01, 0x28, 0xa0, 0x41,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x2b, 0xec, 0x81, 0x1f,
  0x84, 0x02, 0x1d, 0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xbc,
  0x02, 0x1f, 0x8c, 0x82, 0x28, 0xd8, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x2c, 0xf4, 0x01, 0x29, 0x8c, 0xc2, 0x1a, 0x80, 0xc1,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xb1, 0xe0, 0x07, 0xa5, 0x40,
  0x0a, 0x77, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xc8,
  0xc2, 0x1f, 0x94, 0x42, 0x29, 0xe4, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0x31, 0x0b, 0xa0, 0x60, 0x0a, 0xa6, 0xe0, 0x06, 0x63,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xdb, 0x2a, 0x7c, 0xc9, 0x29,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d,
  0x49, 0x7c, 0x6c, 0x48, 0xe2, 0x63, 0x43, 0x12, 0x9f, 0x11, 0x83, 0x05,
  0x00, 0x41, 0x30, 0x50, 0x72, 0x21, 0x0d, 0x06, 0x21, 0x18, 0x84, 0x60,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x5c, 0x40, 0x83, 0xc0, 0x8a,
  0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf, 0x88, 0xc1, 0x03,
  0x80, 0x20, 0x18, 0x44, 0xbc, 0xa0, 0x06, 0x99, 0xe5, 0x34, 0x9e, 0x37,
  0x0b, 0xb3, 0x00, 0x07, 0xde, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0x81,
  0x09, 0x64, 0x20, 0x1f, 0x13, 0xca, 0x40, 0x3e, 0x26, 0x9c, 0x01, 0x7c,
  0x4c, 0x40, 0x03, 0xf8, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0xc1, 0x24,
  0x0e, 0x7a, 0x20, 0x04, 0x42, 0x60, 0x67, 0x10, 0xc4, 0x67, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x18, 0x73, 0xe8, 0x83, 0x60, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x98, 0x73, 0xd8, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40,
  0x10, 0x0c, 0x18, 0x74, 0xe0, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0x98, 0x74, 0xe8, 0x83, 0x6d, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x18, 0x75, 0xf8, 0x03, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98,
  0x75, 0x00, 0x05, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x76,
  0x08, 0x05, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x76, 0x08,
  0x05, 0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x18, 0x77, 0x10, 0x05,
  0x6f, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x77, 0x20, 0x05, 0x30,
  0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0x06, 0x1e, 0x4a, 0x01, 0x0c,
  0xac, 0x48, 0xe4, 0x63, 0x47, 0x22, 0x1f, 0x13, 0x82, 0xf8, 0x98, 0xb2,
  0xc8, 0xc7, 0x12, 0x47, 0x3e, 0x26, 0x04, 0xf1, 0x31, 0x06, 0x92, 0x8f,
  0x39, 0x90, 0x7c, 0x4c, 0x08, 0xe2, 0x63, 0xc1, 0x23, 0x1f, 0x2b, 0x1e,
  0xf9, 0x98, 0x10, 0xc4, 0xc7, 0x94, 0x48, 0x3e, 0x56, 0x50, 0xf2, 0x31,
  0x21, 0x88, 0x8f, 0x29, 0x96, 0x7c, 0xcc, 0xb1, 0xe4, 0x63, 0x42, 0x10,
  0x1f, 0x6b, 0x34, 0xf9, 0xd8, 0xc2, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0xd6,
  0x7c, 0xf2, 0x31, 0xca, 0x93, 0x8f, 0x09, 0x41, 0x7c, 0xcc, 0x0a, 0x03,
  0xf9, 0x18, 0x35, 0x06, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x41, 0x9f, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x33, 0x89, 0x5f, 0xf0, 0x90,
  0xc0, 0x9e, 0x30, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x74,
  0x28, 0x11, 0x0e, 0x60, 0x70, 0x04, 0xe6, 0x8c, 0x81, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xa0, 0x53, 0x89, 0x71, 0x10, 0x03, 0x23, 0x18,
  0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x65, 0x26, 0xc6, 0xa1, 0x18, 0x82,
  0x62, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x99, 0x09, 0x71,
  0x08, 0x0c, 0x33, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0xe7, 0x12, 0xe7, 0x50, 0x06, 0x50, 0x60, 0x17, 0x1a, 0xc8, 0x67, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x3a, 0x98, 0x48, 0x87, 0x33, 0x78, 0x02,
  0xb3, 0xd4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0xd0, 0xc9,
  0xc4, 0x3a, 0xa4, 0x81, 0x13, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x81,
  0xb2, 0x13, 0xeb, 0x50, 0x0c, 0x41, 0x31, 0x04, 0x23, 0x06, 0x06, 0x00,
  0x82, 0x60, 0xc0, 0xec, 0x84, 0x3a, 0x04, 0x16, 0x1c, 0xf2, 0x31, 0xc1,
  0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x4c, 0xea, 0x03, 0xf9, 0x58, 0xd0, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x3a, 0x9d, 0x98, 0x07, 0x3f,
  0x28, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xe8, 0x76, 0x82, 0x1e,
  0xf8, 0x20, 0x17, 0x02, 0xa3, 0x42, 0x41, 0x3e, 0x16, 0x44, 0xf2, 0x19,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xce, 0x27, 0xee, 0x41, 0x14, 0x90,
  0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xba, 0x9f, 0xc0, 0x07, 0x50,
  0xe0, 0x85, 0xc0, 0xac, 0x52, 0x90, 0x8f, 0x05, 0x95, 0x7c, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xa0, 0x13, 0x8b, 0x7d, 0x30, 0x85, 0x25, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6e, 0x2c, 0xf8, 0x81, 0x14, 0x7e,
  0x21, 0x18, 0x31, 0x58, 0x00, 0x10, 0x04, 0x03, 0x85, 0x2d, 0xf8, 0x21,
  0x29, 0x82, 0xa4, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x80, 0x61,
  0x8b, 0x7d, 0x08, 0x2c, 0x58, 0xe4, 0x63, 0x02, 0x22, 0x1f, 0x1b, 0x0a,
  0xf9, 0x8c, 0x18, 0x3c, 0x00, 0x08, 0x82, 0x41, 0xf4, 0x16, 0xfd, 0xb0,
  0x0e, 0xe9, 0x10, 0x0e, 0xe0, 0x10, 0x0f, 0xf1, 0x60, 0x16, 0x66, 0x31,
  0x12, 0xf1, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0x10, 0xcd, 0x45, 0x48, 0xc4,
  0x43, 0x3b, 0x94, 0x03, 0x39, 0xd4, 0x43, 0x3d, 0xa8, 0x85, 0x5a, 0x9c,
  0x44, 0x3d, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0x79, 0x91, 0x12, 0x8b,
  0x92, 0xf8, 0x42, 0x2f, 0xf0, 0xc2, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x30, 0x79, 0x61, 0x16, 0x81, 0x11, 0x84, 0x7c, 0x8c, 0x50, 0xe4, 0x63,
  0x85, 0x22, 0x1f, 0x33, 0x14, 0xf9, 0x58, 0x33, 0xc4, 0xc7, 0x9a, 0x21,
  0x3e, 0xd6, 0x0c, 0xf1, 0xb1, 0x81, 0x91, 0x8f, 0x0d, 0x8d, 0x7c, 0x6c,
  0x70, 0xe4, 0x63, 0x93, 0x4a, 0xc0, 0xc7, 0xa6, 0x95, 0x80, 0x8f, 0x4d,
  0x2c, 0x01, 0x1f, 0x83, 0x06, 0xf9, 0x58, 0x34, 0xc8, 0xc7, 0xa4, 0x41,
  0x3e, 0x36, 0xc4, 0x04, 0x7c, 0x6c, 0x90, 0x09, 0xf8, 0xd8, 0x30, 0x13,
  0xf0, 0xb1, 0x01, 0x93, 0x8f, 0x0d, 0x99, 0x7c, 0x6c, 0xd0, 0xe4, 0x33,
  0x4b, 0x10, 0x0c, 0x54, 0x0c, 0x70, 0x02, 0x84, 0x46, 0x30, 0x50, 0x31,
  0xc8, 0x09, 0x10, 0x1a, 0xc1, 0x40, 0xc5, 0x40, 0x27, 0x40, 0x68, 0x04,
  0x03, 0x15, 0x84, 0xcc, 0x00, 0xa1, 0x11, 0x58, 0xc0, 0x16, 0x30, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xed, 0x35, 0xc6, 0xa2, 0x25, 0x82,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x30, 0x9e,
  0x18, 0xe2, 0x63, 0x3d, 0x31, 0xc4, 0xc7, 0x7c, 0x62, 0x88, 0xcf, 0x88,
  0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0xbd, 0xd1, 0x16, 0x83, 0x10, 0x0c,
  0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x6f, 0xb0, 0x45,
  0x60, 0x41, 0x21, 0x1f, 0x13, 0x0a, 0xf9, 0xd8, 0x50, 0xc8, 0xc7, 0x86,
  0x93, 0x80, 0x8f, 0x0d, 0x27, 0x01, 0x1f, 0x1b, 0x4e, 0x02, 0x3e, 0x23,
  0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0x94, 0x47, 0x5d, 0x0c, 0x42, 0x30,
  0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xe5, 0x41, 0x17,
  0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5, 0x20, 0x9f, 0x11,
  0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xd4, 0x43, 0x2f, 0xf8, 0x60, 0x0f,
  0xf4, 0x60, 0x51, 0x92, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x60, 0xd4,
  0xe3, 0x36, 0x82, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x50, 0xd8, 0x83,
  0x2f, 0x1a, 0x66, 0x29, 0x88, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x18, 0xf6, 0xc8, 0x8d, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0xf7, 0xf0, 0x0b, 0x50, 0xf8, 0x03, 0x3f, 0x38, 0x8c, 0x62, 0xc4, 0xc0,
  0x00, 0x40, 0x10, 0x0c, 0x18, 0xf7, 0xd8, 0x8d, 0xc0, 0xf2, 0x60, 0x2e,
  0xe4, 0x63, 0x04, 0x21, 0x1f, 0x0b, 0x04, 0xf9, 0x58, 0xb0, 0x17, 0xf0,
  0xb1, 0xba, 0x48, 0xe2, 0x63, 0x41, 0x20, 0x1f, 0x0b, 0x02, 0xf9, 0x58,
  0x30, 0xc8, 0xc7, 0x82, 0x42, 0x3e, 0x16, 0xe8, 0x05, 0x7c, 0x6c, 0x2f,
  0x40, 0x21, 0x3e, 0x16, 0x04, 0xf2, 0xb1, 0x20, 0x90, 0x8f, 0x05, 0x83,
  0x7c, 0x2c, 0x58, 0xe4, 0x63, 0x01, 0x68, 0xc0, 0xc7, 0x8e, 0x40, 0x3e,
  0x66, 0x0a, 0xa6, 0x20, 0x1f, 0x0b, 0x4c, 0x03, 0x3e, 0x46, 0x51, 0xf2,
  0xb1, 0x40, 0x90, 0x8f, 0x05, 0xa6, 0x01, 0x1f, 0x0b, 0x02, 0xf9, 0x58,
  0x00, 0x1b, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x8a, 0x44,
  0xc0, 0x43, 0x36, 0x02, 0x43, 0x02, 0xfa, 0xd8, 0x6a, 0xf0, 0x41, 0x7c,
  0x8c, 0x35, 0xf8, 0x20, 0x3e, 0xd6, 0x1a, 0x7c, 0x10, 0x1f, 0x73, 0x0d,
  0x30, 0x88, 0x8f, 0x05, 0x81, 0x7c, 0x2c, 0x08, 0xe4, 0x63, 0xc1, 0x20,
  0x1f, 0x0b, 0x0e, 0xf9, 0x98, 0x70, 0xc8, 0xc7, 0x86, 0x43, 0x3e, 0x36,
  0x98, 0x02, 0x7c, 0x6c, 0x30, 0x05, 0xf8, 0xd8, 0x60, 0x0a, 0xf0, 0x31,
  0xdc, 0x30, 0x83, 0xf8, 0xd8, 0x35, 0x1e, 0xf2, 0xb1, 0x40, 0x90, 0x8f,
  0x05, 0x69, 0x00, 0x1f, 0xe3, 0x8d, 0x80, 0x3e, 0x16, 0x4c, 0xf2, 0xb1,
  0x20, 0x91, 0x8f, 0x09, 0x89, 0x7c, 0x6c, 0x48, 0xe4, 0x63, 0xac, 0x90,
  0x1f, 0x30, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4d, 0x47, 0xdc,
  0x03, 0x37, 0x82, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0x41, 0x0f, 0xe4, 0x63, 0xc3, 0x1e, 0xc8, 0xc7, 0x06, 0x3e,
  0x90, 0x8f, 0xa1, 0x81, 0x39, 0xc8, 0xc7, 0xd2, 0xc0, 0x1c, 0xe4, 0x63,
  0x6a, 0x60, 0x0e, 0xf2, 0x31, 0x67, 0x80, 0x8f, 0x39, 0x03, 0x7c, 0xcc,
  0x19, 0xe0, 0x63, 0xc9, 0x20, 0x1f, 0x4b, 0x06, 0xf9, 0x58, 0x32, 0xc8,
  0xc7, 0x06, 0x70, 0x80, 0x8f, 0x0d, 0xe0, 0x00, 0x1f, 0x1b, 0xc0, 0x01,
  0x3e, 0x06, 0x0e, 0x6a, 0x02, 0x83, 0xe1, 0x86, 0xa0, 0x4c, 0xc0, 0x60,
  0x96, 0x41, 0x08, 0x82, 0xd1, 0x84, 0x92, 0x18, 0x46, 0x0c, 0x1e, 0x00,
  0x04, 0xc1, 0x20, 0xaa, 0x93, 0x11, 0xb1, 0x0f, 0xf8, 0x48, 0x09, 0x94,
  0x38, 0x89, 0xfb, 0x48, 0x91, 0x14, 0x49, 0x91, 0xfb, 0x18, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0xf2, 0x41, 0x3e,
  0x36, 0xe4, 0x83, 0x7c, 0x6c, 0xc8, 0x07, 0xf9, 0xd8, 0xd0, 0xc0, 0xc7,
  0x86, 0x06, 0x3e, 0x36, 0x34, 0xf0, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x03, 0x6c, 0x4f, 0x5c, 0x04, 0x3f, 0x76, 0x64, 0x34, 0x21, 0x10, 0x2e,
  0x18, 0xcc, 0x82, 0x96, 0x90, 0x8f, 0x9d, 0x88, 0x7a, 0xc4, 0xc7, 0x50,
  0x44, 0x3d, 0xe2, 0x63, 0x29, 0xa2, 0x1e, 0xf1, 0x19, 0x31, 0x58, 0x00,
  0x10, 0x04, 0x03, 0x05, 0x55, 0x70, 0x64, 0x10, 0x02, 0x9d, 0xc8, 0x09,
  0x9c, 0xb0, 0x80, 0x45, 0xe4, 0x63, 0x01, 0x4f, 0xc8, 0xc7, 0x04, 0x9e,
  0x90, 0x8f, 0x0d, 0x3c, 0x21, 0x1f, 0x43, 0x86, 0xf8, 0x18, 0x32, 0xc4,
  0xc7, 0x90, 0x21, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0x10, 0xad,
  0xca, 0x9a, 0xb8, 0x48, 0x8a, 0x0c, 0x42, 0x00, 0x23, 0x62, 0x22, 0x26,
  0x62, 0xc2, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0x82, 0x0d, 0x26, 0x21, 0x1f, 0x1b, 0x4c, 0x42, 0x3e, 0x36, 0x98, 0x84,
  0x7c, 0x2c, 0x1b, 0xe0, 0x63, 0xd9, 0x00, 0x1f, 0xcb, 0x06, 0xf8, 0x8c,
  0x18, 0x3c, 0x00, 0x08, 0x82, 0x41, 0x84, 0x2b, 0x66, 0x72, 0x23, 0x32,
  0xa2, 0x22, 0x29, 0xa2, 0x23, 0x3a, 0xf2, 0x2a, 0xaf, 0xc2, 0x26, 0x3a,
  0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76,
  0x0c, 0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x60, 0xd3, 0x15, 0x37, 0xc1, 0x91, 0x3e, 0x19, 0x4d,
  0x08, 0x06, 0x0b, 0xda, 0x40, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x80, 0x94, 0x8b, 0xac, 0xe4, 0x4a, 0xae, 0xb4, 0x8a, 0x31, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x48, 0xb9, 0xc8, 0x4a, 0xae, 0xe4, 0x4a, 0xa8,
  0x14, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x94, 0x8b, 0xac, 0xe4,
  0x4a, 0xae, 0xb0, 0x0a, 0x31, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x48,
  0xb9, 0xc8, 0x4a, 0xae, 0xe4, 0x8a, 0xaa, 0x04, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x70, 0x4a, 0x17, 0x2a, 0x02, 0x52, 0xcb, 0xce, 0xe4, 0xcd, 0xb0, 0xbb,
  0xe3, 0xc7, 0xad, 0x6a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0x69, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x1b, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x59, 0x5b, 0x6c, 0x5c, 0x47,
  0x19, 0x9e, 0x99, 0x73, 0xce, 0xec, 0xb9, 0xed, 0xbf, 0xeb, 0xcb, 0xde,
  0xaf, 0xf6, 0xfa, 0x6e, 0xc7, 0x71, 0xd6, 0xeb, 0xdd, 0xb5, 0x9d, 0xac,
  0x37, 0xae, 0x53, 0x40, 0x15, 0x17, 0x91, 0x7a, 0x1e, 0xa2, 0x3a, 0x42,
  0xd0, 0x40, 0xd2, 0xa6, 0x08, 0xd2, 0x82, 0xfa, 0x80, 0xd6, 0x2e, 0x18,
  0x10, 0xc2, 0x88, 0x72, 0x11, 0xaf, 0xf0, 0x90, 0xa7, 0x08, 0x44, 0x91,
  0x78, 0xad, 0x9d, 0x4a, 0x50, 0x16, 0x4b, 0x54, 0x42, 0x62, 0x15, 0x04,
  0x52, 0x9f, 0x78, 0xe1, 0x89, 0xaa, 0xe4, 0xa1, 0xaa, 0x50, 0xcc, 0xff,
  0x9f, 0x73, 0xb6, 0x59, 0x3b, 0x0d, 0x09, 0x3c, 0x59, 0xc2, 0x23, 0x8d,
  0xbe, 0x99, 0x7f, 0xbe, 0x73, 0xe6, 0xff, 0xff, 0x6f, 0xe6, 0x9c, 0x3d,
  0xb3, 0x4f, 0x5e, 0xbc, 0xf8, 0x71, 0xce, 0x19, 0xbb, 0x91, 0x61, 0x5e,
  0x91, 0x3e, 0xb0, 0x7f, 0xec, 0xfe, 0xe2, 0xed, 0xc7, 0xa9, 0xaf, 0xfd,
  0x97, 0xfc, 0x6e, 0x15, 0xc1, 0x75, 0x6b, 0xec, 0x7f, 0x2b, 0xdd, 0xfb,
  0xbc, 0x07, 0x7e, 0xbf, 0x69, 0xf7, 0x8e, 0x0e, 0x3e, 0xc0, 0xaf, 0xa7,
  0x82, 0x46, 0xda, 0x07, 0xa2, 0x5b, 0x58, 0x0d, 0x2e, 0xd8, 0xed, 0x1e,
  0x5e, 0x89, 0x15, 0x0d, 0xde, 0xd3, 0xff, 0x75, 0xc0, 0x27, 0xdb, 0x18,
  0xd6, 0xbf, 0x04, 0x7d, 0xc9, 0x34, 0x02, 0x21, 0x79, 0x04, 0x87, 0xb8,
  0x90, 0x22, 0x84, 0x21, 0x09, 0xc1, 0xfe, 0x4f, 0x0a, 0x45, 0x3f, 0xd1,
  0xd3, 0xa6, 0xc0, 0xa3, 0x58, 0x23, 0x3d, 0x1c, 0x5a, 0x4b, 0x57, 0xbc,
  0x8c, 0x6c, 0xed, 0xf5, 0xd6, 0x57, 0x93, 0xec, 0xbd, 0x0f, 0xbf, 0xeb,
  0x61, 0x1e, 0x47, 0x9e, 0x78, 0x0c, 0x9e, 0x46, 0x3c, 0xfd, 0x31, 0x79,
  0xda, 0xc3, 0x79, 0xc2, 0x62, 0x97, 0x8d, 0x90, 0xb8, 0x1c, 0xc9, 0xa2,
  0x7f, 0xfc, 0xc3, 0x78, 0xd7, 0xee, 0x08, 0x4b, 0xe0, 0xd0, 0xb5, 0x3b,
  0xc8, 0x63, 0x0f, 0xe7, 0x5d, 0x0d, 0x78, 0x57, 0x1f, 0xc1, 0x7b, 0x2e,
  0xe0, 0x3d, 0xf7, 0x08, 0xde, 0xf3, 0x01, 0xef, 0xf9, 0x47, 0xf0, 0x0e,
  0xc7, 0x1b, 0xf1, 0xf2, 0x62, 0x3c, 0x10, 0xf1, 0x01, 0x16, 0x76, 0x52,
  0x8e, 0x55, 0x39, 0xd1, 0xe4, 0xf8, 0x95, 0x13, 0x4d, 0x8e, 0x5f, 0x39,
  0xd1, 0xe4, 0xf8, 0x95, 0x13, 0x4d, 0x8e, 0x5f, 0x39, 0xd1, 0xe4, 0xf8,
  0x95, 0x13, 0x4d, 0x8e, 0x6f, 0x79, 0x61, 0x78, 0xab, 0x13, 0xfe, 0xe3,
  0x3d, 0x2d, 0xc3, 0xff, 0xf6, 0xfb, 0xb1, 0x7f, 0x6e, 0x75, 0x5e, 0xc1,
  0xf6, 0xdb, 0xbf, 0xfc, 0x5c, 0x52, 0x63, 0x3f, 0xdb, 0x6b, 0xe9, 0x3f,
  0xd9, 0x6d, 0xd9, 0xf7, 0x76, 0x23, 0xda, 0x0f, 0x77, 0xc3, 0xda, 0xf6,
  0xae, 0xa3, 0x7d, 0x7d, 0xd7, 0xd2, 0x5e, 0xdb, 0xdd, 0xd2, 0xbe, 0x83,
  0xf5, 0x57, 0x58, 0xbf, 0x8b, 0xf5, 0x1b, 0x58, 0xbf, 0x87, 0xf5, 0x9b,
  0x58, 0xbf, 0x8f, 0xf5, 0x47, 0xbb, 0xc2, 0x76, 0xef, 0xe2, 0xad, 0xdf,
  0x97, 0xd2, 0x47, 0x6e, 0xfa, 0x68, 0x30, 0x1f, 0x93, 0xe0, 0xa3, 0xee,
  0xfa, 0x68, 0x45, 0x4d, 0x0f, 0x43, 0x03, 0x3e, 0xfe, 0x38, 0xf7, 0x83,
  0xdd, 0x37, 0x70, 0xce, 0x03, 0xbc, 0xd7, 0xcf, 0x3f, 0xc9, 0xfb, 0x06,
  0xb5, 0x7f, 0xed, 0x9a, 0x62, 0xc2, 0x1b, 0x63, 0x46, 0xb2, 0xcd, 0x4c,
  0xb3, 0xcd, 0x2c, 0xb7, 0xcd, 0xec, 0x68, 0x9b, 0xe9, 0xcf, 0xb4, 0xb9,
  0x91, 0x6a, 0x33, 0x99, 0x6d, 0x33, 0x56, 0x6c, 0x33, 0x3e, 0xd2, 0xe6,
  0xfa, 0x46, 0x9b, 0x9b, 0x56, 0x9b, 0xcb, 0x5c, 0x9b, 0xb3, 0xa1, 0x36,
  0xe7, 0xa3, 0x6d, 0x6e, 0x85, 0xdb, 0xdc, 0xee, 0x6b, 0xb3, 0xad, 0x3f,
  0xfd, 0x39, 0xc1, 0x18, 0xac, 0xfb, 0x18, 0xb9, 0xe5, 0xa3, 0xb1, 0x79,
  0x7b, 0x67, 0xcf, 0x72, 0x85, 0x69, 0xce, 0x32, 0xd3, 0x86, 0x41, 0x93,
  0x78, 0xf8, 0x1d, 0x17, 0x5d, 0xf7, 0xb1, 0x8f, 0x6b, 0x71, 0xb8, 0xe5,
  0xb7, 0x25, 0x8d, 0x85, 0x18, 0xeb, 0x5f, 0xf7, 0x71, 0xe0, 0x96, 0x8f,
  0x21, 0xc6, 0xe3, 0x8a, 0xda, 0x26, 0x63, 0x31, 0x1a, 0xc3, 0xef, 0xec,
  0x41, 0x3b, 0x16, 0x57, 0x91, 0x5c, 0xde, 0x34, 0x72, 0xb6, 0xe9, 0x6c,
  0xc4, 0x5b, 0xcc, 0x1f, 0x87, 0xcd, 0xdf, 0xed, 0xec, 0xf5, 0x0d, 0x0d,
  0x9b, 0x9b, 0x6f, 0xee, 0xec, 0xc9, 0x21, 0xd7, 0x5c, 0xf7, 0xed, 0xd1,
  0xcd, 0xdf, 0xee, 0xec, 0x0d, 0x8c, 0x8e, 0x99, 0x9b, 0xbf, 0xd9, 0xd9,
  0x0b, 0x8d, 0x82, 0xc9, 0x12, 0x49, 0xe0, 0x89, 0x34, 0x98, 0xda, 0xd6,
  0x3b, 0x26, 0xfb, 0xa2, 0x60, 0xfe, 0x7d, 0xfb, 0xe5, 0xf8, 0x0c, 0x18,
  0xa5, 0x59, 0xb0, 0x13, 0x83, 0x90, 0x60, 0x4f, 0x75, 0x64, 0xe1, 0xf2,
  0x76, 0xc2, 0x29, 0xc3, 0xe6, 0x1b, 0x3b, 0x7b, 0xd1, 0x5c, 0xd1, 0x8c,
  0xe5, 0xb2, 0xe6, 0x2d, 0x9f, 0x1b, 0x23, 0xdb, 0xe0, 0xe8, 0x84, 0x49,
  0x31, 0xc6, 0x46, 0x47, 0xcc, 0x18, 0xf2, 0x43, 0xa5, 0x4b, 0xdb, 0xa1,
  0xc2, 0x0c, 0xc4, 0xb1, 0x6d, 0x8c, 0x5f, 0xda, 0x8e, 0x47, 0xe6, 0x20,
  0x84, 0xed, 0x58, 0xe4, 0xf3, 0xdb, 0x49, 0xc4, 0x44, 0xf8, 0xb3, 0xdb,
  0xb1, 0xb0, 0x0b, 0x06, 0xb6, 0xe3, 0x4e, 0x7a, 0x3b, 0x51, 0x72, 0x41,
  0x52, 0x7b, 0x3c, 0xbd, 0x1d, 0x1b, 0x1f, 0x83, 0x01, 0xe2, 0x14, 0x3e,
  0xb1, 0x1d, 0x2f, 0xe4, 0x21, 0x39, 0x39, 0x03, 0x11, 0xba, 0xb6, 0xd4,
  0xd8, 0x4e, 0x0e, 0x0d, 0x43, 0x7f, 0x78, 0x46, 0x85, 0x86, 0xa6, 0xc0,
  0x18, 0x2a, 0x82, 0x31, 0x69, 0x03, 0x84, 0x87, 0x55, 0x68, 0xd2, 0x05,
  0x18, 0x9f, 0x52, 0x50, 0x28, 0xaa, 0xfe, 0x82, 0xad, 0xfa, 0xc7, 0x5d,
  0x15, 0x9b, 0xce, 0x82, 0x0c, 0x03, 0xf4, 0x95, 0xb2, 0x2a, 0x7e, 0x0a,
  0x54, 0x74, 0x28, 0xab, 0x0c, 0x07, 0x14, 0x6c, 0x64, 0x5b, 0xa1, 0x0d,
  0x68, 0x85, 0x4e, 0xe5, 0x21, 0x84, 0x3e, 0x84, 0x9c, 0x31, 0xf8, 0xd2,
  0xca, 0x0e, 0x7e, 0xdb, 0x3d, 0xd5, 0x61, 0x7f, 0xff, 0x83, 0xc6, 0x11,
  0x39, 0x62, 0x1f, 0x07, 0x70, 0xa8, 0xad, 0xed, 0x97, 0x42, 0xb9, 0x11,
  0x6c, 0x4f, 0x77, 0x18, 0x17, 0x45, 0x5e, 0x18, 0x51, 0x31, 0x9e, 0x07,
  0xe7, 0x0b, 0xf1, 0x56, 0x94, 0x33, 0x88, 0xe4, 0x26, 0x80, 0x87, 0x27,
  0x14, 0xcb, 0xb9, 0xe0, 0x18, 0x23, 0xca, 0x09, 0x4d, 0x28, 0x8e, 0xf3,
  0x0f, 0x4e, 0x0a, 0x70, 0x2c, 0x57, 0xf5, 0x8f, 0x0a, 0x25, 0xc3, 0x42,
  0xf1, 0x0d, 0xd1, 0xe2, 0x93, 0x59, 0xe0, 0xa3, 0x71, 0xe4, 0xe7, 0xc1,
  0x8c, 0x50, 0xce, 0xaf, 0x0b, 0x33, 0x84, 0xa8, 0x7f, 0x86, 0x3e, 0xc9,
  0x5b, 0x26, 0x9b, 0xbb, 0x8b, 0xdf, 0xa0, 0xef, 0x43, 0x06, 0x20, 0x8a,
  0x73, 0x3b, 0xa9, 0xbc, 0x1e, 0x89, 0x15, 0x55, 0x74, 0x4b, 0xef, 0xbc,
  0x5b, 0x14, 0xec, 0xcb, 0xe8, 0xe7, 0x81, 0x3e, 0x2b, 0xed, 0x3b, 0xa5,
  0xd7, 0xc9, 0xe7, 0x3e, 0xf2, 0x39, 0x2c, 0xd6, 0xfa, 0xc9, 0xcf, 0xb0,
  0x5c, 0xc3, 0x07, 0xa1, 0x37, 0x76, 0x20, 0x84, 0x87, 0x94, 0x47, 0x11,
  0xb6, 0xd7, 0x04, 0x69, 0x78, 0xfa, 0x9e, 0x86, 0xb6, 0x73, 0x7d, 0xd6,
  0x30, 0x50, 0xac, 0x92, 0xfb, 0x7d, 0x8a, 0x57, 0x6a, 0x7e, 0x9b, 0x34,
  0x94, 0x2c, 0xd4, 0xa1, 0xbd, 0x2b, 0xac, 0x19, 0xe8, 0xb7, 0x46, 0x80,
  0x59, 0x18, 0x9f, 0x35, 0x85, 0xfa, 0x4c, 0x77, 0x38, 0x7a, 0x39, 0x60,
  0x8d, 0x79, 0xd7, 0x33, 0x6b, 0xbf, 0xe4, 0xe5, 0x0a, 0x91, 0xee, 0x2f,
  0x10, 0x89, 0x43, 0x67, 0x06, 0x72, 0xc3, 0x6d, 0x65, 0x68, 0xcc, 0xad,
  0x8e, 0xa4, 0x89, 0xeb, 0x96, 0x47, 0x12, 0x78, 0x5f, 0xc9, 0x59, 0x33,
  0x49, 0xa8, 0xb1, 0x66, 0x8a, 0xd0, 0x60, 0xcd, 0x4c, 0xad, 0xee, 0x69,
  0x2f, 0xdc, 0xa9, 0x91, 0xf4, 0x42, 0x1d, 0x73, 0x55, 0x57, 0xd9, 0x8d,
  0x7a, 0x2b, 0xbd, 0x58, 0x81, 0xcc, 0x62, 0x15, 0xe4, 0x22, 0x6a, 0x7b,
  0xa6, 0x0e, 0xc9, 0xda, 0x1c, 0x38, 0xa7, 0xeb, 0x2a, 0xb1, 0x30, 0xa7,
  0x22, 0xf3, 0x75, 0x95, 0x0a, 0xcf, 0x29, 0xa8, 0x95, 0x21, 0xb7, 0x15,
  0xed, 0x64, 0x17, 0x05, 0xcb, 0x52, 0x8e, 0xea, 0x82, 0x25, 0xb0, 0x9f,
  0x3c, 0x23, 0x98, 0xb3, 0x50, 0x46, 0xbd, 0x2b, 0x32, 0xbb, 0x78, 0x16,
  0x74, 0x1a, 0x9b, 0x13, 0x2c, 0xb5, 0x35, 0xdd, 0x89, 0x84, 0x91, 0x73,
  0xda, 0x85, 0xfc, 0xb9, 0xb3, 0xde, 0xda, 0x4e, 0x9c, 0xde, 0x2f, 0xe9,
  0xd6, 0x1c, 0xa4, 0xe6, 0xcb, 0x40, 0x3e, 0xcb, 0x85, 0x37, 0xb5, 0xfc,
  0x62, 0x1d, 0xa2, 0x43, 0x67, 0x21, 0x79, 0x66, 0x0e, 0xb2, 0x68, 0xcb,
  0xd6, 0xf6, 0x35, 0xe2, 0x27, 0x2d, 0x13, 0xf2, 0xb8, 0xee, 0x68, 0x0d,
  0xeb, 0xfc, 0xd3, 0x7a, 0x81, 0x50, 0x53, 0xba, 0x4e, 0x68, 0x5c, 0xd2,
  0xe9, 0xfa, 0x28, 0x72, 0xb3, 0xb5, 0x2a, 0x18, 0x4e, 0x1d, 0x32, 0xa5,
  0x55, 0xa0, 0xf9, 0xbd, 0x7b, 0x2c, 0xbe, 0xa5, 0x65, 0x46, 0xd7, 0x20,
  0x33, 0x5e, 0x85, 0x83, 0xb3, 0x4d, 0xcc, 0xe1, 0x56, 0x23, 0x85, 0xf6,
  0xd4, 0xe2, 0xbe, 0x56, 0x3c, 0xed, 0x2a, 0x9a, 0xdf, 0x5d, 0x9a, 0x05,
  0xb9, 0xee, 0xb6, 0x0e, 0xca, 0x65, 0xf8, 0x6b, 0xe4, 0x63, 0x4d, 0xc4,
  0xe2, 0xeb, 0xb5, 0x6f, 0x2d, 0xa4, 0xd6, 0xcb, 0xad, 0x3c, 0x8e, 0xcb,
  0x79, 0x17, 0xc2, 0x4b, 0x65, 0x80, 0xa5, 0x25, 0x90, 0x67, 0x56, 0x95,
  0xb4, 0xaa, 0x4a, 0xae, 0xac, 0x29, 0xd2, 0x4c, 0xc7, 0x0d, 0x9e, 0x78,
  0xc2, 0x84, 0x1c, 0xe6, 0x29, 0x75, 0x61, 0xd6, 0xd3, 0xcb, 0xb0, 0xe9,
  0x81, 0x32, 0xdd, 0x91, 0x6e, 0x57, 0x13, 0xcc, 0x79, 0x98, 0x35, 0x73,
  0xb4, 0x2f, 0x51, 0x1b, 0x4f, 0x03, 0x0b, 0x35, 0x30, 0x84, 0xa7, 0x97,
  0x8e, 0x3a, 0xe5, 0x96, 0x1b, 0x90, 0x32, 0x58, 0xcb, 0x1b, 0x73, 0x58,
  0x93, 0xb4, 0x91, 0xa8, 0x4d, 0xa6, 0xd6, 0x40, 0x6d, 0x1a, 0xaa, 0xb0,
  0xd1, 0x68, 0x65, 0x56, 0xaa, 0x90, 0x5b, 0x41, 0x1f, 0x56, 0x50, 0x9b,
  0x79, 0xe4, 0x2f, 0xa3, 0x4f, 0xcb, 0x4b, 0xc0, 0xe2, 0x0d, 0xc5, 0xaa,
  0x65, 0xe5, 0xd4, 0x96, 0x14, 0xcf, 0x37, 0x14, 0x77, 0xcb, 0x2a, 0x17,
  0xe4, 0x3c, 0x43, 0x1a, 0x34, 0x04, 0x1b, 0x42, 0x7d, 0x0a, 0x2b, 0x82,
  0x99, 0x6c, 0xe6, 0x6e, 0x13, 0xd7, 0xfa, 0x30, 0xf6, 0x53, 0xf3, 0xa4,
  0x0d, 0x8e, 0x97, 0x91, 0x57, 0x6b, 0xc0, 0xf0, 0x05, 0x17, 0x0a, 0x2b,
  0x0d, 0x48, 0x07, 0x7a, 0x14, 0x30, 0x9f, 0xe4, 0x5f, 0x66, 0x61, 0x5f,
  0x23, 0x5b, 0x14, 0x91, 0xd6, 0xaa, 0x58, 0x6d, 0x40, 0x66, 0xa1, 0x02,
  0xb9, 0xe5, 0x60, 0x1c, 0x73, 0x99, 0x9a, 0xc7, 0xbc, 0x23, 0x3f, 0x8b,
  0x1a, 0x1e, 0x54, 0xab, 0x5e, 0x1e, 0xb3, 0x98, 0x3b, 0x6c, 0x7b, 0xb9,
  0x24, 0x2d, 0x52, 0xa8, 0x1d, 0xe5, 0x20, 0x85, 0xda, 0x79, 0x1a, 0x90,
  0x76, 0xeb, 0xd5, 0x56, 0x1e, 0xaf, 0xcb, 0x63, 0x7f, 0xf8, 0xc2, 0x7e,
  0xa9, 0x78, 0xce, 0x55, 0x7c, 0xf5, 0x2c, 0xa4, 0x4b, 0x4d, 0x4f, 0x13,
  0x59, 0x73, 0x81, 0xad, 0x56, 0x21, 0x3d, 0xba, 0x0a, 0xe9, 0xf1, 0x0a,
  0xae, 0xcb, 0xa6, 0x92, 0xcb, 0xa8, 0xc1, 0x7c, 0xc5, 0xcb, 0xbf, 0x19,
  0x65, 0x2c, 0x73, 0xde, 0x54, 0xf9, 0x27, 0x66, 0x55, 0x01, 0xd7, 0x28,
  0xe5, 0xdd, 0xea, 0xf7, 0xf3, 0x6f, 0x0f, 0xde, 0xdf, 0x13, 0x56, 0xb0,
  0x27, 0x4c, 0xcc, 0x75, 0x81, 0x72, 0xdc, 0xc7, 0x9a, 0x79, 0xc2, 0x58,
  0xb0, 0x27, 0x06, 0xee, 0xef, 0x09, 0xfb, 0x3f, 0xed, 0x09, 0x8c, 0x33,
  0x85, 0xeb, 0x1f, 0xd0, 0x67, 0x67, 0xa5, 0x8e, 0x73, 0x62, 0xde, 0x17,
  0xaa, 0x2a, 0x72, 0xae, 0xee, 0xad, 0xfb, 0x7c, 0xb8, 0xac, 0x32, 0x41,
  0xee, 0x8f, 0xee, 0x91, 0xfc, 0x91, 0x9c, 0x67, 0x17, 0x1b, 0xb8, 0x1f,
  0x8e, 0xe4, 0x9c, 0xf6, 0x40, 0x90, 0x6b, 0x6f, 0xfd, 0x22, 0x66, 0x6a,
  0x15, 0x5c, 0xd7, 0x98, 0x5b, 0xdc, 0x03, 0x5e, 0xbe, 0x6b, 0x6f, 0x69,
  0xd1, 0x52, 0xdd, 0xbb, 0x26, 0x8d, 0xeb, 0x9e, 0xc6, 0xd2, 0xa8, 0x07,
  0xe5, 0xff, 0xa0, 0x52, 0xf1, 0xd7, 0x70, 0xa5, 0xe2, 0xe5, 0x3d, 0xbd,
  0x5e, 0x69, 0x91, 0x56, 0xa9, 0xf9, 0xaa, 0x37, 0x9e, 0x41, 0x4d, 0x88,
  0xcf, 0x02, 0x3d, 0xc8, 0xc6, 0x03, 0x4d, 0x44, 0xa0, 0x09, 0x69, 0x93,
  0x3f, 0xb7, 0x5f, 0x22, 0x1d, 0x69, 0xbf, 0x64, 0xe6, 0x5d, 0xa5, 0xe3,
  0xfa, 0x97, 0x4b, 0x55, 0x5f, 0x93, 0x05, 0x7c, 0x87, 0x2c, 0x55, 0x20,
  0x3a, 0xba, 0x04, 0xd1, 0xf1, 0x22, 0x48, 0x5e, 0x57, 0x8c, 0x7d, 0xa4,
  0xe3, 0xe4, 0x1a, 0xba, 0xd4, 0x96, 0x94, 0x34, 0x8a, 0x8a, 0xb3, 0x0b,
  0x5e, 0x5f, 0xb0, 0x27, 0x3d, 0x64, 0xfc, 0x56, 0x87, 0xce, 0xf9, 0x52,
  0x8b, 0xa6, 0xca, 0x0c, 0xcd, 0xa9, 0x03, 0x51, 0x6c, 0x31, 0x76, 0x7b,
  0x25, 0xbd, 0x3c, 0x8b, 0x9a, 0xad, 0x79, 0x1c, 0xce, 0xce, 0x77, 0x38,
  0x5f, 0xc5, 0x27, 0xd9, 0xf9, 0x8e, 0x40, 0x6c, 0xc5, 0xef, 0x7d, 0x9b,
  0x7c, 0x71, 0x13, 0xf9, 0x9b, 0x26, 0x2b, 0xde, 0xbd, 0x8e, 0xeb, 0xf6,
  0xa3, 0x88, 0x2f, 0x23, 0xa6, 0xf1, 0xf9, 0xcd, 0x99, 0x2d, 0xe8, 0x60,
  0xd6, 0x7b, 0x96, 0xcb, 0xab, 0x22, 0x45, 0x9a, 0x17, 0xc4, 0x84, 0x45,
  0x71, 0x24, 0xca, 0x37, 0xe9, 0x3d, 0x92, 0xca, 0x55, 0x6f, 0xda, 0x84,
  0x85, 0xa9, 0x9b, 0x2e, 0xfa, 0x68, 0x25, 0xa6, 0xf4, 0x30, 0xfa, 0x46,
  0x18, 0x41, 0xdf, 0x08, 0x01, 0xe7, 0x27, 0xa4, 0xb5, 0xcd, 0xa4, 0x04,
  0x1b, 0x7d, 0x75, 0xe9, 0x24, 0xdc, 0x8e, 0xb7, 0x1c, 0xc7, 0xc6, 0x77,
  0xd0, 0xf9, 0x4e, 0x38, 0xb6, 0x4a, 0xef, 0x84, 0x46, 0x3a, 0xf4, 0xea,
  0x3b, 0x8e, 0x25, 0x45, 0x14, 0xdf, 0xa2, 0x37, 0xe8, 0xfd, 0x55, 0x32,
  0x15, 0x1f, 0x9d, 0x55, 0x62, 0x7c, 0x4e, 0xd1, 0xbb, 0xc1, 0x9a, 0x34,
  0x95, 0x73, 0x6a, 0x4e, 0xd9, 0xd3, 0xb3, 0x4a, 0x0f, 0xeb, 0x32, 0xd9,
  0x67, 0xcb, 0x44, 0xc4, 0x94, 0x0f, 0x3f, 0x97, 0x7d, 0x05, 0xed, 0x3f,
  0x3d, 0x56, 0xb5, 0x7b, 0xc8, 0xda, 0x3d, 0x96, 0xc5, 0x47, 0x1c, 0xeb,
  0xb5, 0x51, 0xb5, 0xf8, 0x61, 0x1b, 0xbd, 0x48, 0x51, 0x8d, 0x43, 0x36,
  0x6a, 0x3b, 0xda, 0x61, 0x1b, 0x1d, 0x6d, 0xbb, 0xfa, 0x61, 0x9b, 0x81,
  0x35, 0x6c, 0x1c, 0xb6, 0x51, 0xc1, 0xcd, 0xf8, 0xc0, 0xbc, 0x91, 0xd0,
  0xfd, 0xf1, 0xee, 0x79, 0x7a, 0xd4, 0x3c, 0x6c, 0xa3, 0x76, 0xbf, 0xd5,
  0xe3, 0x74, 0x30, 0xaf, 0xd9, 0x13, 0x48, 0xd7, 0x17, 0xb3, 0x27, 0x10,
  0xd1, 0xb5, 0xf5, 0x04, 0xa2, 0x75, 0x6d, 0x3d, 0x81, 0xe8, 0x5d, 0x5b,
  0x4f, 0x20, 0x46, 0xd7, 0x86, 0x81, 0xf0, 0x23, 0xa7, 0xd4, 0x3a, 0x06,
  0xc2, 0xb5, 0xc3, 0xb1, 0xe9, 0x18, 0x88, 0x38, 0x72, 0xee, 0xad, 0x53,
  0x20, 0x41, 0xb9, 0xff, 0x7d, 0xd5, 0xcf, 0x3e, 0x75, 0xf1, 0xe9, 0x2b,
  0x2f, 0xbf, 0xf4, 0x95, 0x1b, 0x57, 0x9e, 0xbd, 0xf0, 0xc2, 0xb5, 0x17,
  0x5f, 0xbc, 0xf6, 0xd5, 0x2b, 0xdd, 0x7f, 0x8c, 0xde, 0x0d, 0xfe, 0xc1,
  0xd9, 0x62, 0xf4, 0x53, 0x95, 0xb1, 0xa7, 0xbd, 0x19, 0x0c, 0xcf, 0x1b,
  0x2a, 0xcf, 0x04, 0xfd, 0xee, 0x1f, 0x0a, 0xcf, 0x7a, 0x7d, 0xf1, 0x41,
  0x62, 0xae, 0x07, 0xfd, 0x6e, 0x26, 0x5f, 0x0a, 0xfa, 0x5d, 0xc7, 0xbe,
  0x16, 0xf4, 0xbb, 0x65, 0x9b, 0xfa, 0x1a, 0x7c, 0x30, 0xbe, 0x13, 0xf4,
  0xfd, 0xc2, 0xd8, 0xbf, 0x01, 0xdc, 0x76, 0x18, 0xcb, 0x00, 0x00, 0x00,
  0x6d, 0x22, 0x0d, 0x68, 0x1b, 0x01, 0xe4, 0xc9, 0x26, 0xf3, 0x81, 0x68,
  0xde, 0xaf, 0x63, 0x18
};
