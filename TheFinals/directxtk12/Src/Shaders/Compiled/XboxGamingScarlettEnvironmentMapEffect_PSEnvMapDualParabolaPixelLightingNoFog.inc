#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingNoFog.pdb
; shader hash: 438ab2775afa9573b008127732486e0a
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapDualParabolaPixelLightingNoFog
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32     2darray      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<vector<float, 4> >" = type { <4 x float>, %"class.Texture2DArray<vector<float, 4> >::mips_type" }
%"class.Texture2DArray<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapDualParabolaPixelLightingNoFog() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %16, float %17, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %19 = extractvalue %dx.types.ResRet.f32 %18, 0
  %20 = extractvalue %dx.types.ResRet.f32 %18, 1
  %21 = extractvalue %dx.types.ResRet.f32 %18, 2
  %22 = extractvalue %dx.types.ResRet.f32 %18, 3
  %23 = fmul fast float %19, %6
  %24 = fmul fast float %20, %7
  %25 = fmul fast float %21, %8
  %26 = fmul fast float %22, %9
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = fsub fast float %28, %13
  %32 = fsub fast float %29, %14
  %33 = fsub fast float %30, %15
  %34 = call float @dx.op.dot3.f32(i32 55, float %31, float %32, float %33, float %31, float %32, float %33)  ; Dot3(ax,ay,az,bx,by,bz)
  %35 = call float @dx.op.unary.f32(i32 25, float %34)  ; Rsqrt(value)
  %36 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %37 = call float @dx.op.unary.f32(i32 25, float %36)  ; Rsqrt(value)
  %38 = fmul fast float %37, %10
  %39 = fmul fast float %37, %11
  %40 = fmul fast float %37, %12
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = fsub fast float -0.000000e+00, %43
  %66 = fsub fast float -0.000000e+00, %44
  %67 = fsub fast float -0.000000e+00, %51
  %68 = fsub fast float -0.000000e+00, %52
  %69 = fsub fast float -0.000000e+00, %59
  %70 = fsub fast float -0.000000e+00, %60
  %71 = fmul fast float %38, %42
  %72 = fsub fast float -0.000000e+00, %71
  %73 = call float @dx.op.tertiary.f32(i32 46, float %65, float %39, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %66, float %40, float %73)  ; FMad(a,b,c)
  %75 = fmul fast float %38, %50
  %76 = fsub fast float -0.000000e+00, %75
  %77 = call float @dx.op.tertiary.f32(i32 46, float %67, float %39, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %68, float %40, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %38, %58
  %80 = fsub fast float -0.000000e+00, %79
  %81 = call float @dx.op.tertiary.f32(i32 46, float %69, float %39, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %70, float %40, float %81)  ; FMad(a,b,c)
  %83 = fcmp fast olt float %74, 0.000000e+00
  %84 = fcmp fast olt float %78, 0.000000e+00
  %85 = fcmp fast olt float %82, 0.000000e+00
  %86 = select i1 %83, float 0.000000e+00, float 1.000000e+00
  %87 = select i1 %84, float 0.000000e+00, float 1.000000e+00
  %88 = select i1 %85, float 0.000000e+00, float 1.000000e+00
  %89 = fmul fast float %86, %74
  %90 = fmul fast float %87, %78
  %91 = fmul fast float %88, %82
  %92 = fmul fast float %89, %46
  %93 = call float @dx.op.tertiary.f32(i32 46, float %90, float %54, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %91, float %62, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %89, %47
  %96 = call float @dx.op.tertiary.f32(i32 46, float %90, float %55, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %91, float %63, float %96)  ; FMad(a,b,c)
  %98 = fmul fast float %89, %48
  %99 = call float @dx.op.tertiary.f32(i32 46, float %90, float %56, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %91, float %64, float %99)  ; FMad(a,b,c)
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = fmul fast float %102, %94
  %106 = fmul fast float %103, %97
  %107 = fmul fast float %104, %100
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %112 = fadd fast float %105, %109
  %113 = fadd fast float %106, %110
  %114 = fadd fast float %107, %111
  %115 = fmul fast float %23, %112
  %116 = fmul fast float %24, %113
  %117 = fmul fast float %25, %114
  %118 = fmul fast float %35, %31
  %119 = fsub fast float -0.000000e+00, %118
  %120 = fmul fast float %35, %32
  %121 = fsub fast float -0.000000e+00, %120
  %122 = fmul fast float %35, %33
  %123 = fsub fast float -0.000000e+00, %122
  %124 = call float @dx.op.dot3.f32(i32 55, float %119, float %121, float %123, float %38, float %39, float %40)  ; Dot3(ax,ay,az,bx,by,bz)
  %125 = fmul fast float %124, 2.000000e+00
  %126 = fmul fast float %125, %38
  %127 = fmul fast float %125, %39
  %128 = fmul fast float %125, %40
  %129 = fsub fast float %119, %126
  %130 = fsub fast float %121, %127
  %131 = fsub fast float %123, %128
  %132 = call float @dx.op.unary.f32(i32 6, float %131)  ; FAbs(value)
  %133 = fadd fast float %132, 1.000000e+00
  %134 = fmul fast float %133, 2.000000e+00
  %135 = fdiv fast float %129, %134
  %136 = fadd fast float %135, 5.000000e-01
  %137 = fdiv fast float %130, %134
  %138 = fadd fast float %137, 5.000000e-01
  %139 = fcmp fast ogt float %131, 0.000000e+00
  %140 = select i1 %139, float 0.000000e+00, float 1.000000e+00
  %141 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %136, float %138, float %140, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %142 = extractvalue %dx.types.ResRet.f32 %141, 0
  %143 = extractvalue %dx.types.ResRet.f32 %141, 1
  %144 = extractvalue %dx.types.ResRet.f32 %141, 2
  %145 = extractvalue %dx.types.ResRet.f32 %141, 3
  %146 = fmul fast float %142, %26
  %147 = fmul fast float %143, %26
  %148 = fmul fast float %144, %26
  %149 = fmul fast float %145, %26
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = fsub fast float %146, %115
  %153 = fsub fast float %147, %116
  %154 = fsub fast float %148, %117
  %155 = fmul fast float %152, %151
  %156 = fmul fast float %153, %151
  %157 = fmul fast float %154, %151
  %158 = fadd fast float %155, %115
  %159 = fadd fast float %156, %116
  %160 = fadd fast float %157, %117
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 0
  %163 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %164 = extractvalue %dx.types.CBufRet.f32 %161, 2
  %165 = fmul fast float %162, %149
  %166 = fmul fast float %163, %149
  %167 = fmul fast float %164, %149
  %168 = fadd fast float %158, %165
  %169 = fadd fast float %159, %166
  %170 = fadd fast float %160, %167
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %169)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %170)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %26)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.Texture2DArray<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 7, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapDualParabolaPixelLightingNoFog, !"PSEnvMapDualParabolaPixelLightingNoFog", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !27}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 7}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !24}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !28}
!28 = !{i32 3, i32 15}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !28}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 51
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 896
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x77b28a43, 0x7395fa5a                // 000000000000: D5808A43 03FEEFB2 7395FA5A
;   v_nop_xbox_data 0x771208b0, 0x0a6e4832                // 00000000000C: D58008B0 03FEEF12 0A6E4832
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[44:45], exec                          // 00000000001C: BEAC047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s2, s9                                  // 000000000024: BE820309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     s3, 0                                   // 00000000002C: BE830380
;   s_mov_b32     m0, s14                                 // 000000000030: BEFC030E
;   s_load_dwordx4  s[24:27], s[2:3], null                // 000000000034: F4080601 FA000000
;   s_load_dwordx8  s[0:7], s[8:9], null                  // 00000000003C: F40C0004 FA000000
;   v_interp_p1_f32  v2, v0, attr0.x                      // 000000000044: C8080000
;   v_interp_p1_f32  v3, v0, attr0.y                      // 000000000048: C80C0100
;   s_mov_b32     s43, lit(0x11014fac)                    // 00000000004C: BEAB03FF 11014FAC
;   s_mov_b32     s42, -1                                 // 000000000054: BEAA03C1
;   s_mov_b32     s40, s12                                // 000000000058: BEA8030C
;   v_interp_p2_f32  v2, v1, attr0.x                      // 00000000005C: C8090001
;   v_interp_p2_f32  v3, v1, attr0.y                      // 000000000060: C80D0101
;   s_or_b32      s41, s13, lit(0x00100000)               // 000000000064: 8829FF0D 00100000
;   v_interp_p1_f32  v6, v0, attr2.y                      // 00000000006C: C8180900
;   s_buffer_load_dwordx4  s[16:19], s[40:43], 0x0000a0   // 000000000070: F4280414 FA0000A0
;   v_interp_p1_f32  v8, v0, attr2.x                      // 000000000078: C8200800
;   v_interp_p1_f32  v7, v0, attr1.y                      // 00000000007C: C81C0500
;   v_interp_p1_f32  v10, v0, attr2.z                     // 000000000080: C8280A00
;   v_interp_p2_f32  v6, v1, attr2.y                      // 000000000084: C8190901
;   v_interp_p1_f32  v15, v0, attr1.x                     // 000000000088: C83C0400
;   v_interp_p2_f32  v8, v1, attr2.x                      // 00000000008C: C8210801
;   v_interp_p2_f32  v7, v1, attr1.y                      // 000000000090: C81D0501
;   v_interp_p2_f32  v10, v1, attr2.z                     // 000000000094: C8290A01
;   v_mul_legacy_f32  v11, v6, v6                         // 000000000098: 0E160D06
;   s_waitcnt     lgkmcnt(0)                              // 00000000009C: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000A0: F0800F08 00C00202
;   s_mov_b32     s46, s11                                // 0000000000A8: BEAE030B
;   s_mov_b32     s11, 0                                  // 0000000000AC: BE8B0380
;   v_interp_p1_f32  v12, v0, attr1.z                     // 0000000000B0: C8300600
;   v_fmac_f32    v11, v8, v8                             // 0000000000B4: 56161108
;   s_load_dwordx8  s[32:39], s[10:11], null              // 0000000000B8: F40C0805 FA000000
;   v_interp_p2_f32  v15, v1, attr1.x                     // 0000000000C0: C83D0401
;   s_buffer_load_dword  s48, s[40:43], 0x000010          // 0000000000C4: F4200C14 FA000010
;   s_buffer_load_dwordx16  s[0:15], s[40:43], 0x000020   // 0000000000CC: F4300014 FA000020
;   v_fmac_f32    v11, v10, v10                           // 0000000000D4: 5616150A
;   v_sub_f32     v7, s17, v7                             // 0000000000D8: 080E0E11
;   v_interp_p2_f32  v12, v1, attr1.z                     // 0000000000DC: C8310601
;   v_sub_f32     v19, s16, v15                           // 0000000000E0: 08261E10
;   s_mov_b32     s47, 0                                  // 0000000000E4: BEAF0380
;   v_rsq_f32     v11, v11                                // 0000000000E8: 7E165D0B
;   v_mul_legacy_f32  v13, v7, v7                         // 0000000000EC: 0E1A0F07
;   v_sub_f32     v12, s18, v12                           // 0000000000F0: 08181812
;   s_buffer_load_dwordx16  s[16:31], s[40:43], 0x000060  // 0000000000F4: F4300414 FA000060
;   v_interp_p1_f32  v18, v0, attr3.y                     // 0000000000FC: C8480D00
;   v_fmac_f32    v13, v19, v19                           // 000000000100: 561A2713
;   v_interp_p2_f32  v18, v1, attr3.y                     // 000000000104: C8490D01
;   v_mul_legacy_f32  v22, v11, v8                        // 000000000108: 0E2C110B
;   v_fmac_f32    v13, v12, v12                           // 00000000010C: 561A190C
;   v_mul_legacy_f32  v6, v11, v6                         // 000000000110: 0E0C0D0B
;   v_mul_legacy_f32  v10, v11, v10                       // 000000000114: 0E14150B
;   s_waitcnt     lgkmcnt(0)                              // 000000000118: BF8CC07F
;   v_mul_legacy_f32  v23, s8, v22                        // 00000000011C: 0E2E2C08
;   v_rsq_f32     v13, v13                                // 000000000120: 7E1A5D0D
;   v_mul_legacy_f32  v15, s12, v22                       // 000000000124: 0E1E2C0C
;   v_fma_f32     v11, -s9, v6, -v23                      // 000000000128: D54B000B A45E0C09
;   v_fma_f32     v23, -s13, v6, -v15                     // 000000000130: D54B0017 A43E0C0D
;   v_mul_legacy_f32  v15, s16, v22                       // 000000000138: 0E1E2C10
;   v_fmac_f32    v11, -s10, v10                          // 00000000013C: D52B000B 2002140A
;   v_mul_legacy_f32  v7, v13, v7                         // 000000000144: 0E0E0F0D
;   v_mul_legacy_f32  v9, v13, v19                        // 000000000148: 0E12270D
;   v_fma_f32     v15, -s17, v6, -v15                     // 00000000014C: D54B000F A43E0C11
;   v_fmac_f32    v23, -s14, v10                          // 000000000154: D52B0017 2002140E
;   v_cmp_gt_f32  vcc, 0, v11                             // 00000000015C: 7C081680
;   v_mul_legacy_f32  v16, v7, v6                         // 000000000160: 0E200D07
;   v_mul_legacy_f32  v12, v13, v12                       // 000000000164: 0E18190D
;   v_fmac_f32    v15, -s18, v10                          // 000000000168: D52B000F 20021412
;   s_buffer_load_dwordx4  s[8:11], s[40:43], null        // 000000000170: F4280214 FA000000
;   s_load_dwordx4  s[12:15], s[46:47], null              // 000000000178: F4080317 FA000000
;   v_fma_f32     v13, -v9, v22, -v16                     // 000000000180: D54B000D A4422D09
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 000000000188: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v23                             // 000000000190: 7C082E80
;   v_interp_p1_f32  v19, v0, attr3.z                     // 000000000194: C84C0E00
;   v_fmac_f32    v13, -v12, v10 mul:2                    // 000000000198: D52B000D 2802150C
;   v_mul_legacy_f32  v11, v16, v11                       // 0000000001A0: 0E161710
;   v_cndmask_b32  v17, 1.0, 0, vcc                       // 0000000001A4: D5010011 01A900F2
;   v_cmp_gt_f32  vcc, 0, v15                             // 0000000001AC: 7C081E80
;   v_interp_p2_f32  v19, v1, attr3.z                     // 0000000001B0: C84D0E01
;   v_fma_f32     v10, -v13, v10, -v12                    // 0000000001B4: D54B000A A432150D
;   v_mul_legacy_f32  v12, s22, v11                       // 0000000001BC: 0E181616
;   v_mul_legacy_f32  v14, v17, v23                       // 0000000001C0: 0E1C2F11
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 0000000001C4: D5010010 01A900F2
;   v_mul_legacy_f32  v17, s21, v11                       // 0000000001CC: 0E221615
;   v_mul_legacy_f32  v21, s20, v11                       // 0000000001D0: 0E2A1614
;   v_interp_p1_f32  v11, v0, attr3.x                     // 0000000001D4: C82C0C00
;   v_fmac_f32    v12, s26, v14                           // 0000000001D8: 56181C1A
;   v_mul_legacy_f32  v15, v16, v15                       // 0000000001DC: 0E1E1F10
;   v_fmac_f32    v17, s25, v14                           // 0000000001E0: 56221C19
;   v_fmac_f32    v21, s24, v14                           // 0000000001E4: 562A1C18
;   v_add_f32     v14, abs(v10), 1.0 mul:2                // 0000000001E8: D503010E 0801E50A
;   v_interp_p1_f32  v0, v0, attr3.w                      // 0000000001F0: C8000F00
;   v_cmp_lt_f32  vcc, 0, v10                             // 0000000001F4: 7C021480
;   v_interp_p2_f32  v11, v1, attr3.x                     // 0000000001F8: C82D0C01
;   v_fmac_f32    v17, s29, v15                           // 0000000001FC: 56221E1D
;   v_fmac_f32    v12, s30, v15                           // 000000000200: 56181E1E
;   v_fmac_f32    v21, s28, v15                           // 000000000204: 562A1E1C
;   v_rcp_f32     v14, v14                                // 000000000208: 7E1C550E
;   v_interp_p2_f32  v0, v1, attr3.w                      // 00000000020C: C8010F01
;   v_fma_f32     v1, -v13, v22, -v9                      // 000000000210: D54B0001 A4262D0D
;   v_fma_f32     v15, -v13, v6, -v7                      // 000000000218: D54B000F A41E0D0D
;   v_fma_f32     v7, s0, v21, s4                         // 000000000220: D54B0007 00122A00
;   v_fma_f32     v8, s1, v17, s5                         // 000000000228: D54B0008 00162201
;   v_fma_f32     v9, s2, v12, s6                         // 000000000230: D54B0009 001A1802
;   v_cndmask_b32  v10, 1.0, 0, vcc                       // 000000000238: D501000A 01A900F2
;   v_rndne_f32   v12, v10                                // 000000000240: 7E18470A
;   v_fma_f32     v10, v1, v14, 0.5                       // 000000000244: D54B000A 03C21D01
;   s_waitcnt     vmcnt(0)                                // 00000000024C: BF8C3F70
;   v_mul_legacy_f32  v2, v2, v11                         // 000000000250: 0E041702
;   v_mul_legacy_f32  v4, v4, v19                         // 000000000254: 0E082704
;   v_mul_legacy_f32  v3, v3, v18                         // 000000000258: 0E062503
;   v_fma_f32     v11, v15, v14, 0.5                      // 00000000025C: D54B000B 03C21D0F
;   v_mul_legacy_f32  v5, v5, v0                          // 000000000264: 0E0A0105
;   v_mul_legacy_f32  v7, v2, v7                          // 000000000268: 0E0E0F02
;   v_mul_legacy_f32  v4, v4, v9                          // 00000000026C: 0E081304
;   v_mul_legacy_f32  v6, v3, v8                          // 000000000270: 0E0C1103
;   s_and_b64     exec, exec, s[44:45]                    // 000000000274: 87FE2C7E
;   s_waitcnt     lgkmcnt(0)                              // 000000000278: BF8CC07F
;   image_sample  v[0:3], v[10:12], s[32:39], s[12:15] dmask:0xf dim:SQ_RSRC_IMG_2D_ARRAY // 00000000027C: F0800F28 0068000A
;   s_waitcnt     vmcnt(0)                                // 000000000284: BF8C3F70
;   v_fma_f32     v0, v0, v5, -v7                         // 000000000288: D54B0000 841E0B00
;   v_fma_f32     v1, v1, v5, -v6                         // 000000000290: D54B0001 841A0B01
;   v_fma_f32     v2, v2, v5, -v4                         // 000000000298: D54B0002 84120B02
;   v_mul_legacy_f32  v9, v3, v5                          // 0000000002A0: 0E120B03
;   v_fmac_f32    v7, s48, v0                             // 0000000002A4: 560E0030
;   v_fmac_f32    v6, s48, v1                             // 0000000002A8: 560C0230
;   v_fmac_f32    v4, s48, v2                             // 0000000002AC: 56080430
;   v_fmac_f32    v7, s8, v9                              // 0000000002B0: 560E1208
;   v_fmac_f32    v6, s9, v9                              // 0000000002B4: 560C1209
;   v_fmac_f32    v4, s10, v9                             // 0000000002B8: 5608120A
;   s_nop         0x0000                                  // 0000000002BC: BF800000
;   s_nop         0x0000                                  // 0000000002C0: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v6                       // 0000000002C4: 5E000D07
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 0000000002C8: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000002CC: F8001C0F 00000100
;   s_endpgm                                              // 0000000002D4: BF810000
;   s_code_end                                            // 0000000002D8: BF9F0000
;   s_code_end                                            // 0000000002DC: BF9F0000
;   s_code_end                                            // 0000000002E0: BF9F0000
;   s_code_end                                            // 0000000002E4: BF9F0000
;   s_code_end                                            // 0000000002E8: BF9F0000
;   s_code_end                                            // 0000000002EC: BF9F0000
;   s_code_end                                            // 0000000002F0: BF9F0000
;   s_code_end                                            // 0000000002F4: BF9F0000
;   s_code_end                                            // 0000000002F8: BF9F0000
;   s_code_end                                            // 0000000002FC: BF9F0000
;   s_code_end                                            // 000000000300: BF9F0000
;   s_code_end                                            // 000000000304: BF9F0000
;   s_code_end                                            // 000000000308: BF9F0000
;   s_code_end                                            // 00000000030C: BF9F0000
;   s_code_end                                            // 000000000310: BF9F0000
;   s_code_end                                            // 000000000314: BF9F0000
;   s_code_end                                            // 000000000318: BF9F0000
;   s_code_end                                            // 00000000031C: BF9F0000
;   s_code_end                                            // 000000000320: BF9F0000
;   s_code_end                                            // 000000000324: BF9F0000
;   s_code_end                                            // 000000000328: BF9F0000
;   s_code_end                                            // 00000000032C: BF9F0000
;   s_code_end                                            // 000000000330: BF9F0000
;   s_code_end                                            // 000000000334: BF9F0000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 52, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[1] {  instr_offset: 60, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[2] {  instr_offset: 184, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 7 (Texture2DArray)  }
;   bound_descriptor_loads[3] {  instr_offset: 376, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 58
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapDualParabolaPixelLightingNoFog)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 175
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x7,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, off, off, off done vm         // 000000000010: F8001801 00000007
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x607,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v6, off, off done vm          // 000000000010: F8001803 00000607
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x507,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v5, off, off done vm          // 000000000010: F8001803 00000507
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000d07,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v7, v6                       // 000000000008: 5E000D07
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20d07,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v7, v6                      // 000000000000: D7690000 00020D07
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20d07,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v7, v6                      // 000000000000: D7680000 00020D07
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20d07,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v7, v6                          // 000000000000: D76A0000 00020D07
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20d07,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v7, v6                          // 000000000000: D76B0000 00020D07
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040607,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v7, v6, v4, v5 done vm            // 000000000010: F800180F 05040607
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=51,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:103,SAlu:23,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapDualParabolaPixelLightingNoFog[] = {
  0x44, 0x58, 0x42, 0x43, 0x45, 0x29, 0x46, 0x57, 0x38, 0xcf, 0xda, 0x73,
  0x55, 0x51, 0x5e, 0x37, 0x30, 0x8e, 0xb3, 0x5d, 0x01, 0x00, 0x00, 0x00,
  0x68, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xe0, 0x02, 0x00, 0x00, 0xc8, 0x03, 0x00, 0x00, 0x78, 0x04, 0x00, 0x00,
  0x94, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xac, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x44, 0x75,
  0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6c, 0x61, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e,
  0x6f, 0x46, 0x6f, 0x67, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x44, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x62,
  0x6f, 0x6c, 0x61, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68,
  0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x46, 0x6f, 0x67, 0x2e, 0x70, 0x64,
  0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x8a, 0xb2, 0x77, 0x5a, 0xfa, 0x95, 0x73,
  0xb0, 0x08, 0x12, 0x77, 0x32, 0x48, 0x6e, 0x0a, 0x44, 0x58, 0x49, 0x4c,
  0xcc, 0x11, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x73, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x38, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x50, 0x0d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xc4, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xd4, 0x0d, 0x00, 0x00,
  0xe6, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xbc, 0x11, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x38, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x4b, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x7e, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xac, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x1d, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4,
  0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88, 0x61, 0x18,
  0x86, 0x42, 0x4c, 0x04, 0x43, 0x10, 0x55, 0x8a, 0x81, 0x18, 0x86, 0x81,
  0xac, 0x39, 0x82, 0xa0, 0x18, 0x0c, 0x51, 0x10, 0x04, 0x46, 0xd9, 0x40,
  0xc0, 0x30, 0x02, 0x31, 0xcc, 0xd4, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30,
  0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20,
  0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40,
  0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40,
  0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x7a, 0xa0,
  0x07, 0xed, 0x90, 0x0e, 0xf0, 0x30, 0x0f, 0xbf, 0x40, 0x0f, 0xf9, 0x00,
  0x0f, 0xe5, 0x80, 0x02, 0x62, 0x26, 0x31, 0x18, 0x07, 0x76, 0x08, 0x87,
  0x79, 0x98, 0x07, 0x37, 0xa0, 0x85, 0x72, 0xc0, 0x07, 0x7a, 0xa8, 0x07,
  0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3e, 0xb0, 0x87, 0x72, 0x18, 0x07,
  0x7a, 0x78, 0x07, 0x79, 0xe0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07,
  0x7a, 0x60, 0x03, 0x30, 0xa0, 0x03, 0x3f, 0x00, 0x03, 0x3f, 0x40, 0x02,
  0xd7, 0x91, 0x37, 0x93, 0x1c, 0x8c, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc,
  0x83, 0x1b, 0xd0, 0x42, 0x39, 0xe0, 0x03, 0x3d, 0xd4, 0x83, 0x3c, 0x94,
  0x83, 0x1c, 0x90, 0x42, 0x28, 0xc8, 0x83, 0x3c, 0x84, 0x43, 0x3e, 0xf0,
  0x81, 0x3d, 0x94, 0xc3, 0x38, 0xd0, 0xc3, 0x3b, 0xc8, 0x03, 0x1f, 0x98,
  0x03, 0x3b, 0xbc, 0x43, 0x38, 0xd0, 0x03, 0x1b, 0x80, 0x01, 0x1d, 0xf8,
  0x01, 0x18, 0xf8, 0x81, 0x1e, 0xe8, 0x41, 0x3b, 0xa4, 0x03, 0x3c, 0xcc,
  0xc3, 0x2f, 0xd0, 0x43, 0x3e, 0xc0, 0x43, 0x39, 0xa0, 0x80, 0x98, 0xe9,
  0x0c, 0xc6, 0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0x68, 0xa1,
  0x1c, 0xf0, 0x81, 0x1e, 0xea, 0x41, 0x1e, 0xca, 0x41, 0x0e, 0x48, 0x21,
  0x14, 0xe4, 0x41, 0x1e, 0xc2, 0x21, 0x1f, 0xf8, 0xc0, 0x1e, 0xca, 0x61,
  0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc, 0x81, 0x1d, 0xde, 0x21,
  0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc, 0x00, 0x0c, 0xfc, 0x00,
  0x09, 0x1c, 0x48, 0xe1, 0x30, 0xc2, 0x30, 0xe4, 0xc0, 0x98, 0x04, 0xdc,
  0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04,
  0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0xc6, 0x61, 0xe0, 0x46, 0x92, 0x1c,
  0x47, 0xae, 0x24, 0x4b, 0x32, 0x6f, 0x92, 0xa6, 0x88, 0x12, 0x26, 0x9f,
  0x05, 0x98, 0x67, 0x21, 0x22, 0x76, 0x02, 0x26, 0x02, 0x05, 0x04, 0xa1,
  0x29, 0x41, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x28, 0x20, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc9, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0b, 0x04,
  0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x1c, 0x0a, 0xd0, 0xa0, 0x0c, 0xca,
  0x83, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x6f, 0x06, 0x80, 0xc4, 0x19, 0x00, 0x3a, 0x67, 0x00, 0x28, 0x9d, 0x01,
  0x20, 0x75, 0x2c, 0x09, 0x22, 0x9e, 0x07, 0x00, 0x8e, 0xe3, 0x00, 0x8e,
  0xe3, 0x00, 0x02, 0x81, 0x78, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x24, 0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x58, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x30,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x5f, 0x46, 0x60, 0x82, 0x40, 0x34,
  0x13, 0x04, 0xc2, 0xd9, 0x20, 0x1c, 0xd1, 0x86, 0xe4, 0x70, 0x9e, 0xe3,
  0x30, 0xa0, 0x43, 0x9a, 0x20, 0x88, 0x81, 0x36, 0x41, 0x20, 0x9e, 0x0d,
  0x89, 0x41, 0x3d, 0x87, 0x61, 0x54, 0x87, 0xb4, 0x41, 0x98, 0xac, 0x09,
  0xc2, 0x19, 0x6c, 0x13, 0x04, 0x02, 0xda, 0x80, 0x1c, 0xd8, 0x73, 0x1c,
  0x46, 0x06, 0x6c, 0x08, 0xb4, 0x09, 0x42, 0x1a, 0x70, 0x1b, 0x90, 0x83,
  0x7b, 0x8e, 0xc3, 0x38, 0x80, 0x0d, 0x88, 0xc1, 0x3d, 0x87, 0x61, 0x1c,
  0xc0, 0x06, 0xa1, 0xf3, 0x36, 0x10, 0x17, 0xb0, 0x7d, 0x13, 0x04, 0x35,
  0xe8, 0x36, 0x04, 0x61, 0x30, 0x41, 0x10, 0x00, 0x9a, 0x01, 0xd4, 0x54,
  0x91, 0x9b, 0x5d, 0x53, 0x18, 0x1c, 0x51, 0x5d, 0x18, 0x1b, 0x54, 0x98,
  0x5c, 0x98, 0xd8, 0x1b, 0x5b, 0x18, 0x54, 0x1a, 0x5e, 0x19, 0x1b, 0x53,
  0xda, 0x19, 0x1a, 0x5d, 0x9a, 0xdb, 0x99, 0xd3, 0x9b, 0xd1, 0xdb, 0x19,
  0x11, 0xaa, 0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x31,
  0x4d, 0x10, 0x0a, 0x6a, 0x43, 0x70, 0x4c, 0x10, 0x8a, 0x6a, 0x82, 0x40,
  0x44, 0x1b, 0x04, 0x35, 0x50, 0x83, 0x0d, 0xcb, 0x51, 0x06, 0x66, 0x70,
  0x06, 0x68, 0x90, 0x06, 0x46, 0x1a, 0x1c, 0x67, 0xb0, 0x06, 0x1b, 0x02,
  0x63, 0x82, 0x50, 0x58, 0x1b, 0x04, 0x35, 0xa8, 0x36, 0x2c, 0x46, 0x19,
  0x98, 0xc1, 0x19, 0xb4, 0x41, 0x1a, 0x18, 0x6e, 0x60, 0x9c, 0xc1, 0x1b,
  0x6c, 0x08, 0xa0, 0x09, 0x42, 0x71, 0x6d, 0x58, 0xa0, 0x32, 0x30, 0x83,
  0x33, 0x88, 0x83, 0x34, 0x30, 0xe4, 0x00, 0x3a, 0x83, 0x37, 0x60, 0x31,
  0xf4, 0xc4, 0xf4, 0x24, 0x35, 0x41, 0x20, 0xa4, 0x0d, 0x82, 0x1a, 0xd4,
  0xc1, 0x86, 0x45, 0x0d, 0xe8, 0xc0, 0x0c, 0xce, 0x00, 0x0d, 0xd2, 0xc0,
  0x70, 0x03, 0x35, 0x38, 0x03, 0x3b, 0xd8, 0x40, 0xb0, 0x01, 0x1c, 0xcc,
  0xc1, 0x1d, 0x30, 0x99, 0xb2, 0xfa, 0xa2, 0x0a, 0x93, 0x3b, 0x2b, 0xa3,
  0x9b, 0x20, 0x14, 0xd8, 0x86, 0xe5, 0xc8, 0x03, 0x33, 0xd0, 0x03, 0x34,
  0x38, 0x03, 0xc3, 0x0d, 0x8e, 0x33, 0xb0, 0x83, 0x0d, 0xc1, 0x1e, 0x6c,
  0x18, 0xf0, 0x80, 0x0f, 0x80, 0x0d, 0xc5, 0x18, 0x90, 0x41, 0x1f, 0x80,
  0x01, 0xd0, 0x0a, 0x4f, 0xec, 0x0d, 0xcf, 0x65, 0xec, 0xad, 0x0d, 0x2e,
  0x8d, 0xad, 0x4c, 0xce, 0xe5, 0x0d, 0x8e, 0x2e, 0xed, 0xcd, 0x6d, 0x6e,
  0x4a, 0x20, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73,
  0xa3, 0x9b, 0x12, 0x10, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6,
  0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x47, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30,
  0x36, 0xbb, 0x32, 0xb9, 0x29, 0x41, 0x52, 0x87, 0x0c, 0xcf, 0x65, 0x0e,
  0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0xc0,
  0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b,
  0x9b, 0x9b, 0x12, 0x7c, 0x75, 0xc8, 0xf0, 0x5c, 0xec, 0xd2, 0xca, 0xee,
  0x92, 0xc8, 0xa6, 0xe8, 0xc2, 0xe8, 0xca, 0xa6, 0x04, 0x61, 0x50, 0x87,
  0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d,
  0x6e, 0x6e, 0x4a, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x06, 0x60, 0x06, 0x29,
  0xeb, 0x35, 0x95, 0x09, 0x3c, 0x1d, 0x05, 0x2c, 0x29, 0x10, 0x01, 0x81,
  0xb3, 0x00, 0x29, 0x72, 0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84, 0x34, 0xc6,
  0xe9, 0x7c, 0x8e, 0x61, 0x06, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01,
  0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e,
  0x71, 0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0,
  0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x11, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce,
  0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x36,
  0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5,
  0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04,
  0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0xdb, 0x81, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x56,
  0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7,
  0x0d, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x84, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x45, 0xc9, 0x14, 0x5e,
  0xb9, 0xcd, 0x00, 0x14, 0x42, 0x71, 0x95, 0x5d, 0xc9, 0x95, 0x02, 0x0d,
  0x63, 0x04, 0x20, 0x08, 0x82, 0xf0, 0x37, 0x46, 0x00, 0x82, 0x20, 0x08,
  0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0xcd, 0x00, 0x8c, 0x00,
  0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xa0, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x90, 0xa1, 0x01, 0xc2, 0x9d, 0xc1, 0x19, 0x48, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x90, 0xa5, 0x41, 0xd2, 0x9d, 0xc1, 0x19, 0x4c,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xa9, 0x81, 0xb2, 0xa5, 0x41,
  0x1a, 0x50, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xad, 0xc1, 0xc2,
  0xa5, 0x41, 0x1a, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0xb1,
  0x01, 0xf3, 0xa9, 0x81, 0x1a, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xd0, 0x01, 0x44, 0x06, 0x6b, 0x10, 0x06, 0xd1, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x75, 0x10, 0x95, 0x01, 0x1b, 0x5c, 0xd2, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76, 0x20, 0x99, 0x41, 0x1b, 0x88,
  0xc1, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1d, 0x4c, 0x67,
  0xe0, 0x06, 0x61, 0x40, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x81,
  0x07, 0x14, 0x1b, 0xbc, 0x41, 0x19, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xe4, 0x41, 0xd5, 0x06, 0x70, 0xb0, 0x59, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xe8, 0x81, 0xe5, 0x06, 0x71, 0x60, 0x06, 0xd7,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7b, 0x70, 0xcd, 0x81, 0x1c,
  0xa0, 0x01, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1f, 0x60,
  0x74, 0x30, 0x07, 0x5e, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46,
  0x1f, 0x64, 0x75, 0x40, 0x07, 0x69, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0xe1, 0x07, 0x5a, 0x1d, 0xd4, 0xc1, 0x1a, 0x6c, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0xc1, 0x66, 0x07, 0x76, 0x10, 0x06,
  0xdc, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x34, 0x7e, 0xf0, 0x41, 0x8e,
  0x10, 0x50, 0xd4, 0x1d, 0xdc, 0x41, 0x47, 0x8d, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x11, 0xc9,
  0xc7, 0x88, 0x48, 0x3e, 0x46, 0x44, 0xf2, 0x31, 0x22, 0x92, 0xcf, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x50, 0xa4, 0x30, 0x06, 0x96, 0x1a, 0x8c,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x52,
  0x7c, 0x6c, 0x90, 0xe2, 0x63, 0x83, 0x14, 0x9f, 0x11, 0x83, 0x05, 0x00,
  0x41, 0x30, 0x78, 0x5a, 0xc1, 0x0d, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0xa2, 0x56, 0x88, 0x83, 0x60, 0xc4, 0x60,
  0x01, 0x40, 0x10, 0x0c, 0x9e, 0x57, 0x80, 0x03, 0x2d, 0xc3, 0xb4, 0x0c,
  0x1b, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xe8, 0x15, 0xe6, 0x20, 0xb0,
  0x80, 0x93, 0x8f, 0x09, 0x9c, 0x7c, 0x6c, 0xe0, 0xe4, 0x33, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x94, 0x2c, 0xc4, 0x01, 0x19, 0xcc, 0xc1, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0x01, 0x65, 0x0b, 0x75, 0x80, 0x06, 0xad, 0x30, 0x9a,
  0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x40, 0xe9, 0x42, 0x1e, 0xb0, 0xc1, 0x1d, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x50, 0xbe, 0xd0, 0x07, 0x70, 0x90, 0x0b, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x94, 0x38, 0x84, 0x02, 0x1d, 0xf0, 0xc2, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00,
  0x08, 0x82, 0x01, 0x65, 0x0e, 0xa5, 0x80, 0x07, 0xbe, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x16, 0x0a, 0x56, 0x7c,
  0x4c, 0x14, 0xac, 0xf8, 0xd8, 0x28, 0x40, 0xf1, 0x31, 0x52, 0x80, 0xe2,
  0x63, 0xa5, 0xa0, 0xc4, 0xc7, 0x4c, 0x41, 0x89, 0x8f, 0x85, 0x41, 0x27,
  0x1f, 0x43, 0x85, 0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60,
  0xc5, 0x83, 0x2c, 0x20, 0x62, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x81, 0x25, 0x0f, 0xb3, 0x80, 0x88, 0x41, 0x60, 0x65, 0x90, 0xc9, 0xc7,
  0x58, 0x21, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0xf5,
  0x60, 0x0b, 0x8a, 0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x60,
  0xd9, 0xc3, 0x2d, 0x28, 0x66, 0x10, 0x58, 0x1a, 0x54, 0xf2, 0x31, 0x58,
  0x08, 0xe2, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x56, 0x3e, 0xe8,
  0x02, 0xa3, 0x06, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x58, 0xfa,
  0xb0, 0x0b, 0x8c, 0x1a, 0x04, 0xc3, 0x11, 0x09, 0x2d, 0x10, 0xdf, 0x70,
  0x84, 0x51, 0x0b, 0xc4, 0x37, 0x1c, 0x31, 0xd8, 0x02, 0xf1, 0x4d, 0x37,
  0xdc, 0x42, 0x2e, 0x0c, 0xd3, 0x0d, 0xb8, 0xa0, 0x0b, 0xc3, 0x74, 0x43,
  0x2e, 0xec, 0xc2, 0x60, 0xc3, 0x23, 0x1f, 0x1b, 0x18, 0xf9, 0xd8, 0x90,
  0xc8, 0xc7, 0x06, 0x37, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x58, 0x25, 0x61, 0x0e, 0xc3, 0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x60, 0x99, 0xc4, 0x39, 0x0c, 0x60, 0x10, 0x98, 0x01, 0x07, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x0b, 0x25, 0xd2, 0xc1, 0x48,
  0x83, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xac, 0x94, 0x50, 0x07,
  0x43, 0x0c, 0x02, 0x4b, 0xe4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x60, 0xad, 0x04, 0x3b, 0x24, 0x6b, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x81, 0xc5, 0x12, 0xed, 0x90, 0x90, 0x41, 0x30, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x94, 0x4b, 0xb4, 0x03, 0x38, 0x9c, 0xc4, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xb0, 0xc8,
  0xc7, 0x86, 0x44, 0x3e, 0x36, 0x1c, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0xaa, 0x26, 0xe8, 0xe1, 0x1c, 0x54, 0x62, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xec, 0x18, 0xe0, 0x63, 0xc7,
  0x00, 0x1f, 0x3b, 0x06, 0xf8, 0x18, 0x2f, 0x0c, 0xf2, 0x31, 0x5e, 0x18,
  0xe4, 0x63, 0xbc, 0x30, 0xc8, 0xc7, 0x66, 0xe1, 0x16, 0xe4, 0x63, 0xf7,
  0x10, 0xc4, 0xc7, 0x6a, 0x01, 0x17, 0xe4, 0x63, 0xf9, 0x10, 0xc4, 0xc7,
  0x6e, 0x21, 0x17, 0xe4, 0x63, 0xfb, 0x10, 0xc4, 0x67, 0xc4, 0x60, 0x01,
  0x40, 0x10, 0x0c, 0x9e, 0xb3, 0x40, 0x89, 0x62, 0x08, 0x6c, 0xa1, 0x16,
  0x68, 0xc1, 0x82, 0x90, 0x90, 0x8f, 0x05, 0xb8, 0x20, 0x1f, 0x13, 0x70,
  0x41, 0x3e, 0x36, 0xe0, 0x82, 0x7c, 0x4c, 0x19, 0xe2, 0x63, 0xc9, 0x10,
  0x1f, 0x43, 0x86, 0xf8, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xe4,
  0x16, 0x67, 0x11, 0x58, 0x80, 0x12, 0xf0, 0xb1, 0x40, 0x25, 0xe4, 0x63,
  0x46, 0x40, 0x1f, 0x0b, 0x5a, 0x02, 0x3e, 0x76, 0x0c, 0xf4, 0xb1, 0xe0,
  0x25, 0xe0, 0x33, 0x1c, 0x81, 0xb0, 0x84, 0xf0, 0x4d, 0x37, 0xb4, 0xc4,
  0x4b, 0x04, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xd0, 0xe4, 0x85, 0x4e,
  0xb0, 0x84, 0x4a, 0x14, 0x43, 0xf0, 0x12, 0x72, 0x21, 0x17, 0x38, 0xf1,
  0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0x46, 0xe0, 0x83, 0x7c, 0x8c, 0xc8, 0x07, 0xf9, 0x18,
  0xa1, 0x0f, 0xf2, 0x31, 0x62, 0x1f, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0xd4, 0x5f, 0xf8, 0x44, 0x4c, 0xf0, 0xc5, 0x68, 0x42, 0x00,
  0x98, 0x51, 0x06, 0xf1, 0x31, 0xa3, 0x0c, 0xe2, 0x63, 0x46, 0x19, 0xc4,
  0xc7, 0x06, 0x42, 0x3e, 0x36, 0x14, 0xf2, 0xb1, 0xc1, 0x90, 0x8f, 0x0d,
  0x6b, 0x00, 0x1f, 0x1b, 0xd6, 0x00, 0x3e, 0x36, 0xac, 0x01, 0x7c, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x80, 0x52, 0x8d, 0xb4, 0xe0, 0x09, 0xd3,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b,
  0x20, 0xf9, 0xd8, 0x10, 0xc9, 0xc7, 0x06, 0x49, 0x3e, 0xa6, 0x0c, 0xf0,
  0x31, 0x65, 0x80, 0x8f, 0x29, 0x03, 0x7c, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x00, 0xc1, 0x8d, 0xb8, 0x80, 0x0d, 0xd8, 0x30, 0x8d, 0x61, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0xdc, 0x88, 0x0b, 0xd8, 0x80, 0x8d,
  0xbd, 0x10, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0xc1, 0x8d, 0xb8,
  0x80, 0x0d, 0xd8, 0x28, 0x8d, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x10, 0xdc, 0x88, 0x0b, 0xd8, 0x80, 0x8d, 0xd1, 0x88, 0x09, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c,
  0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xce, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x13, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58, 0x4d, 0x6c, 0x1b, 0x45,
  0x14, 0x7e, 0x33, 0xb3, 0xb6, 0xc7, 0xfb, 0x33, 0x6b, 0x6f, 0xec, 0xf5,
  0xc6, 0x72, 0x16, 0x13, 0x89, 0xc4, 0x4d, 0x9d, 0x62, 0x2a, 0x4e, 0xa8,
  0x40, 0x05, 0xa5, 0x14, 0xd1, 0x40, 0xa4, 0x88, 0x3d, 0x20, 0x35, 0xc2,
  0x48, 0x28, 0x71, 0x1b, 0x25, 0x15, 0x7f, 0x8a, 0x50, 0x64, 0x16, 0x88,
  0xc4, 0x5f, 0x0f, 0x08, 0x89, 0x33, 0x3d, 0xf8, 0xc0, 0x4f, 0xa1, 0x15,
  0x27, 0x4e, 0x9b, 0xc0, 0x69, 0xce, 0x48, 0x56, 0x2f, 0x55, 0x6f, 0x9c,
  0x8b, 0x90, 0x0f, 0x55, 0x84, 0x12, 0xde, 0xae, 0xbd, 0x8d, 0xd3, 0x34,
  0x4a, 0xe0, 0x64, 0x90, 0x9f, 0xf4, 0xf4, 0x76, 0xde, 0xfb, 0x66, 0xbe,
  0x37, 0xef, 0x59, 0x96, 0xe6, 0x9d, 0x9d, 0x9b, 0x9b, 0x21, 0x04, 0xe0,
  0xb7, 0x11, 0x88, 0x24, 0xd9, 0x35, 0x70, 0x27, 0xf8, 0xe1, 0xf6, 0x51,
  0xf4, 0xc6, 0x3f, 0xc4, 0xc7, 0x4a, 0x7b, 0xfb, 0xce, 0xc0, 0xbf, 0x93,
  0xf8, 0x9c, 0xbb, 0xa2, 0xbb, 0xf6, 0x59, 0x7f, 0x54, 0xec, 0xc3, 0xaf,
  0x5a, 0x5d, 0x7b, 0xab, 0x67, 0x13, 0xb1, 0x12, 0x0a, 0x9b, 0x7d, 0x38,
  0x07, 0x6a, 0x8c, 0xf4, 0xad, 0x4f, 0xf7, 0xea, 0x12, 0xfa, 0x9e, 0x40,
  0x7d, 0xef, 0x5e, 0x9d, 0x22, 0x42, 0x9a, 0x24, 0x26, 0x86, 0x08, 0x4d,
  0xd2, 0x14, 0x5e, 0x89, 0xd2, 0x24, 0x33, 0x31, 0xc0, 0x28, 0xfc, 0xcf,
  0x45, 0x41, 0x2d, 0xf5, 0x7d, 0x87, 0x17, 0xce, 0xa0, 0x9a, 0x7d, 0x98,
  0xf0, 0xb7, 0x74, 0x3d, 0xfa, 0xf2, 0x37, 0xfa, 0xf5, 0x0b, 0x07, 0xee,
  0x3e, 0xf8, 0xd4, 0xbd, 0x38, 0x82, 0xb8, 0xd4, 0x11, 0x70, 0x2c, 0xc4,
  0x25, 0x8f, 0x88, 0x4b, 0x1c, 0x8c, 0x4b, 0x19, 0x30, 0xaf, 0x68, 0x74,
  0xde, 0x2c, 0x61, 0x7e, 0xe4, 0x41, 0xb8, 0xc6, 0xcd, 0x94, 0x41, 0x31,
  0xd4, 0xb8, 0x89, 0x38, 0x38, 0x18, 0xb7, 0xd8, 0xc3, 0x2d, 0x1e, 0x82,
  0xbb, 0xd8, 0xc3, 0x5d, 0x3c, 0x04, 0x77, 0xa9, 0x87, 0xbb, 0x74, 0x08,
  0x6e, 0xef, 0x7d, 0xcd, 0xa8, 0x2e, 0xca, 0xbe, 0x1b, 0xef, 0xa0, 0xc0,
  0x50, 0x06, 0x4a, 0x86, 0x3d, 0x19, 0x3c, 0x19, 0xf6, 0x64, 0xf0, 0x64,
  0xd8, 0x93, 0xc1, 0x93, 0x61, 0x4f, 0x06, 0x4f, 0x86, 0x3d, 0x19, 0x3c,
  0x19, 0xf6, 0x64, 0x70, 0xe5, 0xd9, 0xcf, 0xfc, 0xf6, 0x4f, 0x77, 0xb6,
  0xd9, 0xab, 0x5b, 0x5f, 0xbd, 0x75, 0x83, 0xfb, 0x6d, 0x0b, 0xbf, 0x4f,
  0x9e, 0x5b, 0x56, 0x19, 0x5c, 0xdd, 0x68, 0x2a, 0xd7, 0x82, 0xa6, 0xba,
  0x1d, 0xa4, 0xd9, 0x87, 0x81, 0xcf, 0x3e, 0x45, 0xfd, 0x28, 0x10, 0xec,
  0xaf, 0x80, 0x24, 0x79, 0x07, 0xb7, 0x6e, 0x29, 0xa0, 0x47, 0x16, 0x80,
  0x4b, 0x20, 0xba, 0xdc, 0x61, 0xdf, 0x07, 0xd7, 0x5e, 0x26, 0xd9, 0x5f,
  0xd8, 0x77, 0x81, 0xce, 0xbe, 0x09, 0x08, 0xa4, 0x25, 0x21, 0x86, 0x34,
  0x76, 0x8e, 0x7d, 0x12, 0xbd, 0x92, 0xd2, 0x8e, 0xcc, 0x29, 0x95, 0xce,
  0xd5, 0x70, 0x0f, 0x2f, 0x4b, 0x48, 0x94, 0x24, 0xa8, 0x15, 0x49, 0xd2,
  0xa3, 0x12, 0x94, 0x53, 0x92, 0xf0, 0x87, 0x25, 0x49, 0x8c, 0x49, 0xa2,
  0x1e, 0x93, 0x49, 0xc3, 0x16, 0xef, 0x6f, 0x5e, 0xd9, 0xe0, 0xa6, 0xff,
  0x07, 0xa5, 0x9b, 0xa0, 0xb1, 0x1f, 0x91, 0xff, 0xf3, 0x00, 0x92, 0x35,
  0xc9, 0xb3, 0xb6, 0x97, 0xe0, 0x5d, 0x6e, 0xa2, 0x3c, 0x29, 0x73, 0x7a,
  0xb9, 0x83, 0xa7, 0x6f, 0xe5, 0xa0, 0xd6, 0x29, 0xa3, 0x55, 0xf3, 0xb6,
  0x97, 0x15, 0x82, 0x93, 0xe4, 0x63, 0x32, 0xe3, 0x4e, 0x70, 0x9f, 0x5d,
  0x0f, 0xb4, 0x0b, 0x76, 0x33, 0x65, 0x16, 0x85, 0xe5, 0x38, 0x3c, 0xa7,
  0xd4, 0x3a, 0xaf, 0x85, 0x39, 0x18, 0xe7, 0xe4, 0xc8, 0x64, 0xd1, 0x23,
  0xc6, 0x0b, 0x52, 0xcb, 0x56, 0x85, 0x3e, 0x5a, 0xf4, 0x34, 0x43, 0x17,
  0x5a, 0x3e, 0xd7, 0xe5, 0xae, 0x9e, 0x10, 0xc6, 0x85, 0x62, 0x53, 0xaf,
  0xba, 0x42, 0x83, 0x17, 0xdb, 0x69, 0x7d, 0xbe, 0x55, 0x40, 0x6b, 0xe8,
  0x4f, 0xb5, 0x32, 0x91, 0xef, 0x78, 0x5b, 0xcd, 0xd1, 0xb2, 0x61, 0x0a,
  0x61, 0x4c, 0x5a, 0xc2, 0xc4, 0x58, 0x16, 0x63, 0x05, 0xf4, 0x0b, 0xf4,
  0xfb, 0x36, 0x5f, 0x4b, 0x19, 0x65, 0x61, 0x8c, 0x3a, 0x18, 0x3b, 0xde,
  0xb6, 0xd0, 0x97, 0xa3, 0x95, 0x28, 0xef, 0x02, 0xeb, 0xd6, 0xd0, 0x08,
  0xcf, 0x9d, 0x7e, 0xa6, 0x95, 0x01, 0xd2, 0xfe, 0x13, 0xbe, 0x25, 0xfe,
  0x09, 0xbe, 0x06, 0xe2, 0xbc, 0x34, 0x10, 0xaf, 0xe7, 0x69, 0x25, 0x53,
  0xb0, 0x45, 0x36, 0x8e, 0xb9, 0x7c, 0x8d, 0x88, 0x19, 0xa9, 0x86, 0x39,
  0xe4, 0x4f, 0xb6, 0x6c, 0xdb, 0x11, 0xd9, 0x47, 0x4b, 0x22, 0xde, 0x9b,
  0xb7, 0xc7, 0x45, 0xce, 0x9e, 0x12, 0xa0, 0x57, 0x65, 0xb1, 0xe4, 0x78,
  0x99, 0x87, 0x5c, 0x31, 0x5a, 0x1a, 0xf7, 0x9c, 0xd2, 0x94, 0x27, 0x08,
  0x6b, 0xab, 0xbf, 0x13, 0x8e, 0x0f, 0x55, 0xe9, 0xe7, 0xe8, 0x1a, 0xd1,
  0xa7, 0xe5, 0x98, 0x3b, 0xee, 0xb9, 0xae, 0xe3, 0x95, 0x5c, 0x8c, 0xbf,
  0x52, 0x6a, 0xe2, 0x93, 0x5e, 0x92, 0xf0, 0xec, 0xe9, 0x89, 0x56, 0x78,
  0x17, 0xc3, 0x70, 0x5b, 0x29, 0xb4, 0x30, 0x65, 0x01, 0x47, 0x4b, 0xc6,
  0x6d, 0x48, 0xa3, 0xa5, 0x4e, 0x11, 0xd4, 0x1e, 0xa7, 0xfa, 0xbc, 0xd3,
  0x0c, 0xf3, 0x21, 0x63, 0xbf, 0xb2, 0xcb, 0x4f, 0x5f, 0xd9, 0xa0, 0x05,
  0x45, 0x28, 0x93, 0x5c, 0xb0, 0x47, 0x92, 0x51, 0xcd, 0x4c, 0xf4, 0x27,
  0x88, 0x2a, 0x28, 0xd6, 0x48, 0x19, 0x41, 0x7f, 0x56, 0x17, 0xcd, 0xea,
  0xf6, 0xc7, 0x61, 0x7d, 0x2b, 0xd8, 0x5b, 0x15, 0x16, 0x21, 0xdc, 0x07,
  0x21, 0x8f, 0xe6, 0xae, 0x87, 0xfc, 0x44, 0x2b, 0xae, 0xd3, 0x90, 0x47,
  0xb3, 0xd6, 0x99, 0x66, 0x89, 0x1a, 0x08, 0xaf, 0x46, 0x75, 0xaf, 0xa6,
  0x70, 0x8f, 0x5b, 0xc2, 0x4b, 0x5b, 0xba, 0xa7, 0x5a, 0xdc, 0x3b, 0xf8,
  0xfd, 0xfa, 0x01, 0xfa, 0xbf, 0xfe, 0x4f, 0x68, 0x3c, 0xbe, 0x89, 0x9f,
  0xb5, 0x1c, 0xf5, 0x7e, 0x5f, 0x9a, 0xec, 0xf5, 0x85, 0xaa, 0xd2, 0xfd,
  0x3e, 0x8d, 0xed, 0xee, 0x89, 0x07, 0x31, 0xba, 0xd2, 0x77, 0x20, 0x74,
  0x67, 0x16, 0x1c, 0x49, 0x08, 0xdb, 0xfb, 0x3f, 0xa0, 0xf4, 0x91, 0x90,
  0x18, 0x87, 0x24, 0x84, 0xed, 0xcd, 0x45, 0x41, 0x12, 0x7a, 0xdf, 0x1b,
  0x5c, 0x89, 0x48, 0xba, 0xb2, 0xfb, 0x5f, 0x3f, 0x01, 0xb3, 0x73, 0xcf,
  0x2d, 0xbf, 0x3b, 0x53, 0xbf, 0x7c, 0xe6, 0x9d, 0xfa, 0xd2, 0x6c, 0xfd,
  0xcd, 0xfa, 0xeb, 0x2b, 0x4b, 0xf5, 0xd9, 0xc6, 0xea, 0x1b, 0x4b, 0xe7,
  0x1b, 0x0b, 0x8b, 0x6f, 0x37, 0x96, 0x17, 0x5e, 0x5a, 0x39, 0xbb, 0xb2,
  0x10, 0x4f, 0xb4, 0xbe, 0xec, 0x4d, 0x98, 0x4e, 0xa3, 0x86, 0xd3, 0x8f,
  0xc7, 0x43, 0x56, 0xb6, 0x3b, 0xd1, 0x3a, 0x15, 0x65, 0xb1, 0x3b, 0x60,
  0xfa, 0x39, 0x5a, 0xa7, 0xee, 0x65, 0xb6, 0x4a, 0xba, 0xf8, 0xee, 0x1a,
  0xe0, 0x6f, 0x0e, 0x81, 0xad, 0xa0, 0x00, 0x00, 0x43, 0x8a, 0xb2, 0x77,
  0x5a, 0xfa, 0x95, 0x73, 0xb0, 0x08, 0x12, 0x77, 0x32, 0x48, 0x6e, 0x0a
};
