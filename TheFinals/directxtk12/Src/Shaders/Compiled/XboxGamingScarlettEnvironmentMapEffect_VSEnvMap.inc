#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; TEXCOORD                 1   xyz         3     NONE   float   xyz 
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_VSEnvMap.pdb
; shader hash: 29d17aa0a794342b60472169baf61994
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 5
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 5
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSEnvMap
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 10, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 16 depends on inputs: { 0, 1, 2, 3 }
;   output 17 depends on inputs: { 0, 1, 2, 3 }
;   output 18 depends on inputs: { 0, 1, 2, 3 }
;   output 19 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSEnvMap() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.f32 %11, 0
  %13 = extractvalue %dx.types.CBufRet.f32 %11, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %11, 2
  %15 = extractvalue %dx.types.CBufRet.f32 %11, 3
  %16 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.f32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.f32 %16, 1
  %19 = extractvalue %dx.types.CBufRet.f32 %16, 2
  %20 = extractvalue %dx.types.CBufRet.f32 %16, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = fmul fast float %12, %7
  %27 = call float @dx.op.tertiary.f32(i32 46, float %8, float %13, float %26)  ; FMad(a,b,c)
  %28 = call float @dx.op.tertiary.f32(i32 46, float %9, float %14, float %27)  ; FMad(a,b,c)
  %29 = call float @dx.op.tertiary.f32(i32 46, float %10, float %15, float %28)  ; FMad(a,b,c)
  %30 = fmul fast float %17, %7
  %31 = call float @dx.op.tertiary.f32(i32 46, float %8, float %18, float %30)  ; FMad(a,b,c)
  %32 = call float @dx.op.tertiary.f32(i32 46, float %9, float %19, float %31)  ; FMad(a,b,c)
  %33 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %32)  ; FMad(a,b,c)
  %34 = fmul fast float %22, %7
  %35 = call float @dx.op.tertiary.f32(i32 46, float %8, float %23, float %34)  ; FMad(a,b,c)
  %36 = call float @dx.op.tertiary.f32(i32 46, float %9, float %24, float %35)  ; FMad(a,b,c)
  %37 = call float @dx.op.tertiary.f32(i32 46, float %10, float %25, float %36)  ; FMad(a,b,c)
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = fsub fast float %39, %29
  %43 = fsub fast float %40, %33
  %44 = fsub fast float %41, %37
  %45 = call float @dx.op.dot3.f32(i32 55, float %42, float %43, float %44, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %46 = call float @dx.op.unary.f32(i32 25, float %45)  ; Rsqrt(value)
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.f32 %47, 1
  %50 = extractvalue %dx.types.CBufRet.f32 %47, 2
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.f32 %55, 2
  %59 = fmul fast float %48, %4
  %60 = call float @dx.op.tertiary.f32(i32 46, float %5, float %49, float %59)  ; FMad(a,b,c)
  %61 = call float @dx.op.tertiary.f32(i32 46, float %6, float %50, float %60)  ; FMad(a,b,c)
  %62 = fmul fast float %52, %4
  %63 = call float @dx.op.tertiary.f32(i32 46, float %5, float %53, float %62)  ; FMad(a,b,c)
  %64 = call float @dx.op.tertiary.f32(i32 46, float %6, float %54, float %63)  ; FMad(a,b,c)
  %65 = fmul fast float %56, %4
  %66 = call float @dx.op.tertiary.f32(i32 46, float %5, float %57, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %6, float %58, float %66)  ; FMad(a,b,c)
  %68 = call float @dx.op.dot3.f32(i32 55, float %61, float %64, float %67, float %61, float %64, float %67)  ; Dot3(ax,ay,az,bx,by,bz)
  %69 = call float @dx.op.unary.f32(i32 25, float %68)  ; Rsqrt(value)
  %70 = fmul fast float %69, %61
  %71 = fmul fast float %69, %64
  %72 = fmul fast float %69, %67
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = fsub fast float -0.000000e+00, %75
  %98 = fsub fast float -0.000000e+00, %76
  %99 = fsub fast float -0.000000e+00, %83
  %100 = fsub fast float -0.000000e+00, %84
  %101 = fsub fast float -0.000000e+00, %91
  %102 = fsub fast float -0.000000e+00, %92
  %103 = fmul fast float %70, %74
  %104 = fsub fast float -0.000000e+00, %103
  %105 = call float @dx.op.tertiary.f32(i32 46, float %97, float %71, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %98, float %72, float %105)  ; FMad(a,b,c)
  %107 = fmul fast float %70, %82
  %108 = fsub fast float -0.000000e+00, %107
  %109 = call float @dx.op.tertiary.f32(i32 46, float %99, float %71, float %108)  ; FMad(a,b,c)
  %110 = call float @dx.op.tertiary.f32(i32 46, float %100, float %72, float %109)  ; FMad(a,b,c)
  %111 = fmul fast float %70, %90
  %112 = fsub fast float -0.000000e+00, %111
  %113 = call float @dx.op.tertiary.f32(i32 46, float %101, float %71, float %112)  ; FMad(a,b,c)
  %114 = call float @dx.op.tertiary.f32(i32 46, float %102, float %72, float %113)  ; FMad(a,b,c)
  %115 = fcmp fast olt float %106, 0.000000e+00
  %116 = fcmp fast olt float %110, 0.000000e+00
  %117 = fcmp fast olt float %114, 0.000000e+00
  %118 = select i1 %115, float 0.000000e+00, float 1.000000e+00
  %119 = select i1 %116, float 0.000000e+00, float 1.000000e+00
  %120 = select i1 %117, float 0.000000e+00, float 1.000000e+00
  %121 = fmul fast float %118, %106
  %122 = fmul fast float %119, %110
  %123 = fmul fast float %120, %114
  %124 = fmul fast float %121, %78
  %125 = call float @dx.op.tertiary.f32(i32 46, float %122, float %86, float %124)  ; FMad(a,b,c)
  %126 = call float @dx.op.tertiary.f32(i32 46, float %123, float %94, float %125)  ; FMad(a,b,c)
  %127 = fmul fast float %121, %79
  %128 = call float @dx.op.tertiary.f32(i32 46, float %122, float %87, float %127)  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %123, float %95, float %128)  ; FMad(a,b,c)
  %130 = fmul fast float %121, %80
  %131 = call float @dx.op.tertiary.f32(i32 46, float %122, float %88, float %130)  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %123, float %96, float %131)  ; FMad(a,b,c)
  %133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %134 = extractvalue %dx.types.CBufRet.f32 %133, 0
  %135 = extractvalue %dx.types.CBufRet.f32 %133, 1
  %136 = extractvalue %dx.types.CBufRet.f32 %133, 2
  %137 = fmul fast float %134, %126
  %138 = fmul fast float %135, %129
  %139 = fmul fast float %136, %132
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = fadd fast float %137, %141
  %145 = fadd fast float %138, %142
  %146 = fadd fast float %139, %143
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = extractvalue %dx.types.CBufRet.f32 %147, 3
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %156 = extractvalue %dx.types.CBufRet.f32 %152, 3
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %161 = extractvalue %dx.types.CBufRet.f32 %157, 3
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = extractvalue %dx.types.CBufRet.f32 %162, 3
  %167 = fmul fast float %148, %7
  %168 = call float @dx.op.tertiary.f32(i32 46, float %8, float %149, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %9, float %150, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %10, float %151, float %169)  ; FMad(a,b,c)
  %171 = fmul fast float %153, %7
  %172 = call float @dx.op.tertiary.f32(i32 46, float %8, float %154, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %9, float %155, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %10, float %156, float %173)  ; FMad(a,b,c)
  %175 = fmul fast float %158, %7
  %176 = call float @dx.op.tertiary.f32(i32 46, float %8, float %159, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %9, float %160, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %10, float %161, float %177)  ; FMad(a,b,c)
  %179 = fmul fast float %163, %7
  %180 = call float @dx.op.tertiary.f32(i32 46, float %8, float %164, float %179)  ; FMad(a,b,c)
  %181 = call float @dx.op.tertiary.f32(i32 46, float %9, float %165, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %10, float %166, float %181)  ; FMad(a,b,c)
  %183 = extractvalue %dx.types.CBufRet.f32 %133, 3
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 0
  %186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.f32 %186, 0
  %188 = extractvalue %dx.types.CBufRet.f32 %186, 1
  %189 = extractvalue %dx.types.CBufRet.f32 %186, 2
  %190 = extractvalue %dx.types.CBufRet.f32 %186, 3
  %191 = call float @dx.op.dot4.f32(i32 56, float %7, float %8, float %9, float %10, float %187, float %188, float %189, float %190)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %192 = call float @dx.op.unary.f32(i32 7, float %191)  ; Saturate(value)
  %193 = fmul fast float %46, %42
  %194 = fsub fast float -0.000000e+00, %193
  %195 = fmul fast float %46, %43
  %196 = fsub fast float -0.000000e+00, %195
  %197 = fmul fast float %46, %44
  %198 = fsub fast float -0.000000e+00, %197
  %199 = call float @dx.op.dot3.f32(i32 55, float %194, float %196, float %198, float %70, float %71, float %72)  ; Dot3(ax,ay,az,bx,by,bz)
  %200 = fmul fast float %199, 2.000000e+00
  %201 = fmul fast float %200, %70
  %202 = fmul fast float %200, %71
  %203 = fmul fast float %200, %72
  %204 = fsub fast float %194, %201
  %205 = fsub fast float %196, %202
  %206 = fsub fast float %198, %203
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %144)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %145)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %146)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %183)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %185)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %185)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %185)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %192)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %204)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %205)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %206)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %170)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %174)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %178)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %182)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!8 = !{[12 x i32] [i32 10, i32 20, i32 1011840, i32 1011840, i32 1011840, i32 1011840, i32 28679, i32 28679, i32 28679, i32 0, i32 256, i32 512]}
!9 = !{void ()* @VSEnvMap, !"VSEnvMap", !10, !5, null}
!10 = !{!11, !19, null}
!11 = !{!12, !15, !17}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{!20, !21, !23, !24, !25}
!20 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!21 = !{i32 1, !"COLOR", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!22 = !{i32 1}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 2, i8 0, !18}
!24 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 3, i32 3, i8 0, !16}
!25 = !{i32 4, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 4, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 86
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 768
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xa07ad129, 0x2b3494a7                // 000000000000: D580D129 03FF417A 2B3494A7
;   v_nop_xbox_data 0x69214760, 0x9419f6ba                // 00000000000C: D5804760 03FED321 9419F6BA
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_or_b32      s73, s13, lit(0x00100000)               // 000000000020: 8849FF0D 00100000
;   s_mov_b32     s72, s12                                // 000000000028: BEC8030C
;   s_mov_b32     s74, -1                                 // 00000000002C: BECA03C1
;   s_mov_b32     s75, lit(0x11014fac)                    // 000000000030: BECB03FF 11014FAC
;   v_mov_b32     v18, 0                                  // 000000000038: 7E240280
;   s_buffer_load_dwordx16  s[0:15], s[72:75], 0x0000c0   // 00000000003C: F4300024 FA0000C0
;   s_buffer_load_dwordx16  s[48:63], s[72:75], 0x000110  // 000000000044: F4300C24 FA000110
;   s_buffer_load_dwordx8  s[64:71], s[72:75], 0x000150   // 00000000004C: F42C1024 FA000150
;   s_buffer_load_dwordx4  s[76:79], s[72:75], 0x000170   // 000000000054: F4281324 FA000170
;   s_buffer_load_dwordx4  s[80:83], s[72:75], 0x0000a0   // 00000000005C: F4281424 FA0000A0
;   s_buffer_load_dwordx16  s[16:31], s[72:75], 0x000020  // 000000000064: F4300424 FA000020
;   s_buffer_load_dwordx16  s[32:47], s[72:75], 0x000060  // 00000000006C: F4300824 FA000060
;   s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000074: BF8C0070
;   v_mul_legacy_f32  v20, s8, v4                         // 000000000078: 0E280808
;   v_mul_legacy_f32  v11, s52, v8                        // 00000000007C: 0E161034
;   v_mul_legacy_f32  v3, s48, v8                         // 000000000080: 0E061030
;   v_mul_legacy_f32  v8, s56, v8                         // 000000000084: 0E101038
;   v_mul_legacy_f32  v14, s60, v4                        // 000000000088: 0E1C083C
;   v_mul_legacy_f32  v15, s64, v4                        // 00000000008C: 0E1E0840
;   v_fmac_f32    v11, s53, v9                            // 000000000090: 56161235
;   v_fmac_f32    v3, s49, v9                             // 000000000094: 56061231
;   v_fmac_f32    v8, s57, v9                             // 000000000098: 56101239
;   v_mul_legacy_f32  v16, s68, v4                        // 00000000009C: 0E200844
;   v_mul_legacy_f32  v17, s76, v4                        // 0000000000A0: 0E22084C
;   v_fmac_f32    v11, s54, v10                           // 0000000000A4: 56161436
;   v_fmac_f32    v3, s50, v10                            // 0000000000A8: 56061432
;   v_fmac_f32    v8, s58, v10                            // 0000000000AC: 5610143A
;   v_mul_legacy_f32  v0, s4, v4                          // 0000000000B0: 0E000804
;   v_fmac_f32    v20, s9, v5                             // 0000000000B4: 56280A09
;   v_mul_legacy_f32  v9, v11, v11                        // 0000000000B8: 0E12170B
;   v_fmac_f32    v14, s61, v5                            // 0000000000BC: 561C0A3D
;   v_fmac_f32    v15, s65, v5                            // 0000000000C0: 561E0A41
;   v_fmac_f32    v16, s69, v5                            // 0000000000C4: 56200A45
;   v_fmac_f32    v17, s77, v5                            // 0000000000C8: 56220A4D
;   v_fmac_f32    v9, v3, v3                              // 0000000000CC: 56120703
;   v_mul_legacy_f32  v2, s12, v4                         // 0000000000D0: 0E04080C
;   v_fmac_f32    v0, s5, v5                              // 0000000000D4: 56000A05
;   v_fmac_f32    v20, s10, v6                            // 0000000000D8: 56280C0A
;   v_fmac_f32    v14, s62, v6                            // 0000000000DC: 561C0C3E
;   v_fmac_f32    v9, v8, v8                              // 0000000000E0: 56121108
;   v_fmac_f32    v15, s66, v6                            // 0000000000E4: 561E0C42
;   v_fmac_f32    v16, s70, v6                            // 0000000000E8: 56200C46
;   v_fmac_f32    v17, s78, v6                            // 0000000000EC: 56220C4E
;   v_fmac_f32    v2, s13, v5                             // 0000000000F0: 56040A0D
;   v_rsq_f32     v9, v9                                  // 0000000000F4: 7E125D09
;   v_fmac_f32    v0, s6, v6                              // 0000000000F8: 56000C06
;   v_fmac_f32    v20, s11, v7                            // 0000000000FC: 56280E0B
;   v_fmac_f32    v14, s63, v7                            // 000000000100: 561C0E3F
;   v_fmac_f32    v15, s67, v7                            // 000000000104: 561E0E43
;   v_fmac_f32    v16, s71, v7                            // 000000000108: 56200E47
;   v_fmac_f32    v17, s79, v7                            // 00000000010C: 56220E4F
;   v_fmac_f32    v2, s14, v6                             // 000000000110: 56040C0E
;   v_fmac_f32    v0, s7, v7                              // 000000000114: 56000E07
;   v_sub_f32     v1, s81, v20                            // 000000000118: 08022851
;   v_mul_legacy_f32  v3, v9, v3                          // 00000000011C: 0E060709
;   exp           pos0, v14, v15, v16, v17 done           // 000000000120: F80008CF 11100F0E
;   v_mul_legacy_f32  v11, v9, v11                        // 000000000128: 0E161709
;   v_fmac_f32    v2, s15, v7                             // 00000000012C: 56040E0F
;   v_mul_legacy_f32  v8, v9, v8                          // 000000000130: 0E101109
;   s_waitcnt     expcnt(0)                               // 000000000134: BF8CFF0F
;   v_mul_legacy_f32  v14, s24, v3                        // 000000000138: 0E1C0618
;   v_mul_legacy_f32  v9, s28, v3                         // 00000000013C: 0E12061C
;   v_sub_f32     v0, s80, v0                             // 000000000140: 08000050
;   v_mul_legacy_f32  v10, v1, v1                         // 000000000144: 0E140301
;   v_mul_legacy_f32  v16, s32, v3                        // 000000000148: 0E200620
;   v_fma_f32     v14, -s25, v11, -v14                    // 00000000014C: D54B000E A43A1619
;   v_fma_f32     v9, -s29, v11, -v9                      // 000000000154: D54B0009 A426161D
;   v_sub_f32     v23, s82, v2                            // 00000000015C: 082E0452
;   v_fmac_f32    v10, v0, v0                             // 000000000160: 56140100
;   v_fma_f32     v21, -s33, v11, -v16                    // 000000000164: D54B0015 A4421621
;   v_fmac_f32    v14, -s26, v8                           // 00000000016C: D52B000E 2002101A
;   v_fmac_f32    v9, -s30, v8                            // 000000000174: D52B0009 2002101E
;   s_buffer_load_dword  s4, s[72:75], 0x000010           // 00000000017C: F4200124 FA000010
;   v_fmac_f32    v10, v23, v23                           // 000000000184: 56142F17
;   v_fmac_f32    v21, -s34, v8                           // 000000000188: D52B0015 20021022
;   v_cmp_gt_f32  vcc, 0, v14                             // 000000000190: 7C081C80
;   v_mul_legacy_f32  v5, s1, v5                          // 000000000194: 0E0A0A01
;   v_mov_b32     v15, 1.0                                // 000000000198: 7E1E02F2
;   v_rsq_f32     v10, v10                                // 00000000019C: 7E145D0A
;   v_mov_b32     v17, s19                                // 0000000001A0: 7E220213
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 0000000001A4: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v9                              // 0000000001AC: 7C081280
;   v_fmac_f32    v5, s0, v4                              // 0000000001B0: 560A0800
;   v_mul_legacy_f32  v14, v16, v14                       // 0000000001B4: 0E1C1D10
;   v_cndmask_b32  v19, 1.0, 0, vcc                       // 0000000001B8: D5010013 01A900F2
;   v_cmp_gt_f32  vcc, 0, v21                             // 0000000001C0: 7C082A80
;   v_mul_legacy_f32  v0, v10, v0                         // 0000000001C4: 0E00010A
;   v_mul_legacy_f32  v1, v10, v1                         // 0000000001C8: 0E02030A
;   v_mul_legacy_f32  v23, v10, v23                       // 0000000001CC: 0E2E2F0A
;   v_mul_legacy_f32  v9, v19, v9                         // 0000000001D0: 0E121313
;   v_cndmask_b32  v10, 1.0, 0, vcc                       // 0000000001D4: D501000A 01A900F2
;   v_mul_legacy_f32  v16, s36, v14                       // 0000000001DC: 0E201C24
;   v_mul_legacy_f32  v19, s37, v14                       // 0000000001E0: 0E261C25
;   v_mul_legacy_f32  v14, s38, v14                       // 0000000001E4: 0E1C1C26
;   v_fmac_f32    v5, s3, v7                              // 0000000001E8: 560A0E03
;   v_mul_legacy_f32  v21, v10, v21                       // 0000000001EC: 0E2A2B0A
;   v_mul_legacy_f32  v10, v1, v11                        // 0000000001F0: 0E141701
;   v_fmac_f32    v16, s40, v9                            // 0000000001F4: 56201228
;   v_fmac_f32    v19, s41, v9                            // 0000000001F8: 56261229
;   v_fmac_f32    v14, s42, v9                            // 0000000001FC: 561C122A
;   s_waitcnt     lgkmcnt(0)                              // 000000000200: BF8CC07F
;   v_mov_b32     v22, s4                                 // 000000000204: 7E2C0204
;   v_fma_f32     v10, -v0, v3, -v10                      // 000000000208: D54B000A A42A0700
;   v_fmac_f32    v16, s44, v21                           // 000000000210: 56202A2C
;   v_fmac_f32    v19, s45, v21                           // 000000000214: 56262A2D
;   v_fmac_f32    v14, s46, v21                           // 000000000218: 561C2A2E
;   v_fmac_f32    v5, v6, s2 clamp                        // 00000000021C: D52B8005 00000506
;   v_fmac_f32    v10, -v23, v8 mul:2                     // 000000000224: D52B000A 28021117
;   v_fma_f32     v4, s16, v16, s20                       // 00000000022C: D54B0004 00522010
;   v_fma_f32     v6, s17, v19, s21                       // 000000000234: D54B0006 00562611
;   v_fma_f32     v7, s18, v14, s22                       // 00000000023C: D54B0007 005A1C12
;   v_fma_f32     v0, -v10, v3, -v0                       // 000000000244: D54B0000 A402070A
;   v_fma_f32     v1, -v10, v11, -v1                      // 00000000024C: D54B0001 A406170A
;   v_fma_f32     v2, -v10, v8, -v23                      // 000000000254: D54B0002 A45E110A
;   exp           param0, v4, v6, v7, v17                 // 00000000025C: F800020F 11070604
;   exp           param1, v22, v22, v22, v5               // 000000000264: F800021F 05161616
;   exp           param2, v12, v13, v18, v15              // 00000000026C: F800022F 0F120D0C
;   exp           param3, v0, v1, v2, v15                 // 000000000274: F800023F 0F020100
;   s_endpgm                                              // 00000000027C: BF810000
;   s_code_end                                            // 000000000280: BF9F0000
;   s_code_end                                            // 000000000284: BF9F0000
;   s_code_end                                            // 000000000288: BF9F0000
;   s_code_end                                            // 00000000028C: BF9F0000
;   s_code_end                                            // 000000000290: BF9F0000
;   s_code_end                                            // 000000000294: BF9F0000
;   s_code_end                                            // 000000000298: BF9F0000
;   s_code_end                                            // 00000000029C: BF9F0000
;   s_code_end                                            // 0000000002A0: BF9F0000
;   s_code_end                                            // 0000000002A4: BF9F0000
;   s_code_end                                            // 0000000002A8: BF9F0000
;   s_code_end                                            // 0000000002AC: BF9F0000
;   s_code_end                                            // 0000000002B0: BF9F0000
;   s_code_end                                            // 0000000002B4: BF9F0000
;   s_code_end                                            // 0000000002B8: BF9F0000
;   s_code_end                                            // 0000000002BC: BF9F0000
;   s_code_end                                            // 0000000002C0: BF9F0000
;   s_code_end                                            // 0000000002C4: BF9F0000
;   s_code_end                                            // 0000000002C8: BF9F0000
;   s_code_end                                            // 0000000002CC: BF9F0000
;   s_code_end                                            // 0000000002D0: BF9F0000
;   s_code_end                                            // 0000000002D4: BF9F0000
;   s_code_end                                            // 0000000002D8: BF9F0000
;   s_code_end                                            // 0000000002DC: BF9F0000
;   s_code_end                                            // 0000000002E0: BF9F0000
;   s_code_end                                            // 0000000002E4: BF9F0000
;   s_code_end                                            // 0000000002E8: BF9F0000
;   s_code_end                                            // 0000000002EC: BF9F0000
;   s_code_end                                            // 0000000002F0: BF9F0000
;   s_code_end                                            // 0000000002F4: BF9F0000
;   s_code_end                                            // 0000000002F8: BF9F0000
;   s_code_end                                            // 0000000002FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 28
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSEnvMap)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
; 
;   num_output_semantics: 4
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       param_idx: 3
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 6 {
;     vs_export_count: 3
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 16
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000011000000110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000000000011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=24,NumSGPR=86,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:98,SAlu:10,VMem:0,SMem:8,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char EnvironmentMapEffect_VSEnvMap[] = {
  0x44, 0x58, 0x42, 0x43, 0xf0, 0xb7, 0x30, 0x67, 0x4a, 0x11, 0x37, 0x88,
  0x16, 0x08, 0x4f, 0x73, 0xb7, 0xbd, 0x3c, 0x41, 0x01, 0x00, 0x00, 0x00,
  0x40, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00,
  0x10, 0x03, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0x88, 0x04, 0x00, 0x00,
  0xa4, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xc4, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xae, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0x60, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x03, 0x05, 0x00, 0x03,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52,
  0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x56, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0x80, 0x70, 0x0f, 0x00, 0x80, 0x70, 0x0f, 0x00,
  0x80, 0x70, 0x0f, 0x00, 0x80, 0x70, 0x0f, 0x00, 0x07, 0x70, 0x00, 0x00,
  0x07, 0x70, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xd1, 0x7a, 0xa0,
  0xa7, 0x94, 0x34, 0x2b, 0x60, 0x47, 0x21, 0x69, 0xba, 0xf6, 0x19, 0x94,
  0x44, 0x58, 0x49, 0x4c, 0x94, 0x11, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x65, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0xf4, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x0c, 0x0e, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x6c, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x80, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x90, 0x0e, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x84, 0x11, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x83, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xf4, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x88, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x8a, 0x32, 0x10, 0xc3,
  0x30, 0x0c, 0xc3, 0x30, 0x0c, 0xe4, 0x1c, 0x35, 0x5c, 0xfe, 0x84, 0x3d,
  0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88,
  0x61, 0x18, 0x06, 0x2a, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0x43, 0xa0, 0x19, 0x16, 0x02, 0x05, 0x51, 0x21, 0x20, 0x42, 0x22, 0x68,
  0x2a, 0xc5, 0x40, 0x0c, 0xc3, 0x40, 0xd5, 0x1c, 0x41, 0x50, 0x0c, 0x89,
  0x28, 0x08, 0xe2, 0x22, 0x6c, 0x20, 0x60, 0x18, 0x61, 0x18, 0x86, 0x11,
  0x88, 0x21, 0x07, 0xb6, 0x24, 0xe0, 0xae, 0x3a, 0x1c, 0x69, 0x5a, 0x00,
  0xcc, 0xa1, 0x26, 0x3f, 0x05, 0x22, 0x80, 0x21, 0x26, 0x22, 0x92, 0x50,
  0xb3, 0x0d, 0x03, 0xb7, 0x75, 0xdd, 0xb6, 0x71, 0x5e, 0xe7, 0xd1, 0x97,
  0x0c, 0x04, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0b, 0x04,
  0x13, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x00, 0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0x02, 0x67,
  0x00, 0x28, 0x1c, 0x8b, 0x51, 0x28, 0x90, 0xe4, 0x3d, 0x90, 0xe4, 0x3d,
  0x90, 0xe4, 0x3d, 0x90, 0xe4, 0xbd, 0x13, 0xe4, 0x4e, 0x90, 0x3b, 0x41,
  0x0e, 0x00, 0x11, 0x10, 0x02, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x24, 0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x58, 0x36, 0x08, 0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x30,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x60, 0x80, 0x11, 0x98, 0x20, 0x10,
  0xcd, 0x06, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d,
  0x20, 0x00, 0x40, 0x02, 0x26, 0x08, 0x61, 0x90, 0x6d, 0x08, 0xa8, 0x09,
  0x82, 0x00, 0x10, 0xb1, 0x9a, 0x2a, 0x72, 0xb3, 0x6b, 0x0a, 0x83, 0xe3,
  0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0x36,
  0x41, 0x28, 0xa6, 0x09, 0x42, 0x41, 0x6d, 0x08, 0x8e, 0x09, 0x42, 0x51,
  0x4d, 0x10, 0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84, 0xce, 0xdb, 0xb0,
  0x1c, 0x58, 0xa6, 0x6d, 0x9a, 0xc1, 0x1d, 0xda, 0x47, 0xc3, 0xe9, 0x49,
  0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x58, 0x13, 0x04, 0x02, 0xda, 0x20,
  0x74, 0x63, 0xb0, 0x61, 0x31, 0xc2, 0x20, 0xd3, 0x36, 0xcd, 0x10, 0x03,
  0x43, 0x23, 0x83, 0x09, 0x02, 0x11, 0x11, 0xa1, 0x2a, 0xc2, 0x1a, 0x7a,
  0x7a, 0x92, 0x22, 0x9a, 0x20, 0x14, 0xd7, 0x06, 0xa1, 0xeb, 0x36, 0x2c,
  0x66, 0x70, 0x06, 0x99, 0xb6, 0x69, 0x06, 0x1a, 0x98, 0x81, 0x96, 0x06,
  0x1b, 0x06, 0x30, 0x28, 0x03, 0x35, 0x60, 0x31, 0xf4, 0xc4, 0xf4, 0x24,
  0xb5, 0x61, 0x39, 0xd8, 0x20, 0xd3, 0x36, 0x34, 0x30, 0xb8, 0x43, 0xfb,
  0x36, 0x04, 0xc6, 0x86, 0xc5, 0x60, 0x83, 0x4c, 0x73, 0x03, 0x34, 0x30,
  0x38, 0x43, 0xfb, 0x36, 0x2c, 0x66, 0x70, 0x06, 0x99, 0xb6, 0xa1, 0x81,
  0x81, 0x06, 0x66, 0xa0, 0xa5, 0xc1, 0x86, 0xa5, 0x3b, 0x83, 0x4c, 0x73,
  0x03, 0x34, 0x30, 0xc4, 0xa0, 0xd3, 0xc8, 0x60, 0x82, 0x40, 0x48, 0x1b,
  0x16, 0x39, 0xc0, 0x32, 0x31, 0xd8, 0x38, 0x83, 0x93, 0x03, 0xed, 0xdb,
  0x50, 0xb4, 0xc1, 0x1b, 0xc0, 0x41, 0x1c, 0xcc, 0xc1, 0x86, 0x61, 0x0d,
  0xe8, 0x00, 0xd8, 0x50, 0x58, 0x57, 0x1d, 0x4c, 0x40, 0x2b, 0x3c, 0xb1,
  0x37, 0x3c, 0x97, 0xb1, 0xb7, 0x36, 0xb8, 0x34, 0xb6, 0x32, 0x39, 0x97,
  0x37, 0x38, 0xba, 0xb4, 0x37, 0xb7, 0xb9, 0x29, 0x81, 0x50, 0x85, 0x8d,
  0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x40, 0x54,
  0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12,
  0x1c, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6,
  0x04, 0x49, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9,
  0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x01, 0x53, 0x86, 0x0c, 0xcf, 0x45,
  0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0x20, 0xd5,
  0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2, 0x0b,
  0xa3, 0x2b, 0x9b, 0x12, 0x50, 0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc, 0xe8,
  0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0x75, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec,
  0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33,
  0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d,
  0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e,
  0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
  0x06, 0x80, 0xbc, 0xac, 0xd7, 0x54, 0x26, 0xf0, 0x98, 0xc1, 0x36, 0x5c,
  0xbe, 0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94,
  0x84, 0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x21, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x03,
  0xce, 0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x5b,
  0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xe1, 0x7e, 0x71, 0xdb,
  0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b,
  0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x07,
  0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40, 0x84, 0xf9,
  0xc5, 0x6d, 0x1b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44,
  0x98, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0xd3, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x74, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14,
  0x5c, 0x61, 0x14, 0x57, 0xd9, 0x95, 0xc2, 0x0c, 0x40, 0xb9, 0x95, 0x4c,
  0xc9, 0x95, 0x46, 0x71, 0x14, 0x45, 0x89, 0x14, 0x49, 0x99, 0x94, 0x44,
  0xa1, 0x94, 0x4a, 0xb1, 0x94, 0x0b, 0x0d, 0x63, 0x04, 0x20, 0x08, 0x82,
  0x20, 0x18, 0x8c, 0x11, 0x80, 0x20, 0x08, 0xe2, 0xdf, 0x08, 0xc0, 0x18,
  0x01, 0x08, 0x82, 0x20, 0x08, 0x0a, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0xb1, 0x01, 0xd4, 0xa9, 0x81, 0x1a, 0x68, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xd0, 0xc1, 0x18, 0x90, 0xc1, 0x1a, 0x84,
  0x01, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1d, 0x90, 0x41,
  0x19, 0xb0, 0xc1, 0x56, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x61,
  0x07, 0x65, 0xe0, 0x06, 0x6d, 0x30, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0x77, 0x60, 0x06, 0x6f, 0xe0, 0x06, 0xdd, 0x35, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1e, 0x9c, 0x01, 0x1c, 0xbc, 0x81,
  0x18, 0x60, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe4, 0x01, 0x1a,
  0xc0, 0x01, 0x1c, 0x98, 0x41, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x86, 0x1e, 0xa4, 0x41, 0x1c, 0xc4, 0x01, 0x18, 0x68, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xec, 0x81, 0x1a, 0xc8, 0x81, 0x1c, 0x94, 0xc1,
  0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1f, 0xac, 0xc1, 0x1c,
  0xcc, 0xc1, 0x19, 0x70, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xe1,
  0xc1, 0xa7, 0x64, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30,
  0xf5, 0x01, 0x19, 0x3c, 0xdd, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x4c, 0xa2, 0x90, 0x06, 0x54, 0x1e, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x98, 0x33, 0xc9,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xaa, 0x53, 0x80, 0x83, 0xc9,
  0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x42, 0x85, 0x38, 0x98,
  0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xaa, 0x54, 0x90, 0x83,
  0xc9, 0x09, 0xac, 0xb9, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd5, 0x2a, 0xd0, 0xc1, 0xd5, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x50, 0xb1, 0x42, 0x1d, 0x5c, 0x4d, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x55, 0x2b, 0xd8, 0xc1, 0xd5, 0x04, 0xc6, 0x6c, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xea, 0x15, 0xf0, 0x60, 0x63, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x60, 0x21, 0x0f, 0x36, 0x26, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x2a, 0x16, 0xf4, 0x60, 0x63, 0x82,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x98, 0x66, 0x41, 0x0f, 0xca, 0x40,
  0x0e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1,
  0x86, 0x26, 0x3e, 0x36, 0x28, 0xf1, 0xb1, 0xe1, 0x88, 0xcf, 0x88, 0xc1,
  0x02, 0x80, 0x20, 0x18, 0x28, 0xbd, 0xe0, 0x07, 0x83, 0x10, 0x0c, 0x42,
  0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c, 0x2f, 0xf8, 0x41, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x13, 0x2f, 0x8c, 0x82, 0x1b, 0xe8,
  0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x04, 0x0e, 0xa7, 0x20, 0x07, 0x7d,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x91, 0xc3, 0x2a, 0xd8, 0x01, 0x28,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x2d,
  0x77, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0xd0, 0x21,
  0x16, 0xee, 0x60, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x4a,
  0x07, 0x59, 0xb8, 0x83, 0x25, 0x30, 0x45, 0x0f, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd5, 0x3a, 0xd0, 0x82, 0x1e, 0x28, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xec, 0x50, 0x0b, 0x7a, 0xa0, 0x04,
  0x96, 0xf4, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x72,
  0x87, 0x5b, 0xe8, 0x83, 0x24, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xea, 0x1d, 0x70, 0xa1, 0x0f, 0x92, 0x60, 0xc4, 0x60, 0x01, 0x40, 0x10,
  0x0c, 0x14, 0x7a, 0xa8, 0x85, 0x83, 0x08, 0x0e, 0x22, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x86, 0x1e, 0x6a, 0x21, 0xb0, 0x20, 0x91, 0x8f,
  0x09, 0x87, 0x7c, 0x6c, 0x28, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x93, 0x3d, 0xf4, 0x02, 0x2a, 0xa8, 0xc3, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0xc1, 0xa4, 0x0f, 0xe1, 0xc0, 0x0a, 0xf0, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x30, 0xf9, 0x43, 0x39, 0xc0, 0x02, 0x39, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x4c, 0x22, 0x91, 0x0e, 0xb4, 0xd0, 0x0f, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x93, 0x49, 0xb4, 0x03, 0x2e, 0x80, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0xa4, 0x12, 0xf1, 0xc0, 0x0b, 0xe5, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0x16, 0x0e, 0x56, 0x7c, 0x4c, 0x1c, 0xac,
  0xf8, 0xd8, 0x38, 0x40, 0xf1, 0x31, 0x72, 0x80, 0xe2, 0x63, 0xe5, 0xa0,
  0xc4, 0xc7, 0xcc, 0x41, 0x89, 0x8f, 0x85, 0x41, 0x27, 0x1f, 0x43, 0x87,
  0x20, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xd5, 0x84, 0x3f,
  0x20, 0x62, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x65, 0x13,
  0xff, 0x80, 0x88, 0x41, 0x60, 0x65, 0x90, 0xc9, 0xc7, 0xd8, 0x21, 0x88,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x39, 0x21, 0x12, 0x8a,
  0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xe9, 0xc4, 0x48,
  0x28, 0x66, 0x10, 0x58, 0x1a, 0x54, 0xf2, 0x31, 0x78, 0x08, 0xe2, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x55, 0x4f, 0x98, 0x04, 0xa3, 0x06,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x3e, 0x71, 0x12, 0x8c,
  0x1a, 0x04, 0xc3, 0x11, 0x09, 0x3d, 0x10, 0xdf, 0x70, 0x84, 0x51, 0x0f,
  0xc4, 0x37, 0x1c, 0x31, 0xd8, 0x03, 0xf1, 0x4d, 0x37, 0xdc, 0x03, 0x3e,
  0x0c, 0xd3, 0x0d, 0xf8, 0x90, 0x0f, 0xc3, 0x74, 0x43, 0x3e, 0xe8, 0xc3,
  0x60, 0xc3, 0x23, 0x1f, 0x1b, 0x18, 0xf9, 0xd8, 0x90, 0xc8, 0xc7, 0x06,
  0x37, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x69, 0x21,
  0x13, 0xc3, 0x19, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xa9,
  0xc5, 0x4c, 0x0c, 0x60, 0x10, 0x98, 0x01, 0x07, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x8a, 0x2d, 0x6a, 0xc2, 0x48, 0x83, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0xaa, 0xb6, 0xb0, 0x09, 0x43, 0x0c, 0x02,
  0x4b, 0xe4, 0x40, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xbd,
  0x05, 0x4e, 0x24, 0x6b, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x05, 0x17, 0x39, 0x91, 0x90, 0x41, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x93, 0x5c, 0xe4, 0x04, 0x49, 0x9c, 0xc5, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x44,
  0x3e, 0x36, 0x1c, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x29,
  0x2f, 0xc0, 0x62, 0x25, 0xe2, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0xec, 0x18, 0xe0, 0x63, 0xc7, 0x00, 0x1f, 0x3b,
  0x06, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x04, 0x1a, 0x67,
  0x21, 0x13, 0x3a, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x53, 0x69, 0xb0, 0xc5, 0x4d, 0xf8, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x4c, 0xaa, 0x11, 0x17, 0x3c, 0x21, 0x16, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xbd, 0x86, 0x5d, 0x84, 0x85,
  0x59, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x68, 0x02, 0x31, 0xd8, 0x04, 0x16, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x8a, 0x36, 0xfa, 0x02, 0x2c, 0xa6, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xaa, 0xda, 0xf0, 0x0b, 0xb0, 0x98, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xa8, 0x6c, 0xe3, 0x2f, 0xc0, 0x62, 0x0a, 0x4c,
  0x22, 0x0b, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x85, 0x1b,
  0xa1, 0x41, 0x16, 0x52, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x55,
  0x6e, 0x88, 0x06, 0x59, 0x48, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x54, 0xba, 0x31, 0x1a, 0x64, 0x21, 0x05, 0x16, 0xa1, 0x85, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0xe2, 0x8d, 0xd2, 0x40, 0x8b, 0x28,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xaa, 0x37, 0x4c, 0x03, 0x2d,
  0xa2, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2a, 0xdf, 0x38, 0x0d,
  0xb4, 0x88, 0x02, 0x83, 0xd8, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x81, 0x47, 0x6a, 0xb0, 0x05, 0x14, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x15, 0x1e, 0xaa, 0xc1, 0x16, 0x50, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x95, 0x78, 0xac, 0x06, 0x5b, 0x40, 0xc1, 0x68,
  0x82, 0x1c, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x95, 0x07,
  0x6b, 0xdc, 0x85, 0x78, 0x8c, 0x26, 0x04, 0xc0, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x4c, 0xe7, 0xe1, 0x1a, 0x79, 0x01, 0x1b, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23,
  0x06, 0x0d, 0x00, 0x82, 0x60, 0xe0, 0xb4, 0x87, 0x6d, 0xe0, 0xc5, 0x5d,
  0xd8, 0x45, 0x5d, 0x10, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82,
  0x01, 0xf3, 0x1e, 0xe3, 0x11, 0xd8, 0x4c, 0xdc, 0x84, 0x7c, 0x4c, 0x34,
  0x82, 0xf8, 0x58, 0x4d, 0xe0, 0x84, 0x7c, 0x8c, 0x34, 0x82, 0xf8, 0xd8,
  0x4d, 0xe4, 0x84, 0x7c, 0xcc, 0x34, 0x82, 0xf8, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0x81, 0x72, 0x1f, 0xb8, 0x51, 0x0c, 0x41, 0x48, 0x80, 0xc4,
  0x3f, 0x58, 0xb0, 0x1a, 0xf2, 0xb1, 0x60, 0x24, 0xe4, 0x63, 0xc2, 0x48,
  0xc8, 0xc7, 0x86, 0x91, 0x90, 0x8f, 0x29, 0x43, 0x7c, 0x2c, 0x19, 0xe2,
  0x63, 0xc8, 0x10, 0x9f, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x40, 0x40,
  0x44, 0x3c, 0xf0, 0x03, 0x3f, 0xdc, 0xe3, 0x0f, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x00, 0x01, 0x11, 0xf1, 0xc0, 0x0f, 0xfc, 0x38, 0x0f, 0x3f,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x04, 0x44, 0xc4, 0x03, 0x3f,
  0xf0, 0x63, 0x3d, 0xfa, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x10,
  0x10, 0x11, 0x0f, 0xfc, 0xc0, 0x0f, 0xf6, 0xc0, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x00, 0x01, 0x11, 0xf1, 0xc8, 0x0f, 0xfc, 0x70, 0x0f, 0x6b,
  0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0x10, 0x11, 0x8f, 0xfc, 0xc0,
  0x8f, 0xf3, 0xb0, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x01, 0x11,
  0xf1, 0xc8, 0x0f, 0xfc, 0x58, 0x0f, 0x6b, 0xc4, 0x20, 0x01, 0x40, 0x10,
  0x0c, 0x10, 0x10, 0x11, 0x8f, 0xfc, 0xc0, 0x0f, 0xf6, 0x78, 0x46, 0x0c,
  0x12, 0x00, 0x04, 0xc1, 0x00, 0x01, 0x11, 0xf1, 0x88, 0x0f, 0xfc, 0x70,
  0x8f, 0xd6, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x04, 0x44, 0xc4,
  0x23, 0x3e, 0xf0, 0xe3, 0x3c, 0x58, 0x63, 0xc4, 0x20, 0x01, 0x40, 0x10,
  0x0c, 0x10, 0x10, 0x11, 0x0f, 0xfa, 0xc0, 0x0f, 0xf7, 0x18, 0x46, 0x0c,
  0x12, 0x00, 0x04, 0xc1, 0x00, 0x01, 0x11, 0xf1, 0xa0, 0x0f, 0xfc, 0x38,
  0x0f, 0x61, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0x10, 0x11, 0x0f,
  0xfa, 0xc0, 0x8f, 0xf5, 0x08, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00,
  0x01, 0x11, 0xf1, 0x80, 0x0f, 0xfc, 0x70, 0x8f, 0x32, 0x18, 0x31, 0x48,
  0x00, 0x10, 0x04, 0x03, 0x04, 0x44, 0xc4, 0x03, 0x3e, 0xf0, 0xe3, 0x3c,
  0xc2, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x10, 0x10, 0x11, 0x0f,
  0xf8, 0xc0, 0x8f, 0xf5, 0xe8, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00,
  0x01, 0x11, 0xf1, 0x80, 0x0f, 0xfc, 0x60, 0x8f, 0x0c, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c, 0x44, 0x37, 0x6f, 0x3c,
  0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00,
  0xdc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x94, 0xcf, 0x6b, 0x13, 0x41,
  0x14, 0xc7, 0xdf, 0xcc, 0x6e, 0x26, 0x93, 0xe9, 0xf6, 0x65, 0xb3, 0x89,
  0x1b, 0x95, 0x31, 0x6e, 0x43, 0x0c, 0xdb, 0xa4, 0xb6, 0x51, 0xea, 0x4f,
  0xfc, 0x6d, 0x55, 0xa4, 0x56, 0x6b, 0x0b, 0xef, 0x20, 0x56, 0xea, 0x3f,
  0x20, 0x3d, 0x79, 0x90, 0x12, 0x23, 0x78, 0xf0, 0xd0, 0xa3, 0x77, 0x7b,
  0x08, 0x88, 0xa0, 0xe0, 0xd9, 0x43, 0xa2, 0x37, 0xd1, 0x83, 0x88, 0xec,
  0xd5, 0x7f, 0x41, 0x91, 0x20, 0xc5, 0x83, 0x71, 0x56, 0x13, 0x1a, 0x2b,
  0x8a, 0x78, 0x51, 0x1f, 0x3c, 0x3e, 0xbc, 0xef, 0xbc, 0x99, 0x37, 0xbb,
  0x33, 0xf3, 0x4e, 0xcf, 0xcf, 0xcf, 0x30, 0x06, 0xb0, 0x22, 0xe0, 0xab,
  0xf5, 0x00, 0xef, 0x5a, 0x8f, 0xde, 0xfe, 0xca, 0x1f, 0xff, 0x66, 0xde,
  0xcf, 0x9c, 0xf7, 0xe6, 0x4f, 0xc1, 0x9f, 0x59, 0x7f, 0x9d, 0xb5, 0xfe,
  0x42, 0xd6, 0xfa, 0x98, 0x0d, 0x68, 0xdb, 0x1b, 0xf2, 0xd7, 0x12, 0xdf,
  0x78, 0xb9, 0xf7, 0x81, 0x71, 0xc8, 0xbe, 0xe6, 0x72, 0x78, 0x3a, 0x90,
  0xb7, 0x19, 0x16, 0x13, 0x6c, 0x20, 0x5e, 0xea, 0xe5, 0xc7, 0x9a, 0x1e,
  0xa8, 0x2b, 0x20, 0x6d, 0x5b, 0x82, 0x25, 0x25, 0x17, 0xdc, 0x72, 0x18,
  0xfc, 0x6b, 0x16, 0xff, 0x8e, 0x6f, 0x5b, 0x17, 0xf1, 0xf1, 0x82, 0xe0,
  0xf1, 0x8f, 0x12, 0x96, 0x05, 0xff, 0x8f, 0xc5, 0x67, 0xa8, 0x07, 0x5c,
  0xf4, 0xb4, 0x41, 0x73, 0x37, 0xc4, 0xb5, 0xda, 0xf7, 0xf1, 0xfb, 0x7d,
  0xbf, 0x57, 0x6b, 0xf4, 0x75, 0x23, 0xba, 0x71, 0xbc, 0x6b, 0xdd, 0xbf,
  0x3b, 0x59, 0x5d, 0x3c, 0xd3, 0x88, 0x46, 0xde, 0x7c, 0xb6, 0x9e, 0x7c,
  0xdc, 0x72, 0xd7, 0x1e, 0xb9, 0xdd, 0xb2, 0x60, 0xb5, 0x3d, 0xdc, 0x3d,
  0x7b, 0x27, 0xae, 0xe6, 0x58, 0xcf, 0x5b, 0xcf, 0xac, 0x17, 0xad, 0xae,
  0xf5, 0xb2, 0xf5, 0xf0, 0x02, 0xcb, 0x34, 0x78, 0xa9, 0x5e, 0x82, 0x5a,
  0xc7, 0xdc, 0xa1, 0x4f, 0x25, 0xa7, 0xd6, 0x71, 0x99, 0xa1, 0x3b, 0xd6,
  0x99, 0x8d, 0x99, 0x0d, 0x3b, 0x4b, 0x31, 0x73, 0x61, 0x67, 0x35, 0x1e,
  0xb7, 0x6b, 0x9d, 0x20, 0xa6, 0xac, 0x75, 0x16, 0x0d, 0x97, 0x60, 0xa5,
  0x2d, 0x65, 0x88, 0x93, 0xae, 0x8f, 0x35, 0x57, 0xe0, 0x7e, 0xd7, 0xc5,
  0x43, 0x52, 0xe3, 0x31, 0x59, 0xc0, 0x3d, 0x9e, 0x4f, 0xbb, 0x3c, 0x41,
  0x07, 0x3c, 0x97, 0xa6, 0x64, 0x80, 0xe7, 0x64, 0x11, 0xf7, 0xe6, 0x7c,
  0xda, 0x9d, 0x13, 0x74, 0x30, 0xe7, 0x92, 0x2d, 0x01, 0x53, 0x2a, 0xa4,
  0xa1, 0xbc, 0x87, 0x87, 0x95, 0xa6, 0xe3, 0xaa, 0x40, 0xa7, 0x54, 0x40,
  0x33, 0xaa, 0x48, 0x56, 0xd2, 0x23, 0x47, 0xda, 0x98, 0x50, 0x40, 0xca,
  0x09, 0xe9, 0x88, 0xa3, 0x49, 0x66, 0x3c, 0x3a, 0xe1, 0x14, 0xe8, 0xb4,
  0x13, 0xd0, 0x79, 0xa7, 0x48, 0xc3, 0xca, 0xa6, 0xd4, 0x82, 0x57, 0x17,
  0x0e, 0xd0, 0x10, 0x86, 0x74, 0x14, 0x35, 0x9d, 0xc4, 0x02, 0x9d, 0xc1,
  0x80, 0x2e, 0x60, 0x91, 0xd0, 0xb1, 0x29, 0x89, 0x40, 0x17, 0x43, 0x2e,
  0x53, 0x49, 0x81, 0xaf, 0x24, 0xac, 0x61, 0xda, 0xcd, 0xa4, 0xf2, 0x3e,
  0xa6, 0xd1, 0xcc, 0xcd, 0xb8, 0x98, 0xee, 0xae, 0xb4, 0x37, 0x0b, 0x8d,
  0x5a, 0x78, 0x38, 0x0b, 0x20, 0x99, 0x95, 0xc3, 0x40, 0x04, 0x88, 0x30,
  0x1d, 0x6d, 0xf1, 0x0f, 0x36, 0x53, 0x86, 0xdb, 0xfc, 0x72, 0x73, 0xce,
  0x1e, 0x97, 0xc0, 0x72, 0xb4, 0xc9, 0xc4, 0x23, 0xfe, 0x89, 0x26, 0x42,
  0x35, 0xda, 0xea, 0xf2, 0x20, 0x65, 0x58, 0x30, 0x2c, 0xb1, 0xa0, 0x63,
  0xce, 0xf1, 0x53, 0x7e, 0x22, 0xce, 0xa9, 0x46, 0x45, 0xa3, 0x35, 0xb4,
  0x5c, 0x66, 0x4a, 0xe1, 0x07, 0x5e, 0xa8, 0xab, 0x85, 0x5c, 0x3d, 0xcb,
  0x8b, 0x75, 0x17, 0x58, 0xf4, 0x01, 0x1e, 0xb0, 0x86, 0x27, 0x97, 0x41,
  0x2a, 0x72, 0xb7, 0x69, 0xcc, 0xf6, 0xb5, 0x8a, 0x5c, 0x56, 0x0c, 0x50,
  0x59, 0x1c, 0xd5, 0xc4, 0x38, 0x66, 0xb3, 0x1e, 0xaa, 0xde, 0x58, 0x49,
  0x07, 0xb8, 0x43, 0x97, 0xb1, 0xac, 0x35, 0x5a, 0xa8, 0x48, 0x55, 0x2b,
  0xc8, 0xf2, 0x39, 0x0c, 0xbd, 0x80, 0x46, 0xbd, 0x32, 0x55, 0x3c, 0x4d,
  0x37, 0x9f, 0xae, 0xb4, 0x6d, 0x3e, 0x56, 0x57, 0x66, 0x8f, 0x90, 0xac,
  0x34, 0xc7, 0x2a, 0x01, 0xed, 0xac, 0x94, 0x69, 0xbc, 0xa2, 0x29, 0xd1,
  0xa8, 0x46, 0xc2, 0x34, 0x0c, 0x65, 0xf6, 0x96, 0xcf, 0xf0, 0xd0, 0x36,
  0x39, 0x6e, 0x30, 0x67, 0xee, 0xe3, 0x74, 0x94, 0x29, 0x13, 0x24, 0x0d,
  0x3d, 0x7d, 0xc9, 0xdc, 0xa2, 0xe9, 0x48, 0x25, 0x79, 0x93, 0xc5, 0xcc,
  0x8b, 0x26, 0x8f, 0x99, 0xb9, 0xd2, 0x4c, 0x73, 0x58, 0xb3, 0x45, 0x32,
  0xb3, 0xdd, 0xd0, 0xf7, 0xfd, 0xc4, 0x84, 0xa1, 0x33, 0xec, 0xa5, 0x8f,
  0x1a, 0x02, 0xe3, 0x69, 0x80, 0x5b, 0x6d, 0x80, 0x7b, 0x7f, 0xd5, 0xfb,
  0x7d, 0xa1, 0xdf, 0xc9, 0x24, 0xac, 0xb7, 0xd4, 0xbe, 0x96, 0x62, 0xdf,
  0x6b, 0xb1, 0x2b, 0xfe, 0xa3, 0x36, 0x64, 0xad, 0xcf, 0xe9, 0xb7, 0x67,
  0xc7, 0x3c, 0x5c, 0xbe, 0xa1, 0x4d, 0xda, 0xce, 0xfa, 0x6b, 0xee, 0x1a,
  0xeb, 0x57, 0xa6, 0xf9, 0x53, 0xd7, 0xae, 0xcf, 0x5c, 0x5d, 0xfa, 0x02,
  0x83, 0x5c, 0x1b, 0x9f, 0x29, 0xd1, 0x7a, 0xa0, 0xa7, 0x94, 0x34, 0x2b,
  0x60, 0x47, 0x21, 0x69, 0xba, 0xf6, 0x19, 0x94
};
