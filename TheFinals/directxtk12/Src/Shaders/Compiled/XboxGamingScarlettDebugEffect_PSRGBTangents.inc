#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   x   
; TEXCOORD                 1   xyzw        1     NONE   float   xyz 
; TEXCOORD                 2   xyz         2     NONE   float       
; COLOR                    0   xyzw        3     NONE   float      w
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettDebugEffect_PSRGBTangents.pdb
; shader hash: f0c25b32ba02b19276c6256e181a2a9c
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSRGBTangents
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 4, 5, 6 }
;   output 1 depends on inputs: { 0, 4, 5, 6 }
;   output 2 depends on inputs: { 0, 4, 5, 6 }
;   output 3 depends on inputs: { 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

define void @PSRGBTangents() {
  %1 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.unary.f32(i32 83, float %2)  ; DerivCoarseX(value)
  %7 = call float @dx.op.unary.f32(i32 83, float %3)  ; DerivCoarseX(value)
  %8 = call float @dx.op.unary.f32(i32 83, float %4)  ; DerivCoarseX(value)
  %9 = call float @dx.op.unary.f32(i32 84, float %2)  ; DerivCoarseY(value)
  %10 = call float @dx.op.unary.f32(i32 84, float %3)  ; DerivCoarseY(value)
  %11 = call float @dx.op.unary.f32(i32 84, float %4)  ; DerivCoarseY(value)
  %12 = call float @dx.op.unary.f32(i32 83, float %5)  ; DerivCoarseX(value)
  %13 = call float @dx.op.unary.f32(i32 84, float %5)  ; DerivCoarseY(value)
  %14 = fmul fast float %11, %7
  %15 = fmul fast float %10, %8
  %16 = fsub fast float %14, %15
  %17 = fmul fast float %9, %8
  %18 = fmul fast float %11, %6
  %19 = fsub fast float %17, %18
  %20 = fmul fast float %10, %6
  %21 = fmul fast float %9, %7
  %22 = fsub fast float %20, %21
  %23 = fmul fast float %22, %10
  %24 = fmul fast float %19, %11
  %25 = fsub fast float %23, %24
  %26 = fmul fast float %16, %11
  %27 = fmul fast float %22, %9
  %28 = fsub fast float %26, %27
  %29 = fmul fast float %19, %9
  %30 = fmul fast float %16, %10
  %31 = fsub fast float %29, %30
  %32 = fmul fast float %19, %8
  %33 = fmul fast float %22, %7
  %34 = fsub fast float %32, %33
  %35 = fmul fast float %22, %6
  %36 = fmul fast float %16, %8
  %37 = fsub fast float %35, %36
  %38 = fmul fast float %16, %7
  %39 = fmul fast float %19, %6
  %40 = fsub fast float %38, %39
  %41 = fmul fast float %25, %12
  %42 = call float @dx.op.tertiary.f32(i32 46, float %13, float %34, float %41)  ; FMad(a,b,c)
  %43 = fmul fast float %28, %12
  %44 = call float @dx.op.tertiary.f32(i32 46, float %13, float %37, float %43)  ; FMad(a,b,c)
  %45 = fmul fast float %31, %12
  %46 = call float @dx.op.tertiary.f32(i32 46, float %13, float %40, float %45)  ; FMad(a,b,c)
  %47 = call float @dx.op.dot3.f32(i32 55, float %42, float %44, float %46, float %42, float %44, float %46)  ; Dot3(ax,ay,az,bx,by,bz)
  %48 = call float @dx.op.unary.f32(i32 25, float %47)  ; Rsqrt(value)
  %49 = fmul fast float %48, %42
  %50 = fmul fast float %48, %44
  %51 = fmul fast float %48, %46
  %52 = call float @dx.op.dot3.f32(i32 55, float %49, float %50, float %51, float %49, float %50, float %51)  ; Dot3(ax,ay,az,bx,by,bz)
  %53 = call float @dx.op.unary.f32(i32 25, float %52)  ; Rsqrt(value)
  %54 = fmul fast float %49, 5.000000e-01
  %55 = fmul fast float %54, %53
  %56 = fmul fast float %50, 5.000000e-01
  %57 = fmul fast float %56, %53
  %58 = fmul fast float %51, 5.000000e-01
  %59 = fmul fast float %58, %53
  %60 = fadd fast float %55, 5.000000e-01
  %61 = fadd fast float %57, 5.000000e-01
  %62 = fadd fast float %59, 5.000000e-01
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %60)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %61)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %62)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %1)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.viewIdState = !{!5}
!dx.entryPoints = !{!6}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{[18 x i32] [i32 16, i32 4, i32 7, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8]}
!6 = !{void ()* @PSRGBTangents, !"PSRGBTangents", !7, null, null}
!7 = !{!8, !19, null}
!8 = !{!9, !12, !15, !17}
!9 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !10, i8 2, i32 1, i8 2, i32 0, i8 0, !11}
!10 = !{i32 0}
!11 = !{i32 3, i32 1}
!12 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!13 = !{i32 1}
!14 = !{i32 3, i32 7}
!15 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 3, i32 2, i8 0, null}
!16 = !{i32 2}
!17 = !{i32 3, !"COLOR", i8 9, i8 0, !10, i8 2, i32 1, i8 4, i32 3, i8 0, !18}
!18 = !{i32 3, i32 8}
!19 = !{!20}
!20 = !{i32 0, !"SV_Target", i8 9, i8 16, !10, i8 0, i32 1, i8 4, i32 0, i8 0, !21}
!21 = !{i32 3, i32 15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 20
;   num_shared_vgprs: 0
;   num_sgprs: 13
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 640
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x325bc2f0, 0x92b102ba                // 000000000000: D580C2F0 03FE655B 92B102BA
;   v_nop_xbox_data 0x6e25c676, 0x9c2a1a18                // 00000000000C: D580C676 03FEDD25 9C2A1A18
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[2:3], exec                            // 00000000001C: BE82047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     m0, s10                                 // 000000000024: BEFC030A
;   v_interp_p1_f32  v2, v0, attr1.x                      // 000000000028: C8080400
;   v_interp_p1_f32  v3, v0, attr1.y                      // 00000000002C: C80C0500
;   v_interp_p1_f32  v4, v0, attr1.z                      // 000000000030: C8100600
;   v_interp_p1_f32  v15, v0, attr0.x                     // 000000000034: C83C0000
;   v_interp_p1_f32  v14, v0, attr2.w                     // 000000000038: C8380B00
;   v_interp_p2_f32  v2, v1, attr1.x                      // 00000000003C: C8090401
;   v_interp_p2_f32  v3, v1, attr1.y                      // 000000000040: C80D0501
;   v_interp_p2_f32  v4, v1, attr1.z                      // 000000000044: C8110601
;   v_interp_p2_f32  v15, v1, attr0.x                     // 000000000048: C83D0001
;   v_interp_p2_f32  v14, v1, attr2.w                     // 00000000004C: C8390B01
;   ds_swizzle_b32  v6, v2 offset:32768                   // 000000000050: D8D48000 06000002
;   ds_swizzle_b32  v7, v2 offset:32853                   // 000000000058: D8D48055 07000002
;   ds_swizzle_b32  v19, v2 offset:32938                  // 000000000060: D8D480AA 13000002
;   ds_swizzle_b32  v8, v3 offset:32768                   // 000000000068: D8D48000 08000003
;   ds_swizzle_b32  v9, v3 offset:32853                   // 000000000070: D8D48055 09000003
;   ds_swizzle_b32  v3, v3 offset:32938                   // 000000000078: D8D480AA 03000003
;   ds_swizzle_b32  v10, v4 offset:32768                  // 000000000080: D8D48000 0A000004
;   ds_swizzle_b32  v11, v4 offset:32853                  // 000000000088: D8D48055 0B000004
;   ds_swizzle_b32  v4, v4 offset:32938                   // 000000000090: D8D480AA 04000004
;   ds_swizzle_b32  v12, v15 offset:32768                 // 000000000098: D8D48000 0C00000F
;   ds_swizzle_b32  v13, v15 offset:32853                 // 0000000000A0: D8D48055 0D00000F
;   ds_swizzle_b32  v5, v15 offset:32938                  // 0000000000A8: D8D480AA 0500000F
;   s_waitcnt     lgkmcnt(10)                             // 0000000000B0: BF8CCA7F
;   v_sub_f32     v18, v7, v6                             // 0000000000B4: 08240D07
;   s_waitcnt     lgkmcnt(9)                              // 0000000000B8: BF8CC97F
;   v_sub_f32     v2, v19, v6                             // 0000000000BC: 08040D13
;   s_waitcnt     lgkmcnt(7)                              // 0000000000C0: BF8CC77F
;   v_sub_f32     v1, v9, v8                              // 0000000000C4: 08021109
;   s_waitcnt     lgkmcnt(6)                              // 0000000000C8: BF8CC67F
;   v_sub_f32     v17, v3, v8                             // 0000000000CC: 08221103
;   s_waitcnt     lgkmcnt(4)                              // 0000000000D0: BF8CC47F
;   v_sub_f32     v16, v11, v10                           // 0000000000D4: 0820150B
;   s_waitcnt     lgkmcnt(3)                              // 0000000000D8: BF8CC37F
;   v_sub_f32     v4, v4, v10                             // 0000000000DC: 08081504
;   s_waitcnt     lgkmcnt(1)                              // 0000000000E0: BF8CC17F
;   v_sub_f32     v6, v13, v12                            // 0000000000E4: 080C190D
;   s_and_b64     exec, exec, s[2:3]                      // 0000000000E8: 87FE027E
;   v_mul_legacy_f32  v8, v2, v1                          // 0000000000EC: 0E100302
;   v_mul_legacy_f32  v9, v4, v18                         // 0000000000F0: 0E122504
;   v_mul_legacy_f32  v10, v17, v16                       // 0000000000F4: 0E142111
;   s_waitcnt     lgkmcnt(0)                              // 0000000000F8: BF8CC07F
;   v_sub_f32     v5, v5, v12                             // 0000000000FC: 080A1905
;   v_fma_f32     v7, v17, v18, -v8                       // 000000000100: D54B0007 84222511
;   v_fma_f32     v9, v2, v16, -v9                        // 000000000108: D54B0009 84262102
;   v_fma_f32     v10, v4, v1, -v10                       // 000000000110: D54B000A 842A0304
;   v_mul_legacy_f32  v11, v7, v2                         // 000000000118: 0E160507
;   v_mul_legacy_f32  v12, v9, v4                         // 00000000011C: 0E180909
;   v_mul_legacy_f32  v13, v10, v16                       // 000000000120: 0E1A210A
;   v_mul_legacy_f32  v15, v7, v1                         // 000000000124: 0E1E0307
;   v_mul_legacy_f32  v0, v9, v18                         // 000000000128: 0E002509
;   v_fma_f32     v4, v10, v4, -v11                       // 00000000012C: D54B0004 842E090A
;   v_mul_legacy_f32  v11, v10, v17                       // 000000000134: 0E16230A
;   v_fma_f32     v3, v7, v17, -v12                       // 000000000138: D54B0003 84322307
;   v_fma_f32     v8, v7, v18, -v13                       // 000000000140: D54B0008 84362507
;   v_fma_f32     v0, v10, v1, -v0                        // 000000000148: D54B0000 8402030A
;   v_mul_legacy_f32  v19, v4, v6                         // 000000000150: 0E260D04
;   v_fma_f32     v11, v9, v2, -v11                       // 000000000154: D54B000B 842E0509
;   v_fma_f32     v2, v9, v16, -v15                       // 00000000015C: D54B0002 843E2109
;   v_mul_legacy_f32  v3, v3, v6                          // 000000000164: 0E060D03
;   v_fmac_f32    v19, v5, v8                             // 000000000168: 56261105
;   v_mul_legacy_f32  v7, v11, v6                         // 00000000016C: 0E0E0D0B
;   v_fmac_f32    v3, v5, v2                              // 000000000170: 56060505
;   v_mul_legacy_f32  v2, v19, v19                        // 000000000174: 0E042713
;   v_fmac_f32    v7, v5, v0                              // 000000000178: 560E0105
;   v_fmac_f32    v2, v3, v3                              // 00000000017C: 56040703
;   v_fmac_f32    v2, v7, v7                              // 000000000180: 56040F07
;   v_rsq_f32     v0, v2                                  // 000000000184: 7E005D02
;   v_mul_legacy_f32  v2, v0, v19                         // 000000000188: 0E042700
;   v_mul_legacy_f32  v3, v0, v3                          // 00000000018C: 0E060700
;   v_mul_legacy_f32  v0, v0, v7                          // 000000000190: 0E000F00
;   v_mul_legacy_f32  v6, v2, v2                          // 000000000194: 0E0C0502
;   v_mul_legacy_f32  v2, 0.5, v2                         // 000000000198: 0E0404F0
;   v_fmac_f32    v6, v3, v3                              // 00000000019C: 560C0703
;   v_mul_legacy_f32  v3, 0.5, v3                         // 0000000001A0: 0E0606F0
;   v_fmac_f32    v6, v0, v0                              // 0000000001A4: 560C0100
;   v_mul_legacy_f32  v0, 0.5, v0                         // 0000000001A8: 0E0000F0
;   v_rsq_f32     v1, v6                                  // 0000000001AC: 7E025D06
;   v_fma_f32     v3, v3, v1, 0.5                         // 0000000001B0: D54B0003 03C20303
;   v_fma_f32     v5, v2, v1, 0.5                         // 0000000001B8: D54B0005 03C20302
;   v_fma_f32     v4, v0, v1, 0.5                         // 0000000001C0: D54B0004 03C20300
;   s_nop         0x0000                                  // 0000000001C8: BF800000
;   s_nop         0x0000                                  // 0000000001CC: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v3, v5                       // 0000000001D0: 5E000B03
;   v_cvt_pkrtz_f16_f32  v1, v4, v14                      // 0000000001D4: 5E021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 0000000001D8: F8001C0F 00000100
;   s_endpgm                                              // 0000000001E0: BF810000
;   s_code_end                                            // 0000000001E4: BF9F0000
;   s_code_end                                            // 0000000001E8: BF9F0000
;   s_code_end                                            // 0000000001EC: BF9F0000
;   s_code_end                                            // 0000000001F0: BF9F0000
;   s_code_end                                            // 0000000001F4: BF9F0000
;   s_code_end                                            // 0000000001F8: BF9F0000
;   s_code_end                                            // 0000000001FC: BF9F0000
;   s_code_end                                            // 000000000200: BF9F0000
;   s_code_end                                            // 000000000204: BF9F0000
;   s_code_end                                            // 000000000208: BF9F0000
;   s_code_end                                            // 00000000020C: BF9F0000
;   s_code_end                                            // 000000000210: BF9F0000
;   s_code_end                                            // 000000000214: BF9F0000
;   s_code_end                                            // 000000000218: BF9F0000
;   s_code_end                                            // 00000000021C: BF9F0000
;   s_code_end                                            // 000000000220: BF9F0000
;   s_code_end                                            // 000000000224: BF9F0000
;   s_code_end                                            // 000000000228: BF9F0000
;   s_code_end                                            // 00000000022C: BF9F0000
;   s_code_end                                            // 000000000230: BF9F0000
;   s_code_end                                            // 000000000234: BF9F0000
;   s_code_end                                            // 000000000238: BF9F0000
;   s_code_end                                            // 00000000023C: BF9F0000
;   s_code_end                                            // 000000000240: BF9F0000
;   s_code_end                                            // 000000000244: BF9F0000
;   s_code_end                                            // 000000000248: BF9F0000
;   s_code_end                                            // 00000000024C: BF9F0000
;   s_code_end                                            // 000000000250: BF9F0000
;   s_code_end                                            // 000000000254: BF9F0000
;   s_code_end                                            // 000000000258: BF9F0000
;   s_code_end                                            // 00000000025C: BF9F0000
;   s_code_end                                            // 000000000260: BF9F0000
;   s_code_end                                            // 000000000264: BF9F0000
;   s_code_end                                            // 000000000268: BF9F0000
;   s_code_end                                            // 00000000026C: BF9F0000
;   s_code_end                                            // 000000000270: BF9F0000
;   s_code_end                                            // 000000000274: BF9F0000
;   s_code_end                                            // 000000000278: BF9F0000
;   s_code_end                                            // 00000000027C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 10
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 1
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
; 
;   // entry used resources info
;   used_resources_count: 0
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 33
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSRGBTangents)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 3 {
;     num_interp: 3
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 114
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x3,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v3, off, off, off done vm         // 000000000010: F8001801 00000003
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x503,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v3, v5, off, off done vm          // 000000000010: F8001803 00000503
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xe03,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v3, v14, off, off done vm         // 000000000010: F8001803 00000E03
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000b03,
;        0x5e021d04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v3, v5                       // 000000000008: 5E000B03
;   v_cvt_pkrtz_f16_f32  v1, v4, v14                      // 00000000000C: 5E021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20b03,
;        0xd7690001,
;        0x21d04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v3, v5                      // 000000000000: D7690000 00020B03
;   v_cvt_pknorm_u16_f32  v1, v4, v14                     // 000000000008: D7690001 00021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20b03,
;        0xd7680001,
;        0x21d04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v3, v5                      // 000000000000: D7680000 00020B03
;   v_cvt_pknorm_i16_f32  v1, v4, v14                     // 000000000008: D7680001 00021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20b03,
;        0xd76a0001,
;        0x21d04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v3, v5                          // 000000000000: D76A0000 00020B03
;   v_cvt_pk_u16_u32  v1, v4, v14                         // 000000000008: D76A0001 00021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20b03,
;        0xd76b0001,
;        0x21d04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v3, v5                          // 000000000000: D76B0000 00020B03
;   v_cvt_pk_i16_i32  v1, v4, v14                         // 000000000008: D76B0001 00021D04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0xe040503,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v3, v5, v4, v14 done vm           // 000000000010: F800180F 0E040503
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=20,NumSGPR=13,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:61,SAlu:16,VMem:0,SMem:0,LDS:12,WaitCntOnVMem:0,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char DebugEffect_PSRGBTangents[] = {
  0x44, 0x58, 0x42, 0x43, 0x1f, 0xf7, 0xfd, 0x64, 0x7d, 0x0b, 0x13, 0x11,
  0xd0, 0xad, 0xe6, 0xfe, 0x11, 0xa3, 0xa2, 0x75, 0x01, 0x00, 0x00, 0x00,
  0xc8, 0x0d, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0x48, 0x02, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00,
  0x28, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x14, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x50, 0x53,
  0x52, 0x47, 0x42, 0x54, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x84, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x52, 0x47, 0x42, 0x54,
  0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x64, 0x62, 0x00,
  0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xc2, 0x5b, 0x32, 0xba, 0x02, 0xb1, 0x92, 0x76, 0xc6, 0x25, 0x6e,
  0x18, 0x1a, 0x2a, 0x9c, 0x44, 0x58, 0x49, 0x4c, 0x98, 0x0a, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x4c, 0x07, 0x00, 0x00,
  0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x64, 0x07, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0xc4, 0x07, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0xd8, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0xe8, 0x07, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x88, 0x0a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x4c, 0x07, 0x00, 0x00,
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00,
  0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
  0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62,
  0x80, 0x14, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xa4, 0x10, 0x32, 0x14,
  0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x52, 0x88, 0x48, 0x90, 0x14, 0x20,
  0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90,
  0x91, 0x22, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a,
  0x04, 0x29, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d,
  0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x32, 0x22, 0x48, 0x09, 0x20, 0x64, 0x85, 0x04, 0x93, 0x22, 0xa4, 0x84,
  0x04, 0x93, 0x22, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8a, 0x8c,
  0x0b, 0x84, 0xa4, 0x4c, 0x10, 0x48, 0x23, 0x00, 0x25, 0x00, 0x14, 0x66,
  0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x20, 0x84, 0x14,
  0x42, 0xa6, 0x18, 0x80, 0x10, 0x52, 0x06, 0xa1, 0x82, 0x0c, 0x32, 0xc6,
  0x18, 0x63, 0x90, 0x2a, 0xc3, 0x20, 0x83, 0x58, 0x29, 0x06, 0x19, 0x63,
  0x90, 0x1b, 0x08, 0x48, 0x09, 0x02, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x81,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x25, 0x30, 0x02, 0x50, 0x10, 0xc5, 0x50, 0x06, 0xe5, 0x50, 0x04, 0xe5,
  0x41, 0xa5, 0x24, 0x46, 0x00, 0x8a, 0xa0, 0x10, 0xca, 0xa0, 0x40, 0x28,
  0x8e, 0x25, 0x41, 0xc4, 0x01, 0x00, 0xc0, 0x71, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x6a, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x18, 0x13, 0x04, 0xe2, 0xd8, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x40, 0x36, 0x08, 0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x24,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x11, 0xb5, 0x21, 0x70, 0x26, 0x08,
  0x02, 0xc0, 0x06, 0x6a, 0x4a, 0xea, 0x48, 0x88, 0x2a, 0xcc, 0xed, 0xac,
  0xcc, 0x8d, 0x6e, 0x8e, 0x08, 0x55, 0x11, 0xd6, 0xd0, 0xd3, 0x93, 0x14,
  0xd1, 0x04, 0xa1, 0x70, 0x26, 0x08, 0xc5, 0xb3, 0x21, 0x38, 0x26, 0x08,
  0x05, 0x34, 0x41, 0x20, 0x94, 0x0d, 0xc2, 0x65, 0x6c, 0x58, 0x0e, 0x69,
  0xa2, 0x2a, 0xcb, 0xb0, 0x0e, 0x0a, 0xdb, 0x10, 0x18, 0x13, 0x84, 0x22,
  0x9a, 0x20, 0x10, 0xcb, 0x06, 0xe1, 0xe2, 0x36, 0x2c, 0x86, 0x34, 0x51,
  0x9a, 0x65, 0x6c, 0x06, 0xd5, 0x4d, 0x10, 0x08, 0x66, 0x43, 0xf0, 0x4d,
  0x10, 0x0a, 0x69, 0xc3, 0xf2, 0x49, 0x13, 0x05, 0x06, 0x96, 0x11, 0x06,
  0x1f, 0x05, 0xb0, 0x18, 0x7a, 0x62, 0x7a, 0x92, 0xda, 0x20, 0x5c, 0xc9,
  0x86, 0xe5, 0x1a, 0x83, 0x89, 0xaa, 0x2c, 0x63, 0xbb, 0x28, 0x32, 0xd8,
  0x40, 0x64, 0x9e, 0x18, 0x94, 0x01, 0x93, 0x29, 0xab, 0x2f, 0xaa, 0x30,
  0xb9, 0xb3, 0x32, 0xba, 0x09, 0x42, 0x31, 0x4d, 0x10, 0x88, 0x66, 0x83,
  0x70, 0xa5, 0xc1, 0x86, 0xe5, 0x38, 0x83, 0x09, 0x0d, 0x2a, 0xca, 0xd8,
  0x0e, 0x4a, 0x0d, 0x36, 0x04, 0x6b, 0xb0, 0x61, 0x30, 0x03, 0x36, 0x00,
  0x36, 0x14, 0x50, 0xd4, 0x06, 0x00, 0xd0, 0x0a, 0x4f, 0xec, 0x0d, 0xcf,
  0x65, 0xec, 0xad, 0x0d, 0x2e, 0x8d, 0xad, 0x4c, 0xce, 0xe5, 0x0d, 0x8e,
  0x2e, 0xed, 0xcd, 0x6d, 0x6e, 0x4a, 0x20, 0x54, 0x61, 0x63, 0xb3, 0x6b,
  0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x10, 0x55, 0xc8, 0xf0,
  0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x47, 0x13,
  0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x41, 0x52,
  0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d,
  0xac, 0x8c, 0x6d, 0x4a, 0xc0, 0xd4, 0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b,
  0xbb, 0x4b, 0x22, 0x9b, 0xa2, 0x0b, 0xa3, 0x2b, 0x9b, 0x12, 0x38, 0x75,
  0xc8, 0xf0, 0x5c, 0xca, 0xdc, 0xe8, 0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc,
  0xe8, 0xe6, 0xa6, 0x04, 0x6d, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x06, 0xd0, 0xa4, 0xec, 0x0a, 0x6e, 0x2d, 0xd0,
  0x18, 0x44, 0x33, 0x49, 0x36, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0,
  0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x05, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf,
  0x38, 0xc0, 0x20, 0x36, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x9b, 0x40, 0x35,
  0x5c, 0xbe, 0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35,
  0xf9, 0xc5, 0x6d, 0x5b, 0x81, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11,
  0x4d, 0x08, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x46, 0xf0, 0x0c, 0x97, 0xef,
  0x3c, 0x3e, 0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x0d, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x4a, 0x80, 0x48,
  0x21, 0xcc, 0x00, 0x94, 0x69, 0x40, 0xa1, 0x06, 0x94, 0x42, 0x71, 0x95,
  0x5b, 0xc9, 0xd0, 0x18, 0x23, 0x00, 0x41, 0x10, 0x84, 0x3f, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x78, 0x49, 0x85, 0x35, 0xc8,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x9f, 0xa2, 0x65, 0x51, 0x32,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x18, 0x2c, 0x9b, 0xc6, 0x28,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x84, 0x01, 0xc3, 0x6d, 0xd2,
  0x32, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x18, 0x34, 0x1c, 0x47,
  0x31, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xc0, 0x80, 0x01, 0x43, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x13, 0x06, 0x0d, 0x31, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x8c, 0x18, 0x38, 0xc4, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x30, 0x63, 0xe0, 0x1c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60,
  0xc0, 0x90, 0xc1, 0x73, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x53,
  0x06, 0xd0, 0x31, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x8c, 0x19, 0x48,
  0xc7, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0x67, 0x20, 0x21, 0x36,
  0x1c, 0xf2, 0xb1, 0xe2, 0x90, 0x8f, 0x09, 0x41, 0x7c, 0x0c, 0x49, 0xe4,
  0x63, 0x07, 0x23, 0x1f, 0x13, 0x82, 0xf8, 0x98, 0xe2, 0xc8, 0xc7, 0x18,
  0x47, 0x3e, 0x26, 0x04, 0xf1, 0xb1, 0xa0, 0x91, 0x8f, 0x15, 0x8d, 0x7c,
  0x4c, 0x08, 0xe2, 0x63, 0xca, 0x23, 0x1f, 0x2b, 0x24, 0xf9, 0x98, 0x10,
  0xc4, 0xc7, 0x14, 0x4a, 0x3e, 0xe6, 0x50, 0xf2, 0x31, 0x21, 0x88, 0x8f,
  0x35, 0x98, 0x7c, 0x6c, 0xd1, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x6b, 0x3a,
  0xf9, 0x18, 0xc5, 0xc9, 0xc7, 0x84, 0x20, 0x3e, 0x66, 0x7d, 0xf2, 0x31,
  0x2a, 0x0c, 0xe4, 0x63, 0x42, 0x10, 0x1f, 0x83, 0x3a, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x81, 0x33, 0x0a, 0x6d, 0xd0, 0x21, 0x81, 0x3d,
  0x9f, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xc0, 0x29, 0x85, 0x37,
  0xf8, 0x8e, 0xc0, 0x9c, 0x30, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x38, 0xa7, 0x10, 0x07, 0x61, 0x60, 0x04, 0x23, 0x06, 0x0b, 0x00,
  0x82, 0x60, 0xa0, 0xa8, 0x42, 0x1c, 0x14, 0x43, 0x50, 0x0c, 0xc1, 0x88,
  0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xaa, 0x10, 0x07, 0x81, 0x05, 0x87,
  0x7c, 0x4c, 0x30, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x05, 0x00,
  0x41, 0x30, 0x50, 0x5e, 0xc1, 0x0e, 0x06, 0x21, 0x18, 0x84, 0x60, 0xc4,
  0xc0, 0x00, 0x40, 0x10, 0x0c, 0x98, 0x57, 0xb0, 0x83, 0xc0, 0x0a, 0x3b,
  0x90, 0x8f, 0x05, 0x82, 0x7c, 0xcc, 0xc0, 0x03, 0xf9, 0x58, 0x40, 0xc8,
  0xc7, 0x0e, 0x3d, 0x90, 0x8f, 0x05, 0x86, 0x7c, 0xac, 0xe0, 0x03, 0xf8,
  0x18, 0xd1, 0x07, 0xf0, 0xb1, 0xc1, 0x0f, 0xe0, 0x33, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0xc8, 0x2e, 0x8c, 0x82, 0x2d, 0xd8, 0x82, 0x2b, 0x0c,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xec, 0xc2, 0x28, 0xd8, 0x82,
  0x2d, 0xa0, 0x82, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc8, 0x2e,
  0x8c, 0x82, 0x2d, 0xd8, 0x42, 0x2b, 0x04, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x80, 0xec, 0xc2, 0x28, 0xd8, 0x82, 0x2d, 0xac, 0x82, 0x1f, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0xa4, 0x54, 0xd6, 0x2b, 0x42, 0x70, 0x01, 0x65,
  0x6f, 0xd4, 0x97, 0x34, 0x25, 0xcd, 0x2a, 0xeb, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xbd, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x98,
  0xbf, 0x6b, 0x14, 0x41, 0x14, 0xc7, 0xdf, 0xfc, 0xda, 0x9d, 0xdd, 0xbd,
  0x9d, 0xcb, 0x7a, 0x97, 0x90, 0x04, 0x15, 0x2f, 0xf1, 0x22, 0xa4, 0x48,
  0x61, 0x21, 0x0a, 0x6a, 0x21, 0xa2, 0x85, 0x08, 0x62, 0xbc, 0x6b, 0x24,
  0x01, 0x8b, 0x90, 0x5f, 0x90, 0x42, 0x45, 0xac, 0x6e, 0x4f, 0x59, 0xb0,
  0xd9, 0x42, 0xac, 0x05, 0xad, 0x0f, 0x02, 0xda, 0x5a, 0xdc, 0xc6, 0x28,
  0x71, 0xb5, 0xb2, 0x30, 0xc4, 0x46, 0xff, 0x05, 0x53, 0xa6, 0x90, 0xd3,
  0x37, 0xd9, 0x3b, 0xdc, 0x90, 0x84, 0x44, 0xab, 0x05, 0xf7, 0x0b, 0x8f,
  0xef, 0xec, 0x9b, 0xcf, 0xec, 0xce, 0xec, 0x5b, 0x0e, 0xde, 0x5d, 0x99,
  0x9c, 0xbc, 0x4e, 0x08, 0xc0, 0xb2, 0x07, 0xdb, 0x32, 0x12, 0x83, 0x1f,
  0xed, 0xe5, 0xef, 0x87, 0x89, 0x57, 0x7f, 0xc9, 0xf7, 0x82, 0x76, 0xd7,
  0x5d, 0x86, 0x7f, 0x53, 0xef, 0x3e, 0x5b, 0x2a, 0xb9, 0x6e, 0xd2, 0xf4,
  0xac, 0xbd, 0x8b, 0x7f, 0xe8, 0xed, 0x5c, 0x47, 0xba, 0x79, 0x41, 0x28,
  0xac, 0xa4, 0xb8, 0x32, 0x7c, 0x06, 0x92, 0xba, 0x0e, 0xbb, 0xeb, 0x74,
  0xae, 0x92, 0x5a, 0x6f, 0x00, 0xd3, 0x69, 0x6a, 0x90, 0x22, 0x4e, 0x11,
  0x6a, 0xb0, 0x22, 0xee, 0x80, 0x51, 0xf8, 0x4f, 0xa4, 0x4f, 0x5f, 0x4e,
  0x8d, 0xf5, 0xc1, 0xfb, 0x30, 0x8a, 0x29, 0x46, 0x7f, 0x4b, 0x77, 0xb7,
  0x47, 0xcd, 0x28, 0x1d, 0x4f, 0x07, 0x61, 0x6b, 0xef, 0xbb, 0xee, 0xe4,
  0x08, 0x72, 0xec, 0x10, 0x1c, 0xd3, 0x9c, 0x38, 0x24, 0xa7, 0xf6, 0xe7,
  0x98, 0x03, 0xd3, 0xfc, 0x18, 0x9d, 0x2e, 0x1e, 0xc5, 0xfd, 0x91, 0xbd,
  0xb8, 0xf9, 0x0d, 0xe6, 0x50, 0x9c, 0x9a, 0xdf, 0x40, 0x0e, 0xf6, 0xe7,
  0xe6, 0xba, 0xdc, 0xdc, 0x01, 0xdc, 0x42, 0x97, 0x5b, 0x38, 0x80, 0x5b,
  0xec, 0x72, 0x8b, 0x07, 0x70, 0x3b, 0xcf, 0x5b, 0xdc, 0x7e, 0x2f, 0x7c,
  0xd7, 0x89, 0x7f, 0xa1, 0x20, 0x57, 0xa6, 0x94, 0xd7, 0x24, 0x7b, 0xca,
  0x6b, 0x92, 0x3d, 0xe5, 0x35, 0xc9, 0x9e, 0xf2, 0x9a, 0x64, 0x4f, 0x79,
  0x4d, 0xb2, 0xa7, 0xbc, 0x26, 0xd9, 0xd5, 0xe6, 0x6a, 0x73, 0xfd, 0xf6,
  0x4c, 0x87, 0xbd, 0xa1, 0xaf, 0x9f, 0x3d, 0x58, 0x6b, 0xae, 0x57, 0xbf,
  0x75, 0xd8, 0xe0, 0xf0, 0xf8, 0x73, 0x06, 0x2f, 0xa3, 0x06, 0x7f, 0xdc,
  0x6e, 0xd8, 0x9d, 0xb6, 0xcd, 0x7e, 0xb6, 0x81, 0xcb, 0x18, 0x44, 0x21,
  0x06, 0xa3, 0x2f, 0x06, 0x38, 0x1f, 0x83, 0x73, 0x36, 0x26, 0xdc, 0x8a,
  0x89, 0x70, 0x63, 0x62, 0x78, 0x31, 0x81, 0x0b, 0x31, 0x71, 0xce, 0xc5,
  0xd0, 0xfc, 0xf2, 0x15, 0x7b, 0x22, 0xa3, 0x96, 0xb8, 0xd9, 0x4a, 0xbc,
  0xa4, 0xf3, 0xd8, 0xd3, 0xc8, 0x5a, 0xe2, 0x56, 0x2b, 0x71, 0xa6, 0xf3,
  0x1c, 0x1b, 0xd7, 0x5a, 0xe2, 0x4e, 0x2b, 0x71, 0xae, 0xf3, 0xd8, 0x53,
  0x15, 0x6a, 0x89, 0xbb, 0xad, 0xc4, 0x85, 0xff, 0x29, 0x8c, 0x4c, 0xf7,
  0xa4, 0xf4, 0x3f, 0x86, 0x51, 0xc9, 0xe5, 0xd2, 0xff, 0x10, 0x46, 0x96,
  0x47, 0xa5, 0xbf, 0x16, 0x46, 0xcc, 0x1b, 0x91, 0xfe, 0xfb, 0x30, 0x72,
  0xfa, 0x4f, 0x48, 0xff, 0x5d, 0x18, 0xf1, 0x7e, 0x29, 0xfd, 0xb7, 0x61,
  0xe4, 0x0e, 0x15, 0x64, 0x83, 0x76, 0x9e, 0x50, 0xd6, 0xa7, 0x78, 0xf5,
  0x88, 0xf2, 0x2a, 0x65, 0xe5, 0xaf, 0x84, 0x91, 0x18, 0xb2, 0xa5, 0x09,
  0xd7, 0xd6, 0xbd, 0xea, 0x48, 0x60, 0xa1, 0xd3, 0xca, 0x58, 0x60, 0xa3,
  0x73, 0x36, 0x1e, 0x98, 0x62, 0x40, 0x59, 0xd6, 0xa0, 0xb2, 0x2b, 0xc3,
  0xca, 0x64, 0xc7, 0x95, 0x55, 0x05, 0xc5, 0x71, 0xce, 0xb6, 0x26, 0x02,
  0x7b, 0x74, 0x40, 0x31, 0x1c, 0x9b, 0xa3, 0xa7, 0x03, 0xa9, 0xbd, 0x7a,
  0x26, 0x00, 0x3d, 0xc7, 0x68, 0xc0, 0xdd, 0x31, 0xe5, 0xe0, 0xd8, 0x12,
  0x13, 0x01, 0xd5, 0x5e, 0xb9, 0x18, 0x30, 0xd7, 0x50, 0xc2, 0x1b, 0xab,
  0x3b, 0xae, 0x52, 0x42, 0x18, 0xf5, 0xd2, 0x29, 0xae, 0x04, 0x51, 0x75,
  0x66, 0xf2, 0xba, 0x59, 0xe4, 0x75, 0x3a, 0x05, 0x0d, 0xc0, 0x1c, 0x98,
  0x86, 0xc2, 0x46, 0x52, 0x51, 0x51, 0x50, 0x9b, 0x9c, 0x2b, 0x66, 0x16,
  0xea, 0x9b, 0x06, 0xe6, 0x08, 0x3a, 0x80, 0x32, 0xa6, 0x68, 0x43, 0x3f,
  0x97, 0xb1, 0x55, 0x6c, 0xfb, 0x70, 0xbf, 0xe8, 0x7a, 0x4f, 0x80, 0xbe,
  0x7f, 0x2f, 0xf7, 0x08, 0xf3, 0x2f, 0x32, 0x1b, 0xbd, 0x76, 0xae, 0xf7,
  0x07, 0x82, 0x4c, 0x7d, 0x9b, 0x7f, 0x7e, 0x37, 0x5c, 0xb8, 0x31, 0x79,
  0xf3, 0xea, 0xa5, 0x5b, 0x77, 0x96, 0x66, 0x67, 0x96, 0xee, 0xdf, 0xfb,
  0x0d, 0xb4, 0x22, 0x6c, 0x02, 0x00, 0x00, 0x00, 0xf0, 0xc2, 0x5b, 0x32,
  0xba, 0x02, 0xb1, 0x92, 0x76, 0xc6, 0x25, 0x6e, 0x18, 0x1a, 0x2a, 0x9c
};
