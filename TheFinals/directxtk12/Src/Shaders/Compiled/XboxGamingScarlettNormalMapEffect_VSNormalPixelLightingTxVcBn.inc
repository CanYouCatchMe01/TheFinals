#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettNormalMapEffect_VSNormalPixelLightingTxVcBn.pdb
; shader hash: 4bf574fdb1122a29cef9b8e163194408
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 5
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 5
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSNormalPixelLightingTxVcBn
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 4 depends on inputs: { 0, 1, 2, 3 }
;   output 5 depends on inputs: { 0, 1, 2, 3 }
;   output 6 depends on inputs: { 0, 1, 2, 3 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 4, 5, 6 }
;   output 9 depends on inputs: { 4, 5, 6 }
;   output 10 depends on inputs: { 4, 5, 6 }
;   output 12 depends on inputs: { 12 }
;   output 13 depends on inputs: { 13 }
;   output 14 depends on inputs: { 14 }
;   output 15 depends on inputs: { 15 }
;   output 16 depends on inputs: { 0, 1, 2, 3 }
;   output 17 depends on inputs: { 0, 1, 2, 3 }
;   output 18 depends on inputs: { 0, 1, 2, 3 }
;   output 19 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSNormalPixelLightingTxVcBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fmul fast float %9, 2.000000e+00
  %17 = fmul fast float %10, 2.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = fadd fast float %16, -1.000000e+00
  %20 = fadd fast float %17, -1.000000e+00
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = extractvalue %dx.types.CBufRet.f32 %26, 3
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = extractvalue %dx.types.CBufRet.f32 %31, 1
  %34 = extractvalue %dx.types.CBufRet.f32 %31, 2
  %35 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %36 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.f32 %36, 0
  %38 = extractvalue %dx.types.CBufRet.f32 %36, 1
  %39 = extractvalue %dx.types.CBufRet.f32 %36, 2
  %40 = extractvalue %dx.types.CBufRet.f32 %36, 3
  %41 = fmul fast float %22, %11
  %42 = call float @dx.op.tertiary.f32(i32 46, float %12, float %23, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %13, float %24, float %42)  ; FMad(a,b,c)
  %44 = call float @dx.op.tertiary.f32(i32 46, float %14, float %25, float %43)  ; FMad(a,b,c)
  %45 = fmul fast float %27, %11
  %46 = call float @dx.op.tertiary.f32(i32 46, float %12, float %28, float %45)  ; FMad(a,b,c)
  %47 = call float @dx.op.tertiary.f32(i32 46, float %13, float %29, float %46)  ; FMad(a,b,c)
  %48 = call float @dx.op.tertiary.f32(i32 46, float %14, float %30, float %47)  ; FMad(a,b,c)
  %49 = fmul fast float %32, %11
  %50 = call float @dx.op.tertiary.f32(i32 46, float %12, float %33, float %49)  ; FMad(a,b,c)
  %51 = call float @dx.op.tertiary.f32(i32 46, float %13, float %34, float %50)  ; FMad(a,b,c)
  %52 = call float @dx.op.tertiary.f32(i32 46, float %14, float %35, float %51)  ; FMad(a,b,c)
  %53 = fmul fast float %37, %11
  %54 = call float @dx.op.tertiary.f32(i32 46, float %12, float %38, float %53)  ; FMad(a,b,c)
  %55 = call float @dx.op.tertiary.f32(i32 46, float %13, float %39, float %54)  ; FMad(a,b,c)
  %56 = call float @dx.op.tertiary.f32(i32 46, float %14, float %40, float %55)  ; FMad(a,b,c)
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = extractvalue %dx.types.CBufRet.f32 %67, 3
  %72 = fmul fast float %58, %11
  %73 = call float @dx.op.tertiary.f32(i32 46, float %12, float %59, float %72)  ; FMad(a,b,c)
  %74 = call float @dx.op.tertiary.f32(i32 46, float %13, float %60, float %73)  ; FMad(a,b,c)
  %75 = call float @dx.op.tertiary.f32(i32 46, float %14, float %61, float %74)  ; FMad(a,b,c)
  %76 = fmul fast float %63, %11
  %77 = call float @dx.op.tertiary.f32(i32 46, float %12, float %64, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %13, float %65, float %77)  ; FMad(a,b,c)
  %79 = call float @dx.op.tertiary.f32(i32 46, float %14, float %66, float %78)  ; FMad(a,b,c)
  %80 = fmul fast float %68, %11
  %81 = call float @dx.op.tertiary.f32(i32 46, float %12, float %69, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %13, float %70, float %81)  ; FMad(a,b,c)
  %83 = call float @dx.op.tertiary.f32(i32 46, float %14, float %71, float %82)  ; FMad(a,b,c)
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = fmul fast float %85, %18
  %97 = call float @dx.op.tertiary.f32(i32 46, float %19, float %86, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %20, float %87, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %89, %18
  %100 = call float @dx.op.tertiary.f32(i32 46, float %19, float %90, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %20, float %91, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %93, %18
  %103 = call float @dx.op.tertiary.f32(i32 46, float %19, float %94, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %20, float %95, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.dot3.f32(i32 55, float %98, float %101, float %104, float %98, float %101, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %106 = call float @dx.op.unary.f32(i32 25, float %105)  ; Rsqrt(value)
  %107 = fmul fast float %106, %98
  %108 = fmul fast float %106, %101
  %109 = fmul fast float %106, %104
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %113 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %114 = extractvalue %dx.types.CBufRet.f32 %110, 3
  %115 = call float @dx.op.dot4.f32(i32 56, float %11, float %12, float %13, float %14, float %111, float %112, float %113, float %114)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %116 = call float @dx.op.unary.f32(i32 7, float %115)  ; Saturate(value)
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 3
  %119 = fmul fast float %118, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %75)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %79)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %83)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %116)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %107)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %108)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %109)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %2)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %3)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %119)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %44)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %48)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %52)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %56)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[18 x i32] [i32 16, i32 20, i32 983280, i32 983280, i32 983280, i32 983280, i32 1792, i32 1792, i32 1792, i32 0, i32 1, i32 2, i32 0, i32 0, i32 4096, i32 8192, i32 16384, i32 32768]}
!9 = !{void ()* @VSNormalPixelLightingTxVcBn, !"VSNormalPixelLightingTxVcBn", !10, !5, null}
!10 = !{!11, !20, null}
!11 = !{!12, !15, !17, !19}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{i32 3, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 3, i8 0, !14}
!20 = !{!21, !22, !24, !26, !27}
!21 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 0, i8 0, !18}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !16}
!25 = !{i32 2}
!26 = !{i32 3, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 3, i8 0, !14}
!27 = !{i32 4, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 4, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 22
;   num_shared_vgprs: 0
;   num_sgprs: 46
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 576
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xfd74f54b, 0x292a12b1                // 000000000000: D580F54B 03FFFB74 292A12B1
;   v_nop_xbox_data 0xe1b8f9ce, 0x08441963                // 00000000000C: D580F9CE 03FFC3B8 08441963
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_or_b32      s1, s12, lit(0x00100000)                // 000000000020: 8801FF0C 00100000
;   s_mov_b32     s0, s11                                 // 000000000028: BE80030B
;   s_mov_b32     s2, -1                                  // 00000000002C: BE8203C1
;   s_mov_b32     s3, lit(0x11014fac)                     // 000000000030: BE8303FF 11014FAC
;   s_waitcnt     vmcnt(0)                                // 000000000038: BF8C3F70
;   v_fma_f32     v0, v8, 2.0, -1.0                       // 00000000003C: D54B0000 03CDE908
;   s_buffer_load_dwordx16  s[16:31], s[0:3], 0x000130    // 000000000044: F4300400 FA000130
;   s_buffer_load_dwordx8  s[32:39], s[0:3], 0x000170     // 00000000004C: F42C0800 FA000170
;   s_buffer_load_dwordx4  s[40:43], s[0:3], 0x000190     // 000000000054: F4280A00 FA000190
;   v_fma_f32     v1, v9, 2.0, -1.0                       // 00000000005C: D54B0001 03CDE909
;   s_waitcnt     lgkmcnt(0)                              // 000000000064: BF8CC07F
;   s_buffer_load_dword  s19, s[0:3], 0x00000c            // 000000000068: F42004C0 FA00000C
;   v_fma_f32     v21, v10, 2.0, -1.0                     // 000000000070: D54B0015 03CDE90A
;   s_buffer_load_dwordx16  s[0:15], s[0:3], 0x0000e0     // 000000000078: F4300000 FA0000E0
;   v_mov_b32     v15, 0                                  // 000000000080: 7E1E0280
;   v_mul_legacy_f32  v14, s20, v0                        // 000000000084: 0E1C0014
;   v_mul_legacy_f32  v11, s16, v0                        // 000000000088: 0E160010
;   v_mul_legacy_f32  v3, s28, v4                         // 00000000008C: 0E06081C
;   v_mul_legacy_f32  v8, s32, v4                         // 000000000090: 0E100820
;   v_mul_legacy_f32  v9, s36, v4                         // 000000000094: 0E120824
;   v_mul_legacy_f32  v10, s40, v4                        // 000000000098: 0E140828
;   v_fmac_f32    v14, s21, v1                            // 00000000009C: 561C0215
;   v_mul_legacy_f32  v0, s24, v0                         // 0000000000A0: 0E000018
;   v_fmac_f32    v3, s29, v5                             // 0000000000A4: 56060A1D
;   v_fmac_f32    v8, s33, v5                             // 0000000000A8: 56100A21
;   v_fmac_f32    v9, s37, v5                             // 0000000000AC: 56120A25
;   v_fmac_f32    v10, s41, v5                            // 0000000000B0: 56140A29
;   v_fmac_f32    v11, s17, v1                            // 0000000000B4: 56160211
;   v_fmac_f32    v14, s22, v21                           // 0000000000B8: 561C2A16
;   v_fmac_f32    v0, s25, v1                             // 0000000000BC: 56000219
;   v_fmac_f32    v3, s30, v6                             // 0000000000C0: 56060C1E
;   v_fmac_f32    v8, s34, v6                             // 0000000000C4: 56100C22
;   v_fmac_f32    v9, s38, v6                             // 0000000000C8: 56120C26
;   v_fmac_f32    v10, s42, v6                            // 0000000000CC: 56140C2A
;   v_fmac_f32    v11, s18, v21                           // 0000000000D0: 56162A12
;   v_mul_legacy_f32  v1, v14, v14                        // 0000000000D4: 0E021D0E
;   v_fmac_f32    v3, s31, v7                             // 0000000000D8: 56060E1F
;   v_fmac_f32    v8, s35, v7                             // 0000000000DC: 56100E23
;   v_fmac_f32    v9, s39, v7                             // 0000000000E0: 56120E27
;   v_fmac_f32    v10, s43, v7                            // 0000000000E4: 56140E2B
;   v_fmac_f32    v0, s26, v21                            // 0000000000E8: 56002A1A
;   v_fmac_f32    v1, v11, v11                            // 0000000000EC: 5602170B
;   s_waitcnt     lgkmcnt(0)                              // 0000000000F0: BF8CC07F
;   v_mul_legacy_f32  v2, s4, v4                          // 0000000000F4: 0E040804
;   exp           pos0, v3, v8, v9, v10 done              // 0000000000F8: F80008CF 0A090803
;   s_waitcnt     expcnt(0)                               // 000000000100: BF8CFF0F
;   v_mul_legacy_f32  v3, s8, v4                          // 000000000104: 0E060808
;   v_mul_legacy_f32  v8, s12, v4                         // 000000000108: 0E10080C
;   v_mul_legacy_f32  v9, s1, v5                          // 00000000010C: 0E120A01
;   v_fmac_f32    v1, v0, v0                              // 000000000110: 56020100
;   v_fmac_f32    v2, s5, v5                              // 000000000114: 56040A05
;   v_fmac_f32    v3, s9, v5                              // 000000000118: 56060A09
;   v_fmac_f32    v8, s13, v5                             // 00000000011C: 56100A0D
;   v_fmac_f32    v9, s0, v4                              // 000000000120: 56120800
;   v_rsq_f32     v1, v1                                  // 000000000124: 7E025D01
;   v_fmac_f32    v2, s6, v6                              // 000000000128: 56040C06
;   v_fmac_f32    v3, s10, v6                             // 00000000012C: 56060C0A
;   v_fmac_f32    v8, s14, v6                             // 000000000130: 56100C0E
;   v_fmac_f32    v9, s3, v7                              // 000000000134: 56120E03
;   v_mov_b32     v10, 1.0                                // 000000000138: 7E1402F2
;   v_fmac_f32    v2, s7, v7                              // 00000000013C: 56040E07
;   v_fmac_f32    v3, s11, v7                             // 000000000140: 56060E0B
;   v_fmac_f32    v8, s15, v7                             // 000000000144: 56100E0F
;   v_fmac_f32    v9, v6, s2 clamp                        // 000000000148: D52B8009 00000506
;   v_mul_legacy_f32  v5, v1, v11                         // 000000000150: 0E0A1701
;   v_mul_legacy_f32  v11, v1, v14                        // 000000000154: 0E161D01
;   v_mul_legacy_f32  v0, v1, v0                          // 000000000158: 0E000101
;   v_mul_legacy_f32  v7, s19, v19                        // 00000000015C: 0E0E2613
;   exp           param0, v12, v13, v15, v10              // 000000000160: F800020F 0A0F0D0C
;   exp           param1, v2, v3, v8, v9                  // 000000000168: F800021F 09080302
;   exp           param2, v5, v11, v0, v10                // 000000000170: F800022F 0A000B05
;   exp           param3, v16, v17, v18, v7               // 000000000178: F800023F 07121110
;   s_endpgm                                              // 000000000180: BF810000
;   s_code_end                                            // 000000000184: BF9F0000
;   s_code_end                                            // 000000000188: BF9F0000
;   s_code_end                                            // 00000000018C: BF9F0000
;   s_code_end                                            // 000000000190: BF9F0000
;   s_code_end                                            // 000000000194: BF9F0000
;   s_code_end                                            // 000000000198: BF9F0000
;   s_code_end                                            // 00000000019C: BF9F0000
;   s_code_end                                            // 0000000001A0: BF9F0000
;   s_code_end                                            // 0000000001A4: BF9F0000
;   s_code_end                                            // 0000000001A8: BF9F0000
;   s_code_end                                            // 0000000001AC: BF9F0000
;   s_code_end                                            // 0000000001B0: BF9F0000
;   s_code_end                                            // 0000000001B4: BF9F0000
;   s_code_end                                            // 0000000001B8: BF9F0000
;   s_code_end                                            // 0000000001BC: BF9F0000
;   s_code_end                                            // 0000000001C0: BF9F0000
;   s_code_end                                            // 0000000001C4: BF9F0000
;   s_code_end                                            // 0000000001C8: BF9F0000
;   s_code_end                                            // 0000000001CC: BF9F0000
;   s_code_end                                            // 0000000001D0: BF9F0000
;   s_code_end                                            // 0000000001D4: BF9F0000
;   s_code_end                                            // 0000000001D8: BF9F0000
;   s_code_end                                            // 0000000001DC: BF9F0000
;   s_code_end                                            // 0000000001E0: BF9F0000
;   s_code_end                                            // 0000000001E4: BF9F0000
;   s_code_end                                            // 0000000001E8: BF9F0000
;   s_code_end                                            // 0000000001EC: BF9F0000
;   s_code_end                                            // 0000000001F0: BF9F0000
;   s_code_end                                            // 0000000001F4: BF9F0000
;   s_code_end                                            // 0000000001F8: BF9F0000
;   s_code_end                                            // 0000000001FC: BF9F0000
;   s_code_end                                            // 000000000200: BF9F0000
;   s_code_end                                            // 000000000204: BF9F0000
;   s_code_end                                            // 000000000208: BF9F0000
;   s_code_end                                            // 00000000020C: BF9F0000
;   s_code_end                                            // 000000000210: BF9F0000
;   s_code_end                                            // 000000000214: BF9F0000
;   s_code_end                                            // 000000000218: BF9F0000
;   s_code_end                                            // 00000000021C: BF9F0000
;   s_code_end                                            // 000000000220: BF9F0000
;   s_code_end                                            // 000000000224: BF9F0000
;   s_code_end                                            // 000000000228: BF9F0000
;   s_code_end                                            // 00000000022C: BF9F0000
;   s_code_end                                            // 000000000230: BF9F0000
;   s_code_end                                            // 000000000234: BF9F0000
;   s_code_end                                            // 000000000238: BF9F0000
;   s_code_end                                            // 00000000023C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 16
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 6
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 13
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 15
;       orig_rootsig_slot_id: 5
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 47
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSNormalPixelLightingTxVcBn)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       data_vgpr: 16
;       data_size: 3
;     }
; 
;   num_output_semantics: 4
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       param_idx: 3
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 32 {
;     scratch_en: 0
;     user_sgpr: 16
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 32 {
;     scratch_en: 0
;     user_sgpr: 16
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 32 {
;     scratch_en: 0
;     user_sgpr: 16
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 6 {
;     vs_export_count: 3
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 16
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000001100000110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000011110011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=22,NumSGPR=46,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:54,SAlu:11,VMem:0,SMem:5,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char NormalMapEffect_VSNormalPixelLightingTxVcBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x7f, 0xf4, 0x38, 0x16, 0xeb, 0x12, 0x1f, 0x46,
  0xe8, 0x4a, 0x24, 0x32, 0x41, 0x11, 0x69, 0x9b, 0x01, 0x00, 0x00, 0x00,
  0x4c, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00,
  0x78, 0x03, 0x00, 0x00, 0x78, 0x04, 0x00, 0x00, 0x18, 0x05, 0x00, 0x00,
  0x34, 0x05, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xac, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50,
  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d,
  0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31,
  0xc4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xa0, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x05, 0x00, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
  0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x56, 0x53, 0x4e, 0x6f,
  0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67,
  0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x56, 0x63, 0x42, 0x6e, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x04, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0x00, 0x0f, 0x00,
  0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0xf8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x98, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x91, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
  0x4d, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53,
  0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c,
  0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x56, 0x63, 0x42,
  0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0xf5, 0x74, 0xfd,
  0xb1, 0x12, 0x2a, 0x29, 0xce, 0xf9, 0xb8, 0xe1, 0x63, 0x19, 0x44, 0x08,
  0x44, 0x58, 0x49, 0x4c, 0x10, 0x0f, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xc4, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x24, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x84, 0x0c, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x98, 0x0c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0xa8, 0x0c, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x09, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x88, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x8a, 0x32, 0x10, 0xc3,
  0x30, 0x0c, 0xc3, 0x30, 0x0c, 0xe4, 0x1c, 0x35, 0x5c, 0xfe, 0x84, 0x3d,
  0x84, 0xe4, 0x73, 0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88,
  0x61, 0x18, 0x06, 0x2a, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2,
  0x43, 0xa0, 0x19, 0x16, 0x02, 0x05, 0x51, 0x21, 0x20, 0x42, 0x22, 0x68,
  0x2a, 0xc5, 0x40, 0x0c, 0xc3, 0x40, 0xd5, 0x1c, 0x41, 0x50, 0x0c, 0x89,
  0x28, 0x08, 0xe2, 0x22, 0x6c, 0x20, 0x60, 0x18, 0x81, 0x18, 0x86, 0x11,
  0x86, 0x21, 0x07, 0xb8, 0x24, 0xd8, 0xae, 0x3a, 0x1c, 0x69, 0x5a, 0x00,
  0xcc, 0xa1, 0x26, 0x3f, 0x05, 0x22, 0x80, 0x21, 0x26, 0x22, 0x92, 0x50,
  0xb3, 0x71, 0xdc, 0xd0, 0x75, 0x1d, 0xc7, 0x6d, 0x5e, 0xe7, 0xd1, 0x97,
  0x12, 0x04, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0,
  0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30,
  0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60,
  0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40,
  0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10,
  0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30,
  0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x54, 0x40, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0b, 0x04,
  0x15, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x80, 0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x02, 0x02, 0x67,
  0x00, 0x28, 0x1c, 0x4b, 0x82, 0x28, 0xf8, 0x04, 0x3d, 0xf8, 0x04, 0x3d,
  0xf8, 0x04, 0x3d, 0xf8, 0x04, 0x3d, 0x10, 0x0f, 0x40, 0x3c, 0x00, 0xf1,
  0x00, 0x08, 0x04, 0x00, 0x00, 0x41, 0x02, 0x04, 0x11, 0x10, 0x84, 0x40,
  0x10, 0x0c, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x24,
  0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x58, 0x36, 0x08,
  0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x30, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x60, 0x80, 0x11, 0x98, 0x20, 0x10, 0xcd, 0x06, 0xe4, 0x70,
  0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d, 0x20, 0x00, 0x40, 0x02,
  0x26, 0x08, 0x61, 0x90, 0x6d, 0x08, 0xa8, 0x09, 0x82, 0x00, 0x70, 0xb3,
  0x9a, 0x72, 0x7a, 0x93, 0x6b, 0x0b, 0x63, 0x83, 0x4a, 0xc3, 0x2b, 0x63,
  0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xa3, 0xc2, 0xb3, 0x1a,
  0x13, 0x72, 0xe3, 0x32, 0x65, 0xf5, 0x05, 0xf5, 0x36, 0x97, 0x46, 0x97,
  0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa6, 0x09, 0x42, 0x41, 0x6d, 0x08, 0x8e,
  0x09, 0x42, 0x51, 0x4d, 0x10, 0x08, 0x67, 0x82, 0x40, 0x3c, 0x1b, 0x84,
  0xce, 0xdb, 0xb0, 0x1c, 0x58, 0xa6, 0x6d, 0x9a, 0xc1, 0x1d, 0xda, 0x47,
  0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88, 0x69, 0x82, 0x50, 0x58, 0x13, 0x04,
  0x02, 0xda, 0x20, 0x74, 0x63, 0xb0, 0x61, 0x31, 0xc2, 0x20, 0xd3, 0x36,
  0xcd, 0x10, 0x03, 0x43, 0x23, 0x83, 0x09, 0x02, 0x11, 0x11, 0xa1, 0x2a,
  0xc2, 0x1a, 0x7a, 0x7a, 0x92, 0x22, 0x9a, 0x20, 0x14, 0xd7, 0x06, 0xa1,
  0xeb, 0x36, 0x2c, 0x66, 0x70, 0x06, 0x99, 0xb6, 0x69, 0x06, 0x1a, 0x98,
  0x81, 0x96, 0x06, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c, 0xdd,
  0x1a, 0x64, 0xda, 0xa6, 0x19, 0x5c, 0xa7, 0x7d, 0x1b, 0x08, 0x30, 0x28,
  0x03, 0x35, 0x60, 0x83, 0x0d, 0xcb, 0x71, 0x06, 0x99, 0xb6, 0xa1, 0x81,
  0x81, 0x06, 0x87, 0x96, 0x06, 0x1b, 0x02, 0x63, 0xc3, 0x62, 0x9c, 0x41,
  0xa6, 0xbd, 0x01, 0x1a, 0x18, 0x9c, 0xa1, 0x7d, 0x1b, 0x02, 0x33, 0xd8,
  0xb0, 0x98, 0xc1, 0x19, 0x64, 0x5a, 0x1c, 0xa0, 0x81, 0x21, 0x06, 0x66,
  0xa0, 0x91, 0xc1, 0x86, 0xa5, 0x5b, 0x83, 0x4c, 0xdb, 0xd0, 0xc0, 0xe0,
  0x3a, 0xed, 0x9b, 0x20, 0x10, 0xd2, 0x86, 0x85, 0x0e, 0xb0, 0x4c, 0x0c,
  0x36, 0xce, 0xe0, 0xe8, 0x40, 0xfb, 0x36, 0x14, 0x6e, 0x00, 0x07, 0x72,
  0x30, 0x07, 0x75, 0xb0, 0x61, 0x68, 0x03, 0x3b, 0x00, 0x36, 0x14, 0xd6,
  0x75, 0x07, 0x13, 0xd0, 0x0a, 0x4f, 0xec, 0x0d, 0xcf, 0x65, 0xec, 0xad,
  0x0d, 0x2e, 0x8d, 0xad, 0x4c, 0xce, 0xe5, 0x0d, 0x8e, 0x2e, 0xed, 0xcd,
  0x6d, 0x6e, 0x4a, 0x20, 0x54, 0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23,
  0x2b, 0x73, 0xa3, 0x9b, 0x12, 0x10, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca,
  0xe4, 0xe6, 0xd2, 0xde, 0xdc, 0xa6, 0x04, 0x47, 0x13, 0x32, 0x3c, 0x17,
  0xbb, 0x30, 0x36, 0xbb, 0x32, 0xb9, 0x29, 0x41, 0x52, 0x87, 0x0c, 0xcf,
  0x65, 0x0e, 0x2d, 0x8c, 0xac, 0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d,
  0x4a, 0xc0, 0x94, 0x21, 0xc3, 0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93,
  0x1b, 0x2b, 0x9b, 0x9b, 0x12, 0x48, 0x75, 0xc8, 0xf0, 0x5c, 0xec, 0xd2,
  0xca, 0xee, 0x92, 0xc8, 0xa6, 0xe8, 0xc2, 0xe8, 0xca, 0xa6, 0x04, 0x54,
  0x1d, 0x32, 0x3c, 0x97, 0x32, 0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34,
  0x37, 0xba, 0xb9, 0x29, 0xc1, 0x1d, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe4, 0x20,
  0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2, 0xc0, 0x0e, 0xe1, 0x90,
  0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x26, 0x00, 0x00, 0x00, 0x06, 0xb0, 0xbd, 0xec, 0xe9, 0x44, 0x0c, 0xb0,
  0xa4, 0xc8, 0x45, 0x2c, 0x25, 0x62, 0x1c, 0x13, 0xd2, 0x18, 0xed, 0xf5,
  0x0a, 0x5b, 0x63, 0x06, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55,
  0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71,
  0xdb, 0x86, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44,
  0x84, 0x40, 0x33, 0x2c, 0x84, 0x0d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f,
  0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x05, 0xce, 0x70, 0xf9, 0xce, 0xe3,
  0x0f, 0xce, 0x84, 0xfb, 0xc5, 0x6d, 0x5b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3,
  0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x09,
  0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4,
  0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x1d, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f,
  0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x04, 0xcf, 0x70,
  0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x4f, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x74, 0x8d, 0x00, 0x50,
  0x51, 0x02, 0x44, 0x14, 0x57, 0x29, 0xcc, 0x00, 0x94, 0x5d, 0xc9, 0x94,
  0x5c, 0xb1, 0x94, 0x4b, 0xc1, 0x14, 0x48, 0x89, 0x94, 0x49, 0xa1, 0x94,
  0x4a, 0xb9, 0x15, 0x47, 0xc1, 0xd1, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88,
  0xff, 0xc2, 0x18, 0x01, 0x08, 0x82, 0x20, 0x08, 0x06, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x9d, 0x81, 0x83, 0x95, 0x41,
  0x19, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xbc, 0x81, 0x27,
  0x06, 0x66, 0xc0, 0x49, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xc0,
  0xc1, 0x37, 0x06, 0x67, 0x60, 0x4d, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x60, 0xc4, 0x01, 0x18, 0x90, 0x01, 0x1a, 0x6c, 0xd4, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x72, 0x10, 0x06, 0x65, 0x90, 0x06, 0x5d, 0x35,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1c, 0x88, 0xc1, 0x18, 0xa8,
  0x01, 0x18, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xd0, 0xc1,
  0x18, 0x90, 0xc1, 0x1a, 0x68, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x75, 0x40, 0x06, 0x6d, 0xc0, 0x06, 0x62, 0x80, 0x8d, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x61, 0x07, 0x65, 0xe0, 0x06, 0x6d, 0xc0, 0x65,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xdc, 0x81, 0x19, 0xbc, 0x81,
  0x1b, 0x84, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x06, 0x1e,
  0x9c, 0xc1, 0x1b, 0xbc, 0x41, 0x19, 0x6c, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xe4, 0x01, 0x1a, 0xc0, 0x01, 0x1c, 0x7c, 0xdc, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0x7a, 0x90, 0x06, 0x71, 0x10, 0x07, 0x64,
  0xd0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xb1, 0x07, 0x6a, 0x20,
  0x07, 0x72, 0x60, 0x06, 0x9e, 0x1d, 0x8f, 0x7c, 0xec, 0x80, 0xe4, 0x63,
  0x47, 0x24, 0x1f, 0x1b, 0x26, 0xf8, 0xd8, 0x40, 0xc1, 0xc7, 0x86, 0x0a,
  0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xf5, 0x01, 0x19, 0x50,
  0x61, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x93, 0x28,
  0xa4, 0x41, 0x56, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3,
  0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x30, 0x9d, 0x82, 0x1b, 0x78, 0x69, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x13, 0x2b, 0xcc, 0xc1, 0x18, 0xc8, 0xc1, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83,
  0x4d, 0x9e, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x8a, 0x05,
  0x3e, 0xf0, 0xa6, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2a, 0x59,
  0xe8, 0x03, 0x6f, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0x9a,
  0x05, 0x3f, 0xf0, 0xa6, 0xc0, 0x24, 0x31, 0x90, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x54, 0xb5, 0x00, 0x0a, 0x62, 0x20, 0x05, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x50, 0xd9, 0x42, 0x28, 0x88, 0x81, 0x14, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x75, 0x0b, 0xa2, 0x20, 0x06, 0x52,
  0x60, 0x91, 0x19, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xaa,
  0x5c, 0x20, 0x05, 0x33, 0x88, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xa8, 0x74, 0xa1, 0x14, 0xcc, 0x20, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xa0, 0xda, 0x05, 0x53, 0x30, 0x83, 0x28, 0x30, 0x48, 0x0d, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x55, 0x2f, 0xa0, 0x82, 0x1a,
  0x40, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xbe, 0x90, 0x0a,
  0x6a, 0x00, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xfd, 0x82,
  0x2a, 0xa8, 0x01, 0x14, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x14,
  0x0e, 0xa8, 0x80, 0x07, 0xb8, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x93, 0x39, 0xb4, 0x42, 0x1f, 0x9c, 0xc2, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88,
  0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xeb, 0x20, 0x0b, 0xa2, 0xb0, 0x0a,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a,
  0x40, 0x0c, 0xe6, 0xf4, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xa0, 0x82, 0x87, 0x5d, 0xe8, 0x03, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0x2a, 0x1e, 0x78, 0xa1, 0x0f, 0x9c, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x2a, 0x79, 0xe8, 0x85, 0x3e, 0x70, 0x02, 0x6b, 0x42,
  0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xd1, 0xc3, 0x2f,
  0x84, 0x42, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x55, 0x0f,
  0xe0, 0x10, 0x0a, 0x4d, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x95,
  0x3d, 0x84, 0x43, 0x28, 0x34, 0x81, 0x31, 0xa5, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xa8, 0xf0, 0x61, 0x1c, 0x4a, 0x81, 0x09, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0xca, 0x07, 0x72, 0x28, 0x05, 0x26,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4a, 0x1f, 0xca, 0xa1, 0x14,
  0x98, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x26, 0x7e, 0x18, 0x87,
  0x59, 0xd8, 0x85, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x09, 0x24, 0xce, 0xe1,
  0x16, 0x7c, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x60, 0x22, 0x89, 0x75, 0xd8,
  0x85, 0x70, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18,
  0x04, 0x5b, 0x5c, 0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50,
  0xa1, 0xc4, 0x3c, 0xb8, 0xc2, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x95, 0x12, 0xf4, 0xe0, 0x0a, 0x4b, 0x60, 0x4a, 0x2c, 0xc8, 0x67,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xaa, 0x95, 0xb0, 0x87, 0x58, 0x50,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x58, 0xe2, 0x1e, 0x62,
  0x41, 0x09, 0x2c, 0xa1, 0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0xe5, 0x12, 0xf9, 0x40, 0x0b, 0x49, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd5, 0x4b, 0xe8, 0x03, 0x2d, 0x24, 0xc1, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x28, 0x34, 0xd1, 0x0e, 0x07, 0x11, 0x1c, 0x44, 0x30,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0c, 0x4d, 0xe0, 0x43, 0x60, 0x41,
  0x22, 0x1f, 0x13, 0x0e, 0xf9, 0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0x26, 0x9b, 0xe8, 0x87, 0x76, 0x88, 0x87, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86,
  0x11, 0x83, 0x06, 0x00, 0x41, 0x30, 0x70, 0x78, 0xa2, 0x1e, 0xd0, 0xe1,
  0x1c, 0xcc, 0xa1, 0x1c, 0x88, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x80, 0xf1, 0x09, 0x99, 0x08, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0x60, 0xea, 0x09, 0x92, 0xa0, 0x87, 0x9c, 0x18, 0x4d, 0x08, 0x06, 0x0b,
  0xe4, 0x41, 0x3e, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x90, 0x45,
  0x4a, 0xf0, 0x04, 0x4f, 0xc8, 0x84, 0x3c, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x42, 0x16, 0x29, 0xc1, 0x13, 0x3c, 0xb1, 0x12, 0xf1, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x08, 0x59, 0xa4, 0x44, 0x4f, 0xf0,
  0x84, 0x4c, 0xb4, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x64,
  0x91, 0x12, 0x3d, 0xc1, 0x13, 0x2b, 0x91, 0x06, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0x90, 0x45, 0x4a, 0xf4, 0x04, 0x4f, 0xbc, 0x44, 0x19,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x42, 0x16, 0x29, 0xd1, 0x13,
  0x3c, 0x01, 0x13, 0xc4, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x64,
  0x91, 0x12, 0x35, 0xc1, 0x13, 0x32, 0xd1, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x42, 0x16, 0x29, 0x51, 0x13, 0x3c, 0xb1, 0x12, 0xcc, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x64, 0x91, 0x12, 0x35, 0xc1, 0x13,
  0x2f, 0xb1, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x42, 0x16, 0x29,
  0x81, 0x13, 0x3c, 0x21, 0x13, 0xf6, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x08, 0x59, 0xa4, 0x04, 0x4e, 0xf0, 0xc4, 0x4a, 0xd4, 0xc3, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x64, 0x91, 0x12, 0x38, 0xc1, 0x13,
  0x2f, 0x41, 0x0f, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x90, 0x45,
  0x4a, 0xe0, 0x04, 0x4f, 0xc0, 0x44, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x08, 0x59, 0xa4, 0x04, 0x4d, 0xf0, 0x84, 0x4c, 0xb0, 0xc2, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x64, 0x91, 0x12, 0x34, 0xc1, 0x13,
  0x2b, 0x81, 0x0a, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x90, 0x45,
  0x4a, 0xd0, 0x04, 0x4f, 0xbc, 0x04, 0x29, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x01, 0x42, 0x16, 0x29, 0x41, 0x13, 0x3c, 0x01, 0x13, 0xa0, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x12, 0x1c, 0x44, 0x47, 0x58, 0x43, 0x3f, 0x80,
  0x0c, 0x69, 0x63, 0x1f, 0x78, 0x6f, 0x51, 0xac, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x54,
  0xbd, 0x4f, 0x14, 0x41, 0x14, 0x7f, 0xf3, 0x71, 0xc3, 0xdc, 0xec, 0x32,
  0xbb, 0xac, 0xc7, 0x22, 0x7a, 0xc0, 0xe1, 0x07, 0xc2, 0x61, 0xc2, 0x75,
  0xda, 0x61, 0x0c, 0xb1, 0xf1, 0x33, 0x39, 0xf3, 0x3a, 0x0a, 0x43, 0x0c,
  0x92, 0x20, 0x12, 0x43, 0x41, 0x75, 0x9e, 0x1f, 0x85, 0x05, 0x85, 0xff,
  0x81, 0xfe, 0x01, 0x9a, 0x60, 0x67, 0x75, 0x87, 0xd1, 0x56, 0xad, 0xae,
  0x35, 0xb4, 0x56, 0x1a, 0x3d, 0x13, 0xc4, 0x62, 0x7d, 0xc3, 0xdd, 0x85,
  0x3d, 0x12, 0x95, 0x58, 0xe1, 0x2f, 0x79, 0x79, 0xf3, 0x7e, 0xf3, 0xde,
  0xfc, 0xe6, 0xcd, 0xee, 0xcc, 0x85, 0x72, 0xf9, 0x32, 0x63, 0x00, 0xdf,
  0x32, 0xb0, 0x03, 0xd5, 0x72, 0xf0, 0xb9, 0xf6, 0xe2, 0xe3, 0x9f, 0x6c,
  0x7d, 0x9f, 0x79, 0xbf, 0x33, 0xde, 0xae, 0x9f, 0x81, 0x7f, 0x43, 0x67,
  0x9d, 0xad, 0xf6, 0x42, 0xe7, 0xf8, 0xee, 0x9c, 0x84, 0x50, 0xca, 0x3d,
  0xf9, 0x67, 0xdb, 0xfd, 0xad, 0xa7, 0xfa, 0x64, 0x3b, 0xb9, 0x1c, 0x36,
  0x52, 0x79, 0x31, 0x6c, 0x72, 0x96, 0x8a, 0xdf, 0xb6, 0xf3, 0x1d, 0x37,
  0x95, 0xd2, 0x55, 0x10, 0x48, 0xa1, 0x58, 0x8f, 0xe6, 0x8a, 0x0b, 0x9f,
  0x29, 0x11, 0x84, 0x02, 0x0e, 0x10, 0x5c, 0xff, 0xad, 0x6f, 0xa9, 0xdc,
  0xe7, 0x05, 0xc5, 0xdd, 0x01, 0x29, 0x71, 0xa0, 0x36, 0xf9, 0x17, 0xb8,
  0x1e, 0x0a, 0x29, 0x53, 0x6d, 0x2e, 0x8d, 0x70, 0x4f, 0x5c, 0x3a, 0xdc,
  0x1d, 0x7f, 0x39, 0x13, 0xec, 0x4b, 0xeb, 0xe2, 0xf7, 0x6a, 0x63, 0xe5,
  0x67, 0x22, 0x5e, 0x46, 0xc5, 0x89, 0xf7, 0x3f, 0xaa, 0x8d, 0x57, 0x6f,
  0x12, 0x31, 0x37, 0x38, 0xa3, 0xe5, 0xe8, 0xa3, 0x9a, 0x80, 0x67, 0x75,
  0x3f, 0x61, 0x8f, 0x9d, 0x9a, 0x27, 0xaa, 0xb5, 0xd7, 0xe2, 0x41, 0x2d,
  0x11, 0x0f, 0x6b, 0xcf, 0xaf, 0xb2, 0xbe, 0xe5, 0xe9, 0xb5, 0x3a, 0x55,
  0x37, 0xf4, 0xa7, 0x77, 0x02, 0x64, 0xa9, 0x59, 0x62, 0xb0, 0x0d, 0xfa,
  0x74, 0x73, 0xd9, 0x79, 0x33, 0xde, 0x7c, 0x42, 0x9e, 0xd1, 0x7c, 0x96,
  0xe6, 0xef, 0x6d, 0xac, 0xd5, 0x37, 0x64, 0xa1, 0xe9, 0x03, 0x6c, 0xf7,
  0x13, 0x67, 0x5c, 0x0d, 0x94, 0x9a, 0x9b, 0x14, 0x57, 0xf9, 0x70, 0x25,
  0x07, 0x79, 0x1b, 0x42, 0x6c, 0xf3, 0x5a, 0xd9, 0x82, 0x0e, 0xed, 0x09,
  0x1d, 0xd9, 0x71, 0x9d, 0xb3, 0xfd, 0x3c, 0x8f, 0xd4, 0x96, 0x1d, 0x32,
  0x0a, 0x47, 0x4d, 0x88, 0x27, 0x4d, 0x84, 0x13, 0x26, 0x87, 0x7d, 0x3c,
  0xc6, 0xb8, 0x98, 0xc7, 0x41, 0x0e, 0x38, 0xec, 0x2b, 0x3c, 0xe6, 0x87,
  0x38, 0xe6, 0x47, 0x58, 0xf4, 0x73, 0x18, 0x15, 0x63, 0xb4, 0x43, 0xdc,
  0x8e, 0x58, 0x85, 0xc7, 0x6d, 0x88, 0xa7, 0x6c, 0x84, 0x93, 0x36, 0x87,
  0x47, 0x8a, 0x80, 0xde, 0x00, 0x47, 0xb7, 0x17, 0xa9, 0xa5, 0xfd, 0xa0,
  0x61, 0x4b, 0xe8, 0xac, 0x09, 0x92, 0xb5, 0xba, 0x26, 0x5d, 0x9f, 0x74,
  0x99, 0x89, 0x2c, 0x30, 0x8e, 0x19, 0x23, 0x31, 0x4b, 0x9a, 0xbd, 0xa4,
  0x09, 0x3a, 0x42, 0x36, 0xcb, 0x2b, 0xca, 0x97, 0x68, 0x48, 0xcb, 0x92,
  0x96, 0xa0, 0x35, 0xbf, 0xf2, 0x5c, 0xa5, 0xc7, 0x4a, 0xf4, 0x48, 0x27,
  0x20, 0x9d, 0x6c, 0x75, 0xb2, 0xa1, 0xe8, 0xce, 0xb0, 0x01, 0x63, 0xd9,
  0x50, 0x6c, 0xe9, 0xe7, 0xb3, 0x87, 0xc6, 0xac, 0x0d, 0x38, 0x6c, 0xf9,
  0xbd, 0x81, 0x19, 0x21, 0xcf, 0x49, 0x70, 0x8a, 0x7c, 0xc6, 0x03, 0x33,
  0x4d, 0x3e, 0xec, 0x8b, 0x7a, 0x00, 0xee, 0xd3, 0x39, 0x3e, 0xfd, 0x6f,
  0xad, 0x73, 0xaf, 0x3a, 0x6f, 0x87, 0x26, 0x4b, 0x73, 0xce, 0xb2, 0xac,
  0x9b, 0x73, 0x30, 0x7c, 0x77, 0xdc, 0x79, 0xc2, 0x3c, 0xd1, 0xcd, 0xb9,
  0x71, 0xaf, 0xec, 0xae, 0x75, 0x7c, 0x40, 0xe7, 0xdc, 0xf5, 0x58, 0x11,
  0xa4, 0xb7, 0x7b, 0xc3, 0x13, 0x42, 0x6b, 0x74, 0x14, 0xb0, 0x7c, 0xe5,
  0xce, 0xdd, 0xdb, 0x37, 0x16, 0xaf, 0x2d, 0xac, 0xde, 0x5c, 0xbc, 0xb4,
  0x30, 0x7f, 0x6b, 0x65, 0x61, 0x69, 0xfe, 0xfa, 0x2a, 0xce, 0x9d, 0x5f,
  0xfa, 0x05, 0xbe, 0x2d, 0x06, 0x12, 0x00, 0x00, 0x4b, 0xf5, 0x74, 0xfd,
  0xb1, 0x12, 0x2a, 0x29, 0xce, 0xf9, 0xb8, 0xe1, 0x63, 0x19, 0x44, 0x08
};
