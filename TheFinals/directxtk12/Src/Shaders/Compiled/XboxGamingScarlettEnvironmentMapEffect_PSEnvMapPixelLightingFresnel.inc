#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettEnvironmentMapEffect_PSEnvMapPixelLightingFresnel.pdb
; shader hash: 656703b1b044a5555591e369f16ce955
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSEnvMapPixelLightingFresnel
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [384 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   sampler      NA          NA      S1             s1     1
;                                   texture     f32          2d      T0             t0     1
;                                   texture     f32        cube      T1             t1     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%hostlayout.Parameters = type { <3 x float>, float, float, <4 x float>, <3 x float>, [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSEnvMapPixelLightingFresnel() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %2, %dx.types.Handle %4, float %17, float %18, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %20 = extractvalue %dx.types.ResRet.f32 %19, 0
  %21 = extractvalue %dx.types.ResRet.f32 %19, 1
  %22 = extractvalue %dx.types.ResRet.f32 %19, 2
  %23 = extractvalue %dx.types.ResRet.f32 %19, 3
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = fmul fast float %22, %8
  %27 = fmul fast float %23, %9
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %31 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %32 = fsub fast float %29, %13
  %33 = fsub fast float %30, %14
  %34 = fsub fast float %31, %15
  %35 = call float @dx.op.dot3.f32(i32 55, float %32, float %33, float %34, float %32, float %33, float %34)  ; Dot3(ax,ay,az,bx,by,bz)
  %36 = call float @dx.op.unary.f32(i32 25, float %35)  ; Rsqrt(value)
  %37 = fmul fast float %32, %36
  %38 = fmul fast float %33, %36
  %39 = fmul fast float %34, %36
  %40 = call float @dx.op.dot3.f32(i32 55, float %10, float %11, float %12, float %10, float %11, float %12)  ; Dot3(ax,ay,az,bx,by,bz)
  %41 = call float @dx.op.unary.f32(i32 25, float %40)  ; Rsqrt(value)
  %42 = fmul fast float %41, %10
  %43 = fmul fast float %41, %11
  %44 = fmul fast float %41, %12
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = fsub fast float -0.000000e+00, %47
  %70 = fsub fast float -0.000000e+00, %48
  %71 = fsub fast float -0.000000e+00, %55
  %72 = fsub fast float -0.000000e+00, %56
  %73 = fsub fast float -0.000000e+00, %63
  %74 = fsub fast float -0.000000e+00, %64
  %75 = fmul fast float %42, %46
  %76 = fsub fast float -0.000000e+00, %75
  %77 = call float @dx.op.tertiary.f32(i32 46, float %69, float %43, float %76)  ; FMad(a,b,c)
  %78 = call float @dx.op.tertiary.f32(i32 46, float %70, float %44, float %77)  ; FMad(a,b,c)
  %79 = fmul fast float %42, %54
  %80 = fsub fast float -0.000000e+00, %79
  %81 = call float @dx.op.tertiary.f32(i32 46, float %71, float %43, float %80)  ; FMad(a,b,c)
  %82 = call float @dx.op.tertiary.f32(i32 46, float %72, float %44, float %81)  ; FMad(a,b,c)
  %83 = fmul fast float %42, %62
  %84 = fsub fast float -0.000000e+00, %83
  %85 = call float @dx.op.tertiary.f32(i32 46, float %73, float %43, float %84)  ; FMad(a,b,c)
  %86 = call float @dx.op.tertiary.f32(i32 46, float %74, float %44, float %85)  ; FMad(a,b,c)
  %87 = fcmp fast olt float %78, 0.000000e+00
  %88 = fcmp fast olt float %82, 0.000000e+00
  %89 = fcmp fast olt float %86, 0.000000e+00
  %90 = select i1 %87, float 0.000000e+00, float 1.000000e+00
  %91 = select i1 %88, float 0.000000e+00, float 1.000000e+00
  %92 = select i1 %89, float 0.000000e+00, float 1.000000e+00
  %93 = fmul fast float %90, %78
  %94 = fmul fast float %91, %82
  %95 = fmul fast float %92, %86
  %96 = fmul fast float %93, %50
  %97 = call float @dx.op.tertiary.f32(i32 46, float %94, float %58, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %95, float %66, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %93, %51
  %100 = call float @dx.op.tertiary.f32(i32 46, float %94, float %59, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %95, float %67, float %100)  ; FMad(a,b,c)
  %102 = fmul fast float %93, %52
  %103 = call float @dx.op.tertiary.f32(i32 46, float %94, float %60, float %102)  ; FMad(a,b,c)
  %104 = call float @dx.op.tertiary.f32(i32 46, float %95, float %68, float %103)  ; FMad(a,b,c)
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = fmul fast float %106, %98
  %110 = fmul fast float %107, %101
  %111 = fmul fast float %108, %104
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = fadd fast float %109, %113
  %117 = fadd fast float %110, %114
  %118 = fadd fast float %111, %115
  %119 = fmul fast float %24, %116
  %120 = fmul fast float %25, %117
  %121 = fmul fast float %26, %118
  %122 = fsub fast float -0.000000e+00, %37
  %123 = fsub fast float -0.000000e+00, %38
  %124 = fsub fast float -0.000000e+00, %39
  %125 = call float @dx.op.dot3.f32(i32 55, float %122, float %123, float %124, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %126 = fmul fast float %125, 2.000000e+00
  %127 = fmul fast float %126, %42
  %128 = fmul fast float %126, %43
  %129 = fmul fast float %126, %44
  %130 = fsub fast float %122, %127
  %131 = fsub fast float %123, %128
  %132 = fsub fast float %124, %129
  %133 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %3, float %130, float %131, float %132, float undef, i32 undef, i32 undef, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %134 = extractvalue %dx.types.ResRet.f32 %133, 0
  %135 = extractvalue %dx.types.ResRet.f32 %133, 1
  %136 = extractvalue %dx.types.ResRet.f32 %133, 2
  %137 = extractvalue %dx.types.ResRet.f32 %133, 3
  %138 = fmul fast float %134, %27
  %139 = fmul fast float %135, %27
  %140 = fmul fast float %136, %27
  %141 = fmul fast float %137, %27
  %142 = call float @dx.op.dot3.f32(i32 55, float %37, float %38, float %39, float %42, float %43, float %44)  ; Dot3(ax,ay,az,bx,by,bz)
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %145 = call float @dx.op.unary.f32(i32 6, float %142)  ; FAbs(value)
  %146 = fsub fast float 1.000000e+00, %145
  %147 = call float @dx.op.binary.f32(i32 35, float %146, float 0.000000e+00)  ; FMax(a,b)
  %148 = call float @dx.op.unary.f32(i32 23, float %147)  ; Log(value)
  %149 = fmul fast float %148, %144
  %150 = call float @dx.op.unary.f32(i32 21, float %149)  ; Exp(value)
  %151 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %152 = fmul fast float %151, %150
  %153 = fsub fast float %138, %119
  %154 = fsub fast float %139, %120
  %155 = fsub fast float %140, %121
  %156 = fmul fast float %152, %153
  %157 = fmul fast float %152, %154
  %158 = fmul fast float %152, %155
  %159 = fadd fast float %156, %119
  %160 = fadd fast float %157, %120
  %161 = fadd fast float %158, %121
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = fmul fast float %163, %141
  %167 = fmul fast float %164, %141
  %168 = fmul fast float %165, %141
  %169 = fadd fast float %159, %166
  %170 = fadd fast float %160, %167
  %171 = fadd fast float %161, %168
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %174 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %175 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %176 = fmul fast float %173, %27
  %177 = fmul fast float %174, %27
  %178 = fmul fast float %175, %27
  %179 = fsub fast float %176, %169
  %180 = fsub fast float %177, %170
  %181 = fsub fast float %178, %171
  %182 = fmul fast float %179, %16
  %183 = fmul fast float %180, %16
  %184 = fmul fast float %181, %16
  %185 = fadd fast float %182, %169
  %186 = fadd fast float %183, %170
  %187 = fadd fast float %184, %171
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %185)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %186)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %187)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %27)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!15}
!dx.entryPoints = !{!16}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !10, !12}
!6 = !{!7, !9}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{i32 1, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 5, i32 0, !8}
!10 = !{!11}
!11 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 384, null}
!12 = !{!13, !14}
!13 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!14 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!15 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!16 = !{void ()* @PSEnvMapPixelLightingFresnel, !"PSEnvMapPixelLightingFresnel", !17, !5, null}
!17 = !{!18, !29, null}
!18 = !{!19, !22, !25, !28}
!19 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 2, i32 0, i8 0, !21}
!20 = !{i32 0}
!21 = !{i32 3, i32 3}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !24}
!23 = !{i32 1}
!24 = !{i32 3, i32 15}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !27}
!26 = !{i32 2}
!27 = !{i32 3, i32 7}
!28 = !{i32 3, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 3, i8 0, !24}
!29 = !{!30}
!30 = !{i32 0, !"SV_Target", i8 9, i8 16, !20, i8 0, i32 1, i8 4, i32 0, i8 0, !24}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 58
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 960
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0xb1036765, 0x55a544b0                // 000000000000: D5806765 03FF6303 55A544B0
;   v_nop_xbox_data 0x69e39155, 0x55e96cf1                // 00000000000C: D5809155 03FED3E3 55E96CF1
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[52:53], exec                          // 00000000001C: BEB4047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s16, s9                                 // 000000000024: BE900309
;   s_mov_b32     s9, 0                                   // 000000000028: BE890380
;   s_mov_b32     s17, 0                                  // 00000000002C: BE910380
;   s_mov_b32     s54, s11                                // 000000000030: BEB6030B
;   s_mov_b32     s11, 0                                  // 000000000034: BE8B0380
;   s_load_dwordx8  s[0:7], s[8:9], null                  // 000000000038: F40C0004 FA000000
;   s_load_dwordx4  s[24:27], s[16:17], null              // 000000000040: F4080608 FA000000
;   s_mov_b32     m0, s14                                 // 000000000048: BEFC030E
;   s_load_dwordx8  s[40:47], s[10:11], null              // 00000000004C: F40C0A05 FA000000
;   v_interp_p1_f32  v2, v0, attr0.x                      // 000000000054: C8080000
;   v_interp_p1_f32  v3, v0, attr0.y                      // 000000000058: C80C0100
;   s_or_b32      s49, s13, lit(0x00100000)               // 00000000005C: 8831FF0D 00100000
;   s_mov_b32     s48, s12                                // 000000000064: BEB0030C
;   s_mov_b32     s50, -1                                 // 000000000068: BEB203C1
;   v_interp_p2_f32  v2, v1, attr0.x                      // 00000000006C: C8090001
;   v_interp_p2_f32  v3, v1, attr0.y                      // 000000000070: C80D0101
;   s_mov_b32     s51, lit(0x11014fac)                    // 000000000074: BEB303FF 11014FAC
;   v_interp_p1_f32  v6, v0, attr2.y                      // 00000000007C: C8180900
;   s_buffer_load_dwordx8  s[32:39], s[48:51], 0x0000a0   // 000000000080: F42C0818 FA0000A0
;   v_interp_p1_f32  v7, v0, attr2.x                      // 000000000088: C81C0800
;   v_interp_p1_f32  v8, v0, attr2.z                      // 00000000008C: C8200A00
;   v_interp_p1_f32  v15, v0, attr1.y                     // 000000000090: C83C0500
;   v_interp_p2_f32  v6, v1, attr2.y                      // 000000000094: C8190901
;   v_interp_p1_f32  v11, v0, attr1.x                     // 000000000098: C82C0400
;   v_interp_p2_f32  v7, v1, attr2.x                      // 00000000009C: C81D0801
;   v_interp_p2_f32  v8, v1, attr2.z                      // 0000000000A0: C8210A01
;   s_waitcnt     lgkmcnt(0)                              // 0000000000A4: BF8CC07F
;   image_sample  v[2:5], v[2:3], s[0:7], s[24:27] dmask:0xf dim:SQ_RSRC_IMG_2D // 0000000000A8: F0800F08 00C00202
;   v_mul_legacy_f32  v10, v6, v6                         // 0000000000B0: 0E140D06
;   v_interp_p2_f32  v15, v1, attr1.y                     // 0000000000B4: C83D0501
;   v_interp_p1_f32  v12, v0, attr1.z                     // 0000000000B8: C8300600
;   v_interp_p2_f32  v11, v1, attr1.x                     // 0000000000BC: C82D0401
;   s_buffer_load_dwordx16  s[0:15], s[48:51], 0x000020   // 0000000000C0: F4300018 FA000020
;   v_fmac_f32    v10, v7, v7                             // 0000000000C8: 56140F07
;   s_buffer_load_dwordx16  s[16:31], s[48:51], 0x000060  // 0000000000CC: F4300418 FA000060
;   v_interp_p2_f32  v12, v1, attr1.z                     // 0000000000D4: C8310601
;   v_interp_p1_f32  v20, v0, attr3.x                     // 0000000000D8: C8500C00
;   v_interp_p1_f32  v14, v0, attr3.y                     // 0000000000DC: C8380D00
;   v_fmac_f32    v10, v8, v8                             // 0000000000E0: 56141108
;   v_sub_f32     v9, s33, v15                            // 0000000000E4: 08121E21
;   v_sub_f32     v11, s32, v11                           // 0000000000E8: 08161620
;   v_sub_f32     v12, s34, v12                           // 0000000000EC: 08181822
;   v_interp_p1_f32  v15, v0, attr3.z                     // 0000000000F0: C83C0E00
;   v_rsq_f32     v21, v10                                // 0000000000F4: 7E2A5D0A
;   v_mul_legacy_f32  v13, v9, v9                         // 0000000000F8: 0E1A1309
;   v_interp_p1_f32  v23, v0, attr3.w                     // 0000000000FC: C85C0F00
;   v_interp_p1_f32  v18, v0, attr1.w                     // 000000000100: C8480700
;   v_interp_p2_f32  v15, v1, attr3.z                     // 000000000104: C83D0E01
;   v_interp_p2_f32  v14, v1, attr3.y                     // 000000000108: C8390D01
;   v_fmac_f32    v13, v11, v11                           // 00000000010C: 561A170B
;   s_mov_b32     s55, 0                                  // 000000000110: BEB70380
;   s_buffer_load_dwordx2  s[32:33], s[48:51], 0x000010   // 000000000114: F4240818 FA000010
;   v_interp_p2_f32  v20, v1, attr3.x                     // 00000000011C: C8510C01
;   v_mul_legacy_f32  v7, v21, v7                         // 000000000120: 0E0E0F15
;   v_fmac_f32    v13, v12, v12                           // 000000000124: 561A190C
;   v_mul_legacy_f32  v0, v21, v6                         // 000000000128: 0E000D15
;   v_mul_legacy_f32  v8, v21, v8                         // 00000000012C: 0E101115
;   v_interp_p2_f32  v23, v1, attr3.w                     // 000000000130: C85D0F01
;   s_waitcnt     lgkmcnt(0)                              // 000000000134: BF8CC07F
;   v_mul_legacy_f32  v10, s8, v7                         // 000000000138: 0E140E08
;   v_rsq_f32     v6, v13                                 // 00000000013C: 7E0C5D0D
;   v_mul_legacy_f32  v13, s12, v7                        // 000000000140: 0E1A0E0C
;   v_mul_legacy_f32  v19, s16, v7                        // 000000000144: 0E260E10
;   v_interp_p2_f32  v18, v1, attr1.w                     // 000000000148: C8490701
;   v_fma_f32     v10, -s9, v0, -v10                      // 00000000014C: D54B000A A42A0009
;   v_fma_f32     v13, -s13, v0, -v13                     // 000000000154: D54B000D A436000D
;   v_fma_f32     v19, -s17, v0, -v19                     // 00000000015C: D54B0013 A44E0011
;   v_fmac_f32    v10, -s10, v8                           // 000000000164: D52B000A 2002100A
;   v_mul_legacy_f32  v9, v9, v6                          // 00000000016C: 0E120D09
;   v_mul_legacy_f32  v22, v11, v6                        // 000000000170: 0E2C0D0B
;   v_mul_legacy_f32  v6, v12, v6                         // 000000000174: 0E0C0D0C
;   v_fmac_f32    v13, -s14, v8                           // 000000000178: D52B000D 2002100E
;   v_cmp_gt_f32  vcc, 0, v10                             // 000000000180: 7C081480
;   v_mul_legacy_f32  v12, v9, v0                         // 000000000184: 0E180109
;   v_fmac_f32    v19, -s18, v8                           // 000000000188: D52B0013 20021012
;   s_load_dwordx4  s[12:15], s[54:55], null              // 000000000190: F408031B FA000000
;   s_buffer_load_dwordx4  s[8:11], s[48:51], null        // 000000000198: F4280218 FA000000
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 0000000001A0: D501000B 01A900F2
;   v_cmp_gt_f32  vcc, 0, v13                             // 0000000001A8: 7C081A80
;   v_mul_legacy_f32  v10, v11, v10                       // 0000000001AC: 0E14150B
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 0000000001B0: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v19                             // 0000000001B8: 7C082680
;   v_mul_legacy_f32  v17, s21, v10                       // 0000000001BC: 0E221415
;   v_mul_legacy_f32  v11, v16, v13                       // 0000000001C0: 0E161B10
;   v_mul_legacy_f32  v16, s20, v10                       // 0000000001C4: 0E201414
;   v_mul_legacy_f32  v10, s22, v10                       // 0000000001C8: 0E141416
;   v_fmac_f32    v17, s25, v11                           // 0000000001CC: 56221619
;   v_fmac_f32    v16, s24, v11                           // 0000000001D0: 56201618
;   v_fmac_f32    v10, s26, v11                           // 0000000001D4: 5614161A
;   s_waitcnt     vmcnt(0)                                // 0000000001D8: BF8C3F70
;   v_mul_legacy_f32  v4, v4, v15                         // 0000000001DC: 0E081F04
;   v_fma_f32     v15, -v22, v7, -v12                     // 0000000001E0: D54B000F A4320F16
;   v_mul_legacy_f32  v3, v3, v14                         // 0000000001E8: 0E061D03
;   v_cndmask_b32  v14, 1.0, 0, vcc                       // 0000000001EC: D501000E 01A900F2
;   v_mul_legacy_f32  v2, v2, v20                         // 0000000001F4: 0E042902
;   v_mov_b32     v20, lit(0x3fc00000)                    // 0000000001F8: 7E2802FF 3FC00000
;   v_fmac_f32    v15, -v6, v8 mul:2                      // 000000000200: D52B000F 28021106
;   v_mul_legacy_f32  v5, v5, v23                         // 000000000208: 0E0A2F05
;   v_mul_legacy_f32  v19, v14, v19                       // 00000000020C: 0E26270E
;   v_fma_f32     v0, -v15, v0, -v9                       // 000000000210: D54B0000 A426010F
;   v_fma_f32     v9, -v15, v7, -v22                      // 000000000218: D54B0009 A45A0F0F
;   v_fma_f32     v15, -v15, v8, -v6                      // 000000000220: D54B000F A41A110F
;   v_fmac_f32    v16, s28, v19                           // 000000000228: 5620261C
;   v_fmac_f32    v17, s29, v19                           // 00000000022C: 5622261D
;   v_fmac_f32    v10, s30, v19                           // 000000000230: 5614261E
;   v_cubema_f32  v13, v9, v0, v15                        // 000000000234: D547000D 043E0109
;   v_cubesc_f32  v11, v9, v0, v15                        // 00000000023C: D545000B 043E0109
;   v_cubetc_f32  v14, v9, v0, v15                        // 000000000244: D546000E 043E0109
;   v_fma_f32     v10, s2, v10, s6                        // 00000000024C: D54B000A 001A1402
;   v_fma_f32     v16, s0, v16, s4                        // 000000000254: D54B0010 00122000
;   v_rcp_f32     v1, abs(v13)                            // 00000000025C: D5AA0101 0000010D
;   v_fma_f32     v17, s1, v17, s5                        // 000000000264: D54B0011 00162201
;   v_cubeid_f32  v21, v9, v0, v15                        // 00000000026C: D5440015 043E0109
;   v_mul_legacy_f32  v4, v4, v10                         // 000000000274: 0E081504
;   v_mul_legacy_f32  v15, v3, v17                        // 000000000278: 0E1E2303
;   v_mad_f32     v19, v11, v1, v20                       // 00000000027C: D5410013 0452030B
;   v_mul_legacy_f32  v11, v2, v16                        // 000000000284: 0E162102
;   v_mac_f32     v20, v14, v1                            // 000000000288: 3E28030E
;   s_and_b64     exec, exec, s[52:53]                    // 00000000028C: 87FE347E
;   s_waitcnt     lgkmcnt(0)                              // 000000000290: BF8CC07F
;   image_sample  v[0:3], v[19:21], s[40:47], s[12:15] dmask:0xf dim:SQ_RSRC_IMG_CUBE // 000000000294: F0800F18 006A0013
;   v_fmac_f32    v12, v22, v7                            // 00000000029C: 56180F16
;   v_fmac_f32    v12, v6, v8                             // 0000000002A0: 56181106
;   v_sub_f32     v6, 1.0, abs(v12)                       // 0000000002A4: D5040206 000218F2
;   v_max_f32     v6, 0, v6                               // 0000000002AC: 200C0C80
;   v_log_f32     v6, v6                                  // 0000000002B0: 7E0C4F06
;   v_mul_legacy_f32  v6, s33, v6                         // 0000000002B4: 0E0C0C21
;   v_exp_f32     v6, v6                                  // 0000000002B8: 7E0C4B06
;   v_mul_legacy_f32  v6, s32, v6                         // 0000000002BC: 0E0C0C20
;   s_waitcnt     vmcnt(0)                                // 0000000002C0: BF8C3F70
;   v_fma_f32     v7, v2, v5, -v4                         // 0000000002C4: D54B0007 84120B02
;   v_fma_f32     v0, v0, v5, -v11                        // 0000000002CC: D54B0000 842E0B00
;   v_fma_f32     v1, v1, v5, -v15                        // 0000000002D4: D54B0001 843E0B01
;   v_mul_legacy_f32  v2, v3, v5                          // 0000000002DC: 0E040B03
;   v_fmac_f32    v4, v6, v7                              // 0000000002E0: 56080F06
;   v_fmac_f32    v11, v6, v0                             // 0000000002E4: 56160106
;   v_fmac_f32    v15, v6, v1                             // 0000000002E8: 561E0306
;   v_fmac_f32    v4, s10, v2                             // 0000000002EC: 5608040A
;   v_fmac_f32    v11, s8, v2                             // 0000000002F0: 56160408
;   v_fmac_f32    v15, s9, v2                             // 0000000002F4: 561E0409
;   v_fma_f32     v3, s38, v5, -v4                        // 0000000002F8: D54B0003 84120A26
;   v_fma_f32     v0, s36, v5, -v11                       // 000000000300: D54B0000 842E0A24
;   v_fma_f32     v1, s37, v5, -v15                       // 000000000308: D54B0001 843E0A25
;   v_fmac_f32    v4, v3, v18                             // 000000000310: 56082503
;   v_fmac_f32    v11, v0, v18                            // 000000000314: 56162500
;   v_fmac_f32    v15, v1, v18                            // 000000000318: 561E2501
;   s_nop         0x0000                                  // 00000000031C: BF800000
;   s_nop         0x0000                                  // 000000000320: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v11, v15                     // 000000000324: 5E001F0B
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 000000000328: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 00000000032C: F8001C0F 00000100
;   s_endpgm                                              // 000000000334: BF810000
;   s_code_end                                            // 000000000338: BF9F0000
;   s_code_end                                            // 00000000033C: BF9F0000
;   s_code_end                                            // 000000000340: BF9F0000
;   s_code_end                                            // 000000000344: BF9F0000
;   s_code_end                                            // 000000000348: BF9F0000
;   s_code_end                                            // 00000000034C: BF9F0000
;   s_code_end                                            // 000000000350: BF9F0000
;   s_code_end                                            // 000000000354: BF9F0000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 14
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 5
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 56, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 64, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
;   bound_descriptor_loads[2] {  instr_offset: 76, resource_class: 0 (SRV), index: 1, space: 0, resource_kind: 5 (TextureCube)  }
;   bound_descriptor_loads[3] {  instr_offset: 400, resource_class: 3 (Sampler), index: 1, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 5
;     used_resource[0] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 9
;       orig_rootsig_slot_id: 1
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 1
;       allocated_offset : 10
;       orig_rootsig_slot_id: 2
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[3] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 11
;       orig_rootsig_slot_id: 3
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[4] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 12
;       orig_rootsig_slot_id: 4
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 48
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSEnvMapPixelLightingFresnel)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 28 {
;     scratch_en: 0
;     user_sgpr: 14
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 199
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0xb,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v11, off, off, off done vm        // 000000000010: F8001801 0000000B
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0xf0b,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v11, v15, off, off done vm        // 000000000010: F8001803 00000F0B
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x50b,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v11, v5, off, off done vm         // 000000000010: F8001803 0000050B
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e001f0b,
;        0x5e020b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v11, v15                     // 000000000008: 5E001F0B
;   v_cvt_pkrtz_f16_f32  v1, v4, v5                       // 00000000000C: 5E020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x21f0b,
;        0xd7690001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v11, v15                    // 000000000000: D7690000 00021F0B
;   v_cvt_pknorm_u16_f32  v1, v4, v5                      // 000000000008: D7690001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x21f0b,
;        0xd7680001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v11, v15                    // 000000000000: D7680000 00021F0B
;   v_cvt_pknorm_i16_f32  v1, v4, v5                      // 000000000008: D7680001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x21f0b,
;        0xd76a0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v11, v15                        // 000000000000: D76A0000 00021F0B
;   v_cvt_pk_u16_u32  v1, v4, v5                          // 000000000008: D76A0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x21f0b,
;        0xd76b0001,
;        0x20b04,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v11, v15                        // 000000000000: D76B0000 00021F0B
;   v_cvt_pk_i16_i32  v1, v4, v5                          // 000000000008: D76B0001 00020B04
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x5040f0b,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v11, v15, v4, v5 done vm          // 000000000010: F800180F 05040F0B
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=58,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:120,SAlu:23,VMem:2,SMem:9,LDS:0,WaitCntOnVMem:2,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char EnvironmentMapEffect_PSEnvMapPixelLightingFresnel[] = {
  0x44, 0x58, 0x42, 0x43, 0xc0, 0x0c, 0x06, 0x1b, 0xf0, 0x40, 0x87, 0x27,
  0xae, 0x08, 0xf6, 0x71, 0x86, 0xa7, 0x5c, 0x0a, 0x01, 0x00, 0x00, 0x00,
  0xc0, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xd4, 0x02, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
  0x7c, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xa0, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x50, 0x69,
  0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46,
  0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0xe0, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e,
  0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x43, 0x3a, 0x5c, 0x55,
  0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44,
  0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69,
  0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31,
  0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53,
  0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69,
  0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69,
  0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x45, 0x6e,
  0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
  0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x50, 0x53, 0x45, 0x6e, 0x76,
  0x4d, 0x61, 0x70, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68,
  0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x73, 0x6e, 0x65, 0x6c, 0x2e,
  0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x65, 0x67, 0x03, 0xb1, 0xb0, 0x44, 0xa5, 0x55,
  0x55, 0x91, 0xe3, 0x69, 0xf1, 0x6c, 0xe9, 0x55, 0x44, 0x58, 0x49, 0x4c,
  0x3c, 0x12, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8f, 0x04, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x6c, 0x0d, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54, 0x05, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x84, 0x0d, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xe4, 0x0d, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xf8, 0x0d, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x08, 0x0e, 0x00, 0x00,
  0x21, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2c, 0x12, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x6c, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0x58, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x6a, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xb0, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00,
  0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x80, 0x20, 0x88,
  0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec, 0x21, 0x24, 0x7f, 0x25,
  0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31, 0x0c, 0xc3, 0x40, 0x50,
  0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0,
  0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33, 0x0c, 0xc3, 0x40, 0x10,
  0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0xe8, 0x29,
  0xc3, 0x40, 0x0c, 0x14, 0x15, 0x62, 0x20, 0x86, 0x81, 0xa6, 0xa3, 0x86,
  0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95, 0x98, 0xfc,
  0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x50, 0x88, 0x8a, 0x60, 0x08, 0xb2,
  0x4a, 0x31, 0x10, 0xc3, 0x30, 0x10, 0x36, 0x47, 0x10, 0x14, 0x83, 0x21,
  0x0a, 0x82, 0xd0, 0x68, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x99, 0xda,
  0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e, 0xdc, 0x80, 0x16, 0xca,
  0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c, 0xe4, 0x80, 0x14, 0xf8,
  0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d, 0xe4, 0x81, 0x0f, 0xcc,
  0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d, 0xc0, 0x80, 0x0e, 0xfc,
  0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d, 0xd2, 0x01, 0x1e, 0xe6,
  0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c, 0x50, 0x40, 0xcc, 0x24,
  0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3, 0xe0, 0x06, 0xb4, 0x50,
  0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5, 0x20, 0x07, 0xa4, 0xc0,
  0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef, 0x20, 0x0f, 0x7c, 0x60,
  0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c, 0x00, 0x06, 0x74, 0xe0,
  0x07, 0x60, 0xe0, 0x07, 0x48, 0xf0, 0x3e, 0x02, 0x67, 0x22, 0x83, 0x71,
  0x60, 0x87, 0x70, 0x98, 0x87, 0x79, 0x70, 0x03, 0x5a, 0x28, 0x07, 0x7c,
  0xa0, 0x87, 0x7a, 0x90, 0x87, 0x72, 0x18, 0x85, 0x7a, 0x10, 0x87, 0x72,
  0xe0, 0x03, 0x7b, 0x28, 0x87, 0x71, 0xa0, 0x87, 0x77, 0x90, 0x07, 0x3e,
  0x30, 0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x36, 0x00, 0x03, 0x3a,
  0xf0, 0x03, 0x30, 0xf0, 0x03, 0x14, 0x78, 0x24, 0x0e, 0x23, 0x0c, 0x43,
  0x0e, 0x90, 0x49, 0xe0, 0x5d, 0x75, 0x38, 0xd2, 0xb4, 0x00, 0x98, 0x43,
  0x4d, 0x7e, 0x0a, 0x44, 0x00, 0x43, 0x4c, 0x44, 0x24, 0xa1, 0x86, 0x1c,
  0x06, 0x8f, 0x2c, 0x4b, 0x92, 0xf4, 0xcc, 0xd2, 0xa4, 0xf3, 0x26, 0x69,
  0x8a, 0x28, 0x61, 0xf2, 0x59, 0x80, 0x79, 0x16, 0x22, 0x62, 0x27, 0x60,
  0x22, 0x50, 0x40, 0x50, 0x9a, 0x12, 0x04, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x4f, 0x03, 0x04, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x07, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xc1, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x18, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x08,
  0x4a, 0xa2, 0x14, 0x0a, 0xd0, 0xa0, 0x0c, 0xca, 0xa3, 0x1c, 0xa8, 0x28,
  0x89, 0x11, 0x80, 0x22, 0x28, 0x84, 0x32, 0x28, 0x10, 0x0a, 0x67, 0x00,
  0x68, 0x9c, 0x01, 0x20, 0x74, 0x06, 0x80, 0xd4, 0x19, 0x00, 0x5a, 0xc7,
  0x92, 0x20, 0xe2, 0x79, 0x00, 0xe0, 0x38, 0x8e, 0xe3, 0x38, 0x0e, 0x20,
  0x10, 0x88, 0x07, 0x00, 0x79, 0x18, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x61, 0xb0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78,
  0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90,
  0x26, 0x08, 0x63, 0xc0, 0x4d, 0x10, 0x08, 0x68, 0x43, 0x62, 0x50, 0xcf,
  0x61, 0x18, 0xd5, 0x21, 0x6d, 0x10, 0x26, 0x6b, 0x82, 0x80, 0x06, 0xdd,
  0x04, 0x81, 0x88, 0x36, 0x20, 0x07, 0xf6, 0x1c, 0x87, 0x91, 0x01, 0x1b,
  0x02, 0x6d, 0x82, 0xa0, 0x06, 0xde, 0x06, 0xe4, 0xe0, 0x9e, 0xe3, 0x30,
  0x0e, 0x60, 0x03, 0x62, 0x70, 0xcf, 0x61, 0x18, 0x07, 0xb0, 0x41, 0xe8,
  0xbc, 0x0d, 0xc4, 0x05, 0x6c, 0xdf, 0x04, 0x61, 0x0d, 0xbe, 0x0d, 0x41,
  0x18, 0x4c, 0x10, 0x04, 0x80, 0x1c, 0xd4, 0x54, 0x91, 0x9b, 0x5d, 0x53,
  0x18, 0x1c, 0x54, 0x1a, 0x5e, 0x19, 0x1b, 0x53, 0xda, 0x19, 0x1a, 0x5d,
  0x9a, 0xdb, 0x99, 0x91, 0x5c, 0xd9, 0x9c, 0x5b, 0x19, 0x1b, 0x11, 0xaa,
  0x22, 0xac, 0xa1, 0xa7, 0x27, 0x29, 0xa2, 0x09, 0x42, 0x51, 0x4d, 0x10,
  0x0a, 0x6b, 0x43, 0x70, 0x4c, 0x10, 0x8a, 0x6b, 0x82, 0x40, 0x48, 0x1b,
  0x04, 0x35, 0x50, 0x83, 0x0d, 0xcb, 0x51, 0x06, 0x66, 0x70, 0x06, 0x68,
  0x90, 0x06, 0x46, 0x1a, 0x1c, 0x67, 0xb0, 0x06, 0x1b, 0x02, 0x63, 0x82,
  0x50, 0x60, 0x13, 0x04, 0x62, 0xda, 0x20, 0xa8, 0xc1, 0x1b, 0x6c, 0x58,
  0x8c, 0x32, 0x30, 0x83, 0x33, 0x68, 0x83, 0x34, 0x30, 0xdc, 0xc0, 0x38,
  0x03, 0x38, 0xd8, 0x10, 0x40, 0x13, 0x84, 0x22, 0x9b, 0x20, 0x10, 0xd4,
  0x06, 0x41, 0x0d, 0xe8, 0x60, 0xc3, 0x02, 0x95, 0x81, 0x19, 0x9c, 0x81,
  0x1c, 0xa4, 0x81, 0x31, 0x07, 0xd0, 0x19, 0xd4, 0x01, 0x8b, 0xa1, 0x27,
  0xa6, 0x27, 0xa9, 0x0d, 0x8b, 0x1a, 0xdc, 0x81, 0x19, 0x9c, 0x01, 0x1a,
  0xa4, 0x81, 0xe1, 0x06, 0x6a, 0x70, 0x06, 0x70, 0xb0, 0x81, 0x60, 0x83,
  0x38, 0xb0, 0x03, 0x3c, 0x60, 0x32, 0x65, 0xf5, 0x45, 0x15, 0x26, 0x77,
  0x56, 0x46, 0x37, 0x41, 0x28, 0xb4, 0x0d, 0xcb, 0xa1, 0x07, 0x66, 0xb0,
  0x07, 0x68, 0x70, 0x06, 0x86, 0x1b, 0x1c, 0x67, 0x00, 0x07, 0x1b, 0x02,
  0x3e, 0xd8, 0x30, 0xe4, 0x41, 0x1f, 0x00, 0x1b, 0x8a, 0x31, 0x20, 0x03,
  0x3f, 0x00, 0x03, 0xa0, 0x15, 0x9e, 0xd8, 0x1b, 0x9e, 0xcb, 0xd8, 0x5b,
  0x1b, 0x5c, 0x1a, 0x5b, 0x99, 0x9c, 0xcb, 0x1b, 0x1c, 0x5d, 0xda, 0x9b,
  0xdb, 0xdc, 0x94, 0x40, 0xa8, 0xc2, 0xc6, 0x66, 0xd7, 0xe6, 0x92, 0x46,
  0x56, 0xe6, 0x46, 0x37, 0x25, 0x20, 0xaa, 0x90, 0xe1, 0xb9, 0xd8, 0x95,
  0xc9, 0xcd, 0xa5, 0xbd, 0xb9, 0x4d, 0x09, 0x8e, 0x26, 0x64, 0x78, 0x2e,
  0x76, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x82, 0xa4, 0x0e, 0x19, 0x9e,
  0xcb, 0x1c, 0x5a, 0x18, 0x59, 0x99, 0x5c, 0xd3, 0x1b, 0x59, 0x19, 0xdb,
  0x94, 0x80, 0x29, 0x43, 0x86, 0xe7, 0x22, 0x57, 0x36, 0xf7, 0x56, 0x27,
  0x37, 0x56, 0x36, 0x37, 0x25, 0xf8, 0xea, 0x90, 0xe1, 0xb9, 0xd8, 0xa5,
  0x95, 0xdd, 0x25, 0x91, 0x4d, 0xd1, 0x85, 0xd1, 0x95, 0x4d, 0x09, 0xc2,
  0xa0, 0x0e, 0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b,
  0x9a, 0x1b, 0xdd, 0xdc, 0x94, 0xc0, 0x0f, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x06, 0xc0, 0xa5, 0xac,
  0xd7, 0x54, 0x26, 0xf0, 0xa4, 0xc8, 0x45, 0x2c, 0x25, 0x62, 0x1c, 0x13,
  0xd2, 0x18, 0x5f, 0x44, 0x48, 0x0d, 0xb1, 0x98, 0x01, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x01, 0xd2, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x07, 0xdb,
  0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0,
  0x50, 0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb, 0x96, 0x20, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84,
  0x11, 0x38, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7,
  0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd,
  0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x36, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x04, 0x30, 0xcf, 0x42, 0xf8, 0xc5, 0x6d, 0x9b, 0x40, 0x35, 0x5c, 0xbe,
  0xf3, 0xf8, 0xd2, 0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5,
  0x6d, 0x1b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08,
  0x10, 0x61, 0x7e, 0x71, 0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e,
  0xd5, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x0d, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x5c, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0xa4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x45, 0xa9, 0x94, 0xcb, 0x0c, 0x40, 0x21, 0x94, 0x5d, 0x71, 0x95, 0x5c,
  0xb9, 0x15, 0x5e, 0xc9, 0x14, 0x45, 0x19, 0xd1, 0x30, 0x46, 0x00, 0x82,
  0x20, 0x08, 0x82, 0xc1, 0x18, 0x01, 0x08, 0x82, 0x20, 0xfe, 0xcd, 0x00,
  0x8c, 0x00, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0xa0, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xad, 0xc1, 0xe2, 0xa9, 0x81,
  0x1a, 0x50, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xb1, 0x01, 0xf3,
  0xa9, 0x81, 0x1a, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xb5,
  0x41, 0xd3, 0xb1, 0x01, 0x1b, 0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0xb0, 0xb9, 0x81, 0xe3, 0xb1, 0x01, 0x1b, 0x5c, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xb0, 0xbd, 0xc1, 0x13, 0x06, 0x6d, 0xd0, 0x06, 0xd8, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x78, 0x30, 0x9d, 0x81, 0x1b, 0x8c,
  0x01, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1e, 0x50, 0x68,
  0xf0, 0x06, 0x59, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1e,
  0x54, 0x69, 0x00, 0x07, 0x64, 0x60, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xb1, 0x07, 0x96, 0x1a, 0xc4, 0xc1, 0x18, 0x5c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf0, 0xc1, 0xf5, 0x06, 0x72, 0x70, 0x06, 0xd8,
  0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7d, 0x80, 0xc1, 0xc1, 0x1c,
  0x74, 0xd9, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7e, 0x90, 0xc5,
  0x01, 0x1d, 0xa0, 0x81, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6,
  0x1f, 0x68, 0x76, 0x50, 0x07, 0x6a, 0xb0, 0x8d, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0x01, 0x0a, 0xdb, 0x1d, 0xd8, 0x01, 0x18, 0x70, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0x84, 0x02, 0x87, 0x07, 0x77, 0xb0, 0x06,
  0xdd, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa2, 0xd0, 0xe5, 0x01,
  0x1e, 0xa8, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x28,
  0x78, 0x79, 0x90, 0x07, 0x6e, 0xf0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x41, 0x0a, 0x9f, 0x1e, 0xe8, 0x01, 0x19, 0x80, 0xc1, 0x88, 0xc1,
  0x03, 0x80, 0x20, 0x18, 0x34, 0xa3, 0xb0, 0x45, 0x8f, 0x10, 0x54, 0xd5,
  0x1e, 0xec, 0x41, 0x18, 0x54, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x46, 0x48, 0xf2, 0x31, 0x42,
  0x92, 0x8f, 0x11, 0x92, 0x7c, 0x8c, 0x90, 0xe4, 0x33, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x16, 0x2a, 0xa0, 0xc1, 0x25, 0x06, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc3, 0x14, 0x1f, 0x1b,
  0xa6, 0xf8, 0xd8, 0x30, 0xc5, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c,
  0x1e, 0x59, 0x60, 0x83, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x83, 0x48, 0x16, 0xd6, 0x20, 0xb0, 0x22, 0x90, 0x8f, 0x15,
  0x82, 0x7c, 0xac, 0x18, 0xe4, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06,
  0xcf, 0x2d, 0xc4, 0x81, 0xd7, 0x71, 0x5e, 0xc7, 0x8d, 0x18, 0x18, 0x00,
  0x08, 0x82, 0x41, 0x74, 0x0b, 0x70, 0x10, 0x58, 0x00, 0x06, 0xf2, 0x31,
  0x01, 0x0c, 0xe4, 0x63, 0x03, 0x18, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xac, 0x5c, 0xc8, 0x03, 0x34, 0xd0, 0x83, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x03, 0xab, 0x17, 0xfa, 0x80, 0x0d, 0x60, 0x61, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0xc0, 0x0a, 0x87, 0x50, 0x80, 0x03, 0x5c, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41,
  0x30, 0xb0, 0xca, 0xa1, 0x14, 0xe8, 0x00, 0x1c, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10,
  0x0c, 0xac, 0x74, 0x48, 0x05, 0x3c, 0x18, 0x87, 0xd1, 0x84, 0x00, 0x18,
  0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x03, 0xab, 0x1d, 0x5a, 0x81, 0x0f, 0xca, 0x61, 0x34, 0x21, 0x00, 0x46,
  0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0xac, 0x14, 0xac, 0xf8, 0x98, 0x29,
  0x58, 0xf1, 0xb1, 0x53, 0x80, 0xe2, 0x63, 0xa8, 0x00, 0xc5, 0xc7, 0x52,
  0x41, 0x89, 0x8f, 0xa9, 0x82, 0x12, 0x1f, 0x0b, 0x83, 0x4e, 0x3e, 0xc6,
  0x0a, 0x41, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0xc3, 0x07,
  0x5c, 0x40, 0xc4, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x03, 0x2c,
  0x1f, 0x72, 0x01, 0x11, 0x83, 0xc0, 0xca, 0x20, 0x93, 0x8f, 0xc1, 0x42,
  0x10, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc0, 0xf8, 0x81, 0x17,
  0x14, 0x33, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0xeb, 0x87,
  0x5e, 0x50, 0xcc, 0x20, 0xb0, 0x34, 0xa8, 0xe4, 0x63, 0xb4, 0x10, 0xc4,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x30, 0x90, 0x00, 0x07, 0x46,
  0x0d, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc0, 0x42, 0x22, 0x1c,
  0x18, 0x35, 0x08, 0x86, 0x23, 0x12, 0x5c, 0x20, 0xbe, 0xe1, 0x08, 0x23,
  0x17, 0x88, 0x6f, 0x38, 0x62, 0xd0, 0x05, 0xe2, 0x9b, 0x6e, 0xd8, 0x85,
  0x5e, 0x18, 0xa6, 0x1b, 0x78, 0xc1, 0x17, 0x86, 0xe9, 0x86, 0x5e, 0xf8,
  0x85, 0xc1, 0x86, 0x47, 0x3e, 0x36, 0x30, 0xf2, 0xb1, 0x21, 0x91, 0x8f,
  0x0d, 0x6e, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc0, 0x58,
  0x82, 0x1d, 0x86, 0x33, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00,
  0x6b, 0x89, 0x76, 0x18, 0xc0, 0x20, 0x30, 0x03, 0x0e, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0xd8, 0x4b, 0xbc, 0x83, 0x91, 0x06, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x60, 0x30, 0x01, 0x0f, 0x86, 0x18,
  0x04, 0x96, 0xc8, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00,
  0x93, 0x09, 0x79, 0x48, 0xd6, 0x20, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x03, 0x6c, 0x26, 0xe6, 0x21, 0x21, 0x83, 0x60, 0xc4, 0xe0, 0x00, 0x40,
  0x10, 0x0c, 0xac, 0x9a, 0xa8, 0x07, 0x72, 0x70, 0x89, 0xd1, 0x84, 0x00,
  0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x61, 0x91, 0x8f, 0x0d,
  0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x16, 0x4f, 0xf0, 0xc3, 0x3a, 0xc4, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8, 0x31, 0xc0, 0xc7, 0x8e, 0x01, 0x3e,
  0x76, 0x0c, 0xf0, 0xb1, 0x5f, 0x18, 0xe4, 0x63, 0xbf, 0x30, 0xc8, 0xc7,
  0x7e, 0x61, 0x90, 0x8f, 0xe9, 0x43, 0x2d, 0xc4, 0xc7, 0xf6, 0xa1, 0x16,
  0xe2, 0x63, 0xfc, 0x50, 0x0b, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04,
  0x83, 0x87, 0x2d, 0x4c, 0x62, 0x10, 0x82, 0x59, 0x90, 0x85, 0x58, 0xb0,
  0x40, 0x24, 0xe4, 0x63, 0x41, 0x2d, 0xc8, 0xc7, 0x84, 0x5a, 0x90, 0x8f,
  0x0d, 0xb5, 0x20, 0x1f, 0x43, 0x86, 0xf8, 0x18, 0x32, 0xc4, 0xc7, 0x90,
  0x21, 0x3e, 0x23, 0x06, 0x0f, 0x00, 0x82, 0x60, 0xd0, 0xd4, 0x45, 0x4b,
  0x90, 0x84, 0x48, 0x0c, 0x42, 0x70, 0x12, 0x33, 0x31, 0x13, 0x33, 0x71,
  0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0x46, 0xbc, 0x83, 0x7c, 0x8c, 0x80, 0x07, 0xf9, 0x18,
  0x11, 0x0f, 0xf2, 0x31, 0x42, 0x1e, 0xe4, 0x33, 0x62, 0xb0, 0x00, 0x20,
  0x08, 0x06, 0x4f, 0x5f, 0xdc, 0x44, 0x3a, 0xa0, 0xc3, 0x39, 0x90, 0xc3,
  0x38, 0x88, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x58, 0x7b, 0xb1,
  0x13, 0x2a, 0x81, 0x17, 0xa3, 0x09, 0x41, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xd1, 0x5f, 0xdc, 0xc5, 0x60, 0x35, 0x11, 0xc4, 0x67, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x26, 0xd0, 0xc0, 0x89, 0x80, 0x26, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0x20, 0x12, 0x8d, 0xb1, 0x08, 0x2c, 0x28,
  0xe4, 0x33, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x11, 0x69, 0x98, 0x45,
  0x30, 0x9a, 0x80, 0x00, 0x16, 0x08, 0xf2, 0xb1, 0x47, 0x0c, 0xe2, 0x63,
  0x8f, 0x18, 0xc4, 0xc7, 0x1e, 0x31, 0x88, 0x8f, 0x11, 0x83, 0x7c, 0xac,
  0x18, 0xe4, 0x63, 0xc6, 0x20, 0x1f, 0x1b, 0xd0, 0x00, 0x3e, 0x36, 0xa0,
  0x01, 0x7c, 0x6c, 0x40, 0x03, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0x81, 0xe5, 0x1a, 0x6e, 0xd1, 0x13, 0xaa, 0x31, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x36, 0x64, 0xf2, 0xb1, 0x41, 0x93,
  0x8f, 0x0d, 0x9b, 0x7c, 0x4c, 0x19, 0xe0, 0x63, 0xca, 0x00, 0x1f, 0x53,
  0x06, 0xf8, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x85, 0x1b, 0x78,
  0x71, 0x16, 0x7d, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0x36, 0xd4, 0x84, 0x7c, 0x6c, 0xb0, 0x09, 0xf9, 0xd8, 0x70,
  0x13, 0xf2, 0xb1, 0x41, 0x89, 0x8f, 0x0d, 0x4a, 0x7c, 0x6c, 0x50, 0xe2,
  0x63, 0x83, 0x59, 0xc8, 0xc7, 0x86, 0xb3, 0x90, 0x8f, 0x0d, 0x68, 0x21,
  0x1f, 0x1b, 0x20, 0xf8, 0xd8, 0x00, 0xc1, 0xc7, 0x06, 0x08, 0x3e, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xb4, 0xc7, 0x6f, 0x90, 0x07, 0x79,
  0xe4, 0xc6, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0x7b, 0xfc,
  0x06, 0x79, 0x90, 0x87, 0x6b, 0x08, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0x80, 0xb4, 0xc7, 0x6f, 0x90, 0x07, 0x79, 0xe0, 0x46, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x48, 0x7b, 0xfc, 0x06, 0x79, 0x90, 0x87, 0x6d,
  0x84, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x8c, 0xd0, 0x74, 0x5c, 0xdd, 0x49, 0x6d, 0x0c,
  0x44, 0x37, 0x6f, 0x3c, 0x05, 0xb9, 0xd0, 0x2a, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xed, 0x58,
  0xcd, 0x6f, 0x1b, 0x55, 0x10, 0x9f, 0xf7, 0xe1, 0xf5, 0xdb, 0xaf, 0xb7,
  0xb6, 0xb3, 0x5e, 0x36, 0xae, 0xe3, 0x38, 0xa1, 0x31, 0xa1, 0x04, 0x48,
  0x11, 0x42, 0x45, 0x6a, 0x53, 0x90, 0xd2, 0x00, 0x4a, 0x4b, 0x03, 0x51,
  0xf6, 0x80, 0x48, 0x05, 0x42, 0x51, 0x3e, 0x1a, 0x45, 0x15, 0x20, 0xc4,
  0x21, 0x32, 0x46, 0x8a, 0x04, 0x88, 0x1e, 0xd2, 0xbf, 0x80, 0x1c, 0xcc,
  0x01, 0x04, 0x52, 0x04, 0x08, 0x38, 0x6d, 0xc2, 0x89, 0x77, 0x47, 0x56,
  0x6f, 0x5c, 0x38, 0x71, 0x02, 0xaa, 0x1c, 0x2a, 0x84, 0x12, 0x66, 0x77,
  0x6d, 0xe2, 0x34, 0x8d, 0x12, 0x38, 0x59, 0xc8, 0x23, 0xfd, 0x34, 0x3b,
  0xf3, 0x7e, 0xf3, 0xe6, 0xcd, 0xce, 0xca, 0xd6, 0x9b, 0x89, 0xe9, 0xe9,
  0x2b, 0x84, 0x00, 0x08, 0x17, 0x62, 0xd1, 0x12, 0x05, 0xbf, 0x85, 0x5f,
  0xfe, 0x7c, 0x12, 0x6c, 0xfe, 0x4b, 0x7e, 0x0b, 0xb4, 0x19, 0x37, 0x0e,
  0xff, 0x4d, 0x5a, 0xfb, 0xdc, 0x95, 0x89, 0xbd, 0xcd, 0xda, 0x57, 0xe5,
  0x21, 0xfe, 0xf7, 0xb9, 0x44, 0x17, 0x7b, 0x12, 0x9d, 0x6a, 0x81, 0x50,
  0xd8, 0x6e, 0xe3, 0xf9, 0xb0, 0xc1, 0x48, 0x9b, 0x5d, 0x6b, 0xf2, 0x23,
  0xdf, 0x28, 0x62, 0xb3, 0x69, 0x6b, 0x10, 0x27, 0xa4, 0x1a, 0x71, 0x70,
  0x89, 0x50, 0x8d, 0xa6, 0xb1, 0x24, 0x4a, 0x35, 0xe6, 0xe0, 0x02, 0xa3,
  0xf0, 0x3f, 0x17, 0x8e, 0x28, 0xb6, 0x3d, 0x47, 0x05, 0x67, 0x10, 0x4e,
  0x1b, 0x27, 0xfa, 0x96, 0x7e, 0x8c, 0x9f, 0x6a, 0x5b, 0xed, 0x58, 0xf7,
  0xe1, 0xee, 0xfd, 0x77, 0x3d, 0xc8, 0x23, 0xc8, 0x33, 0x4f, 0xc0, 0x63,
  0x11, 0xcf, 0x39, 0x21, 0x2f, 0x75, 0x34, 0xcf, 0xec, 0x87, 0x6b, 0xdc,
  0xa4, 0xd7, 0x9c, 0x22, 0x9e, 0x8f, 0xdc, 0x8f, 0xb7, 0x78, 0xdb, 0xec,
  0xa7, 0xb8, 0xb4, 0x78, 0x1b, 0x79, 0x70, 0x34, 0x6f, 0xa1, 0xc9, 0x5b,
  0x38, 0x86, 0xb7, 0xd4, 0xe4, 0x2d, 0x1d, 0xc3, 0xbb, 0xde, 0xe4, 0x5d,
  0x3f, 0x86, 0x77, 0xb0, 0x5e, 0x27, 0x7e, 0x2f, 0xfc, 0x50, 0xc5, 0x7b,
  0x28, 0xd0, 0x95, 0x8e, 0x92, 0x6e, 0x4f, 0x3a, 0x4f, 0xba, 0x3d, 0xe9,
  0x3c, 0xe9, 0xf6, 0xa4, 0xf3, 0xa4, 0xdb, 0x93, 0xce, 0x93, 0x6e, 0x4f,
  0x3a, 0x4f, 0xba, 0x3d, 0xe9, 0x5c, 0x99, 0x9b, 0xaf, 0x35, 0xd8, 0x1b,
  0x7b, 0x6c, 0x73, 0xfc, 0xd3, 0x99, 0x99, 0x5b, 0xb5, 0xc6, 0x2f, 0x3f,
  0xed, 0xb2, 0x3f, 0x96, 0x7f, 0x9d, 0x61, 0xb0, 0xb1, 0x55, 0xe5, 0xdf,
  0x84, 0x55, 0x63, 0x37, 0xd4, 0xd9, 0x7a, 0x58, 0x63, 0x1f, 0x21, 0x6e,
  0x85, 0x26, 0xfb, 0x16, 0xf5, 0xc7, 0x21, 0x07, 0x6b, 0x07, 0xc3, 0xff,
  0x14, 0x9a, 0x88, 0xb5, 0x64, 0x7f, 0x85, 0x29, 0x23, 0xf1, 0xe1, 0xad,
  0x5a, 0x01, 0xb1, 0x94, 0xbd, 0x77, 0xf6, 0xc3, 0xe8, 0x76, 0x64, 0xb1,
  0xcd, 0xf0, 0x07, 0xf6, 0x55, 0x48, 0x40, 0x57, 0x84, 0xd8, 0x6a, 0x8f,
  0x7d, 0x1d, 0x7e, 0x71, 0x95, 0x64, 0x41, 0xf7, 0x95, 0x2f, 0x46, 0x76,
  0x36, 0xa2, 0x18, 0x51, 0x54, 0x60, 0x94, 0x15, 0xa4, 0xce, 0x2b, 0xa2,
  0xf7, 0x2a, 0xe0, 0x23, 0x8a, 0x88, 0x3e, 0x45, 0x8c, 0x01, 0xf5, 0xde,
  0xf6, 0xcd, 0x2d, 0xe1, 0xd4, 0x7e, 0xa7, 0x74, 0x1b, 0x34, 0xdb, 0x95,
  0x24, 0x75, 0x41, 0x81, 0x36, 0xaa, 0x08, 0x7f, 0x54, 0xf9, 0x30, 0xba,
  0x53, 0xc6, 0xf8, 0xb4, 0xe3, 0x06, 0x3e, 0x1f, 0xdd, 0x79, 0x0d, 0x9f,
  0x89, 0x76, 0x56, 0x81, 0x35, 0xa5, 0xc0, 0x3e, 0xa7, 0x44, 0xd6, 0x0d,
  0x06, 0x4a, 0x39, 0x51, 0xf6, 0x3c, 0x31, 0xe8, 0xfb, 0x02, 0xe4, 0x79,
  0x65, 0xcc, 0x9e, 0xa9, 0xea, 0x3d, 0x05, 0x09, 0xce, 0xab, 0x0a, 0xd2,
  0xcf, 0x2b, 0x22, 0x2f, 0x28, 0x62, 0x3f, 0xad, 0xcc, 0x07, 0x0a, 0x41,
  0x8d, 0x7d, 0x17, 0xfa, 0xe2, 0xf4, 0x4e, 0x26, 0xda, 0xc7, 0x7a, 0x49,
  0xe5, 0x1d, 0x29, 0xad, 0xde, 0x42, 0x90, 0xb7, 0x41, 0xe6, 0xb3, 0x19,
  0x49, 0x9c, 0xd9, 0xe4, 0x3c, 0xd2, 0x95, 0xf6, 0xac, 0x55, 0xb5, 0x64,
  0x41, 0x66, 0x64, 0x45, 0x92, 0xf4, 0x0b, 0xca, 0x80, 0xc9, 0x86, 0x0e,
  0x67, 0xea, 0x36, 0x6a, 0x1b, 0x9e, 0xaa, 0xf7, 0xa0, 0xce, 0xc2, 0x8b,
  0x75, 0x03, 0x1e, 0x69, 0x18, 0x19, 0x5a, 0xd6, 0xed, 0x9c, 0x34, 0xed,
  0x11, 0x69, 0xd9, 0x96, 0xb4, 0xd1, 0x27, 0xd1, 0x57, 0x73, 0xc5, 0xaa,
  0x4e, 0x7c, 0xd9, 0x83, 0x76, 0x0e, 0xed, 0x53, 0x2c, 0x79, 0x9f, 0x3e,
  0x1d, 0x8e, 0xb5, 0x09, 0xa4, 0x71, 0x07, 0x3e, 0x23, 0xb5, 0x82, 0x58,
  0x35, 0xf3, 0xae, 0xcc, 0xb4, 0xec, 0x8a, 0x58, 0xcd, 0xbb, 0x83, 0x32,
  0x73, 0xca, 0x93, 0xae, 0x5b, 0x96, 0x9e, 0xeb, 0xca, 0x5e, 0x6f, 0x30,
  0xf0, 0xbd, 0x72, 0x50, 0xf0, 0xdc, 0xe0, 0xc6, 0xc5, 0x9b, 0x5b, 0xbc,
  0x5f, 0x48, 0x07, 0xcf, 0xe0, 0x39, 0x4f, 0xd4, 0x59, 0x9f, 0x26, 0x65,
  0x33, 0x96, 0x3e, 0xcc, 0xe5, 0x1e, 0x1d, 0xae, 0x02, 0x6c, 0x5f, 0x74,
  0x30, 0xaf, 0x96, 0xa5, 0xc3, 0xa9, 0xc7, 0x0d, 0x29, 0x1f, 0xaa, 0x48,
  0x40, 0xbe, 0x43, 0x2a, 0x75, 0x3d, 0xd2, 0xce, 0x2b, 0xf5, 0x28, 0xde,
  0xc9, 0x16, 0xea, 0xc5, 0x4a, 0x39, 0xe8, 0xab, 0x0c, 0x06, 0xa5, 0x8a,
  0x1b, 0xd8, 0xf0, 0x5c, 0x43, 0x27, 0x63, 0xdc, 0x84, 0x4b, 0xb1, 0x96,
  0x30, 0x11, 0xeb, 0xa8, 0x7e, 0xea, 0x16, 0xb0, 0xe3, 0x93, 0x0d, 0x28,
  0xe7, 0x80, 0x90, 0xcf, 0x1b, 0x36, 0xde, 0xd7, 0xb2, 0x68, 0x93, 0x41,
  0x0f, 0xf2, 0x30, 0x1e, 0xf3, 0x78, 0x5e, 0x48, 0xf6, 0x60, 0x09, 0x6b,
  0x7e, 0xb6, 0x61, 0xb2, 0x97, 0x39, 0x1d, 0xf0, 0xa4, 0x64, 0xc3, 0x63,
  0xd5, 0x27, 0x77, 0x3f, 0x88, 0xde, 0xad, 0x8f, 0xbd, 0xee, 0x81, 0x25,
  0xf0, 0x1c, 0x3f, 0xd0, 0xb2, 0x08, 0xca, 0x1b, 0x77, 0x7c, 0x0a, 0x35,
  0xcb, 0x2a, 0x6b, 0x57, 0xad, 0xea, 0x80, 0x65, 0x49, 0x6d, 0xd2, 0xaa,
  0x96, 0x51, 0x47, 0x75, 0xa6, 0xa3, 0xbc, 0x66, 0x6e, 0x2d, 0x3a, 0x3b,
  0x98, 0x8f, 0xad, 0x91, 0x28, 0x9f, 0x39, 0xb6, 0xc6, 0x4c, 0x2e, 0x35,
  0x47, 0x04, 0x1a, 0xf1, 0x02, 0x8d, 0x95, 0x02, 0x83, 0x8b, 0x40, 0x70,
  0x2f, 0xd0, 0x79, 0x29, 0x60, 0xc8, 0xa9, 0x18, 0x49, 0xcc, 0x69, 0x23,
  0x89, 0x19, 0x32, 0x30, 0x66, 0x48, 0x04, 0x30, 0xe4, 0x05, 0x64, 0xa8,
  0x14, 0x1c, 0x7d, 0x3f, 0x7e, 0x1f, 0xfd, 0x9f, 0x74, 0x04, 0x5a, 0xe3,
  0x9f, 0xd6, 0xb5, 0x58, 0x20, 0xee, 0xf5, 0xe9, 0xe4, 0xa0, 0x2f, 0x82,
  0x41, 0x0f, 0xfb, 0x4c, 0xb6, 0x1f, 0xd3, 0x1a, 0xe4, 0x58, 0xbc, 0x6d,
  0x43, 0x48, 0x66, 0x1e, 0x02, 0x93, 0x10, 0x76, 0xf0, 0x77, 0x84, 0xb7,
  0x25, 0x21, 0x2d, 0x1e, 0x26, 0x21, 0xec, 0xe0, 0x59, 0x38, 0x26, 0xa1,
  0xf7, 0xdc, 0xe1, 0x79, 0x9c, 0x24, 0x91, 0xfd, 0xff, 0x8a, 0x22, 0x4c,
  0x4d, 0x5f, 0x5a, 0x79, 0xe7, 0xca, 0xeb, 0x37, 0xa6, 0x16, 0xdf, 0x9d,
  0x5b, 0xbe, 0xbc, 0x38, 0xbf, 0xf0, 0xf6, 0xe2, 0xca, 0xfc, 0xc4, 0x9b,
  0x73, 0x6f, 0xad, 0xcc, 0x2d, 0xb7, 0xe6, 0x60, 0xaa, 0x39, 0x97, 0x7a,
  0x06, 0x91, 0x46, 0x9c, 0x8b, 0x73, 0xed, 0x8f, 0xa1, 0x22, 0x3f, 0x61,
  0xfb, 0x73, 0xb1, 0xcb, 0xf1, 0x7a, 0xea, 0x9f, 0xf3, 0xac, 0x93, 0x64,
  0x3d, 0xb1, 0x01, 0xfe, 0x06, 0xfe, 0x6c, 0xb0, 0xb4, 0x00, 0x00, 0x00,
  0x65, 0x67, 0x03, 0xb1, 0xb0, 0x44, 0xa5, 0x55, 0x55, 0x91, 0xe3, 0x69,
  0xf1, 0x6c, 0xe9, 0x55
};
