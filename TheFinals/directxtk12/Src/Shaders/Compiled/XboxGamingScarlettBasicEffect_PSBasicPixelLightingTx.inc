#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_PSBasicPixelLightingTx.pdb
; shader hash: db1eae74fb41dfc23c5b00b1b77f9f5a
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 4
; SigOutputElements: 1
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 4
; SigOutputVectors[0]: 1
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: PSBasicPixelLightingTx
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   sampler      NA          NA      S0             s0     1
;                                   texture     f32          2d      T0             t0     1
;
;
; ViewId state:
;
; Number of inputs: 16, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15 }
;   output 1 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 13, 15 }
;   output 2 depends on inputs: { 0, 1, 4, 5, 6, 7, 8, 9, 10, 14, 15 }
;   output 3 depends on inputs: { 0, 1, 15 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }
%struct.SamplerState = type { i32 }

define void @PSBasicPixelLightingTx() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 0, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 3, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %1, %dx.types.Handle %2, float %15, float %16, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %18 = extractvalue %dx.types.ResRet.f32 %17, 0
  %19 = extractvalue %dx.types.ResRet.f32 %17, 1
  %20 = extractvalue %dx.types.ResRet.f32 %17, 2
  %21 = extractvalue %dx.types.ResRet.f32 %17, 3
  %22 = fmul fast float %18, %4
  %23 = fmul fast float %19, %5
  %24 = fmul fast float %20, %6
  %25 = fmul fast float %21, %7
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %28 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %29 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %30 = fsub fast float %27, %11
  %31 = fsub fast float %28, %12
  %32 = fsub fast float %29, %13
  %33 = call float @dx.op.dot3.f32(i32 55, float %30, float %31, float %32, float %30, float %31, float %32)  ; Dot3(ax,ay,az,bx,by,bz)
  %34 = call float @dx.op.unary.f32(i32 25, float %33)  ; Rsqrt(value)
  %35 = fmul fast float %30, %34
  %36 = fmul fast float %31, %34
  %37 = fmul fast float %32, %34
  %38 = call float @dx.op.dot3.f32(i32 55, float %8, float %9, float %10, float %8, float %9, float %10)  ; Dot3(ax,ay,az,bx,by,bz)
  %39 = call float @dx.op.unary.f32(i32 25, float %38)  ; Rsqrt(value)
  %40 = fmul fast float %39, %8
  %41 = fmul fast float %39, %9
  %42 = fmul fast float %39, %10
  %43 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.f32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.f32 %43, 1
  %46 = extractvalue %dx.types.CBufRet.f32 %43, 2
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.f32 %47, 1
  %50 = extractvalue %dx.types.CBufRet.f32 %47, 2
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %55 = fsub fast float %35, %44
  %56 = fsub fast float %36, %45
  %57 = fsub fast float %37, %46
  %58 = call float @dx.op.dot3.f32(i32 55, float %55, float %56, float %57, float %55, float %56, float %57)  ; Dot3(ax,ay,az,bx,by,bz)
  %59 = call float @dx.op.unary.f32(i32 25, float %58)  ; Rsqrt(value)
  %60 = fmul fast float %59, %56
  %61 = fmul fast float %59, %57
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = fsub fast float %35, %63
  %75 = fsub fast float %36, %64
  %76 = fsub fast float %37, %65
  %77 = call float @dx.op.dot3.f32(i32 55, float %74, float %75, float %76, float %74, float %75, float %76)  ; Dot3(ax,ay,az,bx,by,bz)
  %78 = call float @dx.op.unary.f32(i32 25, float %77)  ; Rsqrt(value)
  %79 = fmul fast float %78, %75
  %80 = fmul fast float %78, %76
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = fsub fast float %35, %82
  %94 = fsub fast float %36, %83
  %95 = fsub fast float %37, %84
  %96 = call float @dx.op.dot3.f32(i32 55, float %93, float %94, float %95, float %93, float %94, float %95)  ; Dot3(ax,ay,az,bx,by,bz)
  %97 = call float @dx.op.unary.f32(i32 25, float %96)  ; Rsqrt(value)
  %98 = fmul fast float %97, %94
  %99 = fmul fast float %97, %95
  %100 = fsub fast float -0.000000e+00, %45
  %101 = fsub fast float -0.000000e+00, %46
  %102 = fsub fast float -0.000000e+00, %64
  %103 = fsub fast float -0.000000e+00, %65
  %104 = fsub fast float -0.000000e+00, %83
  %105 = fsub fast float -0.000000e+00, %84
  %106 = fmul fast float %40, %44
  %107 = fsub fast float -0.000000e+00, %106
  %108 = call float @dx.op.tertiary.f32(i32 46, float %100, float %41, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %101, float %42, float %108)  ; FMad(a,b,c)
  %110 = fmul fast float %40, %63
  %111 = fsub fast float -0.000000e+00, %110
  %112 = call float @dx.op.tertiary.f32(i32 46, float %102, float %41, float %111)  ; FMad(a,b,c)
  %113 = call float @dx.op.tertiary.f32(i32 46, float %103, float %42, float %112)  ; FMad(a,b,c)
  %114 = fmul fast float %40, %82
  %115 = fsub fast float -0.000000e+00, %114
  %116 = call float @dx.op.tertiary.f32(i32 46, float %104, float %41, float %115)  ; FMad(a,b,c)
  %117 = call float @dx.op.tertiary.f32(i32 46, float %105, float %42, float %116)  ; FMad(a,b,c)
  %118 = fmul fast float %55, %40
  %119 = fmul fast float %118, %59
  %120 = call float @dx.op.tertiary.f32(i32 46, float %60, float %41, float %119)  ; FMad(a,b,c)
  %121 = call float @dx.op.tertiary.f32(i32 46, float %61, float %42, float %120)  ; FMad(a,b,c)
  %122 = fmul fast float %74, %40
  %123 = fmul fast float %122, %78
  %124 = call float @dx.op.tertiary.f32(i32 46, float %79, float %41, float %123)  ; FMad(a,b,c)
  %125 = call float @dx.op.tertiary.f32(i32 46, float %80, float %42, float %124)  ; FMad(a,b,c)
  %126 = fmul fast float %93, %40
  %127 = fmul fast float %126, %97
  %128 = call float @dx.op.tertiary.f32(i32 46, float %98, float %41, float %127)  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %99, float %42, float %128)  ; FMad(a,b,c)
  %130 = fcmp fast olt float %109, 0.000000e+00
  %131 = fcmp fast olt float %113, 0.000000e+00
  %132 = fcmp fast olt float %117, 0.000000e+00
  %133 = select i1 %130, float 0.000000e+00, float 1.000000e+00
  %134 = select i1 %131, float 0.000000e+00, float 1.000000e+00
  %135 = select i1 %132, float 0.000000e+00, float 1.000000e+00
  %136 = fmul fast float %133, %109
  %137 = fmul fast float %134, %113
  %138 = fmul fast float %135, %117
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 3
  %141 = call float @dx.op.binary.f32(i32 35, float %121, float 0.000000e+00)  ; FMax(a,b)
  %142 = call float @dx.op.binary.f32(i32 35, float %125, float 0.000000e+00)  ; FMax(a,b)
  %143 = call float @dx.op.binary.f32(i32 35, float %129, float 0.000000e+00)  ; FMax(a,b)
  %144 = fmul fast float %141, %133
  %145 = fmul fast float %142, %134
  %146 = fmul fast float %143, %135
  %147 = call float @dx.op.unary.f32(i32 23, float %144)  ; Log(value)
  %148 = call float @dx.op.unary.f32(i32 23, float %145)  ; Log(value)
  %149 = call float @dx.op.unary.f32(i32 23, float %146)  ; Log(value)
  %150 = fmul fast float %147, %140
  %151 = fmul fast float %148, %140
  %152 = fmul fast float %149, %140
  %153 = call float @dx.op.unary.f32(i32 21, float %150)  ; Exp(value)
  %154 = call float @dx.op.unary.f32(i32 21, float %151)  ; Exp(value)
  %155 = call float @dx.op.unary.f32(i32 21, float %152)  ; Exp(value)
  %156 = fmul fast float %153, %109
  %157 = fmul fast float %154, %113
  %158 = fmul fast float %155, %117
  %159 = fmul fast float %136, %48
  %160 = call float @dx.op.tertiary.f32(i32 46, float %137, float %67, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %138, float %86, float %160)  ; FMad(a,b,c)
  %162 = fmul fast float %136, %49
  %163 = call float @dx.op.tertiary.f32(i32 46, float %137, float %68, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %138, float %87, float %163)  ; FMad(a,b,c)
  %165 = fmul fast float %136, %50
  %166 = call float @dx.op.tertiary.f32(i32 46, float %137, float %69, float %165)  ; FMad(a,b,c)
  %167 = call float @dx.op.tertiary.f32(i32 46, float %138, float %88, float %166)  ; FMad(a,b,c)
  %168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.f32 %168, 0
  %170 = extractvalue %dx.types.CBufRet.f32 %168, 1
  %171 = extractvalue %dx.types.CBufRet.f32 %168, 2
  %172 = fmul fast float %169, %161
  %173 = fmul fast float %170, %164
  %174 = fmul fast float %171, %167
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %179 = fadd fast float %172, %176
  %180 = fadd fast float %173, %177
  %181 = fadd fast float %174, %178
  %182 = fmul fast float %156, %52
  %183 = call float @dx.op.tertiary.f32(i32 46, float %157, float %71, float %182)  ; FMad(a,b,c)
  %184 = call float @dx.op.tertiary.f32(i32 46, float %158, float %90, float %183)  ; FMad(a,b,c)
  %185 = fmul fast float %156, %53
  %186 = call float @dx.op.tertiary.f32(i32 46, float %157, float %72, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %158, float %91, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %156, %54
  %189 = call float @dx.op.tertiary.f32(i32 46, float %157, float %73, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %158, float %92, float %189)  ; FMad(a,b,c)
  %191 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %192 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %193 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %194 = fmul fast float %22, %179
  %195 = fmul fast float %23, %180
  %196 = fmul fast float %24, %181
  %197 = fmul fast float %184, %25
  %198 = fmul fast float %197, %191
  %199 = fmul fast float %187, %25
  %200 = fmul fast float %199, %192
  %201 = fmul fast float %190, %25
  %202 = fmul fast float %201, %193
  %203 = fadd fast float %198, %194
  %204 = fadd fast float %200, %195
  %205 = fadd fast float %202, %196
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %3, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 2
  %210 = fmul fast float %207, %25
  %211 = fmul fast float %208, %25
  %212 = fmul fast float %209, %25
  %213 = fsub fast float %210, %203
  %214 = fsub fast float %211, %204
  %215 = fsub fast float %212, %205
  %216 = fmul fast float %213, %14
  %217 = fmul fast float %214, %14
  %218 = fmul fast float %215, %14
  %219 = fadd fast float %216, %203
  %220 = fadd fast float %217, %204
  %221 = fadd fast float %218, %205
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %219)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %220)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %221)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %25)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"ps", i32 6, i32 0}
!5 = !{!6, null, !9, !11}
!6 = !{!7}
!7 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !8}
!8 = !{i32 0, i32 9}
!9 = !{!10}
!10 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[18 x i32] [i32 16, i32 4, i32 15, i32 15, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 1, i32 2, i32 4, i32 15]}
!14 = !{void ()* @PSBasicPixelLightingTx, !"PSBasicPixelLightingTx", !15, !5, null}
!15 = !{!16, !27, null}
!16 = !{!17, !20, !23, !26}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, !19}
!18 = !{i32 0}
!19 = !{i32 3, i32 3}
!20 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !22}
!21 = !{i32 1}
!22 = !{i32 3, i32 15}
!23 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 3, i32 2, i8 0, !25}
!24 = !{i32 2}
!25 = !{i32 3, i32 7}
!26 = !{i32 3, !"COLOR", i8 9, i8 0, !18, i8 2, i32 1, i8 4, i32 3, i8 0, !22}
!27 = !{!28}
!28 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !22}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS: null
; PS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: PS
;   dx_shader_stage: PIXEL
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 24
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1024
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_nop_xbox_data 0x74ae1edb, 0xc2df41fb                // 000000000000: D5801EDB 03FEE9AE C2DF41FB
;   v_nop_xbox_data 0xb1005b3c, 0x5a9f7fb7                // 00000000000C: D5805B3C 03FF6300 5A9F7FB7
;   s_inst_prefetch  0x0003                               // 000000000018: BFA00003
;   s_mov_b64     s[2:3], exec                            // 00000000001C: BE82047E
;   s_wqm_b64     exec, exec                              // 000000000020: BEFE0A7E
;   s_mov_b32     s4, s11                                 // 000000000024: BE84030B
;   s_mov_b32     s11, 0                                  // 000000000028: BE8B0380
;   s_mov_b32     s5, 0                                   // 00000000002C: BE850380
;   s_load_dwordx8  s[32:39], s[10:11], null              // 000000000030: F40C0805 FA000000
;   s_load_dwordx4  s[60:63], s[4:5], null                // 000000000038: F4080F02 FA000000
;   s_mov_b32     m0, s12                                 // 000000000040: BEFC030C
;   s_or_b32      s41, s9, lit(0x00100000)                // 000000000044: 8829FF09 00100000
;   v_interp_p1_f32  v4, v0, attr3.x                      // 00000000004C: C8100C00
;   v_interp_p1_f32  v5, v0, attr3.y                      // 000000000050: C8140D00
;   v_interp_p1_f32  v6, v0, attr3.z                      // 000000000054: C8180E00
;   v_interp_p1_f32  v7, v0, attr3.w                      // 000000000058: C81C0F00
;   v_interp_p1_f32  v19, v0, attr2.x                     // 00000000005C: C84C0800
;   v_interp_p1_f32  v3, v0, attr2.y                      // 000000000060: C80C0900
;   v_interp_p1_f32  v8, v0, attr2.z                      // 000000000064: C8200A00
;   v_interp_p1_f32  v15, v0, attr1.x                     // 000000000068: C83C0400
;   v_interp_p1_f32  v10, v0, attr1.y                     // 00000000006C: C8280500
;   v_interp_p1_f32  v11, v0, attr1.z                     // 000000000070: C82C0600
;   v_interp_p1_f32  v12, v0, attr1.w                     // 000000000074: C8300700
;   v_interp_p1_f32  v21, v0, attr0.x                     // 000000000078: C8540000
;   v_interp_p1_f32  v22, v0, attr0.y                     // 00000000007C: C8580100
;   v_interp_p2_f32  v4, v1, attr3.x                      // 000000000080: C8110C01
;   v_interp_p2_f32  v5, v1, attr3.y                      // 000000000084: C8150D01
;   v_interp_p2_f32  v6, v1, attr3.z                      // 000000000088: C8190E01
;   v_interp_p2_f32  v7, v1, attr3.w                      // 00000000008C: C81D0F01
;   v_interp_p2_f32  v19, v1, attr2.x                     // 000000000090: C84D0801
;   v_interp_p2_f32  v3, v1, attr2.y                      // 000000000094: C80D0901
;   v_interp_p2_f32  v8, v1, attr2.z                      // 000000000098: C8210A01
;   v_interp_p2_f32  v15, v1, attr1.x                     // 00000000009C: C83D0401
;   v_interp_p2_f32  v10, v1, attr1.y                     // 0000000000A0: C8290501
;   v_interp_p2_f32  v11, v1, attr1.z                     // 0000000000A4: C82D0601
;   v_interp_p2_f32  v12, v1, attr1.w                     // 0000000000A8: C8310701
;   v_interp_p2_f32  v21, v1, attr0.x                     // 0000000000AC: C8550001
;   v_interp_p2_f32  v22, v1, attr0.y                     // 0000000000B0: C8590101
;   s_mov_b32     s40, s8                                 // 0000000000B4: BEA80308
;   s_mov_b32     s42, -1                                 // 0000000000B8: BEAA03C1
;   s_mov_b32     s43, lit(0x11014fac)                    // 0000000000BC: BEAB03FF 11014FAC
;   s_and_b64     exec, exec, s[2:3]                      // 0000000000C4: 87FE027E
;   s_buffer_load_dwordx8  s[44:51], s[40:43], 0x0000c0   // 0000000000C8: F42C0B14 FA0000C0
;   s_buffer_load_dwordx16  s[0:15], s[40:43], null       // 0000000000D0: F4300014 FA000000
;   s_buffer_load_dwordx16  s[16:31], s[40:43], 0x000040  // 0000000000D8: F4300414 FA000040
;   s_waitcnt     lgkmcnt(0)                              // 0000000000E0: BF8CC07F
;   v_sub_f32     v1, s45, v10                            // 0000000000E4: 0802142D
;   v_sub_f32     v9, s44, v15                            // 0000000000E8: 08121E2C
;   v_sub_f32     v11, s46, v11                           // 0000000000EC: 0816162E
;   v_mul_legacy_f32  v10, v3, v3                         // 0000000000F0: 0E140703
;   v_mul_legacy_f32  v14, v1, v1                         // 0000000000F4: 0E1C0301
;   v_fmac_f32    v10, v19, v19                           // 0000000000F8: 56142713
;   v_fmac_f32    v14, v9, v9                             // 0000000000FC: 561C1309
;   v_fmac_f32    v10, v8, v8                             // 000000000100: 56141108
;   v_fmac_f32    v14, v11, v11                           // 000000000104: 561C170B
;   v_rsq_f32     v10, v10                                // 000000000108: 7E145D0A
;   v_rsq_f32     v14, v14                                // 00000000010C: 7E1C5D0E
;   v_mul_legacy_f32  v2, v10, v19                        // 000000000110: 0E04270A
;   v_mul_legacy_f32  v3, v10, v3                         // 000000000114: 0E06070A
;   v_mul_legacy_f32  v8, v10, v8                         // 000000000118: 0E10110A
;   v_fma_f32     v15, v1, v14, -s13                      // 00000000011C: D54B000F 80361D01
;   v_fma_f32     v13, v9, v14, -s12                      // 000000000124: D54B000D 80321D09
;   v_fma_f32     v16, v11, v14, -s14                     // 00000000012C: D54B0010 803A1D0B
;   v_fma_f32     v17, v9, v14, -s16                      // 000000000134: D54B0011 80421D09
;   v_fma_f32     v18, v1, v14, -s17                      // 00000000013C: D54B0012 80461D01
;   v_mul_legacy_f32  v23, v15, v15                       // 000000000144: 0E2E1F0F
;   v_fma_f32     v19, v11, v14, -s18                     // 000000000148: D54B0013 804A1D0B
;   v_fma_f32     v9, v9, v14, -s20                       // 000000000150: D54B0009 80521D09
;   v_fma_f32     v1, v1, v14, -s21                       // 000000000158: D54B0001 80561D01
;   v_fma_f32     v11, v11, v14, -s22                     // 000000000160: D54B000B 805A1D0B
;   v_fmac_f32    v23, v13, v13                           // 000000000168: 562E1B0D
;   v_fmac_f32    v23, v16, v16                           // 00000000016C: 562E2110
;   v_rsq_f32     v14, v23                                // 000000000170: 7E1C5D17
;   v_mul_legacy_f32  v23, v13, v2                        // 000000000174: 0E2E050D
;   v_mul_legacy_f32  v13, v14, v15                       // 000000000178: 0E1A1F0E
;   v_mul_legacy_f32  v10, v23, v14                       // 00000000017C: 0E141D17
;   v_mul_legacy_f32  v16, v14, v16                       // 000000000180: 0E20210E
;   v_mul_legacy_f32  v14, v18, v18                       // 000000000184: 0E1C2512
;   v_fmac_f32    v10, v13, v3                            // 000000000188: 5614070D
;   v_mul_legacy_f32  v13, s12, v2                        // 00000000018C: 0E1A040C
;   v_fmac_f32    v14, v17, v17                           // 000000000190: 561C2311
;   v_mul_legacy_f32  v17, v17, v2                        // 000000000194: 0E220511
;   v_fmac_f32    v10, v16, v8                            // 000000000198: 56141110
;   v_fma_f32     v15, -s13, v3, -v13                     // 00000000019C: D54B000F A436060D
;   v_fmac_f32    v14, v19, v19                           // 0000000001A4: 561C2713
;   v_max_f32     v10, 0, v10                             // 0000000001A8: 20141480
;   v_fmac_f32    v15, -s14, v8                           // 0000000001AC: D52B000F 2002100E
;   v_rsq_f32     v0, v14                                 // 0000000001B4: 7E005D0E
;   v_cmp_gt_f32  vcc, 0, v15                             // 0000000001B8: 7C081E80
;   v_cndmask_b32  v13, 1.0, 0, vcc                       // 0000000001BC: D501000D 01A900F2
;   v_mul_legacy_f32  v20, v0, v18                        // 0000000001C4: 0E282500
;   v_mul_legacy_f32  v14, v17, v0                        // 0000000001C8: 0E1C0111
;   v_mul_legacy_f32  v19, v0, v19                        // 0000000001CC: 0E262700
;   v_mul_legacy_f32  v0, v1, v1                          // 0000000001D0: 0E000301
;   v_mul_legacy_f32  v18, s16, v2                        // 0000000001D4: 0E240410
;   v_mul_legacy_f32  v10, v10, v13                       // 0000000001D8: 0E141B0A
;   v_fmac_f32    v14, v20, v3                            // 0000000001DC: 561C0714
;   v_mul_legacy_f32  v13, v13, v15                       // 0000000001E0: 0E1A1F0D
;   v_fmac_f32    v0, v9, v9                              // 0000000001E4: 56001309
;   v_mul_legacy_f32  v9, v9, v2                          // 0000000001E8: 0E120509
;   v_mul_legacy_f32  v2, s20, v2                         // 0000000001EC: 0E040414
;   v_fma_f32     v18, -s17, v3, -v18                     // 0000000001F0: D54B0012 A44A0611
;   v_fmac_f32    v14, v19, v8                            // 0000000001F8: 561C1113
;   v_fmac_f32    v0, v11, v11                            // 0000000001FC: 5600170B
;   v_log_f32     v10, v10                                // 000000000200: 7E144F0A
;   v_fma_f32     v20, -s21, v3, -v2                      // 000000000204: D54B0014 A40A0615
;   v_fmac_f32    v18, -s18, v8                           // 00000000020C: D52B0012 20021012
;   v_max_f32     v19, 0, v14                             // 000000000214: 20261C80
;   v_mul_legacy_f32  v17, s25, v13                       // 000000000218: 0E221A19
;   v_rsq_f32     v23, v0                                 // 00000000021C: 7E2E5D00
;   v_fmac_f32    v20, -s22, v8                           // 000000000220: D52B0014 20021016
;   v_cmp_gt_f32  vcc, 0, v18                             // 000000000228: 7C082480
;   v_mul_legacy_f32  v10, s11, v10                       // 00000000022C: 0E14140B
;   v_cndmask_b32  v16, 1.0, 0, vcc                       // 000000000230: D5010010 01A900F2
;   v_cmp_gt_f32  vcc, 0, v20                             // 000000000238: 7C082880
;   v_mul_legacy_f32  v0, v23, v1                         // 00000000023C: 0E000317
;   v_mul_legacy_f32  v9, v9, v23                         // 000000000240: 0E122F09
;   v_mul_legacy_f32  v11, v23, v11                       // 000000000244: 0E161717
;   v_exp_f32     v10, v10                                // 000000000248: 7E144B0A
;   v_mul_legacy_f32  v14, v16, v18                       // 00000000024C: 0E1C2510
;   v_fmac_f32    v9, v0, v3                              // 000000000250: 56120700
;   image_sample  v[0:3], v[21:22], s[32:39], s[60:63] dmask:0xf dim:SQ_RSRC_IMG_2D // 000000000254: F0800F08 01E80015
;   v_nop                                                 // 00000000025C: 7E000000
;   s_buffer_load_dwordx16  s[32:47], s[40:43], 0x000080  // 000000000260: F4300814 FA000080
;   v_fmac_f32    v17, s29, v14                           // 000000000268: 56221C1D
;   v_fmac_f32    v9, v11, v8                             // 00000000026C: 5612110B
;   v_mul_legacy_f32  v8, v19, v16                        // 000000000270: 0E102113
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000274: D501000B 01A900F2
;   v_mul_legacy_f32  v16, s24, v13                       // 00000000027C: 0E201A18
;   v_mul_legacy_f32  v13, s26, v13                       // 000000000280: 0E1A1A1A
;   v_max_f32     v9, 0, v9                               // 000000000284: 20121280
;   v_log_f32     v8, v8                                  // 000000000288: 7E104F08
;   v_mul_legacy_f32  v10, v10, v15                       // 00000000028C: 0E141F0A
;   v_fmac_f32    v16, s28, v14                           // 000000000290: 56201C1C
;   v_fmac_f32    v13, s30, v14                           // 000000000294: 561A1C1E
;   v_mul_legacy_f32  v9, v9, v11                         // 000000000298: 0E121709
;   v_mul_legacy_f32  v11, v11, v20                       // 00000000029C: 0E16290B
;   v_log_f32     v9, v9                                  // 0000000002A0: 7E124F09
;   v_mul_legacy_f32  v8, s11, v8                         // 0000000002A4: 0E10100B
;   s_waitcnt     lgkmcnt(0)                              // 0000000002A8: BF8CC07F
;   v_mul_legacy_f32  v14, s37, v10                       // 0000000002AC: 0E1C1425
;   v_fmac_f32    v13, s34, v11                           // 0000000002B0: 561A1622
;   v_fmac_f32    v16, s32, v11                           // 0000000002B4: 56201620
;   v_fmac_f32    v17, s33, v11                           // 0000000002B8: 56221621
;   v_exp_f32     v8, v8                                  // 0000000002BC: 7E104B08
;   v_fma_f32     v13, s2, v13, s6                        // 0000000002C0: D54B000D 001A1A02
;   v_fma_f32     v15, s0, v16, s4                        // 0000000002C8: D54B000F 00122000
;   v_mul_legacy_f32  v9, s11, v9                         // 0000000002D0: 0E12120B
;   v_fma_f32     v16, s1, v17, s5                        // 0000000002D4: D54B0010 00162201
;   v_exp_f32     v9, v9                                  // 0000000002DC: 7E124B09
;   v_mul_legacy_f32  v8, v8, v18                         // 0000000002E0: 0E102508
;   v_mul_legacy_f32  v18, s36, v10                       // 0000000002E4: 0E241424
;   v_mul_legacy_f32  v10, s38, v10                       // 0000000002E8: 0E141426
;   v_fmac_f32    v14, s41, v8                            // 0000000002EC: 561C1029
;   v_fmac_f32    v18, s40, v8                            // 0000000002F0: 56241028
;   v_fmac_f32    v10, s42, v8                            // 0000000002F4: 5614102A
;   v_mul_legacy_f32  v9, v9, v20                         // 0000000002F8: 0E122909
;   v_fmac_f32    v18, s44, v9                            // 0000000002FC: 5624122C
;   v_fmac_f32    v14, s45, v9                            // 000000000300: 561C122D
;   v_fmac_f32    v10, s46, v9                            // 000000000304: 5614122E
;   s_waitcnt     vmcnt(0)                                // 000000000308: BF8C3F70
;   v_mul_legacy_f32  v3, v3, v7                          // 00000000030C: 0E060F03
;   v_mul_legacy_f32  v0, v0, v4                          // 000000000310: 0E000900
;   v_mul_legacy_f32  v1, v1, v5                          // 000000000314: 0E020B01
;   v_mul_legacy_f32  v2, v2, v6                          // 000000000318: 0E040D02
;   v_mul_legacy_f32  v7, v18, v3                         // 00000000031C: 0E0E0712
;   v_mul_legacy_f32  v4, v0, v15                         // 000000000320: 0E081F00
;   v_mul_legacy_f32  v5, v1, v16                         // 000000000324: 0E0A2101
;   v_mul_legacy_f32  v11, v14, v3                        // 000000000328: 0E16070E
;   v_mul_legacy_f32  v2, v2, v13                         // 00000000032C: 0E041B02
;   v_mul_legacy_f32  v15, v10, v3                        // 000000000330: 0E1E070A
;   v_fmac_f32    v4, s8, v7                              // 000000000334: 56080E08
;   v_fmac_f32    v5, s9, v11                             // 000000000338: 560A1609
;   v_fmac_f32    v2, s10, v15                            // 00000000033C: 56041E0A
;   v_fma_f32     v7, s48, v3, -v4                        // 000000000340: D54B0007 84120630
;   v_fma_f32     v11, s49, v3, -v5                       // 000000000348: D54B000B 84160631
;   v_fma_f32     v15, s50, v3, -v2                       // 000000000350: D54B000F 840A0632
;   v_fmac_f32    v4, v7, v12                             // 000000000358: 56081907
;   v_fmac_f32    v5, v11, v12                            // 00000000035C: 560A190B
;   v_fmac_f32    v2, v15, v12                            // 000000000360: 5604190F
;   s_nop         0x0000                                  // 000000000364: BF800000
;   s_nop         0x0000                                  // 000000000368: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v4, v5                       // 00000000036C: 5E000B04
;   v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 000000000370: 5E020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000374: F8001C0F 00000100
;   s_endpgm                                              // 00000000037C: BF810000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
;   s_code_end                                            // 0000000003C0: BF9F0000
;   s_code_end                                            // 0000000003C4: BF9F0000
;   s_code_end                                            // 0000000003C8: BF9F0000
;   s_code_end                                            // 0000000003CC: BF9F0000
;   s_code_end                                            // 0000000003D0: BF9F0000
;   s_code_end                                            // 0000000003D4: BF9F0000
;   s_code_end                                            // 0000000003D8: BF9F0000
;   s_code_end                                            // 0000000003DC: BF9F0000
;   s_code_end                                            // 0000000003E0: BF9F0000
;   s_code_end                                            // 0000000003E4: BF9F0000
;   s_code_end                                            // 0000000003E8: BF9F0000
;   s_code_end                                            // 0000000003EC: BF9F0000
;   s_code_end                                            // 0000000003F0: BF9F0000
;   s_code_end                                            // 0000000003F4: BF9F0000
;   s_code_end                                            // 0000000003F8: BF9F0000
;   s_code_end                                            // 0000000003FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 0
;   fetch_shader_address_reg: 0
;   fetch_shader_return_reg: 0
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 12
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 2
;     }
; 
;   // entry descriptor load info 
;   bound_descriptor_loads[0] {  instr_offset: 48, resource_class: 0 (SRV), index: 0, space: 0, resource_kind: 2 (Texture2D)  }
;   bound_descriptor_loads[1] {  instr_offset: 56, resource_class: 3 (Sampler), index: 0, space: 0, resource_kind: 14 (Sampler)  }
; 
;   // entry used resources info
;   used_resources_count: 3
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: SRV
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 8
;       resource_lower_bound: 0
;       allocated_offset : 10
;       orig_rootsig_slot_id: 1
;       resource_stride: 4
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[2] {
;       resource_type: SAMPLER
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 11
;       orig_rootsig_slot_id: 2
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 42
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (PSBasicPixelLightingTx)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  PS FIELDS --------------------//
;   // Input semantics
;   num_input_semantics: 4
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 3
;       input_idx: 0
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;       rotate_pc_ptr: 0
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 15
;       input_idx: 1
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 1
;       rotate_pc_ptr: 0
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 7
;       input_idx: 2
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 2
;       rotate_pc_ptr: 0
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       input_idx: 3
;       default_val: F_0000
;       flat_shade: 0
;       linear: 1
;       custom: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 3
;       rotate_pc_ptr: 0
;     }
; 
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_ps: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     wave_cnt_en: 0
;     extra_lds_size: 0
;     excp_en: 0
;     load_collision_waveid: 0
;     load_intrawave_collision: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_shader_z_format: 0 {
;     z_export_format: 0 (SHADER_ZERO)
;   }
;   reg_spi_ps_in_control: 4 {
;     num_interp: 4
;     param_gen: 0
;     offchip_param_en: 0
;     late_pc_dealloc: 0
;     num_prim_interp: 0
;     bc_optimize_disable: 0
;     ps_w32_en: 0
;   }
;   reg_spi_ps_input_addr: 2 {
;     persp_sample_ena: 0
;     persp_center_ena: 1
;     persp_centroid_ena: 0
;     persp_pull_model_ena: 0
;     linear_sample_ena: 0
;     linear_center_ena: 0
;     linear_centroid_ena: 0
;     line_stipple_tex_ena: 0
;     pos_x_float_ena: 0
;     pos_y_float_ena: 0
;     pos_z_float_ena: 0
;     pos_w_float_ena: 0
;     front_face_ena: 0
;     ancillary_ena: 0
;     sample_coverage_ena: 0
;     pos_fixed_pt_ena: 0
;   }
;   reg_db_shader_control: 16 {
;     z_export_enable: 0
;     stencil_test_val_export_enable: 0
;     stencil_op_val_export_enable: 0
;     z_order: 1 (EarlyZThenLateZ)
;     kill_enable: 0
;     coverage_to_mask_enable: 0
;     mask_export_enable: 0
;     exec_on_hier_fail: 0
;     exec_on_noop: 0
;     alpha_to_mask_disable: 0
;     depth_before_shader: 0
;     conservative_z_export: 0 (ExportAnyZ)
;     dual_quad_disable: 0
;     primitive_ordered_pixel_shader: 0
;     exec_if_overlapped: 0
;     pops_overlap_num_samples: 0
;     pre_shader_depth_coverage_enable: 0
;   }
;   reg_cb_shader_mask: 15 {
;     output0_enable: 15
;     output1_enable: 0
;     output2_enable: 0
;     output3_enable: 0
;     output4_enable: 0
;     output5_enable: 0
;     output6_enable: 0
;     output7_enable: 0
;   }
; 
;   // PS shader info
;   pos_float_location: 0
;   run_at_sample_rate: 0
;   load_provoking_vtx: 0
; 
;   // Export patch info for exported render targets.
;   export_patch_code_size: 6
;   export_patch[0] {
;     offset: 217
;     code[ZERO] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001890,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           null, off, off, off, off done vm        // 000000000010: F8001890 00000000
; end
;      }
;     code[32_R] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001801,
;        0x4,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v4, off, off, off done vm         // 000000000010: F8001801 00000004
; end
;      }
;     code[32_GR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x504,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v4, v5, off, off done vm          // 000000000010: F8001803 00000504
; end
;      }
;     code[32_AR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf8001803,
;        0x304,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v4, v3, off, off done vm          // 000000000010: F8001803 00000304
; end
;      }
;     code[FP16_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0x5e000b04,
;        0x5e020702,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   v_cvt_pkrtz_f16_f32  v0, v4, v5                       // 000000000008: 5E000B04
;   v_cvt_pkrtz_f16_f32  v1, v2, v3                       // 00000000000C: 5E020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UNORM16_ABGR] =    { 
;        0xd7690000,
;        0x20b04,
;        0xd7690001,
;        0x20702,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_u16_f32  v0, v4, v5                      // 000000000000: D7690000 00020B04
;   v_cvt_pknorm_u16_f32  v1, v2, v3                      // 000000000008: D7690001 00020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SNORM16_ABGR] =    { 
;        0xd7680000,
;        0x20b04,
;        0xd7680001,
;        0x20702,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pknorm_i16_f32  v0, v4, v5                      // 000000000000: D7680000 00020B04
;   v_cvt_pknorm_i16_f32  v1, v2, v3                      // 000000000008: D7680001 00020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[UINT16_ABGR] =    { 
;        0xd76a0000,
;        0x20b04,
;        0xd76a0001,
;        0x20702,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_u16_u32  v0, v4, v5                          // 000000000000: D76A0000 00020B04
;   v_cvt_pk_u16_u32  v1, v2, v3                          // 000000000008: D76A0001 00020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[SINT16_ABGR] =    { 
;        0xd76b0000,
;        0x20b04,
;        0xd76b0001,
;        0x20702,
;        0xf8001c0f,
;        0x100,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   v_cvt_pk_i16_i32  v0, v4, v5                          // 000000000000: D76B0000 00020B04
;   v_cvt_pk_i16_i32  v1, v2, v3                          // 000000000008: D76B0001 00020702
;   exp           mrt0, v0, v0, v1, v1 done compr vm      // 000000000010: F8001C0F 00000100
; end
;      }
;     code[32_ABGR] =    { 
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xbf800000,
;        0xf800180f,
;        0x3020504,
;        0x0,
;        0x0,
;        0x0,
;        0x0,
; 
; shader main
;   asic(GFX10_A)
;   type(PS)
;                                                             // s_ps_state in s0
; 
;   s_nop         0x0000                                  // 000000000000: BF800000
;   s_nop         0x0000                                  // 000000000004: BF800000
;   s_nop         0x0000                                  // 000000000008: BF800000
;   s_nop         0x0000                                  // 00000000000C: BF800000
;   exp           mrt0, v4, v5, v2, v3 done vm            // 000000000010: F800180F 03020504
; end
;      }
;   }
;   export_patch[1] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[2] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[3] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[4] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[5] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[6] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
;   export_patch[7] {
;     offset: -1
;     patch code not printed because offset is -1
;   }
; }
; 
; PS NumVGPR=24,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:158,SAlu:18,VMem:1,SMem:6,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 

#endif

const unsigned char BasicEffect_PSBasicPixelLightingTx[] = {
  0x44, 0x58, 0x42, 0x43, 0x92, 0x11, 0xf1, 0x73, 0x05, 0xbe, 0x2d, 0xe8,
  0x2b, 0x9e, 0x0d, 0x78, 0x63, 0x1c, 0x82, 0xed, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00,
  0xa0, 0x02, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0xc8, 0x03, 0x00, 0x00,
  0xe4, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x6c, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x50, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x78,
  0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x49, 0x4c, 0x44, 0x4e, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63,
  0x74, 0x5f, 0x50, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x69, 0x78,
  0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x78,
  0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x1e, 0xae, 0x74,
  0xfb, 0x41, 0xdf, 0xc2, 0x3c, 0x5b, 0x00, 0xb1, 0xb7, 0x7f, 0x9f, 0x5a,
  0x44, 0x58, 0x49, 0x4c, 0x1c, 0x13, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xc7, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x2c, 0x0e, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x44, 0x0e, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xa4, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0xb8, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0xc8, 0x0e, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0c, 0x13, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x91, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x2c, 0x0e, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xa8, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xe4, 0xa6, 0xe1, 0xf2, 0x27, 0xec,
  0x21, 0x24, 0x7f, 0x25, 0xa4, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x51, 0x31,
  0x0c, 0xc3, 0x40, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13, 0xf6, 0x10, 0x92,
  0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x58, 0x0a, 0xa3, 0x10, 0x0c, 0x33,
  0x0c, 0xc3, 0x40, 0x10, 0xc4, 0x40, 0x4d, 0x41, 0x06, 0x62, 0x18, 0x86,
  0x61, 0x18, 0xe8, 0x29, 0xc3, 0x40, 0x0c, 0x14, 0x15, 0x62, 0x20, 0x86,
  0x81, 0xa6, 0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3,
  0x8a, 0x95, 0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x50, 0x88,
  0x8a, 0x60, 0x08, 0xb2, 0x4a, 0x31, 0x10, 0xc3, 0x30, 0x10, 0x36, 0x47,
  0x10, 0x14, 0x83, 0x21, 0x0a, 0x82, 0xd0, 0x68, 0x1b, 0x08, 0x18, 0x46,
  0x20, 0x86, 0x99, 0xda, 0x60, 0x1c, 0xd8, 0x21, 0x1c, 0xe6, 0x61, 0x1e,
  0xdc, 0x80, 0x16, 0xca, 0x01, 0x1f, 0xe8, 0xa1, 0x1e, 0xe4, 0xa1, 0x1c,
  0xe4, 0x80, 0x14, 0xf8, 0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0xe1, 0x1d,
  0xe4, 0x81, 0x0f, 0xcc, 0x81, 0x1d, 0xde, 0x21, 0x1c, 0xe8, 0x81, 0x0d,
  0xc0, 0x80, 0x0e, 0xfc, 0x00, 0x0c, 0xfc, 0x40, 0x0f, 0xf4, 0xa0, 0x1d,
  0xd2, 0x01, 0x1e, 0xe6, 0xe1, 0x17, 0xe8, 0x21, 0x1f, 0xe0, 0xa1, 0x1c,
  0x50, 0x40, 0xcc, 0x24, 0x06, 0xe3, 0xc0, 0x0e, 0xe1, 0x30, 0x0f, 0xf3,
  0xe0, 0x06, 0xb4, 0x50, 0x0e, 0xf8, 0x40, 0x0f, 0xf5, 0x20, 0x0f, 0xe5,
  0x20, 0x07, 0xa4, 0xc0, 0x07, 0xf6, 0x50, 0x0e, 0xe3, 0x40, 0x0f, 0xef,
  0x20, 0x0f, 0x7c, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xe1, 0x40, 0x0f, 0x6c,
  0x00, 0x06, 0x74, 0xe0, 0x07, 0x60, 0xe0, 0x07, 0x48, 0xf0, 0x3e, 0x02,
  0x87, 0x11, 0x86, 0x21, 0x07, 0xc4, 0x24, 0xf0, 0xae, 0x3a, 0x1c, 0x69,
  0x5a, 0x00, 0xcc, 0xa1, 0x26, 0x3f, 0x05, 0x22, 0x80, 0x21, 0x26, 0x22,
  0x92, 0x50, 0xe3, 0x89, 0xe2, 0x30, 0x8e, 0xa3, 0x28, 0x7a, 0xe4, 0x48,
  0x52, 0x79, 0x93, 0x34, 0x45, 0x94, 0x30, 0xf9, 0x2c, 0xc0, 0x3c, 0x0b,
  0x11, 0xb1, 0x13, 0x30, 0x11, 0x28, 0x20, 0xe8, 0x4c, 0x09, 0x02, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x4f, 0x03, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x9e, 0x07, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xc1, 0x80, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xb3, 0x01, 0x01, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x08, 0x4a, 0xa2, 0x80, 0x0d, 0xca, 0xa0, 0x3c, 0xca,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x82, 0x42, 0x28, 0x83, 0x02, 0xa1,
  0x70, 0x06, 0x80, 0xcc, 0x19, 0x00, 0x42, 0x67, 0x00, 0x28, 0x1d, 0x4b,
  0x82, 0x88, 0xe7, 0x01, 0x80, 0xe3, 0x38, 0x8e, 0xe3, 0x38, 0x80, 0x40,
  0x20, 0x1e, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0x01, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x61, 0xa0, 0x11, 0x98, 0x20, 0x10, 0xce, 0x04, 0x81, 0x78,
  0x36, 0x08, 0x47, 0xb4, 0x21, 0x39, 0x9c, 0xe7, 0x38, 0x0c, 0xe8, 0x90,
  0x36, 0x04, 0xd3, 0x04, 0xc1, 0x0c, 0xb6, 0x09, 0x02, 0x01, 0x6d, 0x40,
  0x8e, 0xea, 0x39, 0x0e, 0xc3, 0x02, 0x36, 0x04, 0xd7, 0x04, 0x01, 0x0d,
  0xb8, 0x0d, 0xc8, 0x91, 0x3d, 0xc7, 0x61, 0x1c, 0xc0, 0x86, 0x40, 0xdb,
  0x40, 0x50, 0x00, 0xb6, 0x4d, 0x10, 0xd2, 0xa0, 0xdb, 0x10, 0x74, 0x13,
  0x04, 0x01, 0xa0, 0x05, 0x35, 0x25, 0x14, 0x36, 0x97, 0x36, 0x06, 0x95,
  0x86, 0x57, 0xc6, 0xc6, 0x94, 0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0x46,
  0x85, 0x47, 0x84, 0xaa, 0x08, 0x6b, 0xe8, 0xe9, 0x49, 0x8a, 0x68, 0x82,
  0x50, 0x50, 0x13, 0x84, 0xa2, 0xda, 0x10, 0x1c, 0x13, 0x84, 0xc2, 0x9a,
  0x20, 0x10, 0xd1, 0x06, 0xc1, 0x0c, 0xcc, 0x60, 0xc3, 0x72, 0x84, 0x81,
  0x18, 0x8c, 0x01, 0x19, 0x94, 0x81, 0x51, 0x06, 0xc7, 0x18, 0x9c, 0xc1,
  0x86, 0xc0, 0x98, 0x20, 0x14, 0xd7, 0x04, 0x81, 0x90, 0x36, 0x08, 0x66,
  0xb0, 0x06, 0x1b, 0x16, 0x23, 0x0c, 0xc4, 0x60, 0x0c, 0xd2, 0xa0, 0x0c,
  0x0c, 0x35, 0x30, 0xc6, 0x80, 0x0d, 0x36, 0x04, 0xd0, 0x04, 0xa1, 0xc0,
  0x26, 0x08, 0xc4, 0xb4, 0x41, 0x30, 0x03, 0x38, 0xd8, 0xb0, 0x40, 0x61,
  0x20, 0x06, 0x63, 0xe0, 0x06, 0x65, 0x60, 0xbc, 0x01, 0x34, 0x06, 0x71,
  0xc0, 0x62, 0xe8, 0x89, 0xe9, 0x49, 0x6a, 0xc3, 0x62, 0x06, 0x73, 0x20,
  0x06, 0x63, 0x40, 0x06, 0x65, 0x60, 0xa8, 0x81, 0x19, 0x8c, 0x01, 0x1b,
  0x6c, 0x20, 0xd0, 0xa0, 0x0d, 0xe4, 0x80, 0x0e, 0x98, 0x4c, 0x59, 0x7d,
  0x51, 0x85, 0xc9, 0x9d, 0x95, 0xd1, 0x4d, 0x10, 0x8a, 0x6c, 0xc3, 0x72,
  0xd8, 0x81, 0x18, 0xdc, 0x01, 0x19, 0x8c, 0x81, 0xa1, 0x06, 0xc7, 0x18,
  0xb0, 0xc1, 0x86, 0x00, 0x0f, 0x36, 0x0c, 0x75, 0x90, 0x07, 0xc0, 0x86,
  0xe2, 0x03, 0x03, 0x3d, 0xe0, 0x80, 0x56, 0x78, 0x62, 0x6f, 0x78, 0x2e,
  0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x74,
  0x69, 0x6f, 0x6e, 0x73, 0x53, 0x02, 0xa1, 0x0a, 0x1b, 0x9b, 0x5d, 0x9b,
  0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94, 0x80, 0xa8, 0x42, 0x86, 0xe7,
  0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36, 0x25, 0x38, 0x9a, 0x90,
  0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9, 0x4d, 0x09, 0x92, 0x3a,
  0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
  0x65, 0x6c, 0x53, 0x02, 0xa6, 0x0c, 0x19, 0x9e, 0x8b, 0x5c, 0xd9, 0xdc,
  0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94, 0x60, 0xab, 0x43, 0x86, 0xe7,
  0x62, 0x97, 0x56, 0x76, 0x97, 0x44, 0x36, 0x45, 0x17, 0x46, 0x57, 0x36,
  0x25, 0xe8, 0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9, 0xd1, 0xc9, 0xe5, 0x41,
  0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec,
  0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33,
  0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d,
  0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e,
  0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x06, 0x60, 0xa5, 0xec, 0x06, 0x48, 0x88, 0x90, 0x22, 0x17, 0xb1, 0x94,
  0x88, 0x71, 0x4c, 0x48, 0x63, 0xb4, 0x97, 0x19, 0x40, 0xc3, 0xe5, 0x3b,
  0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x76, 0xb0, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xd2, 0x70, 0xf9,
  0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x18,
  0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb,
  0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c,
  0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x03, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x4b,
  0x00, 0xf3, 0x2c, 0x84, 0x5f, 0xdc, 0xb6, 0x09, 0x54, 0xc3, 0xe5, 0x3b,
  0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc,
  0xb6, 0x21, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00,
  0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53,
  0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0xa5, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0xa4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x94,
  0x46, 0x59, 0x14, 0x57, 0x21, 0xcc, 0x00, 0x94, 0x5d, 0xb9, 0x95, 0x4c,
  0x29, 0x94, 0x5c, 0x19, 0x95, 0x4b, 0xa9, 0x14, 0x5e, 0x61, 0x14, 0x05,
  0x0d, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x03, 0x30, 0x02, 0x30,
  0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xb0, 0xad, 0xc1, 0xf2, 0xa5, 0x41, 0x1a, 0x58, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0xb0, 0xb1, 0x01, 0xd3, 0xa9, 0x81, 0x1a, 0x5c,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xb0, 0xb5, 0x41, 0x03, 0x06, 0x6b,
  0xb0, 0x06, 0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76, 0x40,
  0x99, 0x01, 0x1b, 0x88, 0xc1, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0xc6, 0x1d, 0x54, 0x67, 0xd0, 0x06, 0x19, 0x35, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x06, 0x1e, 0x58, 0x68, 0xe0, 0x06, 0x63, 0x50, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x07, 0x57, 0x1a, 0xbc, 0x81, 0x18,
  0x58, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe8, 0x01, 0xd6, 0x06,
  0x70, 0x60, 0x06, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7b,
  0x90, 0xb9, 0x41, 0x1c, 0x74, 0xd8, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x7c, 0xa0, 0xbd, 0x81, 0x1c, 0x9c, 0x41, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x46, 0x1f, 0x6c, 0x74, 0x30, 0x07, 0x69, 0xa0, 0x8d,
  0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xe1, 0x07, 0x5c, 0x1d, 0xd0, 0x01,
  0x18, 0x6c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x41, 0x67,
  0x07, 0x75, 0xa0, 0x06, 0xdc, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0xa0, 0xe0, 0xdd, 0x81, 0x1d, 0xa4, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x46, 0x28, 0x7c, 0x77, 0x70, 0x07, 0x6d, 0xe0, 0x8d, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a, 0x60, 0x80, 0x07, 0x78, 0x40,
  0x06, 0xdf, 0x88, 0xc1, 0x03, 0x80, 0x20, 0x18, 0x34, 0xa1, 0x70, 0x41,
  0x8f, 0x10, 0x4c, 0x53, 0x1e, 0xe4, 0x01, 0x18, 0x4c, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x46,
  0x48, 0xf2, 0x31, 0x42, 0x92, 0x8f, 0x11, 0x92, 0x7c, 0x8c, 0x90, 0xe4,
  0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x96, 0x29, 0xa0, 0xc1, 0xf5,
  0x8d, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d,
  0x53, 0x7c, 0x6c, 0x98, 0xe2, 0x63, 0xc3, 0x14, 0x9f, 0x11, 0x83, 0x05,
  0x00, 0x41, 0x30, 0x78, 0x60, 0xc1, 0x0d, 0x06, 0x21, 0x18, 0x84, 0x60,
  0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x22, 0x58, 0x70, 0x83, 0xc0, 0x8a,
  0x40, 0x3e, 0x56, 0x08, 0xf2, 0xb1, 0x62, 0x90, 0xcf, 0x88, 0xc1, 0x02,
  0x80, 0x20, 0x18, 0x3c, 0xb5, 0x30, 0x07, 0x5e, 0xc7, 0x79, 0x1d, 0x37,
  0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x51, 0x2d, 0xcc, 0x41, 0x60, 0x01,
  0x18, 0xc8, 0xc7, 0x04, 0x30, 0x90, 0x8f, 0x0d, 0x60, 0x20, 0x9f, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0x6e, 0x21, 0x0f, 0xd0, 0xa0, 0x15,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0xac, 0x5d, 0xe8, 0x03, 0x36, 0xa8, 0x85,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x03, 0xeb, 0x17, 0x42, 0x01, 0x0e, 0x6e, 0x61,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x8c, 0x5a,
  0xe2, 0x63, 0xd4, 0x12, 0x1f, 0xa3, 0x96, 0xf8, 0x8c, 0x18, 0x2c, 0x00,
  0x08, 0x82, 0xc1, 0x93, 0x0e, 0xa7, 0x30, 0x08, 0xc1, 0x20, 0x04, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0xa5, 0xc3, 0x29, 0x04, 0x16, 0x10,
  0xf2, 0x31, 0x81, 0x90, 0xcf, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x58,
  0xea, 0xc0, 0x0a, 0x7b, 0xe0, 0x0a, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x96,
  0x3b, 0xc0, 0xc2, 0x1f, 0x88, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0x25,
  0x0f, 0xb4, 0x30, 0x0a, 0xaa, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42,
  0x30, 0x9a, 0x30, 0x08, 0x76, 0x06, 0x4b, 0x7c, 0xec, 0x0c, 0x96, 0xf8,
  0xd8, 0x19, 0x2c, 0xf1, 0x19, 0x31, 0x58, 0x00, 0x10, 0x04, 0x83, 0x87,
  0x1f, 0x74, 0x61, 0x10, 0x82, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x20, 0xe2, 0x07, 0x5d, 0x08, 0x2c, 0x20, 0xe4, 0x63, 0x02, 0x21,
  0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb0, 0xfa, 0xe1, 0x17, 0x5c,
  0x81, 0x17, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xac, 0x90, 0x18, 0x07, 0x59,
  0xe0, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xab, 0x24, 0xce, 0xc1, 0x16,
  0xd6, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x4c, 0x0f, 0x96, 0xf8, 0x98, 0x1e, 0x2c, 0xf1, 0x31, 0x3d, 0x58, 0xe2,
  0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xcf, 0x4b, 0xb4, 0xc3, 0x20,
  0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x41, 0xf4, 0x12,
  0xed, 0x10, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x46, 0x0e, 0x77,
  0x10, 0x1f, 0x2b, 0x87, 0x3b, 0x88, 0x8f, 0x99, 0x83, 0x19, 0xc4, 0xc7,
  0xce, 0xc1, 0x0c, 0xe2, 0x63, 0xe8, 0x50, 0xc5, 0xc7, 0xd2, 0xa1, 0x8a,
  0x8f, 0x89, 0x82, 0x1f, 0xc8, 0xc7, 0xd6, 0x21, 0x88, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x60, 0x37, 0xd1, 0x0f, 0xc8, 0x28, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x80, 0xe1, 0x84, 0x3f, 0x20, 0xa3, 0x10,
  0x98, 0x29, 0xbc, 0x81, 0x7c, 0xec, 0x1d, 0x82, 0xf8, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x01, 0xb6, 0x13, 0x21, 0xa1, 0x9c, 0x42, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x18, 0x4f, 0x88, 0x84, 0x72, 0x0a, 0x81,
  0xa9, 0x02, 0x18, 0xc8, 0xc7, 0xe6, 0x21, 0x88, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x60, 0x3f, 0x51, 0x12, 0xcc, 0x2a, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x80, 0x81, 0x85, 0x49, 0x30, 0xab, 0x10, 0xd8,
  0x1f, 0xb8, 0x82, 0x7c, 0x2c, 0xe0, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x01, 0x36, 0x16, 0x29, 0xc1, 0x07, 0xaf, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x01, 0x46, 0x16, 0x2a, 0xc1, 0x07, 0xaf, 0x10,
  0x18, 0x1c, 0xc8, 0x82, 0x7c, 0x2c, 0x68, 0x03, 0xf9, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x01, 0x76, 0x16, 0x2d, 0xd1, 0x06, 0xb3, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0x86, 0x16, 0x2e, 0xd1, 0x06, 0xb3,
  0x10, 0x58, 0x18, 0xd8, 0x82, 0x7c, 0x2c, 0xf0, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd8, 0x5a, 0xc4, 0x84, 0x77, 0x0b, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x60, 0x6c, 0x21, 0x13, 0xde, 0x2d, 0x04,
  0xc3, 0x11, 0xd5, 0x48, 0x10, 0xdf, 0x70, 0x84, 0x44, 0x12, 0xc4, 0x37,
  0x1c, 0xf1, 0x94, 0x04, 0xf1, 0x4d, 0x37, 0x98, 0x04, 0x4a, 0x0c, 0xd3,
  0x0d, 0x27, 0x91, 0x12, 0xc3, 0x74, 0x03, 0x4a, 0xa8, 0xc4, 0x60, 0xc3,
  0x26, 0x1f, 0x1b, 0x30, 0xf9, 0xd8, 0x50, 0xc9, 0x67, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xac, 0xbb, 0xc8, 0x09, 0x94, 0x80, 0x8b, 0xd1, 0x84,
  0x60, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x49, 0x2f, 0x6c, 0x82,
  0x72, 0x89, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x98, 0xf6, 0xe2, 0x26,
  0xa2, 0x97, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x89, 0x2f, 0x70,
  0xc2, 0x81, 0x09, 0x1b, 0x16, 0xf9, 0xd8, 0xb0, 0xc8, 0xc7, 0x86, 0x45,
  0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0x85, 0xc6, 0x4e, 0x0c,
  0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0x89, 0x06, 0x4f, 0x0c, 0x23,
  0x06, 0x06, 0x00, 0x82, 0x60, 0x10, 0x8d, 0x46, 0x4f, 0x0c, 0x36, 0x28,
  0xf2, 0xb1, 0x61, 0x91, 0x8f, 0x0d, 0x8c, 0x7c, 0x46, 0x0c, 0x0c, 0x00,
  0x04, 0xc1, 0x20, 0x3a, 0x0d, 0xb0, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04,
  0xc1, 0x20, 0x42, 0x8d, 0xb0, 0x18, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1,
  0x20, 0x4a, 0x0d, 0xb1, 0x18, 0x6c, 0x78, 0x03, 0xf9, 0xd8, 0xc0, 0x06,
  0xf2, 0xb1, 0x21, 0x0d, 0xe4, 0x63, 0xd7, 0x3b, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xb0, 0xd5, 0x88, 0x8b, 0xab, 0x17, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xc0, 0x58, 0x43, 0x2e, 0xae, 0x55, 0x08,
  0x4c, 0x8b, 0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0xe6,
  0x1a, 0x74, 0xa1, 0xfd, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd8, 0x6b, 0xd4, 0x85, 0xd6, 0x0a, 0x81, 0x75, 0xf3, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xc0, 0x62, 0xe3, 0x2e, 0xba, 0x70, 0x08,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x00, 0x93, 0x0d, 0xbc, 0xe8, 0x5e,
  0x21, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x8b, 0x36, 0xec, 0xa2,
  0x2c, 0x60, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x6c, 0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f, 0x1b, 0x0e, 0xf9, 0x8c,
  0x18, 0x1c, 0x00, 0x08, 0x82, 0x81, 0xb5, 0x1b, 0x7d, 0xc1, 0x16, 0xb8,
  0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0x76,
  0x0c, 0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03, 0x7c, 0x4c, 0x13, 0x09,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0x26, 0x1e, 0xa8, 0xa1,
  0xc1, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd8, 0x78, 0xa4,
  0x86, 0xe6, 0x0b, 0x81, 0x75, 0x24, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc0, 0xca, 0x63, 0x35, 0x3a, 0x79, 0x08, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x00, 0x33, 0x0f, 0xd6, 0xe8, 0xc0, 0x21, 0x30, 0x30,
  0x30, 0x09, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01, 0x86, 0x1e,
  0xae, 0x01, 0x06, 0xf4, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x01,
  0x96, 0x1e, 0xaf, 0x01, 0x06, 0xe2, 0x10, 0x8c, 0x26, 0xd0, 0x01, 0x30,
  0x9a, 0x50, 0x07, 0xc1, 0x68, 0x82, 0x1d, 0x08, 0xc6, 0x16, 0x8f, 0x7c,
  0x8c, 0x2d, 0x1e, 0xf9, 0x18, 0x5b, 0x3c, 0xf2, 0xb1, 0x86, 0x2d, 0xe4,
  0x63, 0xc1, 0x21, 0x1f, 0x63, 0xdc, 0x42, 0x3e, 0x16, 0x20, 0xf2, 0xb1,
  0x05, 0x2e, 0xe4, 0x63, 0x41, 0x22, 0x1f, 0x2b, 0x12, 0xf8, 0x18, 0x91,
  0xc0, 0xc7, 0x86, 0x04, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x60,
  0xe9, 0x07, 0x6f, 0xac, 0x46, 0x78, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0x82, 0x0d, 0x79, 0x21, 0x1f, 0x1b, 0xf4, 0x42,
  0x3e, 0x36, 0xec, 0x85, 0x7c, 0x6c, 0x50, 0xe2, 0x63, 0x83, 0x12, 0x1f,
  0x1b, 0x94, 0xf8, 0xd8, 0xa0, 0x1a, 0xf2, 0xb1, 0x61, 0x35, 0xe4, 0x63,
  0x03, 0x6b, 0xc8, 0xc7, 0x06, 0x08, 0x3e, 0x36, 0x40, 0xf0, 0xb1, 0x01,
  0x82, 0xcf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x2f, 0x92, 0x1e,
  0x26, 0x62, 0x22, 0xfc, 0x31, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0xf2, 0x22, 0xe9, 0x61, 0x22, 0x26, 0x22, 0x1f, 0xc2, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x20, 0x2f, 0x92, 0x1e, 0x26, 0x62, 0x22, 0xfb, 0x11,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0xf2, 0x22, 0xe9, 0x61, 0x22,
  0x26, 0x92, 0x1f, 0xa5, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0xc9, 0x03,
  0xed, 0x63, 0x88, 0x6e, 0x64, 0xa6, 0x1c, 0x9f, 0xaf, 0x4a, 0xf9, 0xc2,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe2, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xed, 0x58, 0x4d, 0x6c, 0x1b, 0x45, 0x14, 0x7e, 0xb3, 0xbb,
  0xde, 0x9d, 0xdd, 0xb5, 0xdf, 0xae, 0xd7, 0x93, 0x75, 0xe2, 0xae, 0x9d,
  0xb5, 0x71, 0xfe, 0xda, 0xc4, 0xb8, 0x15, 0xaa, 0x10, 0x2a, 0x02, 0x2a,
  0xd4, 0x43, 0xd3, 0x2a, 0x15, 0x29, 0x23, 0x28, 0x4a, 0x25, 0x54, 0xa1,
  0xc6, 0x2d, 0x42, 0x95, 0xe0, 0xd0, 0x43, 0xb4, 0x5d, 0x50, 0x10, 0x48,
  0xf4, 0xc0, 0x99, 0x4b, 0x39, 0xe4, 0xc0, 0xbf, 0x10, 0x17, 0x6e, 0x4e,
  0xe1, 0x34, 0x67, 0x24, 0xab, 0x42, 0x48, 0x70, 0x85, 0x13, 0x08, 0xe5,
  0x10, 0x15, 0x94, 0x30, 0xbb, 0xb1, 0xa9, 0xdb, 0x34, 0x4a, 0xe0, 0x82,
  0x85, 0xfc, 0x49, 0x4f, 0xb3, 0x3b, 0xef, 0x9b, 0x99, 0xf7, 0xe6, 0x5b,
  0xc9, 0x7e, 0xef, 0xd4, 0xe2, 0xe2, 0x59, 0x42, 0x00, 0xbe, 0x2b, 0x40,
  0x0a, 0x7d, 0x67, 0x80, 0x5f, 0xdb, 0x9f, 0xff, 0x78, 0x10, 0xfb, 0xf2,
  0x1f, 0xf2, 0x7b, 0xa6, 0x74, 0xd7, 0x3d, 0x0b, 0xff, 0x0e, 0xbd, 0x7d,
  0x36, 0xb1, 0x3b, 0xa1, 0xf5, 0x7b, 0xb3, 0xbb, 0xf8, 0x9b, 0xde, 0xce,
  0xf8, 0x58, 0x37, 0x4f, 0xb5, 0x6b, 0x19, 0xa2, 0xc0, 0xed, 0x3e, 0xde,
  0x28, 0x84, 0x1a, 0xe9, 0x7b, 0xbf, 0xd6, 0xe5, 0x27, 0x73, 0x87, 0xa5,
  0x7d, 0xf0, 0xf7, 0x3d, 0x25, 0xab, 0x41, 0xd1, 0x89, 0x23, 0x5d, 0x44,
  0xd1, 0x15, 0x43, 0xa6, 0xa4, 0x28, 0xba, 0xea, 0x48, 0x87, 0xaa, 0xc0,
  0xff, 0x1c, 0xc9, 0x75, 0x8f, 0xf6, 0x3d, 0x27, 0x09, 0xbb, 0xd2, 0x9c,
  0x3e, 0x4e, 0xf2, 0x2d, 0x7d, 0x9f, 0x3e, 0xc5, 0xeb, 0xfd, 0xf6, 0xfe,
  0x28, 0x6c, 0x3e, 0x7c, 0xd7, 0xfb, 0x79, 0x44, 0xf2, 0xb4, 0x03, 0xf0,
  0xd4, 0x84, 0x97, 0x39, 0x20, 0x4f, 0xdd, 0x9b, 0xa7, 0xd9, 0x70, 0x51,
  0xca, 0x78, 0xd1, 0x09, 0x64, 0x7c, 0xe4, 0x61, 0xbc, 0xd6, 0x1d, 0xcd,
  0x56, 0xa4, 0xab, 0x75, 0x27, 0x91, 0x7b, 0x6f, 0xde, 0x72, 0x97, 0xb7,
  0xbc, 0x0f, 0xef, 0x4a, 0x97, 0x77, 0x65, 0x1f, 0xde, 0xd5, 0x2e, 0xef,
  0xea, 0x3e, 0xbc, 0xfb, 0xf3, 0x75, 0xd2, 0x7b, 0x51, 0x76, 0x65, 0xbc,
  0x2d, 0x01, 0x43, 0x0c, 0x14, 0x86, 0x9a, 0x0c, 0x1e, 0x86, 0x9a, 0x0c,
  0x1e, 0x86, 0x9a, 0x0c, 0x1e, 0x86, 0x9a, 0x0c, 0x1e, 0x86, 0x9a, 0x0c,
  0x1e, 0x86, 0x9a, 0x0c, 0x2e, 0x7e, 0xa8, 0xc4, 0x9d, 0x2f, 0x7e, 0xd9,
  0x52, 0xff, 0x78, 0xe6, 0xa7, 0x6f, 0x4f, 0xbc, 0x14, 0x77, 0xe0, 0xd2,
  0xb6, 0xfa, 0xf5, 0x8d, 0x5b, 0x17, 0x54, 0xf8, 0x70, 0x3d, 0xd2, 0xde,
  0x6a, 0x47, 0xd6, 0x56, 0xdb, 0x56, 0x57, 0xdb, 0xb1, 0xfa, 0x9e, 0xb4,
  0xb7, 0xdb, 0x19, 0x9a, 0xdd, 0x90, 0xcb, 0xee, 0x2a, 0x0e, 0x4d, 0xc7,
  0xac, 0xfa, 0x67, 0xdb, 0xdc, 0x9e, 0x79, 0x37, 0xad, 0x82, 0xb2, 0xae,
  0x80, 0x1c, 0x13, 0x80, 0xa3, 0x42, 0xfe, 0x59, 0x17, 0x40, 0xcf, 0x08,
  0x30, 0xb3, 0x02, 0xac, 0x50, 0x80, 0x76, 0x42, 0x40, 0x66, 0x5a, 0x80,
  0x3e, 0x2b, 0xc0, 0x68, 0x0a, 0x80, 0xf3, 0x02, 0xc8, 0x0b, 0x82, 0x64,
  0xf3, 0x82, 0xe4, 0x46, 0x04, 0xc1, 0x31, 0x41, 0x9c, 0xb2, 0x20, 0xf4,
  0xac, 0x20, 0x66, 0x4e, 0x10, 0xab, 0x2a, 0x88, 0xf6, 0xa4, 0x20, 0x99,
  0x19, 0x41, 0xf4, 0x39, 0x41, 0x8c, 0xa3, 0x82, 0xc0, 0xf3, 0x82, 0x90,
  0x17, 0x05, 0x55, 0x3f, 0x6a, 0x7f, 0xa3, 0x7e, 0xd2, 0xde, 0x56, 0x3f,
  0x6d, 0x7f, 0xb6, 0x40, 0xf2, 0x91, 0xb2, 0xf5, 0x0e, 0xb3, 0x67, 0x37,
  0x64, 0x3d, 0x7b, 0x97, 0x41, 0x33, 0x8d, 0x8b, 0x69, 0xcd, 0x8d, 0xa7,
  0xe5, 0x78, 0xe3, 0xf6, 0xcd, 0xf5, 0x39, 0xa6, 0xd0, 0xd9, 0x8a, 0x47,
  0x1b, 0xbe, 0x4f, 0x55, 0x83, 0x21, 0x51, 0x03, 0x2c, 0x4c, 0x31, 0x6e,
  0x16, 0x02, 0x4e, 0xf3, 0x8c, 0xdb, 0xc5, 0x80, 0x5b, 0x4b, 0x2c, 0xc2,
  0xa5, 0x20, 0xb2, 0xa6, 0x34, 0xb4, 0x0c, 0x1d, 0xad, 0xbc, 0x8b, 0x0e,
  0xcc, 0x77, 0x48, 0xf9, 0x78, 0x9c, 0x93, 0xa3, 0x59, 0x3e, 0x16, 0xbb,
  0x72, 0xb4, 0xcb, 0x4f, 0xc4, 0xf9, 0xf4, 0xfd, 0x64, 0xec, 0xa5, 0xfe,
  0x53, 0xb1, 0x33, 0xde, 0xc0, 0x42, 0xea, 0x3b, 0x1d, 0x9b, 0xa9, 0xef,
  0xb9, 0x98, 0xa4, 0x3e, 0x1e, 0xdb, 0xe9, 0xfc, 0x85, 0x38, 0x77, 0xa8,
  0xc1, 0xdd, 0x6a, 0x83, 0x17, 0xe5, 0x19, 0xb9, 0x4c, 0x03, 0x71, 0xbc,
  0x84, 0xc5, 0x32, 0x43, 0xac, 0x86, 0xe8, 0x4d, 0x04, 0x98, 0x33, 0x18,
  0xcf, 0x6a, 0x25, 0xcc, 0x3f, 0x12, 0xf0, 0x7c, 0xa6, 0x86, 0xae, 0x8c,
  0x2b, 0x39, 0x3f, 0xa7, 0x1f, 0x5f, 0x2b, 0x4c, 0x05, 0x3c, 0x66, 0x2c,
  0x74, 0xe0, 0x48, 0x07, 0x5d, 0x25, 0xc4, 0x25, 0x88, 0xe2, 0x0a, 0x5d,
  0xc9, 0x01, 0xe9, 0xfc, 0x0e, 0x1f, 0x13, 0x98, 0x98, 0xc6, 0x3c, 0x09,
  0x10, 0xa6, 0x26, 0x65, 0x6e, 0x80, 0xae, 0x56, 0x47, 0xeb, 0x10, 0x43,
  0x66, 0x04, 0x3c, 0x27, 0xcf, 0x31, 0x0b, 0xc0, 0xcd, 0x8c, 0x87, 0x4c,
  0xd3, 0x30, 0x89, 0x39, 0xaf, 0x9f, 0x5e, 0x2b, 0xe4, 0x03, 0x99, 0x37,
  0x70, 0x6b, 0x81, 0x45, 0x4c, 0xce, 0x8d, 0xe8, 0xd6, 0x9a, 0x27, 0xf7,
  0xf7, 0xe4, 0xfe, 0x71, 0x30, 0x19, 0x8e, 0x95, 0x6a, 0x08, 0x4b, 0x0d,
  0xe9, 0x3b, 0xd2, 0xf1, 0x93, 0xb9, 0x3a, 0x5d, 0xb1, 0x19, 0x43, 0xb7,
  0x7b, 0x66, 0x3c, 0x4d, 0x57, 0x8a, 0xf2, 0x2c, 0xf3, 0x51, 0x0f, 0x8b,
  0x45, 0x1f, 0xad, 0x79, 0x16, 0xb9, 0x32, 0x0f, 0x30, 0x3c, 0x4e, 0x9d,
  0xf8, 0xb7, 0x11, 0xf8, 0x39, 0xa9, 0xd4, 0x22, 0x46, 0x9b, 0x1b, 0xb1,
  0xd4, 0xa1, 0x1c, 0xd4, 0xb8, 0x9d, 0xf7, 0x78, 0xa1, 0xea, 0xa2, 0xdd,
  0xdd, 0x63, 0xb4, 0x14, 0x62, 0xa9, 0x54, 0xc2, 0xd8, 0xf3, 0x42, 0xba,
  0xe0, 0x46, 0xd6, 0x38, 0xc3, 0x20, 0x08, 0x79, 0x25, 0x28, 0x71, 0xb3,
  0xe8, 0xa1, 0x3d, 0xe3, 0xa3, 0xb9, 0xe0, 0x45, 0xb6, 0xeb, 0x62, 0xa2,
  0xe3, 0x04, 0x0b, 0xb0, 0xe6, 0x97, 0x78, 0xe8, 0x87, 0xbc, 0xea, 0xd7,
  0x38, 0x9d, 0x77, 0xa3, 0x44, 0x1b, 0xa5, 0x54, 0x82, 0xe4, 0xae, 0x20,
  0xf4, 0xc0, 0xf6, 0x3c, 0x4c, 0x74, 0x22, 0x35, 0x1f, 0xcc, 0x79, 0x2f,
  0xa2, 0x13, 0x2e, 0xd6, 0x59, 0x1d, 0x27, 0x65, 0xec, 0x33, 0x6e, 0xc0,
  0xa7, 0xdd, 0x3a, 0x3f, 0xec, 0x4a, 0xed, 0x67, 0x3c, 0x9c, 0xf5, 0xea,
  0x7c, 0xce, 0x0b, 0x78, 0xc3, 0x63, 0xfc, 0xda, 0x53, 0x37, 0xd7, 0x55,
  0x47, 0x47, 0x30, 0x01, 0x89, 0xad, 0xa0, 0x92, 0x93, 0x77, 0x65, 0x20,
  0xc2, 0x38, 0x45, 0x52, 0xb5, 0x10, 0x0d, 0x1f, 0x95, 0x43, 0xc9, 0xb7,
  0x51, 0x41, 0x8a, 0x94, 0x9b, 0xbe, 0xc5, 0xad, 0x8a, 0xc6, 0x0d, 0x79,
  0x56, 0x53, 0xf7, 0x56, 0x13, 0x9d, 0x8f, 0xea, 0xfe, 0x6a, 0x12, 0xc7,
  0x31, 0xdd, 0x5a, 0x35, 0xc6, 0x28, 0xb7, 0xc7, 0x2c, 0xee, 0x8c, 0x69,
  0x7c, 0xef, 0x3a, 0xfb, 0x4d, 0x39, 0x7f, 0xeb, 0x3f, 0xb5, 0x5e, 0x39,
  0xdd, 0x6b, 0xdc, 0x50, 0xd8, 0xe9, 0x0f, 0x25, 0xe8, 0xf9, 0x2c, 0xb2,
  0x7b, 0xce, 0x4e, 0xba, 0x3e, 0x0f, 0xd4, 0xe2, 0x5a, 0xff, 0x62, 0xd8,
  0xe9, 0x8f, 0x50, 0xb9, 0x98, 0x3c, 0x50, 0x89, 0x27, 0x35, 0x7d, 0x0f,
  0xf7, 0x7e, 0x1b, 0x7c, 0x38, 0xb7, 0x78, 0xf2, 0xe5, 0xd7, 0x5b, 0x97,
  0xce, 0xb5, 0xae, 0xbf, 0xf2, 0xea, 0x99, 0xd6, 0xe5, 0xe5, 0x37, 0x5a,
  0xaf, 0x5d, 0x3e, 0x7f, 0xbd, 0xd7, 0xf1, 0xfa, 0xaa, 0xdb, 0x81, 0x0a,
  0xa5, 0x19, 0xd2, 0x9a, 0x69, 0x34, 0xf7, 0x76, 0x7a, 0x3c, 0x79, 0x57,
  0x7b, 0x6d, 0x31, 0x80, 0xbf, 0x00, 0x5d, 0x4d, 0xa3, 0x97, 0x00, 0x00,
  0xdb, 0x1e, 0xae, 0x74, 0xfb, 0x41, 0xdf, 0xc2, 0x3c, 0x5b, 0x00, 0xb1,
  0xb7, 0x7f, 0x9f, 0x5a
};
