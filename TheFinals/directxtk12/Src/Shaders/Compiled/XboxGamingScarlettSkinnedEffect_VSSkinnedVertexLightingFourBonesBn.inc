#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettSkinnedEffect_VSSkinnedVertexLightingFourBonesBn.pdb
; shader hash: 0e0bf775d0e7542ca3aa3a38185f8bc4
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 5
; SigOutputElements: 4
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 5
; SigOutputVectors[0]: 4
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSSkinnedVertexLightingFourBonesBn
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 1 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 2 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 15 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedVertexLightingFourBonesBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = fmul fast float %12, 2.000000e+00
  %20 = fmul fast float %13, 2.000000e+00
  %21 = fmul fast float %14, 2.000000e+00
  %22 = fadd fast float %19, -1.000000e+00
  %23 = fadd fast float %20, -1.000000e+00
  %24 = fadd fast float %21, -1.000000e+00
  %25 = mul i32 %6, 3
  %26 = add i32 %25, 26
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %26)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = add i32 %25, 27
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %32)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = add i32 %25, 28
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %38)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %39, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %39, 3
  %44 = fmul fast float %28, %2
  %45 = fmul fast float %34, %2
  %46 = fmul fast float %40, %2
  %47 = fmul fast float %29, %2
  %48 = fmul fast float %35, %2
  %49 = fmul fast float %41, %2
  %50 = fmul fast float %30, %2
  %51 = fmul fast float %36, %2
  %52 = fmul fast float %42, %2
  %53 = fmul fast float %31, %2
  %54 = fmul fast float %37, %2
  %55 = fmul fast float %43, %2
  %56 = mul i32 %7, 3
  %57 = add i32 %56, 26
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %57)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = extractvalue %dx.types.CBufRet.f32 %58, 3
  %63 = add i32 %56, 27
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %63)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %69 = add i32 %56, 28
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %69)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = fmul fast float %59, %3
  %76 = fmul fast float %65, %3
  %77 = fmul fast float %71, %3
  %78 = fmul fast float %60, %3
  %79 = fmul fast float %66, %3
  %80 = fmul fast float %72, %3
  %81 = fmul fast float %61, %3
  %82 = fmul fast float %67, %3
  %83 = fmul fast float %73, %3
  %84 = fmul fast float %62, %3
  %85 = fmul fast float %68, %3
  %86 = fmul fast float %74, %3
  %87 = fadd fast float %75, %44
  %88 = fadd fast float %76, %45
  %89 = fadd fast float %77, %46
  %90 = fadd fast float %78, %47
  %91 = fadd fast float %79, %48
  %92 = fadd fast float %80, %49
  %93 = fadd fast float %81, %50
  %94 = fadd fast float %82, %51
  %95 = fadd fast float %83, %52
  %96 = fadd fast float %84, %53
  %97 = fadd fast float %85, %54
  %98 = fadd fast float %86, %55
  %99 = mul i32 %8, 3
  %100 = add i32 %99, 26
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %100)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = extractvalue %dx.types.CBufRet.f32 %101, 3
  %106 = add i32 %99, 27
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %106)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = add i32 %99, 28
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %112)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 3
  %118 = fmul fast float %102, %4
  %119 = fmul fast float %108, %4
  %120 = fmul fast float %114, %4
  %121 = fmul fast float %103, %4
  %122 = fmul fast float %109, %4
  %123 = fmul fast float %115, %4
  %124 = fmul fast float %104, %4
  %125 = fmul fast float %110, %4
  %126 = fmul fast float %116, %4
  %127 = fmul fast float %105, %4
  %128 = fmul fast float %111, %4
  %129 = fmul fast float %117, %4
  %130 = fadd fast float %87, %118
  %131 = fadd fast float %88, %119
  %132 = fadd fast float %89, %120
  %133 = fadd fast float %90, %121
  %134 = fadd fast float %91, %122
  %135 = fadd fast float %92, %123
  %136 = fadd fast float %93, %124
  %137 = fadd fast float %94, %125
  %138 = fadd fast float %95, %126
  %139 = fadd fast float %96, %127
  %140 = fadd fast float %97, %128
  %141 = fadd fast float %98, %129
  %142 = mul i32 %9, 3
  %143 = add i32 %142, 26
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %143)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %144, 3
  %149 = add i32 %142, 27
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %149)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = add i32 %142, 28
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %155)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = extractvalue %dx.types.CBufRet.f32 %156, 1
  %159 = extractvalue %dx.types.CBufRet.f32 %156, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %156, 3
  %161 = fmul fast float %145, %5
  %162 = fmul fast float %151, %5
  %163 = fmul fast float %157, %5
  %164 = fmul fast float %146, %5
  %165 = fmul fast float %152, %5
  %166 = fmul fast float %158, %5
  %167 = fmul fast float %147, %5
  %168 = fmul fast float %153, %5
  %169 = fmul fast float %159, %5
  %170 = fmul fast float %148, %5
  %171 = fmul fast float %154, %5
  %172 = fmul fast float %160, %5
  %173 = fadd fast float %130, %161
  %174 = fadd fast float %131, %162
  %175 = fadd fast float %132, %163
  %176 = fadd fast float %133, %164
  %177 = fadd fast float %134, %165
  %178 = fadd fast float %135, %166
  %179 = fadd fast float %136, %167
  %180 = fadd fast float %137, %168
  %181 = fadd fast float %138, %169
  %182 = fadd fast float %139, %170
  %183 = fadd fast float %140, %171
  %184 = fadd fast float %141, %172
  %185 = fmul fast float %173, %15
  %186 = call float @dx.op.tertiary.f32(i32 46, float %16, float %176, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %17, float %179, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %18, float %182, float %187)  ; FMad(a,b,c)
  %189 = fmul fast float %174, %15
  %190 = call float @dx.op.tertiary.f32(i32 46, float %16, float %177, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %17, float %180, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %18, float %183, float %191)  ; FMad(a,b,c)
  %193 = fmul fast float %175, %15
  %194 = call float @dx.op.tertiary.f32(i32 46, float %16, float %178, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %17, float %181, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %18, float %184, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %173, %22
  %198 = call float @dx.op.tertiary.f32(i32 46, float %23, float %176, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %24, float %179, float %198)  ; FMad(a,b,c)
  %200 = fmul fast float %174, %22
  %201 = call float @dx.op.tertiary.f32(i32 46, float %23, float %177, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %24, float %180, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %175, %22
  %204 = call float @dx.op.tertiary.f32(i32 46, float %23, float %178, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %24, float %181, float %204)  ; FMad(a,b,c)
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 2
  %210 = extractvalue %dx.types.CBufRet.f32 %206, 3
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 2
  %215 = extractvalue %dx.types.CBufRet.f32 %211, 3
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 2
  %220 = extractvalue %dx.types.CBufRet.f32 %216, 3
  %221 = fmul fast float %207, %188
  %222 = call float @dx.op.tertiary.f32(i32 46, float %192, float %208, float %221)  ; FMad(a,b,c)
  %223 = call float @dx.op.tertiary.f32(i32 46, float %196, float %209, float %222)  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %18, float %210, float %223)  ; FMad(a,b,c)
  %225 = fmul fast float %212, %188
  %226 = call float @dx.op.tertiary.f32(i32 46, float %192, float %213, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %196, float %214, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %18, float %215, float %227)  ; FMad(a,b,c)
  %229 = fmul fast float %217, %188
  %230 = call float @dx.op.tertiary.f32(i32 46, float %192, float %218, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %196, float %219, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %18, float %220, float %231)  ; FMad(a,b,c)
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %237 = fsub fast float %234, %224
  %238 = fsub fast float %235, %228
  %239 = fsub fast float %236, %232
  %240 = call float @dx.op.dot3.f32(i32 55, float %237, float %238, float %239, float %237, float %238, float %239)  ; Dot3(ax,ay,az,bx,by,bz)
  %241 = call float @dx.op.unary.f32(i32 25, float %240)  ; Rsqrt(value)
  %242 = fmul fast float %237, %241
  %243 = fmul fast float %238, %241
  %244 = fmul fast float %239, %241
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = extractvalue %dx.types.CBufRet.f32 %245, 2
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = extractvalue %dx.types.CBufRet.f32 %249, 2
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = fmul fast float %246, %199
  %258 = call float @dx.op.tertiary.f32(i32 46, float %202, float %247, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %205, float %248, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %250, %199
  %261 = call float @dx.op.tertiary.f32(i32 46, float %202, float %251, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %205, float %252, float %261)  ; FMad(a,b,c)
  %263 = fmul fast float %254, %199
  %264 = call float @dx.op.tertiary.f32(i32 46, float %202, float %255, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %205, float %256, float %264)  ; FMad(a,b,c)
  %266 = call float @dx.op.dot3.f32(i32 55, float %259, float %262, float %265, float %259, float %262, float %265)  ; Dot3(ax,ay,az,bx,by,bz)
  %267 = call float @dx.op.unary.f32(i32 25, float %266)  ; Rsqrt(value)
  %268 = fmul fast float %267, %259
  %269 = fmul fast float %267, %262
  %270 = fmul fast float %267, %265
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 2
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %275, 2
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %283 = fsub fast float %242, %272
  %284 = fsub fast float %243, %273
  %285 = fsub fast float %244, %274
  %286 = call float @dx.op.dot3.f32(i32 55, float %283, float %284, float %285, float %283, float %284, float %285)  ; Dot3(ax,ay,az,bx,by,bz)
  %287 = call float @dx.op.unary.f32(i32 25, float %286)  ; Rsqrt(value)
  %288 = fmul fast float %287, %284
  %289 = fmul fast float %287, %285
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %292 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %293 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 0
  %296 = extractvalue %dx.types.CBufRet.f32 %294, 1
  %297 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 0
  %300 = extractvalue %dx.types.CBufRet.f32 %298, 1
  %301 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %302 = fsub fast float %242, %291
  %303 = fsub fast float %243, %292
  %304 = fsub fast float %244, %293
  %305 = call float @dx.op.dot3.f32(i32 55, float %302, float %303, float %304, float %302, float %303, float %304)  ; Dot3(ax,ay,az,bx,by,bz)
  %306 = call float @dx.op.unary.f32(i32 25, float %305)  ; Rsqrt(value)
  %307 = fmul fast float %306, %303
  %308 = fmul fast float %306, %304
  %309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %310 = extractvalue %dx.types.CBufRet.f32 %309, 0
  %311 = extractvalue %dx.types.CBufRet.f32 %309, 1
  %312 = extractvalue %dx.types.CBufRet.f32 %309, 2
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = fsub fast float %242, %310
  %322 = fsub fast float %243, %311
  %323 = fsub fast float %244, %312
  %324 = call float @dx.op.dot3.f32(i32 55, float %321, float %322, float %323, float %321, float %322, float %323)  ; Dot3(ax,ay,az,bx,by,bz)
  %325 = call float @dx.op.unary.f32(i32 25, float %324)  ; Rsqrt(value)
  %326 = fmul fast float %325, %322
  %327 = fmul fast float %325, %323
  %328 = fsub fast float -0.000000e+00, %273
  %329 = fsub fast float -0.000000e+00, %274
  %330 = fsub fast float -0.000000e+00, %292
  %331 = fsub fast float -0.000000e+00, %293
  %332 = fsub fast float -0.000000e+00, %311
  %333 = fsub fast float -0.000000e+00, %312
  %334 = fmul fast float %268, %272
  %335 = fsub fast float -0.000000e+00, %334
  %336 = call float @dx.op.tertiary.f32(i32 46, float %328, float %269, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %329, float %270, float %336)  ; FMad(a,b,c)
  %338 = fmul fast float %268, %291
  %339 = fsub fast float -0.000000e+00, %338
  %340 = call float @dx.op.tertiary.f32(i32 46, float %330, float %269, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %331, float %270, float %340)  ; FMad(a,b,c)
  %342 = fmul fast float %268, %310
  %343 = fsub fast float -0.000000e+00, %342
  %344 = call float @dx.op.tertiary.f32(i32 46, float %332, float %269, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %333, float %270, float %344)  ; FMad(a,b,c)
  %346 = fmul fast float %283, %268
  %347 = fmul fast float %346, %287
  %348 = call float @dx.op.tertiary.f32(i32 46, float %288, float %269, float %347)  ; FMad(a,b,c)
  %349 = call float @dx.op.tertiary.f32(i32 46, float %289, float %270, float %348)  ; FMad(a,b,c)
  %350 = fmul fast float %302, %268
  %351 = fmul fast float %350, %306
  %352 = call float @dx.op.tertiary.f32(i32 46, float %307, float %269, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %308, float %270, float %352)  ; FMad(a,b,c)
  %354 = fmul fast float %321, %268
  %355 = fmul fast float %354, %325
  %356 = call float @dx.op.tertiary.f32(i32 46, float %326, float %269, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %327, float %270, float %356)  ; FMad(a,b,c)
  %358 = fcmp fast olt float %337, 0.000000e+00
  %359 = fcmp fast olt float %341, 0.000000e+00
  %360 = fcmp fast olt float %345, 0.000000e+00
  %361 = select i1 %358, float 0.000000e+00, float 1.000000e+00
  %362 = select i1 %359, float 0.000000e+00, float 1.000000e+00
  %363 = select i1 %360, float 0.000000e+00, float 1.000000e+00
  %364 = fmul fast float %361, %337
  %365 = fmul fast float %362, %341
  %366 = fmul fast float %363, %345
  %367 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %368 = extractvalue %dx.types.CBufRet.f32 %367, 3
  %369 = call float @dx.op.binary.f32(i32 35, float %349, float 0.000000e+00)  ; FMax(a,b)
  %370 = call float @dx.op.binary.f32(i32 35, float %353, float 0.000000e+00)  ; FMax(a,b)
  %371 = call float @dx.op.binary.f32(i32 35, float %357, float 0.000000e+00)  ; FMax(a,b)
  %372 = fmul fast float %369, %361
  %373 = fmul fast float %370, %362
  %374 = fmul fast float %371, %363
  %375 = call float @dx.op.unary.f32(i32 23, float %372)  ; Log(value)
  %376 = call float @dx.op.unary.f32(i32 23, float %373)  ; Log(value)
  %377 = call float @dx.op.unary.f32(i32 23, float %374)  ; Log(value)
  %378 = fmul fast float %375, %368
  %379 = fmul fast float %376, %368
  %380 = fmul fast float %377, %368
  %381 = call float @dx.op.unary.f32(i32 21, float %378)  ; Exp(value)
  %382 = call float @dx.op.unary.f32(i32 21, float %379)  ; Exp(value)
  %383 = call float @dx.op.unary.f32(i32 21, float %380)  ; Exp(value)
  %384 = fmul fast float %381, %337
  %385 = fmul fast float %382, %341
  %386 = fmul fast float %383, %345
  %387 = fmul fast float %364, %276
  %388 = call float @dx.op.tertiary.f32(i32 46, float %365, float %295, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %366, float %314, float %388)  ; FMad(a,b,c)
  %390 = fmul fast float %364, %277
  %391 = call float @dx.op.tertiary.f32(i32 46, float %365, float %296, float %390)  ; FMad(a,b,c)
  %392 = call float @dx.op.tertiary.f32(i32 46, float %366, float %315, float %391)  ; FMad(a,b,c)
  %393 = fmul fast float %364, %278
  %394 = call float @dx.op.tertiary.f32(i32 46, float %365, float %297, float %393)  ; FMad(a,b,c)
  %395 = call float @dx.op.tertiary.f32(i32 46, float %366, float %316, float %394)  ; FMad(a,b,c)
  %396 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.f32 %396, 0
  %398 = extractvalue %dx.types.CBufRet.f32 %396, 1
  %399 = extractvalue %dx.types.CBufRet.f32 %396, 2
  %400 = fmul fast float %397, %389
  %401 = fmul fast float %398, %392
  %402 = fmul fast float %399, %395
  %403 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %404 = extractvalue %dx.types.CBufRet.f32 %403, 0
  %405 = extractvalue %dx.types.CBufRet.f32 %403, 1
  %406 = extractvalue %dx.types.CBufRet.f32 %403, 2
  %407 = fadd fast float %400, %404
  %408 = fadd fast float %401, %405
  %409 = fadd fast float %402, %406
  %410 = fmul fast float %384, %280
  %411 = call float @dx.op.tertiary.f32(i32 46, float %385, float %299, float %410)  ; FMad(a,b,c)
  %412 = call float @dx.op.tertiary.f32(i32 46, float %386, float %318, float %411)  ; FMad(a,b,c)
  %413 = fmul fast float %384, %281
  %414 = call float @dx.op.tertiary.f32(i32 46, float %385, float %300, float %413)  ; FMad(a,b,c)
  %415 = call float @dx.op.tertiary.f32(i32 46, float %386, float %319, float %414)  ; FMad(a,b,c)
  %416 = fmul fast float %384, %282
  %417 = call float @dx.op.tertiary.f32(i32 46, float %385, float %301, float %416)  ; FMad(a,b,c)
  %418 = call float @dx.op.tertiary.f32(i32 46, float %386, float %320, float %417)  ; FMad(a,b,c)
  %419 = extractvalue %dx.types.CBufRet.f32 %367, 0
  %420 = extractvalue %dx.types.CBufRet.f32 %367, 1
  %421 = extractvalue %dx.types.CBufRet.f32 %367, 2
  %422 = fmul fast float %419, %412
  %423 = fmul fast float %420, %415
  %424 = fmul fast float %421, %418
  %425 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %426 = extractvalue %dx.types.CBufRet.f32 %425, 0
  %427 = extractvalue %dx.types.CBufRet.f32 %425, 1
  %428 = extractvalue %dx.types.CBufRet.f32 %425, 2
  %429 = extractvalue %dx.types.CBufRet.f32 %425, 3
  %430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %431 = extractvalue %dx.types.CBufRet.f32 %430, 0
  %432 = extractvalue %dx.types.CBufRet.f32 %430, 1
  %433 = extractvalue %dx.types.CBufRet.f32 %430, 2
  %434 = extractvalue %dx.types.CBufRet.f32 %430, 3
  %435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %436 = extractvalue %dx.types.CBufRet.f32 %435, 0
  %437 = extractvalue %dx.types.CBufRet.f32 %435, 1
  %438 = extractvalue %dx.types.CBufRet.f32 %435, 2
  %439 = extractvalue %dx.types.CBufRet.f32 %435, 3
  %440 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %441 = extractvalue %dx.types.CBufRet.f32 %440, 0
  %442 = extractvalue %dx.types.CBufRet.f32 %440, 1
  %443 = extractvalue %dx.types.CBufRet.f32 %440, 2
  %444 = extractvalue %dx.types.CBufRet.f32 %440, 3
  %445 = fmul fast float %426, %188
  %446 = call float @dx.op.tertiary.f32(i32 46, float %192, float %427, float %445)  ; FMad(a,b,c)
  %447 = call float @dx.op.tertiary.f32(i32 46, float %196, float %428, float %446)  ; FMad(a,b,c)
  %448 = call float @dx.op.tertiary.f32(i32 46, float %18, float %429, float %447)  ; FMad(a,b,c)
  %449 = fmul fast float %431, %188
  %450 = call float @dx.op.tertiary.f32(i32 46, float %192, float %432, float %449)  ; FMad(a,b,c)
  %451 = call float @dx.op.tertiary.f32(i32 46, float %196, float %433, float %450)  ; FMad(a,b,c)
  %452 = call float @dx.op.tertiary.f32(i32 46, float %18, float %434, float %451)  ; FMad(a,b,c)
  %453 = fmul fast float %436, %188
  %454 = call float @dx.op.tertiary.f32(i32 46, float %192, float %437, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %196, float %438, float %454)  ; FMad(a,b,c)
  %456 = call float @dx.op.tertiary.f32(i32 46, float %18, float %439, float %455)  ; FMad(a,b,c)
  %457 = fmul fast float %441, %188
  %458 = call float @dx.op.tertiary.f32(i32 46, float %192, float %442, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %196, float %443, float %458)  ; FMad(a,b,c)
  %460 = call float @dx.op.tertiary.f32(i32 46, float %18, float %444, float %459)  ; FMad(a,b,c)
  %461 = extractvalue %dx.types.CBufRet.f32 %396, 3
  %462 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %463 = extractvalue %dx.types.CBufRet.f32 %462, 0
  %464 = extractvalue %dx.types.CBufRet.f32 %462, 1
  %465 = extractvalue %dx.types.CBufRet.f32 %462, 2
  %466 = extractvalue %dx.types.CBufRet.f32 %462, 3
  %467 = call float @dx.op.dot4.f32(i32 56, float %188, float %192, float %196, float %18, float %463, float %464, float %465, float %466)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %468 = call float @dx.op.unary.f32(i32 7, float %467)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %407)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %408)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %409)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %461)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %422)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %423)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %424)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %468)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %10)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %448)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %452)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %456)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %460)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!8 = !{[22 x i32] [i32 20, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687, i32 61687]}
!9 = !{void ()* @VSSkinnedVertexLightingFourBonesBn, !"VSSkinnedVertexLightingFourBonesBn", !10, !5, null}
!10 = !{!11, !21, null}
!11 = !{!12, !15, !17, !19, !20}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 2, i8 0, !18}
!18 = !{i32 3, i32 3}
!19 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !13, i8 0, i32 1, i8 4, i32 3, i8 0, !14}
!20 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 4, i8 0, !14}
!21 = !{!22, !23, !25, !26}
!22 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!23 = !{i32 1, !"COLOR", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!24 = !{i32 1}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 2, i8 0, !18}
!26 = !{i32 3, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 3, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 58
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1536
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0x75f70b0e, 0x2c54e7d0                // 000000000000: D5800B0E 03FEEBF7 2C54E7D0
;   v_nop_xbox_data 0x383aaaa3, 0xc48b5f18                // 00000000000C: D580AAA3 03FE713A C48B5F18
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_waitcnt     vmcnt(0)                                // 000000000020: BF8C3F70
;   v_lshl_add_u32  v0, v16, 1, v16                       // 000000000024: D7460000 04410310
;   v_lshl_add_u32  v11, v17, 1, v17                      // 00000000002C: D746000B 04450311
;   s_mov_b32     s63, lit(0x11014fac)                    // 000000000034: BEBF03FF 11014FAC
;   s_mov_b32     s62, -1                                 // 00000000003C: BEBE03C1
;   s_mov_b32     s60, s8                                 // 000000000040: BEBC0308
;   v_add_nc_u32  v1, 26, v0                              // 000000000044: 4A02009A
;   v_add_nc_u32  v28, 27, v0                             // 000000000048: 4A38009B
;   v_add_nc_u32  v24, 26, v11                            // 00000000004C: 4A30169A
;   v_add_nc_u32  v14, 28, v0                             // 000000000050: 4A1C009C
;   s_or_b32      s61, s9, lit(0x00100000)                // 000000000054: 883DFF09 00100000
;   v_lshl_add_u32  v18, v18, 1, v18                      // 00000000005C: D7460012 04490312
;   buffer_load_dwordx4  v[0:3], v1, s[60:63], 0 idxen    // 000000000064: E0382000 800F0001
;   v_add_nc_u32  v32, 27, v11                            // 00000000006C: 4A40169B
;   buffer_load_dwordx4  v[14:17], v14, s[60:63], 0 idxen // 000000000070: E0382000 800F0E0E
;   buffer_load_dwordx4  v[24:27], v24, s[60:63], 0 idxen // 000000000078: E0382000 800F1818
;   buffer_load_dwordx4  v[28:31], v28, s[60:63], 0 idxen // 000000000080: E0382000 800F1C1C
;   v_add_nc_u32  v36, 26, v18                            // 000000000088: 4A48249A
;   buffer_load_dwordx4  v[32:35], v32, s[60:63], 0 idxen // 00000000008C: E0382000 800F2020
;   v_lshl_add_u32  v19, v19, 1, v19                      // 000000000094: D7460013 044D0313
;   v_add_nc_u32  v52, 28, v18                            // 00000000009C: 4A68249C
;   v_add_nc_u32  v11, 28, v11                            // 0000000000A0: 4A16169C
;   buffer_load_dwordx4  v[36:39], v36, s[60:63], 0 idxen // 0000000000A4: E0382000 800F2424
;   v_add_nc_u32  v18, 27, v18                            // 0000000000AC: 4A24249B
;   v_add_nc_u32  v44, 26, v19                            // 0000000000B0: 4A58269A
;   s_buffer_load_dwordx16  s[0:15], s[60:63], 0x0000e0   // 0000000000B4: F430001E FA0000E0
;   buffer_load_dwordx4  v[48:51], v11, s[60:63], 0 idxen // 0000000000BC: E0382000 800F300B
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x0000c0   // 0000000000C4: F428091E FA0000C0
;   buffer_load_dwordx4  v[40:43], v18, s[60:63], 0 idxen // 0000000000CC: E0382000 800F2812
;   buffer_load_dwordx4  v[44:47], v44, s[60:63], 0 idxen // 0000000000D4: E0382000 800F2C2C
;   s_buffer_load_dwordx16  s[20:35], s[60:63], 0x000130  // 0000000000DC: F430051E FA000130
;   v_fma_f32     v10, v10, 2.0, -1.0                     // 0000000000E4: D54B000A 03CDE90A
;   s_waitcnt     vmcnt(8)                                // 0000000000EC: BF8C3F78
;   v_mul_legacy_f32  v53, v0, v20                        // 0000000000F0: 0E6A2900
;   v_mul_legacy_f32  v18, v1, v20                        // 0000000000F4: 0E242901
;   v_mul_legacy_f32  v55, v3, v20                        // 0000000000F8: 0E6E2903
;   v_mul_legacy_f32  v11, v2, v20                        // 0000000000FC: 0E162902
;   s_waitcnt     vmcnt(5)                                // 000000000100: BF8C3F75
;   v_mul_legacy_f32  v57, v28, v20                       // 000000000104: 0E72291C
;   v_add_nc_u32  v28, 28, v19                            // 000000000108: 4A38269C
;   v_add_nc_u32  v19, 27, v19                            // 00000000010C: 4A26269B
;   v_fmac_f32    v53, v24, v21                           // 000000000110: 566A2B18
;   v_fmac_f32    v18, v25, v21                           // 000000000114: 56242B19
;   s_waitcnt     vmcnt(4)                                // 000000000118: BF8C3F74
;   v_fmac_f32    v57, v32, v21                           // 00000000011C: 56722B20
;   v_mul_legacy_f32  v54, v30, v20                       // 000000000120: 0E6C291E
;   v_mul_legacy_f32  v56, v29, v20                       // 000000000124: 0E70291D
;   v_fmac_f32    v55, v27, v21                           // 000000000128: 566E2B1B
;   v_fmac_f32    v11, v26, v21                           // 00000000012C: 56162B1A
;   v_mul_legacy_f32  v32, v31, v20                       // 000000000130: 0E40291F
;   buffer_load_dwordx4  v[24:27], v19, s[60:63], 0 idxen // 000000000134: E0382000 800F1813
;   buffer_load_dwordx4  v[0:3], v52, s[60:63], 0 idxen   // 00000000013C: E0382000 800F0034
;   buffer_load_dwordx4  v[28:31], v28, s[60:63], 0 idxen // 000000000144: E0382000 800F1C1C
;   v_mul_legacy_f32  v14, v14, v20                       // 00000000014C: 0E1C290E
;   s_waitcnt     vmcnt(6)                                // 000000000150: BF8C3F76
;   v_fmac_f32    v53, v36, v22                           // 000000000154: 566A2D24
;   v_mul_legacy_f32  v15, v15, v20                       // 000000000158: 0E1E290F
;   v_fmac_f32    v56, v33, v21                           // 00000000015C: 56702B21
;   v_fmac_f32    v18, v37, v22                           // 000000000160: 56242D25
;   s_waitcnt     vmcnt(5)                                // 000000000164: BF8C3F75
;   v_fmac_f32    v14, v48, v21                           // 000000000168: 561C2B30
;   s_waitcnt     vmcnt(4)                                // 00000000016C: BF8C3F74
;   v_fmac_f32    v57, v40, v22                           // 000000000170: 56722D28
;   s_waitcnt     vmcnt(3)                                // 000000000174: BF8C3F73
;   v_fmac_f32    v53, v44, v23                           // 000000000178: 566A2F2C
;   v_mul_legacy_f32  v16, v16, v20                       // 00000000017C: 0E202910
;   v_fmac_f32    v54, v34, v21                           // 000000000180: 566C2B22
;   v_fmac_f32    v15, v49, v21                           // 000000000184: 561E2B31
;   v_fmac_f32    v56, v41, v22                           // 000000000188: 56702D29
;   v_fmac_f32    v11, v38, v22                           // 00000000018C: 56162D26
;   v_fmac_f32    v18, v45, v23                           // 000000000190: 56242F2D
;   v_fmac_f32    v16, v50, v21                           // 000000000194: 56202B32
;   v_fmac_f32    v32, v35, v21                           // 000000000198: 56402B23
;   v_mul_legacy_f32  v20, v17, v20                       // 00000000019C: 0E282911
;   v_fmac_f32    v54, v42, v22                           // 0000000001A0: 566C2D2A
;   v_fmac_f32    v55, v39, v22                           // 0000000001A4: 566E2D27
;   v_fmac_f32    v11, v46, v23                           // 0000000001A8: 56162F2E
;   v_fmac_f32    v32, v43, v22                           // 0000000001AC: 56402D2B
;   v_fmac_f32    v20, v51, v21                           // 0000000001B0: 56282B33
;   v_fma_f32     v19, v8, 2.0, -1.0                      // 0000000001B4: D54B0013 03CDE908
;   v_fmac_f32    v55, v47, v23                           // 0000000001BC: 566E2F2F
;   v_fma_f32     v8, v9, 2.0, -1.0                       // 0000000001C0: D54B0008 03CDE909
;   v_mul_legacy_f32  v9, v53, v19                        // 0000000001C8: 0E122735
;   v_fmac_f32    v9, v8, v18                             // 0000000001CC: 56122508
;   v_fmac_f32    v9, v10, v11                            // 0000000001D0: 5612170A
;   s_waitcnt     vmcnt(2)                                // 0000000001D4: BF8C3F72
;   v_fmac_f32    v57, v24, v23                           // 0000000001D8: 56722F18
;   s_waitcnt     vmcnt(1)                                // 0000000001DC: BF8C3F71
;   v_fmac_f32    v14, v0, v22                            // 0000000001E0: 561C2D00
;   v_mul_legacy_f32  v0, v53, v4                         // 0000000001E4: 0E000935
;   v_fmac_f32    v15, v1, v22                            // 0000000001E8: 561E2D01
;   v_fmac_f32    v56, v25, v23                           // 0000000001EC: 56702F19
;   v_mul_legacy_f32  v1, v57, v4                         // 0000000001F0: 0E020939
;   s_waitcnt     vmcnt(0)                                // 0000000001F4: BF8C3F70
;   v_fmac_f32    v14, v28, v23                           // 0000000001F8: 561C2F1C
;   v_fmac_f32    v0, v5, v18                             // 0000000001FC: 56002505
;   v_fmac_f32    v16, v2, v22                            // 000000000200: 56202D02
;   v_fmac_f32    v54, v26, v23                           // 000000000204: 566C2F1A
;   v_fmac_f32    v1, v5, v56                             // 000000000208: 56027105
;   v_fmac_f32    v15, v29, v23                           // 00000000020C: 561E2F1D
;   v_mul_legacy_f32  v2, v14, v4                         // 000000000210: 0E04090E
;   v_fmac_f32    v0, v6, v11                             // 000000000214: 56001706
;   v_fmac_f32    v20, v3, v22                            // 000000000218: 56282D03
;   v_fmac_f32    v32, v27, v23                           // 00000000021C: 56402F1B
;   v_fmac_f32    v1, v6, v54                             // 000000000220: 56026D06
;   v_fmac_f32    v2, v5, v15                             // 000000000224: 56041F05
;   v_fmac_f32    v0, v7, v55                             // 000000000228: 56006F07
;   v_fmac_f32    v16, v30, v23                           // 00000000022C: 56202F1E
;   v_fmac_f32    v20, v31, v23                           // 000000000230: 56282F1F
;   v_fmac_f32    v1, v7, v32                             // 000000000234: 56024107
;   v_mul_legacy_f32  v23, v57, v19                       // 000000000238: 0E2E2739
;   s_waitcnt     lgkmcnt(0)                              // 00000000023C: BF8CC07F
;   v_mul_legacy_f32  v3, s8, v0                          // 000000000240: 0E060008
;   v_fmac_f32    v2, v6, v16                             // 000000000244: 56042106
;   v_mul_legacy_f32  v4, s4, v0                          // 000000000248: 0E080004
;   v_mul_legacy_f32  v5, v14, v19                        // 00000000024C: 0E0A270E
;   v_fmac_f32    v23, v8, v56                            // 000000000250: 562E7108
;   v_fmac_f32    v3, s9, v1                              // 000000000254: 56060209
;   v_fmac_f32    v2, v7, v20                             // 000000000258: 56042907
;   v_fmac_f32    v4, s5, v1                              // 00000000025C: 56080205
;   v_mul_legacy_f32  v20, s12, v0                        // 000000000260: 0E28000C
;   v_fmac_f32    v5, v8, v15                             // 000000000264: 560A1F08
;   v_fmac_f32    v23, v10, v54                           // 000000000268: 562E6D0A
;   v_fmac_f32    v3, s10, v2                             // 00000000026C: 5606040A
;   v_fmac_f32    v4, s6, v2                              // 000000000270: 56080406
;   v_fmac_f32    v20, s13, v1                            // 000000000274: 5628020D
;   v_mul_legacy_f32  v8, s24, v9                         // 000000000278: 0E101218
;   v_fmac_f32    v5, v10, v16                            // 00000000027C: 560A210A
;   v_fmac_f32    v3, s11, v7                             // 000000000280: 56060E0B
;   v_fmac_f32    v4, s7, v7                              // 000000000284: 56080E07
;   v_fmac_f32    v20, s14, v2                            // 000000000288: 5628040E
;   v_mul_legacy_f32  v10, s20, v9                        // 00000000028C: 0E141214
;   v_fmac_f32    v8, s25, v23                            // 000000000290: 56102E19
;   v_sub_f32     v22, s37, v3                            // 000000000294: 082C0625
;   v_sub_f32     v4, s36, v4                             // 000000000298: 08080824
;   v_fmac_f32    v20, s15, v7                            // 00000000029C: 56280E0F
;   s_buffer_load_dwordx16  s[4:19], s[60:63], null       // 0000000002A0: F430011E FA000000
;   v_fmac_f32    v10, s21, v23                           // 0000000002A8: 56142E15
;   v_mul_legacy_f32  v11, v22, v22                       // 0000000002AC: 0E162D16
;   v_mul_legacy_f32  v9, s28, v9                         // 0000000002B0: 0E12121C
;   v_sub_f32     v6, s38, v20                            // 0000000002B4: 080C2826
;   s_buffer_load_dwordx16  s[36:51], s[60:63], 0x000040  // 0000000002B8: F430091E FA000040
;   v_fmac_f32    v8, s26, v5                             // 0000000002C0: 56100A1A
;   v_fmac_f32    v11, v4, v4                             // 0000000002C4: 56160904
;   v_fmac_f32    v9, s29, v23                            // 0000000002C8: 56122E1D
;   v_fmac_f32    v10, s22, v5                            // 0000000002CC: 56140A16
;   v_mul_legacy_f32  v19, v8, v8                         // 0000000002D0: 0E261108
;   v_fmac_f32    v11, v6, v6                             // 0000000002D4: 56160D06
;   v_fmac_f32    v9, s30, v5                             // 0000000002D8: 56120A1E
;   v_fmac_f32    v19, v10, v10                           // 0000000002DC: 5626150A
;   v_rsq_f32     v11, v11                                // 0000000002E0: 7E165D0B
;   v_fmac_f32    v19, v9, v9                             // 0000000002E4: 56261309
;   v_rsq_f32     v23, v19                                // 0000000002E8: 7E2E5D13
;   s_waitcnt     lgkmcnt(0)                              // 0000000002EC: BF8CC07F
;   v_fma_f32     v5, v22, v11, -s17                      // 0000000002F0: D54B0005 80461716
;   v_fma_f32     v15, v22, v11, -s37                     // 0000000002F8: D54B000F 80961716
;   v_fma_f32     v16, v4, v11, -s16                      // 000000000300: D54B0010 80421704
;   v_fma_f32     v3, v22, v11, -s41                      // 000000000308: D54B0003 80A61716
;   v_fma_f32     v19, v4, v11, -s36                      // 000000000310: D54B0013 80921704
;   v_mul_legacy_f32  v17, v5, v5                         // 000000000318: 0E220B05
;   v_mul_legacy_f32  v20, v15, v15                       // 00000000031C: 0E281F0F
;   v_fma_f32     v18, v6, v11, -s18                      // 000000000320: D54B0012 804A1706
;   v_fma_f32     v21, v6, v11, -s38                      // 000000000328: D54B0015 809A1706
;   v_fma_f32     v4, v4, v11, -s40                       // 000000000330: D54B0004 80A21704
;   v_fmac_f32    v17, v16, v16                           // 000000000338: 56222110
;   v_fmac_f32    v20, v19, v19                           // 00000000033C: 56282713
;   v_mul_legacy_f32  v22, v3, v3                         // 000000000340: 0E2C0703
;   v_mul_legacy_f32  v10, v23, v10                       // 000000000344: 0E141517
;   v_fma_f32     v6, v6, v11, -s42                       // 000000000348: D54B0006 80AA1706
;   v_fmac_f32    v17, v18, v18                           // 000000000350: 56222512
;   v_fmac_f32    v20, v21, v21                           // 000000000354: 56282B15
;   v_fmac_f32    v22, v4, v4                             // 000000000358: 562C0904
;   v_mul_legacy_f32  v16, v16, v10                       // 00000000035C: 0E201510
;   v_mul_legacy_f32  v8, v23, v8                         // 000000000360: 0E101117
;   v_rsq_f32     v11, v17                                // 000000000364: 7E165D11
;   v_mul_legacy_f32  v14, s16, v10                       // 000000000368: 0E1C1410
;   v_fmac_f32    v22, v6, v6                             // 00000000036C: 562C0D06
;   v_mul_legacy_f32  v9, v23, v9                         // 000000000370: 0E121317
;   v_mul_legacy_f32  v19, v19, v10                       // 000000000374: 0E261513
;   v_rsq_f32     v20, v20                                // 000000000378: 7E285D14
;   v_fma_f32     v14, -s17, v8, -v14                     // 00000000037C: D54B000E A43A1011
;   v_mul_legacy_f32  v23, s36, v10                       // 000000000384: 0E2E1424
;   v_mul_legacy_f32  v4, v4, v10                         // 000000000388: 0E081504
;   v_mul_legacy_f32  v10, s40, v10                       // 00000000038C: 0E141428
;   v_rsq_f32     v17, v22                                // 000000000390: 7E225D16
;   v_mul_legacy_f32  v16, v16, v11                       // 000000000394: 0E201710
;   v_mul_legacy_f32  v5, v11, v5                         // 000000000398: 0E0A0B0B
;   v_fmac_f32    v14, -s18, v9                           // 00000000039C: D52B000E 20021212
;   v_mul_legacy_f32  v11, v11, v18                       // 0000000003A4: 0E16250B
;   v_fma_f32     v18, -s37, v8, -v23                     // 0000000003A8: D54B0012 A45E1025
;   v_mul_legacy_f32  v22, v19, v20                       // 0000000003B0: 0E2C2913
;   v_fmac_f32    v16, v5, v8                             // 0000000003B4: 56201105
;   v_mul_legacy_f32  v15, v20, v15                       // 0000000003B8: 0E1E1F14
;   v_fma_f32     v10, -s41, v8, -v10                     // 0000000003BC: D54B000A A42A1029
;   v_fmac_f32    v18, -s38, v9                           // 0000000003C4: D52B0012 20021226
;   v_mul_legacy_f32  v4, v4, v17                         // 0000000003CC: 0E082304
;   v_mul_legacy_f32  v3, v17, v3                         // 0000000003D0: 0E060711
;   v_fmac_f32    v22, v15, v8                            // 0000000003D4: 562C110F
;   v_mul_legacy_f32  v15, v20, v21                       // 0000000003D8: 0E1E2B14
;   v_fmac_f32    v16, v11, v9                            // 0000000003DC: 5620130B
;   v_cmp_gt_f32  vcc, 0, v14                             // 0000000003E0: 7C081C80
;   v_fmac_f32    v4, v3, v8                              // 0000000003E4: 56081103
;   v_mul_legacy_f32  v3, v17, v6                         // 0000000003E8: 0E060D11
;   v_fmac_f32    v22, v15, v9                            // 0000000003EC: 562C130F
;   v_max_f32     v6, 0, v16                              // 0000000003F0: 200C2080
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 0000000003F4: D501000B 01A900F2
;   v_cmp_gt_f32  vcc, 0, v18                             // 0000000003FC: 7C082480
;   v_fmac_f32    v10, -s42, v9                           // 000000000400: D52B000A 2002122A
;   v_fmac_f32    v4, v3, v9                              // 000000000408: 56081303
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x000190   // 00000000040C: F428091E FA000190
;   v_mul_legacy_f32  v3, v6, v11                         // 000000000414: 0E061706
;   s_buffer_load_dwordx8  s[52:59], s[60:63], 0x000170   // 000000000418: F42C0D1E FA000170
;   v_cndmask_b32  v8, 1.0, 0, vcc                        // 000000000420: D5010008 01A900F2
;   v_max_f32     v5, 0, v22                              // 000000000428: 200A2C80
;   v_cmp_gt_f32  vcc, 0, v10                             // 00000000042C: 7C081480
;   v_log_f32     v3, v3                                  // 000000000430: 7E064F03
;   v_max_f32     v4, 0, v4                               // 000000000434: 20080880
;   s_buffer_load_dwordx16  s[16:31], s[60:63], 0x000080  // 000000000438: F430041E FA000080
;   v_mul_legacy_f32  v5, v5, v8                          // 000000000440: 0E0A1105
;   v_cndmask_b32  v23, 1.0, 0, vcc                       // 000000000444: D5010017 01A900F2
;   v_mul_legacy_f32  v9, s32, v0                         // 00000000044C: 0E120020
;   v_mul_legacy_f32  v11, v11, v14                       // 000000000450: 0E161D0B
;   v_mul_legacy_f32  v8, v8, v18                         // 000000000454: 0E102508
;   v_log_f32     v5, v5                                  // 000000000458: 7E0A4F05
;   v_mul_legacy_f32  v4, v4, v23                         // 00000000045C: 0E082F04
;   v_mul_legacy_f32  v3, s15, v3                         // 000000000460: 0E06060F
;   v_fmac_f32    v9, s33, v1                             // 000000000464: 56120221
;   v_mul_legacy_f32  v19, s46, v11                       // 000000000468: 0E26162E
;   v_log_f32     v4, v4                                  // 00000000046C: 7E084F04
;   s_waitcnt     lgkmcnt(0)                              // 000000000470: BF8CC07F
;   v_mul_legacy_f32  v22, s36, v0                        // 000000000474: 0E2C0024
;   v_mul_legacy_f32  v15, s52, v0                        // 000000000478: 0E1E0034
;   v_mul_legacy_f32  v16, s56, v0                        // 00000000047C: 0E200038
;   v_mul_legacy_f32  v5, s15, v5                         // 000000000480: 0E0A0A0F
;   v_exp_f32     v3, v3                                  // 000000000484: 7E064B03
;   v_fmac_f32    v22, s37, v1                            // 000000000488: 562C0225
;   v_fmac_f32    v15, s53, v1                            // 00000000048C: 561E0235
;   v_fmac_f32    v16, s57, v1                            // 000000000490: 56200239
;   v_fmac_f32    v9, s34, v2                             // 000000000494: 56120422
;   v_exp_f32     v5, v5                                  // 000000000498: 7E0A4B05
;   v_mul_legacy_f32  v4, s15, v4                         // 00000000049C: 0E08080F
;   v_fmac_f32    v15, s54, v2                            // 0000000004A0: 561E0436
;   v_fmac_f32    v16, s58, v2                            // 0000000004A4: 5620043A
;   v_fmac_f32    v22, s38, v2                            // 0000000004A8: 562C0426
;   v_mul_legacy_f32  v3, v3, v14                         // 0000000004AC: 0E061D03
;   v_exp_f32     v4, v4                                  // 0000000004B0: 7E084B04
;   v_mul_legacy_f32  v14, s45, v11                       // 0000000004B4: 0E1C162D
;   v_mul_legacy_f32  v1, s1, v1                          // 0000000004B8: 0E020201
;   v_mul_legacy_f32  v11, s44, v11                       // 0000000004BC: 0E16162C
;   v_mul_legacy_f32  v5, v5, v18                         // 0000000004C0: 0E0A2505
;   v_mul_legacy_f32  v18, s21, v3                        // 0000000004C4: 0E240615
;   v_mul_legacy_f32  v20, s22, v3                        // 0000000004C8: 0E280616
;   v_mul_legacy_f32  v3, s20, v3                         // 0000000004CC: 0E060614
;   v_fmac_f32    v22, s39, v7                            // 0000000004D0: 562C0E27
;   v_fmac_f32    v16, s59, v7                            // 0000000004D4: 56200E3B
;   v_fmac_f32    v15, s55, v7                            // 0000000004D8: 561E0E37
;   v_fmac_f32    v9, s35, v7                             // 0000000004DC: 56120E23
;   v_fmac_f32    v1, s0, v0                              // 0000000004E0: 56020000
;   v_mul_legacy_f32  v0, v23, v10                        // 0000000004E4: 0E001517
;   v_fmac_f32    v11, s48, v8                            // 0000000004E8: 56161030
;   v_fmac_f32    v19, s50, v8                            // 0000000004EC: 56261032
;   exp           pos0, v9, v15, v16, v22 done            // 0000000004F0: F80008CF 16100F09
;   v_fmac_f32    v14, s49, v8                            // 0000000004F8: 561C1031
;   s_waitcnt     expcnt(0)                               // 0000000004FC: BF8CFF0F
;   v_mul_legacy_f32  v9, v4, v10                         // 000000000500: 0E121504
;   v_fmac_f32    v3, s24, v5                             // 000000000504: 56060A18
;   v_fmac_f32    v20, s26, v5                            // 000000000508: 56280A1A
;   v_fmac_f32    v18, s25, v5                            // 00000000050C: 56240A19
;   v_fmac_f32    v1, s3, v7                              // 000000000510: 56020E03
;   v_fmac_f32    v14, s17, v0                            // 000000000514: 561C0011
;   v_fmac_f32    v3, s28, v9                             // 000000000518: 5606121C
;   v_fmac_f32    v19, s18, v0                            // 00000000051C: 56260012
;   v_fmac_f32    v11, s16, v0                            // 000000000520: 56160010
;   v_fmac_f32    v20, s30, v9                            // 000000000524: 5628121E
;   v_fmac_f32    v18, s29, v9                            // 000000000528: 5624121D
;   v_fmac_f32    v1, v2, s2 clamp                        // 00000000052C: D52B8001 00000502
;   v_mov_b32     v10, 1.0                                // 000000000534: 7E1402F2
;   v_mov_b32     v15, 0                                  // 000000000538: 7E1E0280
;   v_mov_b32     v5, s7                                  // 00000000053C: 7E0A0207
;   v_fma_f32     v16, s4, v11, s8                        // 000000000540: D54B0010 00221604
;   v_fma_f32     v6, s6, v19, s10                        // 000000000548: D54B0006 002A2606
;   v_fma_f32     v7, s5, v14, s9                         // 000000000550: D54B0007 00261C05
;   v_mul_legacy_f32  v3, s12, v3                         // 000000000558: 0E06060C
;   v_mul_legacy_f32  v8, s14, v20                        // 00000000055C: 0E10280E
;   v_mul_legacy_f32  v2, s13, v18                        // 000000000560: 0E04240D
;   exp           param0, v16, v7, v6, v5                 // 000000000564: F800020F 05060710
;   exp           param1, v3, v2, v8, v1                  // 00000000056C: F800021F 01080203
;   exp           param2, v12, v13, v15, v10              // 000000000574: F800022F 0A0F0D0C
;   s_endpgm                                              // 00000000057C: BF810000
;   s_code_end                                            // 000000000580: BF9F0000
;   s_code_end                                            // 000000000584: BF9F0000
;   s_code_end                                            // 000000000588: BF9F0000
;   s_code_end                                            // 00000000058C: BF9F0000
;   s_code_end                                            // 000000000590: BF9F0000
;   s_code_end                                            // 000000000594: BF9F0000
;   s_code_end                                            // 000000000598: BF9F0000
;   s_code_end                                            // 00000000059C: BF9F0000
;   s_code_end                                            // 0000000005A0: BF9F0000
;   s_code_end                                            // 0000000005A4: BF9F0000
;   s_code_end                                            // 0000000005A8: BF9F0000
;   s_code_end                                            // 0000000005AC: BF9F0000
;   s_code_end                                            // 0000000005B0: BF9F0000
;   s_code_end                                            // 0000000005B4: BF9F0000
;   s_code_end                                            // 0000000005B8: BF9F0000
;   s_code_end                                            // 0000000005BC: BF9F0000
;   s_code_end                                            // 0000000005C0: BF9F0000
;   s_code_end                                            // 0000000005C4: BF9F0000
;   s_code_end                                            // 0000000005C8: BF9F0000
;   s_code_end                                            // 0000000005CC: BF9F0000
;   s_code_end                                            // 0000000005D0: BF9F0000
;   s_code_end                                            // 0000000005D4: BF9F0000
;   s_code_end                                            // 0000000005D8: BF9F0000
;   s_code_end                                            // 0000000005DC: BF9F0000
;   s_code_end                                            // 0000000005E0: BF9F0000
;   s_code_end                                            // 0000000005E4: BF9F0000
;   s_code_end                                            // 0000000005E8: BF9F0000
;   s_code_end                                            // 0000000005EC: BF9F0000
;   s_code_end                                            // 0000000005F0: BF9F0000
;   s_code_end                                            // 0000000005F4: BF9F0000
;   s_code_end                                            // 0000000005F8: BF9F0000
;   s_code_end                                            // 0000000005FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 12
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 2
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 54
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSSkinnedVertexLightingFourBonesBn)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 5
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       data_vgpr: 16
;       data_size: 3
;     }
;     input_semantic[4] {
;       usage: GENERIC
;       usage_idx: 4
;       channel_mask: 15
;       data_vgpr: 20
;       data_size: 3
;     }
; 
;   num_output_semantics: 3
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 4 {
;     vs_export_count: 2
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 12
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000000001100110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000111111110011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=58,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=8
; VAlu:245,SAlu:22,VMem:12,SMem:8,LDS:0,WaitCntOnVMem:11,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char SkinnedEffect_VSSkinnedVertexLightingFourBonesBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x42, 0x5a, 0x9e, 0x4a, 0x46, 0x49, 0x64, 0xe1,
  0xf3, 0x17, 0x20, 0x8b, 0x51, 0x15, 0x81, 0xcb, 0x01, 0x00, 0x00, 0x00,
  0xdc, 0x1f, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00,
  0xa8, 0x03, 0x00, 0x00, 0x38, 0x04, 0x00, 0x00, 0xdc, 0x04, 0x00, 0x00,
  0xf8, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xe0, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0xa4, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
  0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30, 0xbc, 0x01, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x04, 0x00, 0x05,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f,
  0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52,
  0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45,
  0x53, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48,
  0x54, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x56,
  0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74,
  0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
  0x75, 0x72, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x42, 0x6e, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03,
  0x03, 0x04, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00,
  0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00,
  0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00,
  0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00,
  0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x49, 0x4c, 0x44, 0x4e, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65,
  0x64, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x46, 0x6f, 0x75, 0x72, 0x42, 0x6f, 0x6e, 0x65, 0x73,
  0x42, 0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0b, 0xf7, 0x75,
  0xd0, 0xe7, 0x54, 0x2c, 0xa3, 0xaa, 0x3a, 0x38, 0x18, 0x5f, 0x8b, 0xc4,
  0x44, 0x58, 0x49, 0x4c, 0xdc, 0x1a, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xb7, 0x06, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0xe8, 0x14, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x60, 0x15, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x74, 0x15, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x84, 0x15, 0x00, 0x00, 0x46, 0x05, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xcc, 0x1a, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x40, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xe8, 0x14, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x37, 0x05, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0xa0, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x82, 0x20, 0x88, 0x82, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5,
  0x40, 0x4a, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3,
  0x40, 0x0c, 0xe4, 0x14, 0x62, 0x20, 0x86, 0x81, 0xa0, 0xa2, 0x0c, 0xc4,
  0x30, 0x0c, 0xc3, 0x30, 0x0c, 0x03, 0x49, 0x47, 0x0d, 0x97, 0x3f, 0x61,
  0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23,
  0x62, 0x18, 0x86, 0x81, 0x8a, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90,
  0xfc, 0x10, 0x68, 0x86, 0x85, 0x40, 0x41, 0x55, 0x08, 0x8a, 0xb0, 0x08,
  0xba, 0x4a, 0x31, 0x10, 0xc3, 0x30, 0x50, 0x36, 0x47, 0x10, 0x14, 0xc3,
  0x22, 0x0a, 0x82, 0xd8, 0x88, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x61,
  0x84, 0x61, 0xc8, 0x01, 0x30, 0x09, 0xbe, 0x1c, 0xf8, 0x12, 0x69, 0xbc,
  0xea, 0x70, 0xa4, 0x69, 0x01, 0x30, 0x87, 0x9a, 0xfc, 0x14, 0x88, 0x00,
  0x86, 0x98, 0x88, 0x48, 0x42, 0xce, 0x07, 0x82, 0x43, 0x18, 0x86, 0x20,
  0xf8, 0x89, 0xa1, 0x48, 0x52, 0x99, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x13, 0x16, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
  0x68, 0x03, 0x7c, 0x10, 0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06,
  0xed, 0xa0, 0x07, 0xe5, 0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07,
  0x72, 0xd0, 0x06, 0xe9, 0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06,
  0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e,
  0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07,
  0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07,
  0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07,
  0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07,
  0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07,
  0x01, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21,
  0x8f, 0x02, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x1e, 0x06, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x86, 0x3c, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x79, 0x20, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0xf2, 0x48, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0xb9, 0x80, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x93, 0x01, 0x01, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x87, 0x03, 0x02, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2c, 0x10, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90,
  0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0,
  0x20, 0x8a, 0xa1, 0x80, 0x79, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a,
  0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x82, 0x52, 0x20,
  0x73, 0x06, 0x80, 0xce, 0xb1, 0x2c, 0x0a, 0x82, 0x4f, 0x3e, 0x80, 0x4f,
  0x3e, 0x80, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0xb8, 0x87, 0x7b, 0xb8, 0x07,
  0x00, 0x44, 0x40, 0x08, 0x00, 0xee, 0x93, 0x0f, 0xee, 0x93, 0x0f, 0xee,
  0x93, 0x0f, 0xee, 0x93, 0x0f, 0xee, 0x93, 0x0f, 0xee, 0x93, 0x0f, 0xee,
  0x93, 0x0f, 0xee, 0x93, 0x0f, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x91, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x2c, 0x13, 0x04, 0x82, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x68, 0x36, 0x08, 0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x38,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x66, 0xb0, 0x11, 0x98, 0x20, 0x10,
  0xcf, 0x06, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d,
  0x20, 0x00, 0x40, 0x02, 0x26, 0x08, 0x67, 0xc0, 0x6d, 0x08, 0xa8, 0x09,
  0x82, 0x00, 0x50, 0x0c, 0xac, 0xa6, 0xa6, 0xd6, 0xd2, 0xdc, 0xdc, 0xca,
  0xc8, 0xac, 0xca, 0xe4, 0xe8, 0xca, 0xf0, 0x98, 0xd2, 0xce, 0xd0, 0xe8,
  0xd2, 0xdc, 0xce, 0x8c, 0xde, 0xea, 0xe4, 0x84, 0xde, 0xdc, 0xca, 0xe6,
  0x84, 0xdc, 0xb8, 0x4c, 0x59, 0x7d, 0x41, 0xbd, 0xcd, 0xa5, 0xd1, 0xa5,
  0xbd, 0xb9, 0x4d, 0x10, 0x8a, 0x6a, 0x82, 0x50, 0x58, 0x1b, 0x82, 0x63,
  0x82, 0x50, 0x5c, 0x13, 0x04, 0x02, 0x9a, 0x20, 0x10, 0xd1, 0x06, 0xa1,
  0xf3, 0x36, 0x2c, 0x07, 0x96, 0x69, 0x9b, 0x66, 0x70, 0x87, 0xf6, 0xd1,
  0x70, 0x7a, 0x92, 0x6a, 0x0a, 0x62, 0x9a, 0x20, 0x14, 0xd8, 0x04, 0x81,
  0x90, 0x36, 0x08, 0xdd, 0x18, 0x6c, 0x58, 0x8c, 0x30, 0xc8, 0xb4, 0x4d,
  0x33, 0xc4, 0xc0, 0xd0, 0xc8, 0x60, 0x82, 0x40, 0x4c, 0x44, 0xa8, 0x8a,
  0xb0, 0x86, 0x9e, 0x9e, 0xa4, 0x88, 0x26, 0x08, 0x45, 0xb6, 0x41, 0xe8,
  0xba, 0x0d, 0x8b, 0x19, 0x9c, 0x41, 0xa6, 0x6d, 0x9a, 0x81, 0x06, 0x66,
  0xa0, 0xa5, 0x01, 0x19, 0x21, 0xa6, 0x22, 0x27, 0xa2, 0x24, 0x27, 0xa2,
  0xa4, 0xa1, 0xa2, 0xa9, 0x09, 0x42, 0xa1, 0x6d, 0x58, 0xba, 0x35, 0x60,
  0x03, 0x6d, 0xd3, 0x0c, 0xae, 0xd3, 0xbe, 0x09, 0x02, 0x41, 0x71, 0x11,
  0x62, 0x2a, 0x72, 0x22, 0xba, 0x2a, 0x4a, 0x3a, 0x42, 0xa2, 0xda, 0xb0,
  0xb8, 0xc1, 0x1b, 0x64, 0xda, 0xa6, 0x19, 0x9c, 0x1b, 0x68, 0xdf, 0x86,
  0x02, 0x0c, 0xca, 0x40, 0x0d, 0xda, 0x00, 0x0e, 0x58, 0x0c, 0x3d, 0x31,
  0x3d, 0x49, 0x6d, 0x58, 0x0e, 0x39, 0xc8, 0xb4, 0x0d, 0x0d, 0x0c, 0xee,
  0xd0, 0xbe, 0x0d, 0x81, 0xb1, 0x61, 0x31, 0xe4, 0x20, 0xd3, 0xe8, 0x00,
  0x0d, 0x0c, 0xce, 0xd0, 0xbe, 0x0d, 0x8b, 0x19, 0x9c, 0x41, 0xa6, 0x6d,
  0x68, 0x60, 0xa0, 0x81, 0x19, 0x68, 0x69, 0xb0, 0x61, 0xe9, 0xb0, 0x4c,
  0x0c, 0x36, 0xce, 0xe0, 0x3a, 0xed, 0xdb, 0x40, 0xcc, 0x41, 0x1d, 0xd8,
  0xc1, 0x1d, 0x6c, 0x18, 0xe2, 0x00, 0x0f, 0x80, 0x0d, 0x85, 0x75, 0xe5,
  0xc1, 0x04, 0xb4, 0xc2, 0x13, 0x7b, 0xc3, 0x73, 0x19, 0x7b, 0x6b, 0x83,
  0x4b, 0x63, 0x2b, 0x93, 0x73, 0x79, 0x83, 0xa3, 0x4b, 0x7b, 0x73, 0x9b,
  0x9b, 0x12, 0x08, 0x55, 0xd8, 0xd8, 0xec, 0xda, 0x5c, 0xd2, 0xc8, 0xca,
  0xdc, 0xe8, 0xa6, 0x04, 0x44, 0x15, 0x32, 0x3c, 0x17, 0xbb, 0x32, 0xb9,
  0xb9, 0xb4, 0x37, 0xb7, 0x29, 0xc1, 0xd1, 0x84, 0x0c, 0xcf, 0xc5, 0x2e,
  0x8c, 0xcd, 0xae, 0x4c, 0x6e, 0x4a, 0x90, 0xd4, 0x21, 0xc3, 0x73, 0x99,
  0x43, 0x0b, 0x23, 0x2b, 0x93, 0x6b, 0x7a, 0x23, 0x2b, 0x63, 0x9b, 0x12,
  0x30, 0x65, 0xc8, 0xf0, 0x5c, 0xe4, 0xca, 0xe6, 0xde, 0xea, 0xe4, 0xc6,
  0xca, 0xe6, 0xa6, 0x04, 0x52, 0x1d, 0x32, 0x3c, 0x17, 0xbb, 0xb4, 0xb2,
  0xbb, 0x24, 0xb2, 0x29, 0xba, 0x30, 0xba, 0xb2, 0x29, 0x01, 0x55, 0x87,
  0x0c, 0xcf, 0xa5, 0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d,
  0x6e, 0x6e, 0x4a, 0x90, 0x07, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x06, 0x20, 0x06, 0x2f,
  0xcb, 0x2a, 0x48, 0xd3, 0x10, 0xc3, 0x4b, 0x44, 0x13, 0x71, 0x95, 0x88,
  0x71, 0x4c, 0x48, 0x63, 0x7c, 0x0e, 0x15, 0x6d, 0x4e, 0x43, 0x48, 0x5b,
  0x63, 0x06, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48, 0x03, 0x44, 0x98,
  0x5f, 0xdc, 0xb6, 0x21, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x04, 0x54,
  0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80, 0x80, 0xf9, 0xc5,
  0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42, 0x44, 0x00, 0x13,
  0x11, 0x02, 0xcd, 0xb0, 0x10, 0x46, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe,
  0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x1d, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3, 0x70, 0xf9, 0xce,
  0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x26,
  0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4,
  0xe4, 0x23, 0xb7, 0x6d, 0x03, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93,
  0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x09, 0xd2,
  0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40, 0x84, 0xf9, 0xc5,
  0x6d, 0x5b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98,
  0x5f, 0xdc, 0x36, 0x00, 0x61, 0x20, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x14, 0x4c,
  0x71, 0x95, 0xdd, 0x0c, 0x40, 0x29, 0x94, 0x4c, 0xb9, 0x15, 0x4d, 0xd9,
  0x14, 0x4e, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0x81, 0x94, 0x48, 0x61,
  0x94, 0x49, 0xa1, 0x94, 0x44, 0x51, 0x94, 0x45, 0xb1, 0xd0, 0x30, 0x46,
  0x00, 0x82, 0x20, 0x88, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f,
  0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x02, 0x30, 0x46, 0x00,
  0x82, 0x20, 0x08, 0x82, 0x02, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0xc0, 0xcd, 0xc1, 0x43, 0x06, 0x71, 0x10, 0x07, 0x60, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1f, 0xa8, 0x81, 0x1a, 0xc8,
  0x01, 0x1a, 0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0xc1,
  0x1a, 0xac, 0xc1, 0x1c, 0x84, 0xc1, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x1f, 0xb0, 0x01, 0x1b, 0xd0, 0xc1, 0x19, 0x70, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0x80, 0x42, 0x1b, 0xb4, 0x41, 0x1d, 0xa4,
  0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x08, 0x28, 0xb8, 0x81,
  0x1c, 0xd8, 0x01, 0x1b, 0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80,
  0x84, 0xc2, 0x1b, 0xcc, 0xc1, 0x1d, 0x94, 0xc1, 0x37, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x88, 0x28, 0xc0, 0x01, 0x1d, 0xe0, 0xc1, 0x1a, 0x80,
  0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xa3, 0x10, 0x07, 0x75,
  0x90, 0x07, 0x6d, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60,
  0x94, 0x82, 0x1c, 0xcc, 0x81, 0x1e, 0xc0, 0x81, 0x18, 0x8c, 0x18, 0x24,
  0x00, 0x08, 0x82, 0x81, 0x61, 0x0a, 0x73, 0x40, 0x07, 0x7b, 0x90, 0x06,
  0x63, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x29, 0xd0, 0x41,
  0x1f, 0xf0, 0x81, 0x1c, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0xa8, 0x50, 0x07, 0x7e, 0xd0, 0x07, 0x6b, 0x50, 0x06, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xa4, 0x82, 0x1d, 0xfc, 0x81, 0x1f, 0xc4,
  0x81, 0x19, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x0a, 0x77,
  0xf0, 0x07, 0x7f, 0x50, 0x07, 0x67, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x2a, 0xe0, 0x01, 0x28, 0x80, 0x82, 0x1b, 0xa0, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xac, 0x90, 0x07, 0xa1, 0x10, 0x0a,
  0x74, 0x90, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xb4, 0x82,
  0x1e, 0x88, 0x82, 0x28, 0xd8, 0x81, 0x1a, 0xd8, 0x51, 0xc9, 0xc7, 0x0e,
  0x4b, 0x3e, 0x76, 0x5c, 0xf2, 0xb1, 0x21, 0x83, 0x8f, 0x0d, 0x1a, 0x7c,
  0x6c, 0xd8, 0xe0, 0x53, 0x53, 0x29, 0x48, 0x05, 0x6e, 0x00, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x70, 0xbd, 0x02, 0x1d, 0x68, 0xc1, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43,
  0x1d, 0x73, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xd5, 0x82,
  0x1e, 0x80, 0x41, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x0d, 0x1e, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x5c, 0xbb, 0x00, 0x0a, 0x66, 0x10, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18,
  0xa4, 0x06, 0xf2, 0xb1, 0x65, 0x0d, 0xe4, 0x63, 0x06, 0x1b, 0xc8, 0xc7,
  0xa4, 0x36, 0x90, 0x8f, 0x35, 0x6e, 0x20, 0x1f, 0x43, 0xde, 0x40, 0x3e,
  0x46, 0xc1, 0x81, 0x7c, 0xec, 0x89, 0x03, 0xf9, 0x98, 0x22, 0x07, 0xf2,
  0x31, 0x6b, 0x0e, 0xe4, 0x63, 0x11, 0x1d, 0xc8, 0xc7, 0x98, 0x3a, 0x90,
  0x4f, 0xc5, 0x01, 0x39, 0x48, 0x05, 0xad, 0x00, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0xb9, 0xc3, 0x2c, 0xe4, 0x41, 0x30, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x87,
  0x2c, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xf4, 0x90, 0x0b,
  0x7f, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x68, 0x02, 0x31, 0x54, 0x73, 0x0b, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0x97, 0x3e, 0xfc, 0x42, 0x29, 0x04, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0xa1,
  0x82, 0x7c, 0x6c, 0x49, 0x05, 0xf9, 0x98, 0xa1, 0x0a, 0xf2, 0x31, 0x69,
  0x15, 0xe4, 0x63, 0x0d, 0x2b, 0xc8, 0xc7, 0x90, 0x56, 0x90, 0x8f, 0x51,
  0xae, 0x20, 0x1f, 0x7b, 0x5e, 0x41, 0x3e, 0xa6, 0xc0, 0x82, 0x7c, 0xcc,
  0x8a, 0x05, 0xf9, 0x58, 0x24, 0x0b, 0xf2, 0x31, 0x66, 0x16, 0xe4, 0x63,
  0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35, 0x80, 0x8f, 0x31, 0x6b, 0x00, 0x1f,
  0x63, 0xd6, 0x00, 0x3e, 0xc6, 0xac, 0x01, 0x7c, 0x8c, 0x59, 0x03, 0xf8,
  0x18, 0xb3, 0x06, 0xf0, 0x31, 0x66, 0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0,
  0xc7, 0x98, 0x35, 0x80, 0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00,
  0x3e, 0xb5, 0x0b, 0x2f, 0x21, 0x15, 0xe0, 0x03, 0x8c, 0x18, 0x1c, 0x00,
  0x08, 0x82, 0xc1, 0x95, 0x13, 0xfe, 0x40, 0x0e, 0xc1, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x1d,
  0xfd, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xfd, 0x04, 0x49,
  0xa8, 0x43, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x50, 0x8d, 0x48, 0xc0, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x5c, 0x65, 0xa1, 0x12, 0xf0, 0x10, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x24,
  0x0f, 0xf2, 0xb1, 0x65, 0x1e, 0xe4, 0x63, 0x06, 0x3d, 0xc8, 0xc7, 0xa4,
  0x7a, 0x90, 0x8f, 0x35, 0xf6, 0x20, 0x1f, 0x43, 0xee, 0x41, 0x3e, 0x46,
  0xe1, 0x83, 0x7c, 0xec, 0xc9, 0x07, 0xf9, 0x98, 0xa2, 0x0f, 0xf2, 0x31,
  0x6b, 0x1f, 0xe4, 0x63, 0x11, 0x3f, 0xc8, 0xc7, 0x98, 0x7e, 0x90, 0x8f,
  0xad, 0x01, 0x03, 0x1f, 0x5b, 0x03, 0x06, 0x3e, 0xb6, 0x06, 0x0c, 0x7c,
  0x6c, 0x0d, 0x18, 0xf8, 0xd8, 0x1a, 0x30, 0xf0, 0xb1, 0x35, 0x60, 0xe0,
  0x63, 0x6b, 0xc0, 0xc0, 0xc7, 0xd6, 0x80, 0x81, 0x8f, 0xad, 0x01, 0x03,
  0x1f, 0x5b, 0x03, 0x06, 0x3e, 0xb6, 0x06, 0x0c, 0x7c, 0x6c, 0x0d, 0x18,
  0xf8, 0x54, 0x49, 0xe8, 0x85, 0x54, 0x30, 0x16, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x69, 0xa4, 0xc5, 0x4b, 0x04, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x75,
  0xa0, 0x05, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xa5, 0x1a, 0x6f,
  0x51, 0x13, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0x43, 0x35, 0x6d, 0x01, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0xc1, 0x46, 0x5d, 0xec, 0x44, 0x30, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x10,
  0x4f, 0xc8, 0xc7, 0x96, 0x9e, 0x90, 0x8f, 0x19, 0x3e, 0x21, 0x1f, 0x93,
  0x7e, 0x42, 0x3e, 0xd6, 0x80, 0x85, 0x7c, 0x0c, 0x09, 0x0b, 0xf9, 0x18,
  0x25, 0x16, 0xf2, 0xb1, 0x67, 0x2c, 0xe4, 0x63, 0x0a, 0x59, 0xc8, 0xc7,
  0xac, 0xb2, 0x90, 0x8f, 0x45, 0x66, 0x21, 0x1f, 0x63, 0xce, 0x42, 0x3e,
  0xb6, 0x06, 0x0c, 0x7c, 0x6c, 0x0d, 0x18, 0xf8, 0xd8, 0x1a, 0x30, 0xf0,
  0xb1, 0x35, 0x60, 0xe0, 0x63, 0x6b, 0xc0, 0xc0, 0xc7, 0xd6, 0x80, 0x81,
  0x8f, 0xad, 0x01, 0x03, 0x1f, 0x5b, 0x03, 0x06, 0x3e, 0xb6, 0x06, 0x0c,
  0x7c, 0x6c, 0x0d, 0x18, 0xf8, 0xd8, 0x1a, 0x30, 0xf0, 0xb1, 0x35, 0x60,
  0xe0, 0x63, 0x8c, 0x5a, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0xb2, 0xf6, 0xa0, 0x0d, 0xb5, 0x50, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xc8, 0xdc, 0xa3, 0x36, 0xd4, 0x02, 0x09, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x20, 0x7b, 0x0f, 0xdb, 0x50, 0x0b, 0x23, 0xb0, 0xc7, 0x2d,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x59, 0x7c, 0xe0, 0x86,
  0x5b, 0x34, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf2, 0x91,
  0x1b, 0x6e, 0xb1, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xcd,
  0x87, 0x6e, 0xb8, 0x45, 0x12, 0x98, 0x24, 0x17, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0xac, 0x3e, 0x78, 0x43, 0x2e, 0xa0, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0xfb, 0xe8, 0x0d, 0xb9, 0x70, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xee, 0xc3, 0x37, 0xe4, 0x82,
  0x09, 0x0c, 0x7b, 0x0b, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x96, 0x1f, 0xe0, 0xf1, 0x16, 0x56, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x99, 0x7e, 0x84, 0xc7, 0x5b, 0x50, 0x81, 0x69, 0x72, 0x21, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xf8, 0x63, 0x3c, 0xe4, 0x02,
  0x0b, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xeb, 0x0f, 0xf2, 0x90,
  0x0b, 0x2b, 0x30, 0xae, 0x2e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xd9, 0x7f, 0x98, 0x47, 0x5d, 0x68, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x64, 0x20, 0x72, 0x1e, 0x75, 0x81, 0x05, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x70, 0x89, 0xc8, 0x79, 0xb4, 0x46, 0x7e, 0x8c, 0x26,
  0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x75, 0x22, 0xec, 0x21, 0x1b,
  0xe0, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x17, 0x8b,
  0xc4, 0xc7, 0x6d, 0x90, 0xc7, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x39, 0x61, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x62, 0x04, 0x3f, 0x3c, 0x27, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4c, 0x46, 0xf2, 0x63, 0x73, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x66, 0x44, 0x3f, 0x5c, 0xc3,
  0x09, 0xac, 0x29, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x56, 0x23, 0xfc, 0x21, 0x06, 0x4d, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x99, 0x8d, 0xf4, 0xc7, 0xd7, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x90, 0xdd, 0x88, 0x7f, 0xc8, 0x46, 0x13, 0x18, 0x93, 0x06, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x2c, 0x47, 0x40, 0xc4, 0x0c,
  0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0x1d, 0x09, 0x91,
  0x31, 0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x76, 0x44,
  0x44, 0x6c, 0x83, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0xea,
  0x11, 0x11, 0x41, 0x0f, 0xfa, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7, 0x86,
  0x23, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xc0, 0xa0, 0x49, 0x89,
  0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38,
  0x68, 0x72, 0x22, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63, 0xc5,
  0x20, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xd2, 0xc4, 0x45,
  0xe8, 0xe3, 0x3f, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x36, 0x91, 0x11,
  0xfc, 0x10, 0x91, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x2b, 0x4e, 0x6c, 0x84,
  0x3f, 0x5c, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x6c, 0xd1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x56, 0x27, 0x3c, 0x82, 0x07, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x99, 0x9d, 0xf4, 0x88, 0x1d, 0x2c, 0x81, 0x29, 0x7d, 0x20, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xf0, 0xe4, 0x47, 0xf6, 0x40,
  0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xcb, 0x13, 0x30, 0xc9,
  0x03, 0x25, 0xb0, 0x04, 0x14, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0xd9, 0x9e, 0x88, 0x89, 0x1f, 0x24, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x64, 0x7c, 0x32, 0x26, 0x7c, 0x90, 0x04, 0x23, 0x06, 0x0b,
  0x00, 0x82, 0x60, 0xc0, 0x88, 0xca, 0x8f, 0x1c, 0x44, 0x70, 0x10, 0xc1,
  0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38, 0xa2, 0x12, 0x26, 0x81, 0x05,
  0x89, 0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xb8, 0x46, 0x05, 0x4d, 0x5c, 0x64, 0x4f, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00,
  0x40, 0x10, 0x0c, 0xae, 0x53, 0x61, 0x13, 0x19, 0x09, 0x95, 0xd1, 0x84,
  0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00,
  0x10, 0x04, 0x83, 0x6b, 0x55, 0xe0, 0xc4, 0x46, 0x7e, 0x64, 0x34, 0x21,
  0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x2c, 0x0d, 0x96, 0xf8,
  0x58, 0x1a, 0x2c, 0xf1, 0xb1, 0x34, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00,
  0x20, 0x08, 0x06, 0x8c, 0xad, 0xcc, 0xc9, 0x20, 0x04, 0x83, 0x10, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x63, 0x2b, 0x75, 0x12, 0x58, 0x40,
  0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70,
  0xd9, 0xca, 0x9e, 0x84, 0x89, 0xaa, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c,
  0xba, 0xf2, 0x27, 0x65, 0x02, 0x2b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x97,
  0xaf, 0x8c, 0x4a, 0x9a, 0xc4, 0xc9, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x18, 0x1f, 0x2c, 0xf1, 0x31, 0x3e, 0x58, 0xe2,
  0x63, 0x7c, 0xb0, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c, 0x98,
  0x74, 0x31, 0x95, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x27, 0x5d, 0x50, 0x25, 0xb0, 0x80, 0x90, 0x8f, 0x09, 0x84,
  0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x4a, 0x17, 0x57, 0xa1,
  0x13, 0x56, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18,
  0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xda, 0x45, 0x56, 0xf0,
  0x04, 0x5d, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x78, 0xb1, 0x15, 0x3e,
  0x19, 0x95, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0xb0, 0x57, 0x58, 0xe2, 0x63, 0xaf, 0xb0, 0xc4, 0xc7, 0x5e, 0x61, 0x89,
  0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x30, 0xfc, 0x92, 0x2b, 0x83,
  0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0e, 0xbf,
  0xec, 0x4a, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9, 0x18, 0xaa, 0xdc,
  0x41, 0x7c, 0x2c, 0x55, 0xee, 0x20, 0x3e, 0xa6, 0x2a, 0x66, 0x10, 0x1f,
  0x5b, 0x15, 0x33, 0x88, 0x8f, 0xb1, 0x4a, 0x15, 0x1f, 0x6b, 0x95, 0x2a,
  0x3e, 0x26, 0x0a, 0x7e, 0x20, 0x1f, 0x7b, 0x95, 0x20, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x90, 0x8d, 0x8c, 0xba, 0x20, 0xa3, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x46, 0x32, 0xeb, 0x82, 0x8c, 0x42,
  0x60, 0xa6, 0xf0, 0x06, 0xf2, 0xb1, 0x59, 0x09, 0xe2, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0xc9, 0xb8, 0x8b, 0x72, 0x0a, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x28, 0xf3, 0x2e, 0xca, 0x29, 0x04,
  0xa6, 0x0a, 0x60, 0x20, 0x1f, 0xbb, 0x95, 0x20, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x90, 0xad, 0x8c, 0xbc, 0x30, 0xab, 0x10, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0xc6, 0x32, 0xf3, 0xc2, 0xac, 0x42, 0x60,
  0x7f, 0xe0, 0x0a, 0xf2, 0xb1, 0x80, 0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0xd9, 0xcb, 0xd8, 0x0b, 0x1f, 0xbc, 0x42, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0xcc, 0xdc, 0x0b, 0x1f, 0xbc, 0x42,
  0x60, 0x70, 0x20, 0x0b, 0xf2, 0xb1, 0xa0, 0x0d, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0xcc, 0xe8, 0x4b, 0x1b, 0xcc, 0x42, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0xcd, 0xec, 0x4b, 0x1b, 0xcc,
  0x42, 0x60, 0x61, 0x60, 0x0b, 0xf2, 0xb1, 0xc0, 0x93, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x64, 0x37, 0xe3, 0x2f, 0xde, 0x2d, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xe1, 0xcc, 0xbf, 0x78, 0xb7, 0x10,
  0x0c, 0x47, 0x54, 0xe7, 0x42, 0x7c, 0xc3, 0x11, 0x12, 0xba, 0x10, 0xdf,
  0x70, 0xc4, 0x93, 0x2e, 0xc4, 0x37, 0xdd, 0xa0, 0x2e, 0xed, 0x32, 0x4c,
  0x37, 0xac, 0x8b, 0xbb, 0x0c, 0xd3, 0x0d, 0xec, 0xf2, 0x2e, 0x83, 0x0d,
  0x9b, 0x7c, 0x6c, 0xc0, 0xe4, 0x63, 0x43, 0x25, 0x9f, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0xb8, 0xc6, 0x06, 0x65, 0xdc, 0x05, 0x67, 0x46, 0x13,
  0x82, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa0, 0xb3, 0x01, 0x19,
  0x4a, 0x5e, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00, 0x42, 0x9b, 0x90,
  0x89, 0xe6, 0x65, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa0, 0xb4, 0x11,
  0x19, 0x87, 0x5e, 0x6c, 0x58, 0xe4, 0x63, 0xc3, 0x22, 0x1f, 0x1b, 0x16,
  0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0xe3, 0x36, 0x27, 0x33,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0xf3, 0x36, 0x28, 0x33, 0x8c,
  0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x03, 0x37, 0x29, 0x33, 0xd8, 0xa0,
  0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x36, 0x30, 0xf2, 0x19, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x03, 0x87, 0x6e, 0x5c, 0x66, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0xa7, 0x6e, 0x5e, 0x66, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04,
  0x03, 0xc7, 0x6e, 0x60, 0x66, 0xb0, 0xe1, 0x0d, 0xe4, 0x63, 0x03, 0x1b,
  0xc8, 0xc7, 0x86, 0x34, 0x90, 0x8f, 0x5d, 0xef, 0x20, 0x9f, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc8, 0xee, 0xc6, 0x67, 0xae, 0x5e, 0x08, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xc3, 0x9b, 0x9f, 0xb9, 0x56, 0x21,
  0x30, 0x2d, 0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99,
  0xde, 0x84, 0x8d, 0xf6, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0x7b, 0x23, 0x36, 0x5a, 0x2b, 0x04, 0xd6, 0xcd, 0x83, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xeb, 0x1b, 0xb2, 0xe9, 0xc2, 0x21,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x6f, 0xca, 0xa6, 0x7b,
  0x85, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2e, 0xd0, 0x29, 0x9b,
  0x95, 0xe1, 0x9b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4, 0x33,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd7, 0xe9, 0xb0, 0x8d, 0xcc, 0x90,
  0xce, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0xd8,
  0x31, 0xc0, 0xc7, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0x31, 0x4d, 0x24,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0xeb, 0xd4, 0x8d,
  0x06, 0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xaf, 0x63,
  0x37, 0x9a, 0x2f, 0x04, 0xd6, 0x91, 0x84, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x20, 0x8b, 0x1d, 0xbc, 0xe9, 0xe4, 0x21, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x4c, 0x76, 0xf2, 0xa6, 0x03, 0x87, 0xc0, 0xc0,
  0xc0, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0xed,
  0xec, 0x0d, 0x18, 0xd0, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0x59, 0xed, 0xf0, 0x0d, 0x18, 0x88, 0x43, 0x30, 0x9a, 0x40, 0x07, 0xc0,
  0x68, 0x42, 0x1d, 0x04, 0xa3, 0x09, 0x76, 0x20, 0xd8, 0xa0, 0xc8, 0xc7,
  0x06, 0x44, 0x3e, 0x36, 0x18, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x83, 0xab, 0x77, 0x44, 0x07, 0x6d, 0xdc, 0x66, 0x34, 0x21, 0x00, 0x46,
  0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x2e, 0xf1, 0x39, 0x9d, 0xb6, 0xf1, 0x9b, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20,
  0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xce, 0x87, 0x75, 0xe4,
  0xc6, 0x75, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06,
  0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x62,
  0x9f, 0xd8, 0xb9, 0x1b, 0xd7, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0xb0, 0x29, 0x44, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x59, 0xfc, 0xe0, 0x8e, 0x7f, 0x4c,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf2, 0x93, 0x3b, 0xfb,
  0x31, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xcd, 0x8f, 0xee,
  0xb8, 0xcd, 0x14, 0x98, 0x54, 0x22, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xac, 0x7e, 0x78, 0x47, 0x44, 0xa4, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x32, 0xfb, 0xe9, 0x9d, 0xff, 0x90, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc8, 0xee, 0xc7, 0x77, 0xe4, 0x46, 0x0a, 0x2c,
  0x4a, 0x11, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x96, 0x3f,
  0xe0, 0x63, 0x22, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99,
  0xfe, 0x84, 0xcf, 0x88, 0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0xfb, 0x23, 0x3e, 0x76, 0x13, 0x05, 0x06, 0xb5, 0x88, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xeb, 0x1f, 0xf2, 0x51, 0x11, 0x28,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x7f, 0xca, 0xe7, 0x44,
  0xa0, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0xff, 0x31, 0x1f,
  0xbd, 0x81, 0x82, 0xd1, 0x84, 0x50, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0xe0, 0x12, 0xa1, 0xf3, 0x69, 0x1d, 0xf5, 0x19, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31,
  0x68, 0x00, 0x10, 0x04, 0x03, 0x09, 0x85, 0xe0, 0xe7, 0x46, 0x66, 0xe4,
  0x45, 0x42, 0x87, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x9c, 0x15, 0xf2, 0x9f, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0x17, 0x62, 0x9f, 0x12, 0x2a, 0xa1, 0xfd, 0xf1, 0x83, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x50, 0x5c, 0x88, 0x7d, 0x4a, 0xa8, 0x84, 0xe6, 0xa7,
  0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0x21, 0xf6, 0x29,
  0xa1, 0x12, 0xc2, 0x1f, 0x3e, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0xc5, 0x85, 0xd8, 0xa7, 0x84, 0x4a, 0x28, 0x7f, 0x90, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x50, 0x5c, 0x88, 0x7d, 0x4c, 0xa8, 0x84, 0xf6, 0xe7,
  0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0x21, 0xf6, 0x31,
  0xa1, 0x12, 0x9a, 0x1f, 0x37, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0xc5, 0x85, 0xd8, 0xc7, 0x84, 0x4a, 0x08, 0x7f, 0xda, 0x60, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x14, 0x17, 0x62, 0x1f, 0x13, 0x2a, 0xa1, 0xfc,
  0x09, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0x21, 0xf6, 0xf1,
  0x9f, 0x12, 0xda, 0x9f, 0xd5, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0xc5, 0x85, 0xd8, 0xc7, 0x7f, 0x4a, 0x68, 0x7e, 0x54, 0x67, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x14, 0x17, 0x62, 0x9f, 0x10, 0x2a, 0xa1, 0xfd,
  0xa9, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x71, 0x21, 0xf6, 0x09,
  0xa1, 0x12, 0x9a, 0x9f, 0x68, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0x17, 0x62, 0x9f, 0x10, 0x2a, 0x21, 0xfc, 0x69, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x40, 0x71, 0x21, 0xf6, 0x09, 0xa1, 0x12, 0xca, 0x9f, 0x04,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0xc9, 0x03, 0xed, 0x63, 0x88, 0x6e,
  0x64, 0xa6, 0x1c, 0x9f, 0xaf, 0x4a, 0xf9, 0xc2, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0x2e, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x8e, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x55,
  0xcd, 0x6f, 0xdc, 0x54, 0x10, 0x7f, 0xb6, 0xdf, 0xbe, 0x7d, 0xeb, 0xdd,
  0x8c, 0xbd, 0x5e, 0xaf, 0x77, 0x93, 0x3a, 0x8e, 0xb3, 0xf5, 0x3a, 0x76,
  0xec, 0xfd, 0x68, 0xe9, 0x47, 0x1a, 0x84, 0x48, 0x2b, 0x88, 0xca, 0x86,
  0x2a, 0x87, 0xa0, 0x11, 0x97, 0xc0, 0x85, 0xa8, 0x6d, 0x48, 0xb7, 0x49,
  0xda, 0xa2, 0x1e, 0xaa, 0xc5, 0x48, 0x1c, 0x90, 0xe8, 0x01, 0x71, 0xe0,
  0x90, 0x46, 0x02, 0x41, 0x85, 0x04, 0x02, 0x89, 0x3f, 0x00, 0x25, 0x45,
  0xe2, 0x8a, 0xe0, 0x12, 0x71, 0x43, 0xbd, 0x21, 0xc4, 0x01, 0x54, 0x45,
  0x22, 0xea, 0xa1, 0xe1, 0xed, 0x66, 0xa3, 0x86, 0x22, 0x50, 0xc5, 0x05,
  0x18, 0x69, 0xf4, 0x9b, 0x99, 0x37, 0x33, 0x6f, 0xe6, 0xcd, 0xb3, 0xdf,
  0xf4, 0xdc, 0xdc, 0x39, 0x49, 0x22, 0xa4, 0x93, 0x21, 0x3d, 0x62, 0x7b,
  0x40, 0x7e, 0xd9, 0xf8, 0xfc, 0x87, 0xbf, 0xe3, 0x2f, 0x1e, 0xd3, 0xef,
  0xaf, 0x58, 0xee, 0xc7, 0x3f, 0x43, 0xfe, 0x19, 0xed, 0xe7, 0xd9, 0xd9,
  0x4f, 0xc4, 0x1e, 0xae, 0x51, 0x92, 0xa3, 0xf4, 0x11, 0xff, 0x1d, 0xbe,
  0x87, 0xc7, 0xfa, 0x7d, 0x2a, 0x82, 0xa5, 0x9e, 0xaf, 0x4c, 0xee, 0x1c,
  0xf0, 0x9b, 0x24, 0x2e, 0x95, 0x0e, 0xe8, 0x67, 0xfb, 0xfe, 0x5d, 0xdb,
  0x89, 0x03, 0xfb, 0x32, 0xa2, 0x51, 0x85, 0x49, 0x69, 0x2e, 0x33, 0x59,
  0xc9, 0x49, 0x4c, 0xd1, 0x74, 0x85, 0x51, 0xcd, 0x54, 0xc8, 0x7f, 0x83,
  0x52, 0x64, 0xff, 0x48, 0x58, 0x77, 0xbc, 0x84, 0xc9, 0x32, 0xf9, 0xbf,
  0x51, 0xf7, 0x2c, 0xcb, 0x07, 0x98, 0xf6, 0xf9, 0x20, 0xe5, 0x1e, 0xd1,
  0x9b, 0x8f, 0x0c, 0xe0, 0xd7, 0x93, 0xbb, 0x8f, 0xb5, 0x17, 0x64, 0x93,
  0xad, 0xdf, 0x7e, 0x7e, 0xa0, 0x7c, 0xf7, 0xe3, 0x0b, 0xf1, 0x47, 0x9f,
  0x26, 0x5b, 0x93, 0x2b, 0x0f, 0x94, 0xf2, 0xcb, 0x6f, 0x7f, 0x4d, 0x47,
  0xdf, 0xdc, 0x50, 0xc8, 0x07, 0x9b, 0xcb, 0x4f, 0xdf, 0xdc, 0x24, 0x64,
  0xfa, 0x7b, 0x5d, 0x39, 0x4d, 0xb3, 0x02, 0xf3, 0xca, 0xb3, 0x74, 0x57,
  0xd9, 0xdc, 0xf8, 0x6c, 0x56, 0xca, 0x7f, 0xa5, 0x6c, 0x6c, 0x70, 0xe5,
  0xcb, 0x8d, 0x35, 0x22, 0xb7, 0x6e, 0x91, 0x89, 0xd6, 0x9a, 0xd5, 0x6c,
  0xad, 0x13, 0xbb, 0x95, 0xd9, 0x7d, 0xea, 0x2d, 0x42, 0x74, 0x62, 0x08,
  0x7f, 0x43, 0x79, 0x8e, 0x12, 0x77, 0xe2, 0xae, 0x44, 0xb4, 0xe4, 0x96,
  0x35, 0xd5, 0xea, 0xca, 0x00, 0x5a, 0xd2, 0xc5, 0x72, 0x79, 0x0f, 0x6d,
  0x5b, 0x4b, 0xd6, 0xbc, 0xb3, 0xbd, 0x35, 0xd7, 0xd5, 0x92, 0x82, 0x88,
  0x2b, 0x28, 0xe7, 0xe8, 0xba, 0x77, 0xa1, 0xb5, 0x6e, 0x59, 0x3d, 0xbb,
  0xe7, 0x89, 0x78, 0xcf, 0x6b, 0xad, 0xf9, 0x2f, 0xb6, 0x1c, 0xd2, 0xdc,
  0xbe, 0x4b, 0xc8, 0xfd, 0xae, 0x3d, 0xdb, 0xd4, 0x12, 0x27, 0x13, 0x6c,
  0xdf, 0xe9, 0xeb, 0x46, 0xb0, 0x97, 0x33, 0x8e, 0x85, 0x3d, 0xd5, 0xdc,
  0x6e, 0x4a, 0xe4, 0xbe, 0x4a, 0x66, 0xb6, 0xd4, 0x9f, 0xbe, 0x51, 0xae,
  0x77, 0x7b, 0x09, 0x17, 0x41, 0x0a, 0x3d, 0x50, 0xc2, 0x36, 0xc8, 0xa1,
  0x05, 0xd7, 0x84, 0xcd, 0x0e, 0x57, 0x61, 0xdd, 0x9f, 0x68, 0xdd, 0xf2,
  0xfd, 0x56, 0x39, 0x5a, 0xc4, 0xc1, 0xc8, 0xc3, 0xab, 0xc2, 0xee, 0x46,
  0xab, 0xe8, 0x84, 0x4b, 0x30, 0x1c, 0x2e, 0xc3, 0xa1, 0xa8, 0x8d, 0x43,
  0x91, 0x85, 0x23, 0xe1, 0x14, 0x74, 0xf3, 0x17, 0xfa, 0xb5, 0x1f, 0x23,
  0x0f, 0x7b, 0x80, 0xd0, 0x86, 0xd7, 0x44, 0x9c, 0x57, 0x5b, 0x44, 0x2d,
  0x74, 0x60, 0x34, 0x5a, 0xc6, 0x6a, 0xcd, 0xc3, 0xee, 0x1e, 0xcd, 0xc8,
  0xee, 0xe5, 0x0c, 0x6a, 0xab, 0x78, 0x45, 0x60, 0xdc, 0x58, 0x44, 0x3d,
  0x74, 0xa1, 0x12, 0x2d, 0xe1, 0x91, 0xc8, 0xc1, 0xb0, 0xb6, 0x8c, 0x7e,
  0xcd, 0xc2, 0x5a, 0xc3, 0xc3, 0xa3, 0x91, 0x8b, 0x87, 0xa3, 0x29, 0xcc,
  0x87, 0x01, 0x8c, 0xd7, 0x96, 0x70, 0xac, 0xd6, 0xc6, 0x7a, 0xc3, 0xc2,
  0xa8, 0x36, 0x85, 0x4f, 0x44, 0x01, 0x16, 0x44, 0x3f, 0x5c, 0xf4, 0xd3,
  0x68, 0xb4, 0x91, 0x0b, 0x39, 0x23, 0xe4, 0xe3, 0x63, 0x06, 0xf0, 0xaa,
  0x81, 0x6a, 0xc9, 0xc0, 0x55, 0x91, 0xbf, 0xdc, 0x58, 0xc5, 0x95, 0x6e,
  0xbf, 0x35, 0x1b, 0x8f, 0x67, 0x08, 0x48, 0x35, 0x07, 0x07, 0x1b, 0xcb,
  0x78, 0x2a, 0x23, 0x43, 0x77, 0xa6, 0x76, 0xc3, 0xc6, 0x54, 0x95, 0xa0,
  0x5c, 0x73, 0x71, 0xa8, 0xb1, 0x84, 0xa9, 0x15, 0x19, 0x87, 0x1b, 0x0e,
  0x42, 0x86, 0x02, 0x2b, 0x11, 0x54, 0x6a, 0x01, 0x1e, 0x6a, 0x4c, 0x21,
  0xbb, 0x24, 0x63, 0x6a, 0x84, 0x62, 0xfa, 0x32, 0x41, 0xa7, 0xe1, 0xe2,
  0x48, 0x23, 0xc0, 0xf4, 0x69, 0x19, 0x4f, 0x8d, 0xd5, 0xe1, 0xf5, 0x3b,
  0x37, 0x37, 0x39, 0x61, 0xc0, 0x46, 0x29, 0x52, 0xc2, 0x01, 0xc6, 0x54,
  0xe0, 0x2b, 0x75, 0xcc, 0xc8, 0x0c, 0xd3, 0x21, 0xc5, 0x94, 0xcc, 0x31,
  0x47, 0x02, 0xe0, 0x23, 0x2a, 0xaa, 0x97, 0xea, 0xa8, 0x52, 0x86, 0x8c,
  0x72, 0x1c, 0x90, 0x03, 0x2c, 0x1b, 0x3a, 0xa8, 0xa3, 0x2a, 0x66, 0x41,
  0xf8, 0x02, 0x47, 0xa0, 0x01, 0x9a, 0x86, 0x09, 0x83, 0x75, 0x1d, 0xab,
  0x2c, 0xe6, 0x1e, 0xe7, 0x5c, 0x83, 0x00, 0x1d, 0xa9, 0xb9, 0x2d, 0xae,
  0xe9, 0xfd, 0x62, 0xdd, 0x44, 0xab, 0x66, 0x81, 0x6d, 0x18, 0xe0, 0x07,
  0x39, 0xee, 0x64, 0x9a, 0xdb, 0x53, 0xc2, 0x3e, 0xa4, 0xea, 0x48, 0x33,
  0x16, 0x0e, 0xd7, 0x0d, 0xb4, 0x54, 0x13, 0x79, 0xde, 0x07, 0x36, 0x60,
  0xa1, 0xa3, 0x8a, 0xb3, 0x28, 0xfa, 0x98, 0x9d, 0xb7, 0x3a, 0x99, 0x82,
  0x8f, 0x85, 0xf9, 0x7a, 0xa7, 0x5b, 0x6f, 0x4a, 0x9c, 0x97, 0x55, 0x9a,
  0x4e, 0xb4, 0x1e, 0xbe, 0x97, 0xe8, 0x02, 0x69, 0xe9, 0x4c, 0xa2, 0xf4,
  0xf4, 0x8f, 0x93, 0x42, 0x4f, 0x7f, 0x37, 0x49, 0x65, 0x2b, 0xa0, 0x8d,
  0x04, 0x60, 0x08, 0x9d, 0x95, 0x5a, 0x49, 0xb1, 0x87, 0x6b, 0x09, 0xed,
  0xad, 0x7f, 0x98, 0xe8, 0xa3, 0x15, 0x2c, 0x8c, 0x05, 0xa8, 0xa4, 0x63,
  0x28, 0x15, 0x4d, 0x60, 0xbd, 0xf5, 0x4f, 0x13, 0xa3, 0x5a, 0xc1, 0xa2,
  0x98, 0x11, 0xcd, 0xc4, 0xa8, 0x17, 0x5d, 0x28, 0xe5, 0x75, 0xc8, 0x8b,
  0x1a, 0x74, 0xd3, 0x16, 0x75, 0xc5, 0x58, 0x2a, 0x18, 0x50, 0x28, 0xfa,
  0x60, 0xce, 0x07, 0x1d, 0x10, 0x31, 0x79, 0x7d, 0xf2, 0xb6, 0x67, 0xd6,
  0x81, 0x16, 0x39, 0x04, 0xa6, 0x09, 0xd6, 0x7c, 0xa5, 0xa3, 0x97, 0x5c,
  0xc8, 0x66, 0x55, 0x00, 0x12, 0x6d, 0x19, 0x86, 0xec, 0x66, 0xab, 0x56,
  0xaf, 0x8e, 0xaa, 0xfe, 0xd2, 0xed, 0x42, 0x18, 0x43, 0x2a, 0xef, 0xa2,
  0x39, 0xe2, 0x40, 0xf7, 0x5e, 0x87, 0xfa, 0xf8, 0x6d, 0x43, 0xf8, 0xf9,
  0xc2, 0x8f, 0x1e, 0xe6, 0x90, 0x4f, 0x33, 0xd0, 0xf2, 0x31, 0x9a, 0x91,
  0x03, 0xd9, 0x82, 0x8b, 0x89, 0xcd, 0x6f, 0x28, 0x79, 0x8e, 0xf9, 0x01,
  0x61, 0x2f, 0xc4, 0x98, 0xb8, 0x39, 0x37, 0x4b, 0xa4, 0xad, 0x7b, 0xe4,
  0x13, 0x29, 0xf1, 0xf8, 0x0d, 0x55, 0xc4, 0x8e, 0x8b, 0x58, 0xa5, 0xc0,
  0xb1, 0xfb, 0x1d, 0xbd, 0x23, 0xbe, 0x17, 0x56, 0x62, 0xe0, 0x0c, 0xc4,
  0xdb, 0xcb, 0x42, 0xe6, 0xfb, 0xbe, 0xb1, 0xea, 0x26, 0xa6, 0xc8, 0x35,
  0xcb, 0x3a, 0x09, 0xe7, 0xae, 0x43, 0x9b, 0xdb, 0x89, 0x38, 0xff, 0x54,
  0x5e, 0x85, 0x52, 0xdf, 0xc7, 0x25, 0x06, 0x64, 0x87, 0x2d, 0x71, 0x0f,
  0x75, 0x48, 0xcd, 0xaa, 0x1d, 0xda, 0xe0, 0xa0, 0x31, 0x06, 0xa3, 0xb2,
  0x81, 0x75, 0xcb, 0x07, 0x3a, 0xcb, 0x7b, 0x33, 0xf0, 0x48, 0x0c, 0xc7,
  0x88, 0x03, 0x13, 0xc4, 0x05, 0x4d, 0x55, 0x41, 0x99, 0x61, 0x9d, 0xaa,
  0x1c, 0xe3, 0x71, 0xd9, 0xc1, 0x53, 0xb2, 0x8b, 0x15, 0x6a, 0x60, 0x6a,
  0x46, 0xed, 0x68, 0x9c, 0xc3, 0x09, 0xea, 0xe0, 0x24, 0x75, 0xd1, 0xa7,
  0x31, 0x2a, 0xc3, 0x0c, 0xe8, 0x0c, 0xef, 0xd4, 0x2c, 0x1b, 0x24, 0x59,
  0x86, 0xd8, 0xb2, 0x20, 0x55, 0x55, 0xa1, 0xc8, 0x3c, 0xb0, 0x58, 0x00,
  0xa6, 0xd8, 0x6b, 0x0c, 0x62, 0x7c, 0x12, 0x5c, 0x3c, 0x09, 0x0e, 0x1e,
  0x06, 0x03, 0x09, 0x91, 0xb1, 0x54, 0x24, 0xd0, 0xd4, 0x2d, 0x3c, 0xaa,
  0xfb, 0xf8, 0x2d, 0x27, 0x3b, 0x19, 0x4d, 0xb7, 0x8e, 0xe8, 0x36, 0x6a,
  0xbb, 0x37, 0x37, 0x69, 0xd1, 0x80, 0xb2, 0xca, 0x70, 0x48, 0x0d, 0x70,
  0x50, 0xf5, 0x50, 0x01, 0x19, 0xf3, 0xc4, 0x46, 0xdb, 0x60, 0x68, 0x10,
  0x1f, 0x75, 0x22, 0xee, 0x92, 0x11, 0xe0, 0xb0, 0xe1, 0xa1, 0x94, 0x44,
  0x5b, 0xb2, 0x78, 0x60, 0xee, 0xc9, 0x66, 0x27, 0x91, 0x9d, 0x4e, 0x5a,
  0x56, 0x3b, 0xbd, 0xfb, 0x63, 0x55, 0x48, 0x6f, 0xfe, 0xfe, 0x38, 0x49,
  0x0b, 0x4c, 0xd9, 0x3e, 0xc9, 0x89, 0x5a, 0x20, 0xd0, 0x61, 0xc0, 0xa3,
  0xa0, 0xc9, 0x64, 0x47, 0x4f, 0xb3, 0xd4, 0x88, 0x40, 0x45, 0xe6, 0x52,
  0x43, 0x60, 0x6e, 0x40, 0x53, 0x09, 0x79, 0x43, 0xfc, 0x5b, 0xdf, 0xff,
  0x57, 0x79, 0xff, 0xcd, 0xdf, 0x7f, 0x25, 0x79, 0xff, 0xfd, 0xe9, 0xd2,
  0xfe, 0x9a, 0x2a, 0xfd, 0xd9, 0x96, 0x15, 0x01, 0xb2, 0xf4, 0xc7, 0xb7,
  0x84, 0xf2, 0x87, 0xf2, 0xae, 0xa0, 0x3d, 0xa9, 0x42, 0x70, 0x6e, 0xee,
  0xd5, 0x8b, 0xed, 0xf6, 0xc2, 0x2b, 0xb8, 0xb0, 0x7a, 0x75, 0xe1, 0xfa,
  0xf3, 0x17, 0xcf, 0x5f, 0xb8, 0x7a, 0xb1, 0x7d, 0x7e, 0xfa, 0xf2, 0xb5,
  0xd5, 0x33, 0x97, 0xdb, 0x0b, 0x57, 0xce, 0xb4, 0x7f, 0x07, 0x9d, 0xd7,
  0xca, 0x1d, 0x00, 0x00, 0x0e, 0x0b, 0xf7, 0x75, 0xd0, 0xe7, 0x54, 0x2c,
  0xa3, 0xaa, 0x3a, 0x38, 0x18, 0x5f, 0x8b, 0xc4
};
