#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; SV_Position              0   xyzw        2      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_VSBasicVertexLighting.pdb
; shader hash: 8524f0d8ad6b55e030520c9dcb8eff7c
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 2
; SigOutputElements: 3
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 2
; SigOutputVectors[0]: 3
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSBasicVertexLighting
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 7, outputs: 12
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6 }
;   output 1 depends on inputs: { 4, 5, 6 }
;   output 2 depends on inputs: { 4, 5, 6 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 0, 1, 2, 3 }
;   output 9 depends on inputs: { 0, 1, 2, 3 }
;   output 10 depends on inputs: { 0, 1, 2, 3 }
;   output 11 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicVertexLighting() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %10 = extractvalue %dx.types.CBufRet.f32 %9, 0
  %11 = extractvalue %dx.types.CBufRet.f32 %9, 1
  %12 = extractvalue %dx.types.CBufRet.f32 %9, 2
  %13 = extractvalue %dx.types.CBufRet.f32 %9, 3
  %14 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %15 = extractvalue %dx.types.CBufRet.f32 %14, 0
  %16 = extractvalue %dx.types.CBufRet.f32 %14, 1
  %17 = extractvalue %dx.types.CBufRet.f32 %14, 2
  %18 = extractvalue %dx.types.CBufRet.f32 %14, 3
  %19 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %20 = extractvalue %dx.types.CBufRet.f32 %19, 0
  %21 = extractvalue %dx.types.CBufRet.f32 %19, 1
  %22 = extractvalue %dx.types.CBufRet.f32 %19, 2
  %23 = extractvalue %dx.types.CBufRet.f32 %19, 3
  %24 = fmul fast float %10, %5
  %25 = call float @dx.op.tertiary.f32(i32 46, float %6, float %11, float %24)  ; FMad(a,b,c)
  %26 = call float @dx.op.tertiary.f32(i32 46, float %7, float %12, float %25)  ; FMad(a,b,c)
  %27 = call float @dx.op.tertiary.f32(i32 46, float %8, float %13, float %26)  ; FMad(a,b,c)
  %28 = fmul fast float %15, %5
  %29 = call float @dx.op.tertiary.f32(i32 46, float %6, float %16, float %28)  ; FMad(a,b,c)
  %30 = call float @dx.op.tertiary.f32(i32 46, float %7, float %17, float %29)  ; FMad(a,b,c)
  %31 = call float @dx.op.tertiary.f32(i32 46, float %8, float %18, float %30)  ; FMad(a,b,c)
  %32 = fmul fast float %20, %5
  %33 = call float @dx.op.tertiary.f32(i32 46, float %6, float %21, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %7, float %22, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %8, float %23, float %34)  ; FMad(a,b,c)
  %36 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.f32 %36, 0
  %38 = extractvalue %dx.types.CBufRet.f32 %36, 1
  %39 = extractvalue %dx.types.CBufRet.f32 %36, 2
  %40 = fsub fast float %37, %27
  %41 = fsub fast float %38, %31
  %42 = fsub fast float %39, %35
  %43 = call float @dx.op.dot3.f32(i32 55, float %40, float %41, float %42, float %40, float %41, float %42)  ; Dot3(ax,ay,az,bx,by,bz)
  %44 = call float @dx.op.unary.f32(i32 25, float %43)  ; Rsqrt(value)
  %45 = fmul fast float %40, %44
  %46 = fmul fast float %41, %44
  %47 = fmul fast float %42, %44
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = fmul fast float %49, %2
  %61 = call float @dx.op.tertiary.f32(i32 46, float %3, float %50, float %60)  ; FMad(a,b,c)
  %62 = call float @dx.op.tertiary.f32(i32 46, float %4, float %51, float %61)  ; FMad(a,b,c)
  %63 = fmul fast float %53, %2
  %64 = call float @dx.op.tertiary.f32(i32 46, float %3, float %54, float %63)  ; FMad(a,b,c)
  %65 = call float @dx.op.tertiary.f32(i32 46, float %4, float %55, float %64)  ; FMad(a,b,c)
  %66 = fmul fast float %57, %2
  %67 = call float @dx.op.tertiary.f32(i32 46, float %3, float %58, float %66)  ; FMad(a,b,c)
  %68 = call float @dx.op.tertiary.f32(i32 46, float %4, float %59, float %67)  ; FMad(a,b,c)
  %69 = call float @dx.op.dot3.f32(i32 55, float %62, float %65, float %68, float %62, float %65, float %68)  ; Dot3(ax,ay,az,bx,by,bz)
  %70 = call float @dx.op.unary.f32(i32 25, float %69)  ; Rsqrt(value)
  %71 = fmul fast float %70, %62
  %72 = fmul fast float %70, %65
  %73 = fmul fast float %70, %68
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = fsub fast float %45, %75
  %87 = fsub fast float %46, %76
  %88 = fsub fast float %47, %77
  %89 = call float @dx.op.dot3.f32(i32 55, float %86, float %87, float %88, float %86, float %87, float %88)  ; Dot3(ax,ay,az,bx,by,bz)
  %90 = call float @dx.op.unary.f32(i32 25, float %89)  ; Rsqrt(value)
  %91 = fmul fast float %90, %87
  %92 = fmul fast float %90, %88
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = fsub fast float %45, %94
  %106 = fsub fast float %46, %95
  %107 = fsub fast float %47, %96
  %108 = call float @dx.op.dot3.f32(i32 55, float %105, float %106, float %107, float %105, float %106, float %107)  ; Dot3(ax,ay,az,bx,by,bz)
  %109 = call float @dx.op.unary.f32(i32 25, float %108)  ; Rsqrt(value)
  %110 = fmul fast float %109, %106
  %111 = fmul fast float %109, %107
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = fsub fast float %45, %113
  %125 = fsub fast float %46, %114
  %126 = fsub fast float %47, %115
  %127 = call float @dx.op.dot3.f32(i32 55, float %124, float %125, float %126, float %124, float %125, float %126)  ; Dot3(ax,ay,az,bx,by,bz)
  %128 = call float @dx.op.unary.f32(i32 25, float %127)  ; Rsqrt(value)
  %129 = fmul fast float %128, %125
  %130 = fmul fast float %128, %126
  %131 = fsub fast float -0.000000e+00, %76
  %132 = fsub fast float -0.000000e+00, %77
  %133 = fsub fast float -0.000000e+00, %95
  %134 = fsub fast float -0.000000e+00, %96
  %135 = fsub fast float -0.000000e+00, %114
  %136 = fsub fast float -0.000000e+00, %115
  %137 = fmul fast float %71, %75
  %138 = fsub fast float -0.000000e+00, %137
  %139 = call float @dx.op.tertiary.f32(i32 46, float %131, float %72, float %138)  ; FMad(a,b,c)
  %140 = call float @dx.op.tertiary.f32(i32 46, float %132, float %73, float %139)  ; FMad(a,b,c)
  %141 = fmul fast float %71, %94
  %142 = fsub fast float -0.000000e+00, %141
  %143 = call float @dx.op.tertiary.f32(i32 46, float %133, float %72, float %142)  ; FMad(a,b,c)
  %144 = call float @dx.op.tertiary.f32(i32 46, float %134, float %73, float %143)  ; FMad(a,b,c)
  %145 = fmul fast float %71, %113
  %146 = fsub fast float -0.000000e+00, %145
  %147 = call float @dx.op.tertiary.f32(i32 46, float %135, float %72, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %136, float %73, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %86, %71
  %150 = fmul fast float %149, %90
  %151 = call float @dx.op.tertiary.f32(i32 46, float %91, float %72, float %150)  ; FMad(a,b,c)
  %152 = call float @dx.op.tertiary.f32(i32 46, float %92, float %73, float %151)  ; FMad(a,b,c)
  %153 = fmul fast float %105, %71
  %154 = fmul fast float %153, %109
  %155 = call float @dx.op.tertiary.f32(i32 46, float %110, float %72, float %154)  ; FMad(a,b,c)
  %156 = call float @dx.op.tertiary.f32(i32 46, float %111, float %73, float %155)  ; FMad(a,b,c)
  %157 = fmul fast float %124, %71
  %158 = fmul fast float %157, %128
  %159 = call float @dx.op.tertiary.f32(i32 46, float %129, float %72, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %130, float %73, float %159)  ; FMad(a,b,c)
  %161 = fcmp fast olt float %140, 0.000000e+00
  %162 = fcmp fast olt float %144, 0.000000e+00
  %163 = fcmp fast olt float %148, 0.000000e+00
  %164 = select i1 %161, float 0.000000e+00, float 1.000000e+00
  %165 = select i1 %162, float 0.000000e+00, float 1.000000e+00
  %166 = select i1 %163, float 0.000000e+00, float 1.000000e+00
  %167 = fmul fast float %164, %140
  %168 = fmul fast float %165, %144
  %169 = fmul fast float %166, %148
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 3
  %172 = call float @dx.op.binary.f32(i32 35, float %152, float 0.000000e+00)  ; FMax(a,b)
  %173 = call float @dx.op.binary.f32(i32 35, float %156, float 0.000000e+00)  ; FMax(a,b)
  %174 = call float @dx.op.binary.f32(i32 35, float %160, float 0.000000e+00)  ; FMax(a,b)
  %175 = fmul fast float %172, %164
  %176 = fmul fast float %173, %165
  %177 = fmul fast float %174, %166
  %178 = call float @dx.op.unary.f32(i32 23, float %175)  ; Log(value)
  %179 = call float @dx.op.unary.f32(i32 23, float %176)  ; Log(value)
  %180 = call float @dx.op.unary.f32(i32 23, float %177)  ; Log(value)
  %181 = fmul fast float %178, %171
  %182 = fmul fast float %179, %171
  %183 = fmul fast float %180, %171
  %184 = call float @dx.op.unary.f32(i32 21, float %181)  ; Exp(value)
  %185 = call float @dx.op.unary.f32(i32 21, float %182)  ; Exp(value)
  %186 = call float @dx.op.unary.f32(i32 21, float %183)  ; Exp(value)
  %187 = fmul fast float %184, %140
  %188 = fmul fast float %185, %144
  %189 = fmul fast float %186, %148
  %190 = fmul fast float %167, %79
  %191 = call float @dx.op.tertiary.f32(i32 46, float %168, float %98, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %169, float %117, float %191)  ; FMad(a,b,c)
  %193 = fmul fast float %167, %80
  %194 = call float @dx.op.tertiary.f32(i32 46, float %168, float %99, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %169, float %118, float %194)  ; FMad(a,b,c)
  %196 = fmul fast float %167, %81
  %197 = call float @dx.op.tertiary.f32(i32 46, float %168, float %100, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %169, float %119, float %197)  ; FMad(a,b,c)
  %199 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %200 = extractvalue %dx.types.CBufRet.f32 %199, 0
  %201 = extractvalue %dx.types.CBufRet.f32 %199, 1
  %202 = extractvalue %dx.types.CBufRet.f32 %199, 2
  %203 = fmul fast float %200, %192
  %204 = fmul fast float %201, %195
  %205 = fmul fast float %202, %198
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 2
  %210 = fadd fast float %203, %207
  %211 = fadd fast float %204, %208
  %212 = fadd fast float %205, %209
  %213 = fmul fast float %187, %83
  %214 = call float @dx.op.tertiary.f32(i32 46, float %188, float %102, float %213)  ; FMad(a,b,c)
  %215 = call float @dx.op.tertiary.f32(i32 46, float %189, float %121, float %214)  ; FMad(a,b,c)
  %216 = fmul fast float %187, %84
  %217 = call float @dx.op.tertiary.f32(i32 46, float %188, float %103, float %216)  ; FMad(a,b,c)
  %218 = call float @dx.op.tertiary.f32(i32 46, float %189, float %122, float %217)  ; FMad(a,b,c)
  %219 = fmul fast float %187, %85
  %220 = call float @dx.op.tertiary.f32(i32 46, float %188, float %104, float %219)  ; FMad(a,b,c)
  %221 = call float @dx.op.tertiary.f32(i32 46, float %189, float %123, float %220)  ; FMad(a,b,c)
  %222 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %223 = extractvalue %dx.types.CBufRet.f32 %170, 1
  %224 = extractvalue %dx.types.CBufRet.f32 %170, 2
  %225 = fmul fast float %222, %215
  %226 = fmul fast float %223, %218
  %227 = fmul fast float %224, %221
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = extractvalue %dx.types.CBufRet.f32 %228, 1
  %231 = extractvalue %dx.types.CBufRet.f32 %228, 2
  %232 = extractvalue %dx.types.CBufRet.f32 %228, 3
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %237 = extractvalue %dx.types.CBufRet.f32 %233, 3
  %238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.f32 %238, 0
  %240 = extractvalue %dx.types.CBufRet.f32 %238, 1
  %241 = extractvalue %dx.types.CBufRet.f32 %238, 2
  %242 = extractvalue %dx.types.CBufRet.f32 %238, 3
  %243 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %244 = extractvalue %dx.types.CBufRet.f32 %243, 0
  %245 = extractvalue %dx.types.CBufRet.f32 %243, 1
  %246 = extractvalue %dx.types.CBufRet.f32 %243, 2
  %247 = extractvalue %dx.types.CBufRet.f32 %243, 3
  %248 = fmul fast float %229, %5
  %249 = call float @dx.op.tertiary.f32(i32 46, float %6, float %230, float %248)  ; FMad(a,b,c)
  %250 = call float @dx.op.tertiary.f32(i32 46, float %7, float %231, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %8, float %232, float %250)  ; FMad(a,b,c)
  %252 = fmul fast float %234, %5
  %253 = call float @dx.op.tertiary.f32(i32 46, float %6, float %235, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %7, float %236, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %8, float %237, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %239, %5
  %257 = call float @dx.op.tertiary.f32(i32 46, float %6, float %240, float %256)  ; FMad(a,b,c)
  %258 = call float @dx.op.tertiary.f32(i32 46, float %7, float %241, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %8, float %242, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %244, %5
  %261 = call float @dx.op.tertiary.f32(i32 46, float %6, float %245, float %260)  ; FMad(a,b,c)
  %262 = call float @dx.op.tertiary.f32(i32 46, float %7, float %246, float %261)  ; FMad(a,b,c)
  %263 = call float @dx.op.tertiary.f32(i32 46, float %8, float %247, float %262)  ; FMad(a,b,c)
  %264 = extractvalue %dx.types.CBufRet.f32 %199, 3
  %265 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %266 = extractvalue %dx.types.CBufRet.f32 %265, 0
  %267 = extractvalue %dx.types.CBufRet.f32 %265, 1
  %268 = extractvalue %dx.types.CBufRet.f32 %265, 2
  %269 = extractvalue %dx.types.CBufRet.f32 %265, 3
  %270 = call float @dx.op.dot4.f32(i32 56, float %5, float %6, float %7, float %8, float %266, float %267, float %268, float %269)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %271 = call float @dx.op.unary.f32(i32 7, float %270)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %210)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %211)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %212)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %264)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %225)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %226)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %227)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %271)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %251)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %255)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %259)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float %263)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[9 x i32] [i32 7, i32 12, i32 4080, i32 4080, i32 4080, i32 4080, i32 119, i32 119, i32 119]}
!9 = !{void ()* @VSBasicVertexLighting, !"VSBasicVertexLighting", !10, !5, null}
!10 = !{!11, !17, null}
!11 = !{!12, !15}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"NORMAL", i8 9, i8 0, !13, i8 0, i32 1, i8 3, i32 1, i8 0, !16}
!16 = !{i32 3, i32 7}
!17 = !{!18, !19, !21}
!18 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!19 = !{i32 1, !"COLOR", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!20 = !{i32 1}
!21 = !{i32 2, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 2, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 23
;   num_shared_vgprs: 0
;   num_sgprs: 66
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1024
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xd8f02485, 0xe0556bad                // 000000000000: D5802485 03FFB1F0 E0556BAD
;   v_nop_xbox_data 0x9d0c5230, 0x7cff8ecb                // 00000000000C: D5805230 03FF3B0C 7CFF8ECB
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_mov_b32     s63, lit(0x11014fac)                    // 000000000020: BEBF03FF 11014FAC
;   s_mov_b32     s62, -1                                 // 000000000028: BEBE03C1
;   s_mov_b32     s60, s8                                 // 00000000002C: BEBC0308
;   s_or_b32      s61, s9, lit(0x00100000)                // 000000000030: 883DFF09 00100000
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x0000c0   // 000000000038: F428091E FA0000C0
;   s_buffer_load_dwordx16  s[0:15], s[60:63], 0x0000e0   // 000000000040: F430001E FA0000E0
;   s_buffer_load_dwordx16  s[20:35], s[60:63], 0x000130  // 000000000048: F430051E FA000130
;   s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000050: BF8C0070
;   v_mul_legacy_f32  v0, s8, v4                          // 000000000054: 0E000808
;   v_mul_legacy_f32  v12, s4, v4                         // 000000000058: 0E180804
;   v_mul_legacy_f32  v16, s12, v4                        // 00000000005C: 0E20080C
;   v_mul_legacy_f32  v11, s24, v8                        // 000000000060: 0E161018
;   v_fmac_f32    v0, s9, v5                              // 000000000064: 56000A09
;   v_fmac_f32    v12, s5, v5                             // 000000000068: 56180A05
;   v_fmac_f32    v16, s13, v5                            // 00000000006C: 56200A0D
;   v_fmac_f32    v11, s25, v9                            // 000000000070: 56161219
;   v_fmac_f32    v0, s10, v6                             // 000000000074: 56000C0A
;   v_fmac_f32    v12, s6, v6                             // 000000000078: 56180C06
;   v_fmac_f32    v16, s14, v6                            // 00000000007C: 56200C0E
;   v_fmac_f32    v11, s26, v10                           // 000000000080: 5616141A
;   v_fmac_f32    v0, s11, v7                             // 000000000084: 56000E0B
;   v_fmac_f32    v12, s7, v7                             // 000000000088: 56180E07
;   v_fmac_f32    v16, s15, v7                            // 00000000008C: 56200E0F
;   s_buffer_load_dwordx16  s[4:19], s[60:63], null       // 000000000090: F430011E FA000000
;   v_sub_f32     v0, s37, v0                             // 000000000098: 08000025
;   v_sub_f32     v1, s36, v12                            // 00000000009C: 08021824
;   v_sub_f32     v2, s38, v16                            // 0000000000A0: 08042026
;   v_mul_legacy_f32  v12, s20, v8                        // 0000000000A4: 0E181014
;   s_buffer_load_dwordx16  s[36:51], s[60:63], 0x000040  // 0000000000A8: F430091E FA000040
;   v_mul_legacy_f32  v3, v0, v0                          // 0000000000B0: 0E060100
;   v_mul_legacy_f32  v8, s28, v8                         // 0000000000B4: 0E10101C
;   v_fmac_f32    v12, s21, v9                            // 0000000000B8: 56181215
;   v_fmac_f32    v3, v1, v1                              // 0000000000BC: 56060301
;   v_fmac_f32    v8, s29, v9                             // 0000000000C0: 5610121D
;   v_mul_legacy_f32  v9, v11, v11                        // 0000000000C4: 0E12170B
;   v_fmac_f32    v12, s22, v10                           // 0000000000C8: 56181416
;   v_fmac_f32    v3, v2, v2                              // 0000000000CC: 56060502
;   v_fmac_f32    v8, s30, v10                            // 0000000000D0: 5610141E
;   v_fmac_f32    v9, v12, v12                            // 0000000000D4: 5612190C
;   v_rsq_f32     v3, v3                                  // 0000000000D8: 7E065D03
;   v_fmac_f32    v9, v8, v8                              // 0000000000DC: 56121108
;   v_rsq_f32     v9, v9                                  // 0000000000E0: 7E125D09
;   s_waitcnt     lgkmcnt(0)                              // 0000000000E4: BF8CC07F
;   v_fma_f32     v10, v0, v3, -s17                       // 0000000000E8: D54B000A 80460700
;   v_fma_f32     v13, v0, v3, -s37                       // 0000000000F0: D54B000D 80960700
;   v_fma_f32     v14, v1, v3, -s16                       // 0000000000F8: D54B000E 80420701
;   v_fma_f32     v0, v0, v3, -s41                        // 000000000100: D54B0000 80A60700
;   v_fma_f32     v17, v1, v3, -s36                       // 000000000108: D54B0011 80920701
;   v_mul_legacy_f32  v15, v10, v10                       // 000000000110: 0E1E150A
;   v_mul_legacy_f32  v18, v13, v13                       // 000000000114: 0E241B0D
;   v_fma_f32     v16, v2, v3, -s18                       // 000000000118: D54B0010 804A0702
;   v_fma_f32     v19, v2, v3, -s38                       // 000000000120: D54B0013 809A0702
;   v_fma_f32     v1, v1, v3, -s40                        // 000000000128: D54B0001 80A20701
;   v_fmac_f32    v15, v14, v14                           // 000000000130: 561E1D0E
;   v_fmac_f32    v18, v17, v17                           // 000000000134: 56242311
;   v_mul_legacy_f32  v20, v0, v0                         // 000000000138: 0E280100
;   v_mul_legacy_f32  v12, v9, v12                        // 00000000013C: 0E181909
;   v_fma_f32     v2, v2, v3, -s42                        // 000000000140: D54B0002 80AA0702
;   v_fmac_f32    v15, v16, v16                           // 000000000148: 561E2110
;   v_fmac_f32    v18, v19, v19                           // 00000000014C: 56242713
;   v_fmac_f32    v20, v1, v1                             // 000000000150: 56280301
;   v_mul_legacy_f32  v14, v14, v12                       // 000000000154: 0E1C190E
;   v_mul_legacy_f32  v11, v9, v11                        // 000000000158: 0E161709
;   v_rsq_f32     v3, v15                                 // 00000000015C: 7E065D0F
;   v_mul_legacy_f32  v17, v17, v12                       // 000000000160: 0E221911
;   v_fmac_f32    v20, v2, v2                             // 000000000164: 56280502
;   v_mul_legacy_f32  v8, v9, v8                          // 000000000168: 0E101109
;   v_mul_legacy_f32  v1, v1, v12                         // 00000000016C: 0E021901
;   v_rsq_f32     v22, v18                                // 000000000170: 7E2C5D12
;   v_mul_legacy_f32  v18, s16, v12                       // 000000000174: 0E241810
;   v_rsq_f32     v15, v20                                // 000000000178: 7E1E5D14
;   v_fma_f32     v9, -s17, v11, -v18                     // 00000000017C: D54B0009 A44A1611
;   v_mul_legacy_f32  v21, v3, v10                        // 000000000184: 0E2A1503
;   v_mul_legacy_f32  v14, v14, v3                        // 000000000188: 0E1C070E
;   v_mul_legacy_f32  v18, s36, v12                       // 00000000018C: 0E241824
;   v_mul_legacy_f32  v10, v17, v22                       // 000000000190: 0E142D11
;   v_fmac_f32    v9, -s18, v8                            // 000000000194: D52B0009 20021012
;   v_mul_legacy_f32  v13, v22, v13                       // 00000000019C: 0E1A1B16
;   v_fmac_f32    v14, v21, v11                           // 0000000001A0: 561C1715
;   v_fma_f32     v21, -s37, v11, -v18                    // 0000000001A4: D54B0015 A44A1625
;   v_mul_legacy_f32  v3, v3, v16                         // 0000000001AC: 0E062103
;   v_mul_legacy_f32  v12, s40, v12                       // 0000000001B0: 0E181828
;   v_fmac_f32    v10, v13, v11                           // 0000000001B4: 5614170D
;   v_mul_legacy_f32  v13, v22, v19                       // 0000000001B8: 0E1A2716
;   v_fmac_f32    v21, -s38, v8                           // 0000000001BC: D52B0015 20021026
;   v_fmac_f32    v14, v3, v8                             // 0000000001C4: 561C1103
;   v_fma_f32     v3, -s41, v11, -v12                     // 0000000001C8: D54B0003 A4321629
;   v_cmp_gt_f32  vcc, 0, v9                              // 0000000001D0: 7C081280
;   v_mul_legacy_f32  v1, v1, v15                         // 0000000001D4: 0E021F01
;   v_mul_legacy_f32  v0, v15, v0                         // 0000000001D8: 0E00010F
;   v_mul_legacy_f32  v15, v15, v2                        // 0000000001DC: 0E1E050F
;   v_fmac_f32    v10, v13, v8                            // 0000000001E0: 5614110D
;   v_cndmask_b32  v12, 1.0, 0, vcc                       // 0000000001E4: D501000C 01A900F2
;   v_max_f32     v2, 0, v14                              // 0000000001EC: 20041C80
;   v_fmac_f32    v1, v0, v11                             // 0000000001F0: 56021700
;   v_cmp_gt_f32  vcc, 0, v21                             // 0000000001F4: 7C082A80
;   v_fmac_f32    v3, -s42, v8                            // 0000000001F8: D52B0003 2002102A
;   s_buffer_load_dwordx4  s[36:39], s[60:63], 0x000190   // 000000000200: F428091E FA000190
;   v_mul_legacy_f32  v0, v2, v12                         // 000000000208: 0E001902
;   s_buffer_load_dwordx8  s[52:59], s[60:63], 0x000170   // 00000000020C: F42C0D1E FA000170
;   v_fmac_f32    v1, v15, v8                             // 000000000214: 5602110F
;   v_cndmask_b32  v11, 1.0, 0, vcc                       // 000000000218: D501000B 01A900F2
;   v_max_f32     v2, 0, v10                              // 000000000220: 20041480
;   v_cmp_gt_f32  vcc, 0, v3                              // 000000000224: 7C080680
;   v_log_f32     v0, v0                                  // 000000000228: 7E004F00
;   v_max_f32     v1, 0, v1                               // 00000000022C: 20020280
;   s_buffer_load_dwordx16  s[16:31], s[60:63], 0x000080  // 000000000230: F430041E FA000080
;   v_mul_legacy_f32  v2, v2, v11                         // 000000000238: 0E041702
;   v_cndmask_b32  v8, 1.0, 0, vcc                        // 00000000023C: D5010008 01A900F2
;   v_mul_legacy_f32  v13, s32, v4                        // 000000000244: 0E1A0820
;   v_mul_legacy_f32  v12, v12, v9                        // 000000000248: 0E18130C
;   v_mul_legacy_f32  v10, v11, v21                       // 00000000024C: 0E142B0B
;   v_log_f32     v2, v2                                  // 000000000250: 7E044F02
;   v_mul_legacy_f32  v1, v1, v8                          // 000000000254: 0E021101
;   v_mul_legacy_f32  v0, s15, v0                         // 000000000258: 0E00000F
;   v_fmac_f32    v13, s33, v5                            // 00000000025C: 561A0A21
;   v_mul_legacy_f32  v11, s45, v12                       // 000000000260: 0E16182D
;   s_waitcnt     lgkmcnt(0)                              // 000000000264: BF8CC07F
;   v_mul_legacy_f32  v15, s36, v4                        // 000000000268: 0E1E0824
;   v_log_f32     v1, v1                                  // 00000000026C: 7E024F01
;   v_mul_legacy_f32  v20, s52, v4                        // 000000000270: 0E280834
;   v_mul_legacy_f32  v14, s56, v4                        // 000000000274: 0E1C0838
;   v_fmac_f32    v13, s34, v6                            // 000000000278: 561A0C22
;   v_mul_legacy_f32  v2, s15, v2                         // 00000000027C: 0E04040F
;   v_exp_f32     v0, v0                                  // 000000000280: 7E004B00
;   v_fmac_f32    v15, s37, v5                            // 000000000284: 561E0A25
;   v_fmac_f32    v14, s57, v5                            // 000000000288: 561C0A39
;   v_fmac_f32    v20, s53, v5                            // 00000000028C: 56280A35
;   v_mul_legacy_f32  v17, s46, v12                       // 000000000290: 0E22182E
;   v_mul_legacy_f32  v1, s15, v1                         // 000000000294: 0E02020F
;   v_exp_f32     v2, v2                                  // 000000000298: 7E044B02
;   v_fmac_f32    v14, s58, v6                            // 00000000029C: 561C0C3A
;   v_fmac_f32    v20, s54, v6                            // 0000000002A0: 56280C36
;   v_fmac_f32    v15, s38, v6                            // 0000000002A4: 561E0C26
;   v_mul_legacy_f32  v0, v0, v9                          // 0000000002A8: 0E001300
;   v_exp_f32     v1, v1                                  // 0000000002AC: 7E024B01
;   v_mul_legacy_f32  v5, s1, v5                          // 0000000002B0: 0E0A0A01
;   v_mul_legacy_f32  v12, s44, v12                       // 0000000002B4: 0E18182C
;   v_fmac_f32    v15, s39, v7                            // 0000000002B8: 561E0E27
;   v_fmac_f32    v14, s59, v7                            // 0000000002BC: 561C0E3B
;   v_mul_legacy_f32  v19, v2, v21                        // 0000000002C0: 0E262B02
;   v_mul_legacy_f32  v16, s21, v0                        // 0000000002C4: 0E200015
;   v_mul_legacy_f32  v18, s22, v0                        // 0000000002C8: 0E240016
;   v_mul_legacy_f32  v0, s20, v0                         // 0000000002CC: 0E000014
;   v_fmac_f32    v20, s55, v7                            // 0000000002D0: 56280E37
;   v_fmac_f32    v13, s35, v7                            // 0000000002D4: 561A0E23
;   v_fmac_f32    v5, s0, v4                              // 0000000002D8: 560A0800
;   v_mul_legacy_f32  v2, v8, v3                          // 0000000002DC: 0E040708
;   v_fmac_f32    v12, s48, v10                           // 0000000002E0: 56181430
;   v_fmac_f32    v17, s50, v10                           // 0000000002E4: 56221432
;   v_fmac_f32    v11, s49, v10                           // 0000000002E8: 56161431
;   exp           pos0, v13, v20, v14, v15 done           // 0000000002EC: F80008CF 0F0E140D
;   v_mul_legacy_f32  v1, v1, v3                          // 0000000002F4: 0E020701
;   v_fmac_f32    v0, s24, v19                            // 0000000002F8: 56002618
;   v_fmac_f32    v18, s26, v19                           // 0000000002FC: 5624261A
;   v_fmac_f32    v16, s25, v19                           // 000000000300: 56202619
;   v_fmac_f32    v5, s3, v7                              // 000000000304: 560A0E03
;   v_fmac_f32    v11, s17, v2                            // 000000000308: 56160411
;   v_fmac_f32    v0, s28, v1                             // 00000000030C: 5600021C
;   v_fmac_f32    v17, s18, v2                            // 000000000310: 56220412
;   v_fmac_f32    v12, s16, v2                            // 000000000314: 56180410
;   v_fmac_f32    v16, s29, v1                            // 000000000318: 5620021D
;   v_fmac_f32    v18, s30, v1                            // 00000000031C: 5624021E
;   v_fmac_f32    v5, v6, s2 clamp                        // 000000000320: D52B8005 00000506
;   v_mov_b32     v1, s7                                  // 000000000328: 7E020207
;   v_fma_f32     v2, s4, v12, s8                         // 00000000032C: D54B0002 00221804
;   v_fma_f32     v3, s6, v17, s10                        // 000000000334: D54B0003 002A2206
;   v_fma_f32     v4, s5, v11, s9                         // 00000000033C: D54B0004 00261605
;   v_mul_legacy_f32  v0, s12, v0                         // 000000000344: 0E00000C
;   v_mul_legacy_f32  v6, s14, v18                        // 000000000348: 0E0C240E
;   v_mul_legacy_f32  v7, s13, v16                        // 00000000034C: 0E0E200D
;   exp           param0, v2, v4, v3, v1                  // 000000000350: F800020F 01030402
;   exp           param1, v0, v7, v6, v5                  // 000000000358: F800021F 05060700
;   s_endpgm                                              // 000000000360: BF810000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
;   s_code_end                                            // 0000000003C0: BF9F0000
;   s_code_end                                            // 0000000003C4: BF9F0000
;   s_code_end                                            // 0000000003C8: BF9F0000
;   s_code_end                                            // 0000000003CC: BF9F0000
;   s_code_end                                            // 0000000003D0: BF9F0000
;   s_code_end                                            // 0000000003D4: BF9F0000
;   s_code_end                                            // 0000000003D8: BF9F0000
;   s_code_end                                            // 0000000003DC: BF9F0000
;   s_code_end                                            // 0000000003E0: BF9F0000
;   s_code_end                                            // 0000000003E4: BF9F0000
;   s_code_end                                            // 0000000003E8: BF9F0000
;   s_code_end                                            // 0000000003EC: BF9F0000
;   s_code_end                                            // 0000000003F0: BF9F0000
;   s_code_end                                            // 0000000003F4: BF9F0000
;   s_code_end                                            // 0000000003F8: BF9F0000
;   s_code_end                                            // 0000000003FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 10
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 1
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 41
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSBasicVertexLighting)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 2
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
; 
;   num_output_semantics: 2
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 20 {
;     scratch_en: 0
;     user_sgpr: 10
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 2 {
;     vs_export_count: 1
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 8
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000000001100110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000000000000011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=23,NumSGPR=66,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:155,SAlu:10,VMem:0,SMem:8,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char BasicEffect_VSBasicVertexLighting[] = {
  0x44, 0x58, 0x42, 0x43, 0xed, 0x8d, 0x66, 0x4e, 0x52, 0x9d, 0x88, 0x9b,
  0x31, 0x20, 0x5e, 0x57, 0xf7, 0x40, 0x15, 0x03, 0x01, 0x00, 0x00, 0x00,
  0xe0, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
  0x54, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
  0x3c, 0x03, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x5c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53, 0x56,
  0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0x14, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00,
  0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65,
  0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00,
  0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00,
  0xf0, 0x0f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00,
  0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30,
  0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x8c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x87, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45,
  0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69,
  0x63, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x24, 0xf0, 0xd8,
  0xad, 0x6b, 0x55, 0xe0, 0x30, 0x52, 0x0c, 0x9d, 0xcb, 0x8e, 0xff, 0x7c,
  0x44, 0x58, 0x49, 0x4c, 0x9c, 0x13, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xe7, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x70, 0x0f, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x88, 0x0f, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xe8, 0x0f, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0xfc, 0x0f, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x0c, 0x10, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x8c, 0x13, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xe2, 0x03, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x70, 0x0f, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0xd9, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x90, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x20, 0x03, 0x31, 0x0c, 0xc3,
  0x30, 0x0c, 0xa4, 0x94, 0x61, 0x20, 0x06, 0x62, 0x0a, 0x31, 0x10, 0xc3,
  0x40, 0x4e, 0x51, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x86, 0x81, 0xa0,
  0xa3, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0x7c, 0x6e, 0xa3, 0x8a, 0x95,
  0x98, 0xfc, 0xe2, 0xb6, 0x11, 0x31, 0x0c, 0xc3, 0x40, 0xc5, 0x3d, 0xc3,
  0xe5, 0x4f, 0xd8, 0x43, 0x48, 0x7e, 0x08, 0x34, 0xc3, 0x42, 0xa0, 0x60,
  0x2a, 0x84, 0x44, 0x50, 0x04, 0x55, 0xa5, 0x18, 0x88, 0x61, 0x18, 0xe8,
  0x9a, 0x23, 0x08, 0x8a, 0x41, 0x11, 0x05, 0x41, 0x64, 0xa4, 0x0d, 0x04,
  0x0c, 0x23, 0x10, 0xc3, 0x30, 0xc2, 0x30, 0xe4, 0x80, 0x97, 0x04, 0xdd,
  0x55, 0x87, 0x23, 0x4d, 0x0b, 0x80, 0x39, 0xd4, 0xe4, 0xa7, 0x40, 0x04,
  0x30, 0xc4, 0x44, 0x44, 0x12, 0x6a, 0x3a, 0xcf, 0x1b, 0xbe, 0xef, 0xf3,
  0xbc, 0x0e, 0xfc, 0x40, 0x0a, 0x33, 0x81, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x20, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xb9, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xa3, 0x01, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x40, 0x16, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x80,
  0x0d, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0xa8, 0x28, 0x89, 0x11, 0x80,
  0x42, 0x28, 0x83, 0x22, 0x20, 0x71, 0x06, 0x80, 0xc6, 0xb1, 0x92, 0x83,
  0x81, 0xff, 0x01, 0xfe, 0x07, 0xf8, 0x1f, 0xe0, 0x7f, 0xb8, 0x87, 0x7b,
  0xb8, 0x07, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x28,
  0x13, 0x04, 0x62, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x60, 0x36, 0x08,
  0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x34, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x62, 0x80, 0x11, 0x98, 0x20, 0x10, 0xce, 0x06, 0xe4, 0x70,
  0x9e, 0xe3, 0x30, 0x20, 0x60, 0x43, 0x10, 0x6d, 0x20, 0x00, 0x40, 0x02,
  0x26, 0x08, 0x63, 0x90, 0x6d, 0x08, 0xa8, 0x09, 0x82, 0x00, 0xb0, 0xb2,
  0x9a, 0x12, 0x0a, 0x9b, 0x4b, 0x1b, 0xb3, 0x2a, 0x93, 0xa3, 0x2b, 0xc3,
  0x63, 0x4a, 0x3b, 0x43, 0xa3, 0x4b, 0x73, 0x3b, 0xe3, 0x32, 0x65, 0xf5,
  0x05, 0xf5, 0x36, 0x97, 0x46, 0x97, 0xf6, 0xe6, 0x36, 0x41, 0x28, 0xa6,
  0x09, 0x42, 0x41, 0x6d, 0x08, 0x8e, 0x09, 0x42, 0x51, 0x4d, 0x10, 0x88,
  0x67, 0x82, 0x40, 0x40, 0x1b, 0x84, 0xce, 0xdb, 0xb0, 0x1c, 0x58, 0xa6,
  0x6d, 0x9a, 0xc1, 0x1d, 0xda, 0x47, 0xc3, 0xe9, 0x49, 0xaa, 0x29, 0x88,
  0x69, 0x82, 0x50, 0x58, 0x13, 0x04, 0x22, 0xda, 0x20, 0x74, 0x63, 0xb0,
  0x61, 0x31, 0xc2, 0x20, 0xd3, 0x36, 0xcd, 0x10, 0x03, 0x43, 0x23, 0x83,
  0x0d, 0x02, 0x18, 0x94, 0x01, 0x8b, 0xa1, 0x27, 0xa6, 0x27, 0xa9, 0x09,
  0x42, 0x71, 0x6d, 0x58, 0x8e, 0x33, 0xc8, 0xb4, 0x0d, 0x0d, 0x0c, 0xee,
  0xd0, 0xbe, 0x0d, 0x81, 0xb1, 0x61, 0x31, 0xce, 0x20, 0xd3, 0xd4, 0x00,
  0x0d, 0x0c, 0xce, 0xd0, 0xbe, 0x09, 0x02, 0x21, 0x6d, 0x58, 0xd8, 0x00,
  0xcb, 0xc4, 0x60, 0xe3, 0x0c, 0x8e, 0x0d, 0xb4, 0x6f, 0xc3, 0x90, 0x06,
  0x6b, 0xd0, 0x06, 0x1b, 0x06, 0x33, 0x70, 0x03, 0x60, 0x43, 0x61, 0x5d,
  0x6f, 0x30, 0x01, 0xad, 0xf0, 0xc4, 0xde, 0xf0, 0x5c, 0xc6, 0xde, 0xda,
  0xe0, 0xd2, 0xd8, 0xca, 0xe4, 0x5c, 0xde, 0xe0, 0xe8, 0xd2, 0xde, 0xdc,
  0xe6, 0xa6, 0x04, 0x42, 0x15, 0x36, 0x36, 0xbb, 0x36, 0x97, 0x34, 0xb2,
  0x32, 0x37, 0xba, 0x29, 0x01, 0x51, 0x85, 0x0c, 0xcf, 0xc5, 0xae, 0x4c,
  0x6e, 0x2e, 0xed, 0xcd, 0x6d, 0x4a, 0x70, 0x34, 0x21, 0xc3, 0x73, 0xb1,
  0x0b, 0x63, 0xb3, 0x2b, 0x93, 0x9b, 0x12, 0x24, 0x75, 0xc8, 0xf0, 0x5c,
  0xe6, 0xd0, 0xc2, 0xc8, 0xca, 0xe4, 0x9a, 0xde, 0xc8, 0xca, 0xd8, 0xa6,
  0x04, 0x4c, 0x19, 0x32, 0x3c, 0x17, 0xb9, 0xb2, 0xb9, 0xb7, 0x3a, 0xb9,
  0xb1, 0xb2, 0xb9, 0x29, 0x81, 0x54, 0x87, 0x0c, 0xcf, 0xc5, 0x2e, 0xad,
  0xec, 0x2e, 0x89, 0x6c, 0x8a, 0x2e, 0x8c, 0xae, 0x6c, 0x4a, 0x40, 0xd5,
  0x21, 0xc3, 0x73, 0x29, 0x73, 0xa3, 0x93, 0xcb, 0x83, 0x7a, 0x4b, 0x73,
  0xa3, 0x9b, 0x9b, 0x12, 0xbc, 0x01, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66,
  0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07,
  0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10,
  0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce,
  0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b,
  0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c,
  0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07,
  0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11,
  0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0,
  0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8,
  0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b,
  0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b,
  0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87,
  0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07,
  0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87,
  0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81,
  0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30,
  0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca,
  0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b,
  0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b,
  0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87,
  0x76, 0x80, 0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0,
  0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0,
  0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4,
  0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x06, 0x50, 0xbd, 0xec,
  0x06, 0x48, 0x88, 0xf0, 0x12, 0xd1, 0x44, 0x5c, 0x25, 0x62, 0x1c, 0x13,
  0xd2, 0x18, 0x56, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e, 0x80, 0x34, 0x40,
  0x84, 0xf9, 0xc5, 0x6d, 0xdb, 0xc1, 0x36, 0x5c, 0xbe, 0xf3, 0xf8, 0x42,
  0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84, 0x01, 0x08, 0x98,
  0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x44, 0x04,
  0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x03, 0xce, 0x70, 0xf9, 0xce,
  0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0x9b, 0x81, 0x33, 0x5c, 0xbe,
  0xf3, 0xf8, 0x83, 0x33, 0xe1, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97,
  0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7,
  0x6d, 0x02, 0xd5, 0x70, 0xf9, 0xce, 0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28,
  0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x08, 0xd2, 0x70, 0xf9, 0xce,
  0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc1,
  0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54, 0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x94, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x95, 0x5d,
  0x29, 0x14, 0xc2, 0x0c, 0x40, 0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19,
  0x95, 0x5c, 0x81, 0x94, 0x48, 0x61, 0x94, 0x49, 0xa1, 0x94, 0x44, 0x51,
  0x94, 0x45, 0xb1, 0x14, 0x4c, 0x71, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x88, 0x7f, 0x23, 0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xb5, 0xc1, 0xf3, 0xad, 0xc1,
  0x1a, 0x70, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xd8, 0xc1, 0xd5,
  0x06, 0x6c, 0x30, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x77, 0x80, 0xb9, 0x41, 0x1b, 0x74, 0xd7, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0x78, 0x90, 0xbd, 0x81, 0x1b, 0x88, 0x01, 0x36, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x46, 0x1e, 0x68, 0x6f, 0xf0, 0x06, 0x66, 0x90,
  0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xa1, 0x07, 0x1b, 0x1c, 0xc0,
  0x01, 0x18, 0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec, 0x01,
  0x17, 0x07, 0x71, 0x50, 0x06, 0xdb, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x18, 0x7c, 0xd0, 0xc9, 0x81, 0x1c, 0x9c, 0x01, 0x37, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xd5, 0x1d, 0x80, 0x01, 0xe2, 0x06, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xf1, 0x41, 0x19, 0x34, 0xdb, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10,
  0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xa1, 0xa0, 0x06, 0xd2,
  0x37, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3,
  0x09, 0xc4, 0x60, 0xce, 0x24, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xb8, 0x4c, 0x21, 0x0e, 0x26, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xeb, 0x14, 0xe4, 0x60, 0x72, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xb8, 0x50, 0x61, 0x0e, 0x26, 0x27, 0xb0, 0xe6, 0x92, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xaa, 0x50, 0x07, 0x57, 0x13, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xb5, 0x0a, 0x76, 0x70, 0x35, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xac, 0x70, 0x07, 0x57, 0x13,
  0x18, 0xb3, 0xc9, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x57,
  0xc8, 0x83, 0x8d, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x7a,
  0x05, 0x3d, 0xd8, 0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e,
  0x58, 0xd8, 0x83, 0x8d, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0,
  0x92, 0x85, 0x3d, 0x18, 0x83, 0x37, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0, 0xc4, 0xc7,
  0x86, 0x23, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xa0, 0xf4, 0x42,
  0x1f, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18,
  0x30, 0xbd, 0xf0, 0x07, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10, 0xe4, 0x63,
  0xc5, 0x20, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x7c, 0xe1,
  0x14, 0xde, 0x40, 0x0f, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46,
  0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0x71, 0x58,
  0x85, 0x39, 0xe8, 0x83, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xca, 0x1c, 0x5e,
  0xe1, 0x0e, 0x52, 0x61, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34,
  0x61, 0x10, 0x6c, 0xd1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0xa5, 0x0e, 0xb5, 0xa0, 0x07, 0x4b, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd7, 0x3a, 0xd8, 0x82, 0x1e, 0x2c, 0x81, 0x29, 0x7d, 0x20,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xda, 0x01, 0x17, 0xfa,
  0x40, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x72, 0x87, 0x5c,
  0xe8, 0x03, 0x25, 0xb0, 0x04, 0x14, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x3c, 0xec, 0x02, 0x28, 0x24, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0xf1, 0xc0, 0x0b, 0xa0, 0x90, 0x04, 0x23, 0x06,
  0x0b, 0x00, 0x82, 0x60, 0xa0, 0xdc, 0xc3, 0x2d, 0x1c, 0x44, 0x70, 0x10,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x30, 0xf7, 0x90, 0x0b, 0x81,
  0x05, 0x89, 0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0xf0, 0x21, 0x1c, 0x52, 0x01, 0x1e, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0x2a, 0x7e, 0x28, 0x87, 0x56, 0xb0, 0x87, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0x0a, 0x24, 0xd2, 0x21, 0x16, 0x74, 0x61, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x2c, 0x0d, 0x96,
  0xf8, 0x58, 0x1a, 0x2c, 0xf1, 0xb1, 0x34, 0x58, 0xe2, 0x33, 0x62, 0xb0,
  0x00, 0x20, 0x08, 0x06, 0xca, 0x4a, 0xac, 0xc3, 0x20, 0x04, 0x83, 0x10,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0xb3, 0x12, 0xed, 0x10, 0x58,
  0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x50, 0xad, 0x04, 0x3d, 0xf0, 0x82, 0x3c, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x54, 0x2f, 0x81, 0x0f, 0xe0, 0x50, 0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0xd5, 0x4c, 0xf0, 0x03, 0x39, 0xb0, 0xc3, 0x68, 0x42, 0x00, 0x8c, 0x26,
  0x08, 0xc1, 0x68, 0xc2, 0x20, 0x18, 0x1f, 0x2c, 0xf1, 0x31, 0x3e, 0x58,
  0xe2, 0x63, 0x7c, 0xb0, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40, 0x10, 0x0c,
  0x14, 0x9f, 0xf0, 0x87, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x03, 0xc6, 0x27, 0x40, 0x22, 0xb0, 0x80, 0x90, 0x8f, 0x09,
  0x84, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0xf2, 0x89, 0x93,
  0x78, 0x07, 0x93, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d,
  0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xc4, 0x62, 0x25,
  0xe6, 0xa1, 0x27, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xb3, 0x78, 0x89,
  0x7b, 0xf0, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84,
  0x41, 0xb0, 0x57, 0x58, 0xe2, 0x63, 0xaf, 0xb0, 0xc4, 0xc7, 0x5e, 0x61,
  0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x28, 0x71, 0x11, 0x13,
  0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x4c,
  0x5c, 0xcc, 0x44, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9, 0xd8, 0x48,
  0xdc, 0x41, 0x7c, 0x8c, 0x24, 0xee, 0x20, 0x3e, 0x56, 0x12, 0x66, 0x10,
  0x1f, 0x33, 0x09, 0x33, 0x88, 0x8f, 0x9d, 0x44, 0x15, 0x1f, 0x43, 0x89,
  0x2a, 0x3e, 0x26, 0x0a, 0x7e, 0x20, 0x1f, 0x53, 0x89, 0x20, 0x3e, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xe1, 0xc5, 0x58, 0x20, 0xa3, 0x10,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x95, 0x17, 0x64, 0x81, 0x8c,
  0x42, 0x60, 0xa6, 0xf0, 0x06, 0xf2, 0x31, 0x97, 0x08, 0xe2, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x5f, 0x9c, 0x85, 0x72, 0x0a, 0xc1,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x7d, 0x81, 0x16, 0xca, 0x29,
  0x04, 0xa6, 0x0a, 0x60, 0x20, 0x1f, 0x93, 0x89, 0x20, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0x81, 0xc6, 0x5a, 0x30, 0xab, 0x10, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x1a, 0x6c, 0xc1, 0xac, 0x42,
  0x60, 0x7f, 0xe0, 0x0a, 0xf2, 0xb1, 0x80, 0x0f, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x17, 0x69, 0xbc, 0x05, 0x1f, 0xbc, 0x42, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x69, 0xc0, 0x05, 0x1f, 0xbc,
  0x42, 0x60, 0x70, 0x20, 0x0b, 0xf2, 0xb1, 0xa0, 0x0d, 0xe4, 0x33, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x17, 0x6a, 0xcc, 0x45, 0x1b, 0xcc, 0x42,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x6a, 0xd0, 0x45, 0x1b,
  0xcc, 0x42, 0x60, 0x61, 0x60, 0x0b, 0xf2, 0xb1, 0xc0, 0x93, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xac, 0x71, 0x17, 0xde, 0x2d, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb5, 0x06, 0x5e, 0x78, 0xb7,
  0x10, 0x0c, 0x47, 0x54, 0x62, 0x41, 0x7c, 0xc3, 0x11, 0xd2, 0x58, 0x10,
  0xdf, 0x70, 0xc4, 0x43, 0x16, 0xc4, 0x37, 0xdd, 0x50, 0x16, 0x66, 0x31,
  0x4c, 0x37, 0x98, 0xc5, 0x59, 0x0c, 0xd3, 0x0d, 0x67, 0x81, 0x16, 0x83,
  0x0d, 0x9b, 0x7c, 0x6c, 0xc0, 0xe4, 0x63, 0x43, 0x25, 0x9f, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0x70, 0x23, 0x34, 0xd2, 0xa2, 0x35, 0x46,
  0x13, 0x82, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xde, 0xd8,
  0x0b, 0xaa, 0x2d, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xc0, 0xe9, 0x0d,
  0xbe, 0x88, 0xdc, 0x62, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0xdf,
  0xe8, 0x0b, 0xe7, 0x2d, 0x6c, 0x58, 0xe4, 0x63, 0xc3, 0x22, 0x1f, 0x1b,
  0x16, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x33, 0x1e, 0xa2,
  0x31, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x43, 0x1e, 0xa3, 0x31,
  0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x53, 0x1e, 0xa4, 0x31, 0xd8,
  0xa0, 0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x36, 0x30, 0xf2, 0x19, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x26, 0x3d, 0x52, 0x63, 0x18, 0x31, 0x30, 0x00,
  0x10, 0x04, 0x03, 0x46, 0x3d, 0x54, 0x63, 0x18, 0x31, 0x30, 0x00, 0x10,
  0x04, 0x03, 0x66, 0x3d, 0x56, 0x63, 0xb0, 0xe1, 0x0d, 0xe4, 0x63, 0x03,
  0x1b, 0xc8, 0xc7, 0x86, 0x34, 0x90, 0x8f, 0x5d, 0xef, 0x20, 0x9f, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xd8, 0xe3, 0x36, 0xae, 0x5e, 0x08,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x6a, 0x0f, 0xdc, 0xb8, 0x56,
  0x21, 0x30, 0x2d, 0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd7, 0x7b, 0xe8, 0x86, 0xf6, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0xf0, 0xb1, 0x1b, 0x5a, 0x2b, 0x04, 0xd6, 0xcd, 0x83, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x92, 0x8f, 0xde, 0xe8, 0xc2,
  0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x3e, 0x7c, 0xa3,
  0x7b, 0x85, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0xfa, 0xf0,
  0x0d, 0xd3, 0x88, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1,
  0x84, 0x41, 0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c, 0x38, 0xe4,
  0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x15, 0x7f, 0x94, 0x47, 0x6b,
  0xe4, 0xc7, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20,
  0xd8, 0x31, 0xc0, 0xc7, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0, 0x31, 0x4d,
  0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd7, 0x88, 0xb8,
  0x87, 0x06, 0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x24,
  0xf2, 0x1e, 0x9a, 0x2f, 0x04, 0xd6, 0x91, 0x84, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0xe0, 0x32, 0x91, 0xf8, 0xe8, 0xe4, 0x21, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x44, 0xe4, 0xa3, 0x03, 0x87, 0xc0,
  0xc0, 0xc0, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57,
  0x8a, 0xd0, 0x07, 0x18, 0xd0, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x97, 0x8a, 0xd4, 0x07, 0x18, 0x88, 0x43, 0x30, 0x9a, 0x40, 0x07,
  0xc0, 0x68, 0x42, 0x1d, 0x04, 0xa3, 0x09, 0x76, 0x20, 0xd8, 0xa0, 0xc8,
  0xc7, 0x06, 0x44, 0x3e, 0x36, 0x18, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10,
  0x04, 0x83, 0x4a, 0x46, 0xf6, 0x63, 0x3c, 0xd2, 0x63, 0x34, 0x21, 0x00,
  0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa, 0x1b, 0x01, 0x11, 0xf4, 0xc8, 0x8f,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d,
  0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0x78, 0xa4, 0x44,
  0xda, 0x43, 0x3e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13,
  0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0,
  0x0a, 0x13, 0x15, 0x91, 0x0f, 0x13, 0x19, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0xb0, 0x69, 0x3e, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x99, 0xc4, 0xc8, 0x7c,
  0x4c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x67, 0x22, 0x23,
  0xf3, 0x31, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xa1, 0xc9,
  0x8c, 0xcc, 0xc7, 0x14, 0x98, 0x74, 0x1f, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x4b, 0x4d, 0x6a, 0xe4, 0x3e, 0xa4, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xae, 0x35, 0xb1, 0x91, 0xfb, 0x90, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xd8, 0xe4, 0x46, 0xee, 0x43, 0x0a,
  0x2c, 0xda, 0x0f, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xe5,
  0x26, 0x39, 0xb2, 0x1f, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06,
  0xd7, 0x9b, 0xe8, 0xc8, 0x7e, 0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x5c, 0x70, 0xb2, 0x23, 0xfb, 0x11, 0x05, 0x06, 0xfd, 0x87, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x92, 0x93, 0x1e, 0xf9, 0x0f,
  0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x4e, 0x7c, 0xe4,
  0x3f, 0xa0, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x3a, 0xf9,
  0x91, 0xff, 0x80, 0x82, 0xd1, 0x84, 0x50, 0x18, 0x46, 0x0c, 0x0e, 0x00,
  0x04, 0xc1, 0xa0, 0xba, 0x13, 0x30, 0x41, 0x11, 0x16, 0x19, 0x4d, 0x08,
  0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18,
  0x31, 0x68, 0x00, 0x10, 0x04, 0x03, 0xa8, 0x4f, 0xce, 0x24, 0x45, 0x50,
  0xe4, 0x44, 0x4c, 0x84, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10,
  0x0c, 0x18, 0x50, 0x99, 0x93, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x90, 0x51, 0x31, 0x13, 0x3d, 0xd1, 0x93, 0x38, 0xf1, 0x83, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0x46, 0xc5, 0x4c, 0xf4, 0x44, 0x4f, 0xd4,
  0xa4, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x19, 0x15, 0x33,
  0xd1, 0x13, 0x3d, 0x71, 0x13, 0x3e, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x64, 0x54, 0xcc, 0x44, 0x4f, 0xf4, 0xe4, 0x4d, 0x90, 0x11, 0x83,
  0x04, 0x00, 0x41, 0x30, 0x40, 0x46, 0xc5, 0x4c, 0xf6, 0x44, 0x4f, 0xe2,
  0xe4, 0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x19, 0x15, 0x33,
  0xd9, 0x13, 0x3d, 0x51, 0x13, 0x37, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x64, 0x54, 0xcc, 0x64, 0x4f, 0xf4, 0xc4, 0x4d, 0xda, 0x60, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x51, 0x31, 0x93, 0x3d, 0xd1, 0x93,
  0x37, 0x09, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x00, 0x19, 0x15, 0x33,
  0x99, 0x13, 0x3d, 0x89, 0x93, 0x6a, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c,
  0x90, 0x51, 0x31, 0x93, 0x39, 0xd1, 0x13, 0x35, 0x89, 0x46, 0x0c, 0x12,
  0x00, 0x04, 0xc1, 0x00, 0x19, 0x15, 0x33, 0x99, 0x13, 0x3d, 0x71, 0x93,
  0x66, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x90, 0x51, 0x31, 0x93, 0x39,
  0xd1, 0x93, 0x37, 0x49, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xa4, 0x54, 0xd6, 0x2b,
  0x42, 0x70, 0x01, 0x65, 0x6f, 0xd4, 0x97, 0x34, 0x25, 0xcd, 0x2a, 0xeb,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x59, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xd5, 0x54, 0xcd, 0x8b, 0x1c, 0x55, 0x10, 0xaf, 0xf7, 0xfa,
  0x4d, 0xf7, 0xeb, 0xde, 0x9e, 0x9a, 0xee, 0xde, 0x9e, 0x9e, 0x37, 0x93,
  0xde, 0xb6, 0x77, 0xd2, 0x3b, 0x3b, 0xd9, 0xdd, 0x48, 0x1b, 0xfc, 0x0e,
  0x82, 0x04, 0x09, 0x24, 0xab, 0x2c, 0x64, 0xb1, 0x6e, 0x7b, 0x10, 0x09,
  0xc9, 0x12, 0x08, 0x21, 0xe6, 0xe0, 0x61, 0x69, 0x5b, 0x50, 0xf0, 0x10,
  0x44, 0x3c, 0x78, 0xf0, 0xa2, 0x48, 0x10, 0x14, 0x03, 0x7a, 0x97, 0x99,
  0x78, 0xf6, 0xe0, 0x69, 0xae, 0x92, 0xff, 0xc0, 0x20, 0x73, 0x18, 0xf6,
  0x32, 0xbe, 0x9e, 0x9d, 0xc5, 0x71, 0xc1, 0x10, 0x3c, 0xc5, 0x82, 0xa2,
  0x5e, 0xf5, 0xfb, 0xd5, 0xab, 0xcf, 0xae, 0x8b, 0xbb, 0xbb, 0x6f, 0x31,
  0x06, 0x70, 0xc9, 0x82, 0x19, 0x99, 0x47, 0x02, 0xfe, 0x18, 0xdc, 0xff,
  0xfd, 0x71, 0xfc, 0xe3, 0x13, 0xe2, 0xfe, 0x8d, 0xf9, 0xdc, 0xfe, 0x0d,
  0xf8, 0x6f, 0x74, 0xfc, 0xce, 0xe4, 0xf8, 0x21, 0xf1, 0xf7, 0x9d, 0x00,
  0x47, 0x88, 0x13, 0xf8, 0xc9, 0x3c, 0x31, 0x77, 0x9e, 0x27, 0x9b, 0xb3,
  0x00, 0x0e, 0x0f, 0x16, 0x70, 0x2d, 0x48, 0x05, 0x5b, 0xd0, 0xd3, 0x05,
  0xfc, 0x99, 0x05, 0xbf, 0x26, 0x34, 0x84, 0x61, 0x32, 0x4b, 0x72, 0x78,
  0x2a, 0xa9, 0x0a, 0xeb, 0x28, 0x65, 0x93, 0x31, 0xf8, 0x7f, 0x52, 0x95,
  0x43, 0xb8, 0xc0, 0x95, 0x7e, 0xb2, 0xaf, 0xf2, 0x84, 0x9e, 0x1b, 0xff,
  0xd4, 0x1f, 0x59, 0x4f, 0xe6, 0xeb, 0xe3, 0xac, 0x1c, 0x3d, 0xfa, 0x69,
  0x6a, 0xdc, 0xbf, 0xf1, 0xf6, 0xc3, 0xfc, 0x4a, 0x39, 0x72, 0xcf, 0x4f,
  0x8d, 0x5f, 0x3f, 0x9d, 0x1e, 0x88, 0xd5, 0x8f, 0x06, 0x06, 0x7c, 0x3d,
  0x9c, 0x1a, 0xc3, 0xc1, 0x0f, 0x3b, 0xcc, 0xff, 0xc5, 0x18, 0x0c, 0xa4,
  0xf1, 0xf3, 0xc0, 0x9e, 0xbe, 0xf6, 0x09, 0x80, 0x07, 0x89, 0xdd, 0x1f,
  0xeb, 0xf9, 0x39, 0x4c, 0x20, 0x1f, 0x3f, 0xac, 0x64, 0x2d, 0x1f, 0xe7,
  0x0c, 0x0e, 0x6f, 0xc1, 0xdd, 0xa1, 0x94, 0x80, 0x42, 0x2a, 0x74, 0x65,
  0x8a, 0xca, 0x8b, 0xd0, 0x76, 0x80, 0x6a, 0x8e, 0xa2, 0xba, 0x93, 0x52,
  0x3b, 0x88, 0xc8, 0x71, 0x81, 0x4c, 0x57, 0x11, 0xba, 0x29, 0x75, 0xc2,
  0x88, 0x96, 0x10, 0xc8, 0x42, 0x45, 0x0d, 0x4c, 0x29, 0x61, 0xf9, 0x58,
  0x87, 0x75, 0xb8, 0xa6, 0x53, 0xcc, 0x14, 0x97, 0xbd, 0x54, 0xc8, 0xd0,
  0x53, 0x98, 0xd8, 0xf9, 0xf8, 0x75, 0xfd, 0x1d, 0x98, 0x89, 0xb1, 0xe7,
  0x61, 0x33, 0x50, 0xc4, 0x0c, 0x93, 0x56, 0x02, 0x8f, 0x96, 0x5a, 0x01,
  0x46, 0xa1, 0x22, 0x5e, 0x33, 0x29, 0x09, 0x3d, 0x72, 0xdb, 0x01, 0x19,
  0x7b, 0x66, 0x21, 0xfd, 0x80, 0xec, 0xbd, 0xa0, 0xf8, 0xe0, 0xc1, 0xdd,
  0xa1, 0x03, 0xdb, 0x23, 0xb0, 0x2e, 0x96, 0xf5, 0x99, 0xfc, 0xa2, 0x44,
  0x2d, 0x99, 0x75, 0xa1, 0x84, 0x99, 0xfe, 0x6d, 0xe9, 0xcf, 0xf4, 0xcf,
  0x4b, 0xa7, 0x99, 0x60, 0xfd, 0x54, 0x86, 0x9e, 0xd6, 0xb9, 0x75, 0xb9,
  0x5c, 0x9e, 0xc9, 0x2f, 0x4b, 0x36, 0xbb, 0xff, 0xa6, 0xc4, 0x95, 0x84,
  0xfc, 0xd3, 0x19, 0x01, 0xeb, 0xa3, 0xdd, 0x56, 0xc8, 0x67, 0xf7, 0xdf,
  0x97, 0xde, 0x6a, 0x42, 0xcb, 0xeb, 0x99, 0x8e, 0xa9, 0x4f, 0xd8, 0x8e,
  0xd1, 0x6e, 0x45, 0xd8, 0xd0, 0x31, 0xf8, 0xed, 0x2e, 0xf2, 0x5a, 0x9f,
  0x6c, 0xdf, 0x43, 0xd6, 0xe6, 0x18, 0xec, 0x6d, 0x15, 0x9e, 0xca, 0x30,
  0xdc, 0x4b, 0x0a, 0x5b, 0xdb, 0xfa, 0xd1, 0xe5, 0x7b, 0x46, 0x73, 0x03,
  0xd1, 0x8a, 0x31, 0xd3, 0xdf, 0xfd, 0xb3, 0x21, 0xda, 0xb0, 0x39, 0x0a,
  0x3c, 0x9e, 0x46, 0xa7, 0x3a, 0xd8, 0x6c, 0xc5, 0xd4, 0xd4, 0xb8, 0xb5,
  0x0a, 0xb7, 0x6a, 0x62, 0x5f, 0x29, 0xac, 0xb7, 0x42, 0x8a, 0xd6, 0xf5,
  0x9d, 0xc6, 0xf5, 0x34, 0xce, 0xf0, 0x63, 0x32, 0x34, 0xe6, 0x4c, 0x74,
  0xee, 0x5e, 0x19, 0xc8, 0x03, 0xf6, 0x0c, 0xc7, 0x06, 0x03, 0x6c, 0xd4,
  0x74, 0x2e, 0x7e, 0x48, 0x2e, 0xb0, 0xd1, 0x9f, 0xf0, 0x1d, 0x2b, 0x63,
  0x91, 0x42, 0x8b, 0x53, 0xb9, 0x21, 0x0f, 0x0c, 0x6d, 0xbb, 0xa1, 0x6d,
  0xab, 0x3e, 0x7e, 0xa6, 0xfb, 0xc6, 0xdb, 0x80, 0x49, 0x7d, 0x6b, 0x7c,
  0x4b, 0x9f, 0x1b, 0x3e, 0xa7, 0xa5, 0x63, 0x9b, 0x50, 0xa4, 0xa5, 0x29,
  0x0f, 0x60, 0x07, 0x8a, 0x92, 0x6b, 0xbc, 0xc8, 0xc7, 0xba, 0x68, 0x87,
  0xbc, 0x25, 0x50, 0xce, 0x31, 0xa9, 0xec, 0xa0, 0xbb, 0xac, 0x70, 0x69,
  0x33, 0x44, 0xbe, 0x23, 0x0a, 0xe6, 0x6b, 0xff, 0x00, 0xb8, 0xea, 0x74,
  0xe8, 0xac, 0x8a, 0xb0, 0xaa, 0x7f, 0x26, 0x13, 0x64, 0x3b, 0xbc, 0x78,
  0x5e, 0xf6, 0xf1, 0x65, 0x19, 0x63, 0xd7, 0xed, 0x50, 0x43, 0x08, 0xdd,
  0x06, 0x28, 0xd6, 0x9c, 0x84, 0x5e, 0x71, 0x62, 0x7a, 0xc1, 0xe9, 0xd3,
  0xb3, 0xaa, 0x8b, 0x0d, 0xce, 0x91, 0x6f, 0x8b, 0xe2, 0x55, 0x37, 0xa6,
  0x17, 0xdd, 0x3e, 0xf5, 0xdc, 0x84, 0x60, 0x19, 0x90, 0x6d, 0xf3, 0x82,
  0x39, 0x0e, 0x6e, 0xe9, 0x1a, 0xac, 0x63, 0x42, 0xe7, 0x31, 0x26, 0xbe,
  0xd9, 0xd3, 0x75, 0x48, 0x31, 0x02, 0x5d, 0x53, 0xed, 0xf3, 0x25, 0xec,
  0xd3, 0x69, 0xec, 0x10, 0x48, 0x87, 0xa4, 0x25, 0x30, 0xd7, 0x73, 0x71,
  0x2e, 0xec, 0xd2, 0x73, 0x7a, 0xce, 0x7e, 0x93, 0x30, 0xa9, 0x87, 0xba,
  0x34, 0x16, 0x47, 0xd5, 0x03, 0xea, 0xf4, 0x32, 0x6a, 0xf7, 0x52, 0x32,
  0xd0, 0x21, 0x5f, 0x44, 0x14, 0x73, 0xa0, 0x40, 0x74, 0xc9, 0x13, 0x8a,
  0x56, 0xb8, 0x9e, 0x45, 0x9e, 0x51, 0xad, 0xdc, 0x1c, 0x99, 0x35, 0x00,
  0x8b, 0xf3, 0xa2, 0xea, 0xb5, 0x50, 0x5d, 0xa8, 0x6a, 0x6d, 0x76, 0x37,
  0xf4, 0x3f, 0xb9, 0x3d, 0xaa, 0x45, 0x3d, 0x70, 0xb5, 0x5f, 0xcc, 0x5c,
  0xac, 0xa7, 0xa8, 0x63, 0x87, 0x09, 0x17, 0x86, 0x6e, 0x01, 0x4c, 0xc0,
  0xaa, 0x2c, 0x3f, 0x1c, 0x02, 0x7c, 0xf5, 0xd4, 0x32, 0x5b, 0xd8, 0x39,
  0xc7, 0x7b, 0x85, 0x9f, 0x58, 0x9c, 0x62, 0x61, 0xd9, 0x4c, 0x35, 0x1d,
  0x9d, 0x9a, 0x40, 0xbb, 0x17, 0xde, 0x79, 0x6f, 0xff, 0x5d, 0xba, 0x7a,
  0xfb, 0xce, 0xd5, 0xf7, 0xdf, 0xdc, 0xbf, 0x76, 0xfd, 0xce, 0xfe, 0xcd,
  0x6b, 0x7f, 0x01, 0xa2, 0x53, 0x43, 0xcc, 0x00, 0x85, 0x24, 0xf0, 0xd8,
  0xad, 0x6b, 0x55, 0xe0, 0x30, 0x52, 0x0c, 0x9d, 0xcb, 0x8e, 0xff, 0x7c
};
