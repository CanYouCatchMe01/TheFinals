#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xyzw
; BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettPBREffect_VSSkinned.pdb
; shader hash: 2eef2aad62a6a1bf8958caf1572b641b
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 5
; SigOutputElements: 5
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 5
; SigOutputVectors[0]: 5
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSSkinned
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [388 x i8] (type annotation not present)
;
; }
;
; cbuffer 
; {
;
;   [3456 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                   cbuffer      NA          NA     CB1            cb1     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 8 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 9 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 10 depends on inputs: { 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 16 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 17 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 18 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;   output 19 depends on inputs: { 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Constants = type { <3 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [4 x <4 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, float, float, float, i32, float, float }
%hostlayout.SkinningParameters = type { [72 x [3 x <4 x float>]] }

define void @VSSkinned() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %16 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %17 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %18 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = mul i32 %7, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %20)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = add i32 %20, 1
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %26)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = add i32 %20, 2
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %32)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = fmul fast float %22, %3
  %39 = fmul fast float %28, %3
  %40 = fmul fast float %34, %3
  %41 = fmul fast float %23, %3
  %42 = fmul fast float %29, %3
  %43 = fmul fast float %35, %3
  %44 = fmul fast float %24, %3
  %45 = fmul fast float %30, %3
  %46 = fmul fast float %36, %3
  %47 = fmul fast float %25, %3
  %48 = fmul fast float %31, %3
  %49 = fmul fast float %37, %3
  %50 = mul i32 %8, 3
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %50)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %55 = extractvalue %dx.types.CBufRet.f32 %51, 3
  %56 = add i32 %50, 1
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %56)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %62 = add i32 %50, 2
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %62)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = extractvalue %dx.types.CBufRet.f32 %63, 3
  %68 = fmul fast float %52, %4
  %69 = fmul fast float %58, %4
  %70 = fmul fast float %64, %4
  %71 = fmul fast float %53, %4
  %72 = fmul fast float %59, %4
  %73 = fmul fast float %65, %4
  %74 = fmul fast float %54, %4
  %75 = fmul fast float %60, %4
  %76 = fmul fast float %66, %4
  %77 = fmul fast float %55, %4
  %78 = fmul fast float %61, %4
  %79 = fmul fast float %67, %4
  %80 = fadd fast float %68, %38
  %81 = fadd fast float %69, %39
  %82 = fadd fast float %70, %40
  %83 = fadd fast float %71, %41
  %84 = fadd fast float %72, %42
  %85 = fadd fast float %73, %43
  %86 = fadd fast float %74, %44
  %87 = fadd fast float %75, %45
  %88 = fadd fast float %76, %46
  %89 = fadd fast float %77, %47
  %90 = fadd fast float %78, %48
  %91 = fadd fast float %79, %49
  %92 = mul i32 %9, 3
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %92)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = extractvalue %dx.types.CBufRet.f32 %93, 3
  %98 = add i32 %92, 1
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %98)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %103 = extractvalue %dx.types.CBufRet.f32 %99, 3
  %104 = add i32 %92, 2
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %104)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %109 = extractvalue %dx.types.CBufRet.f32 %105, 3
  %110 = fmul fast float %94, %5
  %111 = fmul fast float %100, %5
  %112 = fmul fast float %106, %5
  %113 = fmul fast float %95, %5
  %114 = fmul fast float %101, %5
  %115 = fmul fast float %107, %5
  %116 = fmul fast float %96, %5
  %117 = fmul fast float %102, %5
  %118 = fmul fast float %108, %5
  %119 = fmul fast float %97, %5
  %120 = fmul fast float %103, %5
  %121 = fmul fast float %109, %5
  %122 = fadd fast float %80, %110
  %123 = fadd fast float %81, %111
  %124 = fadd fast float %82, %112
  %125 = fadd fast float %83, %113
  %126 = fadd fast float %84, %114
  %127 = fadd fast float %85, %115
  %128 = fadd fast float %86, %116
  %129 = fadd fast float %87, %117
  %130 = fadd fast float %88, %118
  %131 = fadd fast float %89, %119
  %132 = fadd fast float %90, %120
  %133 = fadd fast float %91, %121
  %134 = mul i32 %10, 3
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %134)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = extractvalue %dx.types.CBufRet.f32 %135, 3
  %140 = add i32 %134, 1
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %140)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %144 = extractvalue %dx.types.CBufRet.f32 %141, 2
  %145 = extractvalue %dx.types.CBufRet.f32 %141, 3
  %146 = add i32 %134, 2
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %146)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = extractvalue %dx.types.CBufRet.f32 %147, 3
  %152 = fmul fast float %136, %6
  %153 = fmul fast float %142, %6
  %154 = fmul fast float %148, %6
  %155 = fmul fast float %137, %6
  %156 = fmul fast float %143, %6
  %157 = fmul fast float %149, %6
  %158 = fmul fast float %138, %6
  %159 = fmul fast float %144, %6
  %160 = fmul fast float %150, %6
  %161 = fmul fast float %139, %6
  %162 = fmul fast float %145, %6
  %163 = fmul fast float %151, %6
  %164 = fadd fast float %122, %152
  %165 = fadd fast float %123, %153
  %166 = fadd fast float %124, %154
  %167 = fadd fast float %125, %155
  %168 = fadd fast float %126, %156
  %169 = fadd fast float %127, %157
  %170 = fadd fast float %128, %158
  %171 = fadd fast float %129, %159
  %172 = fadd fast float %130, %160
  %173 = fadd fast float %131, %161
  %174 = fadd fast float %132, %162
  %175 = fadd fast float %133, %163
  %176 = fmul fast float %164, %16
  %177 = call float @dx.op.tertiary.f32(i32 46, float %17, float %167, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %18, float %170, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %19, float %173, float %178)  ; FMad(a,b,c)
  %180 = fmul fast float %165, %16
  %181 = call float @dx.op.tertiary.f32(i32 46, float %17, float %168, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %18, float %171, float %181)  ; FMad(a,b,c)
  %183 = call float @dx.op.tertiary.f32(i32 46, float %19, float %174, float %182)  ; FMad(a,b,c)
  %184 = fmul fast float %166, %16
  %185 = call float @dx.op.tertiary.f32(i32 46, float %17, float %169, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %18, float %172, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.tertiary.f32(i32 46, float %19, float %175, float %186)  ; FMad(a,b,c)
  %188 = fmul fast float %164, %13
  %189 = call float @dx.op.tertiary.f32(i32 46, float %14, float %167, float %188)  ; FMad(a,b,c)
  %190 = call float @dx.op.tertiary.f32(i32 46, float %15, float %170, float %189)  ; FMad(a,b,c)
  %191 = fmul fast float %165, %13
  %192 = call float @dx.op.tertiary.f32(i32 46, float %14, float %168, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %15, float %171, float %192)  ; FMad(a,b,c)
  %194 = fmul fast float %166, %13
  %195 = call float @dx.op.tertiary.f32(i32 46, float %14, float %169, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %15, float %172, float %195)  ; FMad(a,b,c)
  %197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.f32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.f32 %197, 1
  %200 = extractvalue %dx.types.CBufRet.f32 %197, 2
  %201 = extractvalue %dx.types.CBufRet.f32 %197, 3
  %202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %203 = extractvalue %dx.types.CBufRet.f32 %202, 0
  %204 = extractvalue %dx.types.CBufRet.f32 %202, 1
  %205 = extractvalue %dx.types.CBufRet.f32 %202, 2
  %206 = extractvalue %dx.types.CBufRet.f32 %202, 3
  %207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.f32 %207, 0
  %209 = extractvalue %dx.types.CBufRet.f32 %207, 1
  %210 = extractvalue %dx.types.CBufRet.f32 %207, 2
  %211 = extractvalue %dx.types.CBufRet.f32 %207, 3
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = extractvalue %dx.types.CBufRet.f32 %212, 1
  %215 = extractvalue %dx.types.CBufRet.f32 %212, 2
  %216 = extractvalue %dx.types.CBufRet.f32 %212, 3
  %217 = fmul fast float %198, %179
  %218 = call float @dx.op.tertiary.f32(i32 46, float %183, float %199, float %217)  ; FMad(a,b,c)
  %219 = call float @dx.op.tertiary.f32(i32 46, float %187, float %200, float %218)  ; FMad(a,b,c)
  %220 = call float @dx.op.tertiary.f32(i32 46, float %19, float %201, float %219)  ; FMad(a,b,c)
  %221 = fmul fast float %203, %179
  %222 = call float @dx.op.tertiary.f32(i32 46, float %183, float %204, float %221)  ; FMad(a,b,c)
  %223 = call float @dx.op.tertiary.f32(i32 46, float %187, float %205, float %222)  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %19, float %206, float %223)  ; FMad(a,b,c)
  %225 = fmul fast float %208, %179
  %226 = call float @dx.op.tertiary.f32(i32 46, float %183, float %209, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %187, float %210, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %19, float %211, float %227)  ; FMad(a,b,c)
  %229 = fmul fast float %213, %179
  %230 = call float @dx.op.tertiary.f32(i32 46, float %183, float %214, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %187, float %215, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %19, float %216, float %231)  ; FMad(a,b,c)
  %233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %234 = extractvalue %dx.types.CBufRet.f32 %233, 0
  %235 = extractvalue %dx.types.CBufRet.f32 %233, 1
  %236 = extractvalue %dx.types.CBufRet.f32 %233, 2
  %237 = extractvalue %dx.types.CBufRet.f32 %233, 3
  %238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.f32 %238, 0
  %240 = extractvalue %dx.types.CBufRet.f32 %238, 1
  %241 = extractvalue %dx.types.CBufRet.f32 %238, 2
  %242 = extractvalue %dx.types.CBufRet.f32 %238, 3
  %243 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %244 = extractvalue %dx.types.CBufRet.f32 %243, 0
  %245 = extractvalue %dx.types.CBufRet.f32 %243, 1
  %246 = extractvalue %dx.types.CBufRet.f32 %243, 2
  %247 = extractvalue %dx.types.CBufRet.f32 %243, 3
  %248 = fmul fast float %234, %179
  %249 = call float @dx.op.tertiary.f32(i32 46, float %183, float %235, float %248)  ; FMad(a,b,c)
  %250 = call float @dx.op.tertiary.f32(i32 46, float %187, float %236, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %19, float %237, float %250)  ; FMad(a,b,c)
  %252 = fmul fast float %239, %179
  %253 = call float @dx.op.tertiary.f32(i32 46, float %183, float %240, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %187, float %241, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %19, float %242, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %244, %179
  %257 = call float @dx.op.tertiary.f32(i32 46, float %183, float %245, float %256)  ; FMad(a,b,c)
  %258 = call float @dx.op.tertiary.f32(i32 46, float %187, float %246, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %19, float %247, float %258)  ; FMad(a,b,c)
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 2
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.f32 %264, 2
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 2
  %272 = fmul fast float %261, %190
  %273 = call float @dx.op.tertiary.f32(i32 46, float %193, float %262, float %272)  ; FMad(a,b,c)
  %274 = call float @dx.op.tertiary.f32(i32 46, float %196, float %263, float %273)  ; FMad(a,b,c)
  %275 = fmul fast float %265, %190
  %276 = call float @dx.op.tertiary.f32(i32 46, float %193, float %266, float %275)  ; FMad(a,b,c)
  %277 = call float @dx.op.tertiary.f32(i32 46, float %196, float %267, float %276)  ; FMad(a,b,c)
  %278 = fmul fast float %269, %190
  %279 = call float @dx.op.tertiary.f32(i32 46, float %193, float %270, float %278)  ; FMad(a,b,c)
  %280 = call float @dx.op.tertiary.f32(i32 46, float %196, float %271, float %279)  ; FMad(a,b,c)
  %281 = call float @dx.op.dot3.f32(i32 55, float %274, float %277, float %280, float %274, float %277, float %280)  ; Dot3(ax,ay,az,bx,by,bz)
  %282 = call float @dx.op.unary.f32(i32 25, float %281)  ; Rsqrt(value)
  %283 = fmul fast float %282, %274
  %284 = fmul fast float %282, %277
  %285 = fmul fast float %282, %280
  %286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %2, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.f32 %286, 0
  %288 = extractvalue %dx.types.CBufRet.f32 %286, 1
  %289 = extractvalue %dx.types.CBufRet.f32 %286, 2
  %290 = extractvalue %dx.types.CBufRet.f32 %286, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %11)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %12)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %251)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %255)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %259)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %283)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %284)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %285)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %289)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %290)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %220)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %224)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %228)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %232)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!9}
!dx.entryPoints = !{!10}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7, !8}
!7 = !{i32 0, %hostlayout.Constants* undef, !"", i32 0, i32 0, i32 1, i32 388, null}
!8 = !{i32 1, %hostlayout.SkinningParameters* undef, !"", i32 0, i32 1, i32 1, i32 3456, null}
!9 = !{[22 x i32] [i32 20, i32 20, i32 983152, i32 983152, i32 983152, i32 983152, i32 1792, i32 1792, i32 1792, i32 0, i32 1, i32 2, i32 0, i32 0, i32 984944, i32 984944, i32 984944, i32 984944, i32 984944, i32 984944, i32 984944, i32 984944]}
!10 = !{void ()* @VSSkinned, !"VSSkinned", !11, !5, null}
!11 = !{!12, !22, null}
!12 = !{!13, !16, !18, !20, !21}
!13 = !{i32 0, !"SV_Position", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 0, i8 0, !15}
!14 = !{i32 0}
!15 = !{i32 3, i32 15}
!16 = !{i32 1, !"NORMAL", i8 9, i8 0, !14, i8 0, i32 1, i8 3, i32 1, i8 0, !17}
!17 = !{i32 3, i32 7}
!18 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !14, i8 0, i32 1, i8 2, i32 2, i8 0, !19}
!19 = !{i32 3, i32 3}
!20 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !14, i8 0, i32 1, i8 4, i32 3, i8 0, !15}
!21 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !14, i8 0, i32 1, i8 4, i32 4, i8 0, !15}
!22 = !{!23, !24, !26, !28, !29}
!23 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !14, i8 2, i32 1, i8 2, i32 0, i8 0, !19}
!24 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 4, i32 1, i8 0, !15}
!25 = !{i32 1}
!26 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 3, i32 2, i8 0, !17}
!27 = !{i32 2}
!28 = !{i32 3, !"COLOR", i8 9, i8 0, !14, i8 2, i32 1, i8 4, i32 3, i8 0, !15}
!29 = !{i32 4, !"SV_Position", i8 9, i8 3, !14, i8 4, i32 1, i8 4, i32 4, i8 0, !15}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 62
;   num_shared_vgprs: 0
;   num_sgprs: 46
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 1024
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0xad2aef2e, 0xbfa1a662                // 000000000000: D580EF2E 03FF5B2A BFA1A662
;   v_nop_xbox_data 0xf1ca5889, 0x1b642b57                // 00000000000C: D5805889 03FFE3CA 1B642B57
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_waitcnt     vmcnt(0)                                // 000000000020: BF8C3F70
;   v_lshl_add_u32  v32, v17, 1, v17                      // 000000000024: D7460020 04450311
;   v_lshl_add_u32  v11, v16, 1, v16                      // 00000000002C: D746000B 04410310
;   s_mov_b32     s0, lit(0x11014fac)                     // 000000000034: BE8003FF 11014FAC
;   s_or_b32      s21, s19, lit(0x00100000)               // 00000000003C: 8815FF13 00100000
;   s_mov_b32     s23, s0                                 // 000000000044: BE970300
;   s_mov_b32     s22, -1                                 // 000000000048: BE9603C1
;   s_mov_b32     s20, s18                                // 00000000004C: BE940312
;   v_add_nc_u32  v24, 1, v11                             // 000000000050: 4A301681
;   buffer_load_dwordx4  v[0:3], v11, s[20:23], 0 idxen   // 000000000054: E0382000 8005000B
;   v_add_nc_u32  v11, 2, v11                             // 00000000005C: 4A161682
;   v_add_nc_u32  v33, 1, v32                             // 000000000060: 4A424081
;   buffer_load_dwordx4  v[14:17], v32, s[20:23], 0 idxen // 000000000064: E0382000 80050E20
;   v_add_nc_u32  v44, 2, v32                             // 00000000006C: 4A584082
;   v_lshl_add_u32  v18, v18, 1, v18                      // 000000000070: D7460012 04490312
;   buffer_load_dwordx4  v[24:27], v24, s[20:23], 0 idxen // 000000000078: E0382000 80051818
;   buffer_load_dwordx4  v[32:35], v33, s[20:23], 0 idxen // 000000000080: E0382000 80052021
;   buffer_load_dwordx4  v[36:39], v11, s[20:23], 0 idxen // 000000000088: E0382000 8005240B
;   v_lshl_add_u32  v19, v19, 1, v19                      // 000000000090: D7460013 044D0313
;   buffer_load_dwordx4  v[28:31], v18, s[20:23], 0 idxen // 000000000098: E0382000 80051C12
;   v_add_nc_u32  v11, 1, v18                             // 0000000000A0: 4A162481
;   s_mov_b32     s39, s0                                 // 0000000000A4: BEA70300
;   s_mov_b32     s38, -1                                 // 0000000000A8: BEA603C1
;   buffer_load_dwordx4  v[40:43], v19, s[20:23], 0 idxen // 0000000000AC: E0382000 80052813
;   buffer_load_dwordx4  v[44:47], v44, s[20:23], 0 idxen // 0000000000B4: E0382000 80052C2C
;   buffer_load_dwordx4  v[48:51], v11, s[20:23], 0 idxen // 0000000000BC: E0382000 8005300B
;   s_mov_b32     s36, s16                                // 0000000000C4: BEA40310
;   s_or_b32      s37, s17, lit(0x00100000)               // 0000000000C8: 8825FF11 00100000
;   s_buffer_load_dwordx16  s[0:15], s[36:39], 0x000050   // 0000000000D0: F4300012 FA000050
;   s_buffer_load_dwordx4  s[32:35], s[36:39], 0x000030   // 0000000000D8: F4280812 FA000030
;   s_buffer_load_dwordx8  s[24:31], s[36:39], 0x000010   // 0000000000E0: F42C0612 FA000010
;   s_waitcnt     vmcnt(8)                                // 0000000000E8: BF8C3F78
;   v_mul_legacy_f32  v60, v0, v20                        // 0000000000EC: 0E782900
;   v_add_nc_u32  v0, 2, v18                              // 0000000000F0: 4A002482
;   v_mul_legacy_f32  v61, v2, v20                        // 0000000000F4: 0E7A2902
;   v_mul_legacy_f32  v11, v3, v20                        // 0000000000F8: 0E162903
;   s_waitcnt     vmcnt(7)                                // 0000000000FC: BF8C3F77
;   v_fmac_f32    v60, v14, v21                           // 000000000100: 56782B0E
;   s_waitcnt     vmcnt(6)                                // 000000000104: BF8C3F76
;   v_mul_legacy_f32  v14, v26, v20                       // 000000000108: 0E1C291A
;   v_mul_legacy_f32  v26, v1, v20                        // 00000000010C: 0E342901
;   s_waitcnt     vmcnt(4)                                // 000000000110: BF8C3F74
;   v_mul_legacy_f32  v18, v37, v20                       // 000000000114: 0E242925
;   v_add_nc_u32  v37, 2, v19                             // 000000000118: 4A4A2682
;   v_add_nc_u32  v19, 1, v19                             // 00000000011C: 4A262681
;   buffer_load_dwordx4  v[0:3], v0, s[20:23], 0 idxen    // 000000000120: E0382000 80050000
;   v_mul_legacy_f32  v24, v24, v20                       // 000000000128: 0E302918
;   v_fmac_f32    v26, v15, v21                           // 00000000012C: 56342B0F
;   s_waitcnt     vmcnt(4)                                // 000000000130: BF8C3F74
;   v_fmac_f32    v60, v28, v22                           // 000000000134: 56782D1C
;   buffer_load_dwordx4  v[52:55], v19, s[20:23], 0 idxen // 000000000138: E0382000 80053413
;   buffer_load_dwordx4  v[56:59], v37, s[20:23], 0 idxen // 000000000140: E0382000 80053825
;   v_mul_legacy_f32  v25, v25, v20                       // 000000000148: 0E322919
;   v_fmac_f32    v24, v32, v21                           // 00000000014C: 56302B20
;   v_mul_legacy_f32  v15, v36, v20                       // 000000000150: 0E1E2924
;   v_fmac_f32    v61, v16, v21                           // 000000000154: 567A2B10
;   v_fmac_f32    v26, v29, v22                           // 000000000158: 56342D1D
;   v_fmac_f32    v25, v33, v21                           // 00000000015C: 56322B21
;   s_waitcnt     vmcnt(3)                                // 000000000160: BF8C3F73
;   v_fmac_f32    v24, v48, v22                           // 000000000164: 56302D30
;   v_fmac_f32    v60, v40, v23                           // 000000000168: 56782F28
;   v_fmac_f32    v15, v44, v21                           // 00000000016C: 561E2B2C
;   v_fmac_f32    v18, v45, v21                           // 000000000170: 56242B2D
;   v_fmac_f32    v14, v34, v21                           // 000000000174: 561C2B22
;   v_mul_legacy_f32  v28, v38, v20                       // 000000000178: 0E382926
;   v_fmac_f32    v25, v49, v22                           // 00000000017C: 56322D31
;   v_fmac_f32    v61, v30, v22                           // 000000000180: 567A2D1E
;   v_fmac_f32    v26, v41, v23                           // 000000000184: 56342F29
;   v_mul_legacy_f32  v16, v60, v8                        // 000000000188: 0E20113C
;   v_fmac_f32    v11, v17, v21                           // 00000000018C: 56162B11
;   v_fmac_f32    v28, v46, v21                           // 000000000190: 56382B2E
;   v_mul_legacy_f32  v19, v60, v4                        // 000000000194: 0E26093C
;   v_fmac_f32    v14, v50, v22                           // 000000000198: 561C2D32
;   s_buffer_load_dwordx8  s[16:23], s[36:39], 0x000090   // 00000000019C: F42C0412 FA000090
;   s_buffer_load_dwordx4  s[40:43], s[36:39], 0x0000b0   // 0000000001A4: F4280A12 FA0000B0
;   v_fmac_f32    v61, v42, v23                           // 0000000001AC: 567A2F2A
;   v_fmac_f32    v16, v9, v26                            // 0000000001B0: 56203509
;   v_fmac_f32    v11, v31, v22                           // 0000000001B4: 56162D1F
;   v_fmac_f32    v19, v5, v26                            // 0000000001B8: 56263505
;   s_buffer_load_dwordx4  s[36:39], s[36:39], 0x000160   // 0000000001BC: F4280912 FA000160
;   v_fmac_f32    v16, v10, v61                           // 0000000001C4: 56207B0A
;   v_fmac_f32    v11, v43, v23                           // 0000000001C8: 56162F2B
;   v_fmac_f32    v19, v6, v61                            // 0000000001CC: 56267B06
;   v_fmac_f32    v19, v7, v11                            // 0000000001D0: 56261707
;   s_waitcnt     lgkmcnt(0)                              // 0000000001D4: BF8CC07F
;   v_mov_b32     v11, s37                                // 0000000001D8: 7E160225
;   s_waitcnt     vmcnt(2)                                // 0000000001DC: BF8C3F72
;   v_fmac_f32    v15, v0, v22                            // 0000000001E0: 561E2D00
;   v_mul_legacy_f32  v0, v27, v20                        // 0000000001E4: 0E00291B
;   v_fmac_f32    v18, v1, v22                            // 0000000001E8: 56242D01
;   v_fmac_f32    v28, v2, v22                            // 0000000001EC: 56382D02
;   s_waitcnt     vmcnt(1)                                // 0000000001F0: BF8C3F71
;   v_fmac_f32    v24, v52, v23                           // 0000000001F4: 56302F34
;   v_fmac_f32    v25, v53, v23                           // 0000000001F8: 56322F35
;   s_waitcnt     vmcnt(0)                                // 0000000001FC: BF8C3F70
;   v_fmac_f32    v15, v56, v23                           // 000000000200: 561E2F38
;   v_fmac_f32    v0, v35, v21                            // 000000000204: 56002B23
;   v_mul_legacy_f32  v20, v39, v20                       // 000000000208: 0E282927
;   v_mul_legacy_f32  v1, v24, v8                         // 00000000020C: 0E021118
;   v_mul_legacy_f32  v17, v24, v4                        // 000000000210: 0E220918
;   v_fmac_f32    v14, v54, v23                           // 000000000214: 561C2F36
;   v_fmac_f32    v18, v57, v23                           // 000000000218: 56242F39
;   v_mul_legacy_f32  v8, v15, v8                         // 00000000021C: 0E10110F
;   v_fmac_f32    v1, v9, v25                             // 000000000220: 56023309
;   v_fmac_f32    v20, v47, v21                           // 000000000224: 56282B2F
;   v_mul_legacy_f32  v21, v15, v4                        // 000000000228: 0E2A090F
;   v_fmac_f32    v0, v51, v22                            // 00000000022C: 56002D33
;   v_fmac_f32    v17, v5, v25                            // 000000000230: 56223305
;   v_fmac_f32    v8, v9, v18                             // 000000000234: 56102509
;   v_fmac_f32    v28, v58, v23                           // 000000000238: 56382F3A
;   v_mul_legacy_f32  v9, s4, v16                         // 00000000023C: 0E122004
;   v_fmac_f32    v1, v10, v14                            // 000000000240: 56021D0A
;   v_fmac_f32    v20, v3, v22                            // 000000000244: 56282D03
;   v_fmac_f32    v21, v5, v18                            // 000000000248: 562A2505
;   v_mul_legacy_f32  v3, s0, v16                         // 00000000024C: 0E062000
;   v_fmac_f32    v17, v6, v14                            // 000000000250: 56221D06
;   v_fmac_f32    v0, v55, v23                            // 000000000254: 56002F37
;   v_fmac_f32    v8, v10, v28                            // 000000000258: 5610390A
;   v_fmac_f32    v9, s5, v1                              // 00000000025C: 56120205
;   v_fmac_f32    v3, s1, v1                              // 000000000260: 56060201
;   v_fmac_f32    v20, v59, v23                           // 000000000264: 56282F3B
;   v_fmac_f32    v21, v6, v28                            // 000000000268: 562A3906
;   v_mul_legacy_f32  v23, s8, v16                        // 00000000026C: 0E2E2008
;   v_fmac_f32    v9, s6, v8                              // 000000000270: 56121006
;   v_fmac_f32    v17, v7, v0                             // 000000000274: 56220107
;   v_mul_legacy_f32  v6, s12, v19                        // 000000000278: 0E0C260C
;   v_mul_legacy_f32  v10, s16, v19                       // 00000000027C: 0E142610
;   v_mul_legacy_f32  v4, s20, v19                        // 000000000280: 0E082614
;   v_mul_legacy_f32  v14, s40, v19                       // 000000000284: 0E1C2628
;   v_fmac_f32    v23, s9, v1                             // 000000000288: 562E0209
;   v_fmac_f32    v6, s13, v17                            // 00000000028C: 560C220D
;   v_fmac_f32    v21, v7, v20                            // 000000000290: 562A2907
;   v_fmac_f32    v4, s21, v17                            // 000000000294: 56082215
;   v_fmac_f32    v14, s41, v17                           // 000000000298: 561C2229
;   v_fmac_f32    v10, s17, v17                           // 00000000029C: 56142211
;   v_fmac_f32    v3, s2, v8                              // 0000000002A0: 56061002
;   v_mul_legacy_f32  v0, v9, v9                          // 0000000002A4: 0E001309
;   v_fmac_f32    v6, s14, v21                            // 0000000002A8: 560C2A0E
;   v_fmac_f32    v4, s22, v21                            // 0000000002AC: 56082A16
;   v_fmac_f32    v10, s18, v21                           // 0000000002B0: 56142A12
;   v_fmac_f32    v14, s42, v21                           // 0000000002B4: 561C2A2A
;   v_fmac_f32    v23, s10, v8                            // 0000000002B8: 562E100A
;   v_fmac_f32    v0, v3, v3                              // 0000000002BC: 56000703
;   v_mul_legacy_f32  v18, s24, v19                       // 0000000002C0: 0E242618
;   v_mul_legacy_f32  v8, s28, v19                        // 0000000002C4: 0E10261C
;   v_mul_legacy_f32  v15, s32, v19                       // 0000000002C8: 0E1E2620
;   v_fmac_f32    v14, s43, v7                            // 0000000002CC: 561C0E2B
;   v_fmac_f32    v0, v23, v23                            // 0000000002D0: 56002F17
;   v_fmac_f32    v4, s23, v7                             // 0000000002D4: 56080E17
;   v_fmac_f32    v10, s19, v7                            // 0000000002D8: 56140E13
;   v_fmac_f32    v6, s15, v7                             // 0000000002DC: 560C0E0F
;   v_fmac_f32    v15, s33, v17                           // 0000000002E0: 561E2221
;   v_fmac_f32    v8, s29, v17                            // 0000000002E4: 5610221D
;   v_fmac_f32    v18, s25, v17                           // 0000000002E8: 56242219
;   v_rsq_f32     v0, v0                                  // 0000000002EC: 7E005D00
;   exp           pos0, v6, v10, v4, v14 done             // 0000000002F0: F80008CF 0E040A06
;   v_fmac_f32    v15, s34, v21                           // 0000000002F8: 561E2A22
;   v_fmac_f32    v8, s30, v21                            // 0000000002FC: 56102A1E
;   v_fmac_f32    v18, s26, v21                           // 000000000300: 56242A1A
;   v_mov_b32     v2, 1.0                                 // 000000000304: 7E0402F2
;   v_mov_b32     v19, 0                                  // 000000000308: 7E260280
;   s_waitcnt     expcnt(0)                               // 00000000030C: BF8CFF0F
;   v_mov_b32     v6, s39                                 // 000000000310: 7E0C0227
;   v_mov_b32     v4, s38                                 // 000000000314: 7E080226
;   v_mov_b32     v17, s36                                // 000000000318: 7E220224
;   v_fmac_f32    v15, s35, v7                            // 00000000031C: 561E0E23
;   v_fmac_f32    v8, s31, v7                             // 000000000320: 56100E1F
;   v_fmac_f32    v18, s27, v7                            // 000000000324: 56240E1B
;   v_mul_legacy_f32  v3, v0, v3                          // 000000000328: 0E060700
;   v_mul_legacy_f32  v5, v0, v23                         // 00000000032C: 0E0A2F00
;   v_mul_legacy_f32  v0, v0, v9                          // 000000000330: 0E001300
;   exp           param0, v12, v13, v19, v2               // 000000000334: F800020F 02130D0C
;   exp           param1, v18, v8, v15, v2                // 00000000033C: F800021F 020F0812
;   exp           param2, v3, v0, v5, v2                  // 000000000344: F800022F 02050003
;   exp           param3, v17, v11, v4, v6                // 00000000034C: F800023F 06040B11
;   s_endpgm                                              // 000000000354: BF810000
;   s_code_end                                            // 000000000358: BF9F0000
;   s_code_end                                            // 00000000035C: BF9F0000
;   s_code_end                                            // 000000000360: BF9F0000
;   s_code_end                                            // 000000000364: BF9F0000
;   s_code_end                                            // 000000000368: BF9F0000
;   s_code_end                                            // 00000000036C: BF9F0000
;   s_code_end                                            // 000000000370: BF9F0000
;   s_code_end                                            // 000000000374: BF9F0000
;   s_code_end                                            // 000000000378: BF9F0000
;   s_code_end                                            // 00000000037C: BF9F0000
;   s_code_end                                            // 000000000380: BF9F0000
;   s_code_end                                            // 000000000384: BF9F0000
;   s_code_end                                            // 000000000388: BF9F0000
;   s_code_end                                            // 00000000038C: BF9F0000
;   s_code_end                                            // 000000000390: BF9F0000
;   s_code_end                                            // 000000000394: BF9F0000
;   s_code_end                                            // 000000000398: BF9F0000
;   s_code_end                                            // 00000000039C: BF9F0000
;   s_code_end                                            // 0000000003A0: BF9F0000
;   s_code_end                                            // 0000000003A4: BF9F0000
;   s_code_end                                            // 0000000003A8: BF9F0000
;   s_code_end                                            // 0000000003AC: BF9F0000
;   s_code_end                                            // 0000000003B0: BF9F0000
;   s_code_end                                            // 0000000003B4: BF9F0000
;   s_code_end                                            // 0000000003B8: BF9F0000
;   s_code_end                                            // 0000000003BC: BF9F0000
;   s_code_end                                            // 0000000003C0: BF9F0000
;   s_code_end                                            // 0000000003C4: BF9F0000
;   s_code_end                                            // 0000000003C8: BF9F0000
;   s_code_end                                            // 0000000003CC: BF9F0000
;   s_code_end                                            // 0000000003D0: BF9F0000
;   s_code_end                                            // 0000000003D4: BF9F0000
;   s_code_end                                            // 0000000003D8: BF9F0000
;   s_code_end                                            // 0000000003DC: BF9F0000
;   s_code_end                                            // 0000000003E0: BF9F0000
;   s_code_end                                            // 0000000003E4: BF9F0000
;   s_code_end                                            // 0000000003E8: BF9F0000
;   s_code_end                                            // 0000000003EC: BF9F0000
;   s_code_end                                            // 0000000003F0: BF9F0000
;   s_code_end                                            // 0000000003F4: BF9F0000
;   s_code_end                                            // 0000000003F8: BF9F0000
;   s_code_end                                            // 0000000003FC: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 20
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 10
;     rootsig_layout[0] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 9
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 2
;       allocated_offset: 10
;       orig_rootsig_slot_id: 2
;     }
;     rootsig_layout[3] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 3
;       allocated_offset: 11
;       orig_rootsig_slot_id: 3
;     }
;     rootsig_layout[4] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 4
;       allocated_offset: 12
;       orig_rootsig_slot_id: 4
;     }
;     rootsig_layout[5] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 5
;       allocated_offset: 13
;       orig_rootsig_slot_id: 5
;     }
;     rootsig_layout[6] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 14
;       orig_rootsig_slot_id: 6
;     }
;     rootsig_layout[7] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 1
;       allocated_offset: 15
;       orig_rootsig_slot_id: 7
;     }
;     rootsig_layout[8] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 16
;       orig_rootsig_slot_id: 8
;     }
;     rootsig_layout[9] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 1
;       allocated_offset: 18
;       orig_rootsig_slot_id: 9
;     }
; 
;   // entry used resources info
;   used_resources_count: 2
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 16
;       orig_rootsig_slot_id: 8
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
;     used_resource[1] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 1
;       allocated_offset : 18
;       orig_rootsig_slot_id: 9
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 29
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSSkinned)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 5
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 7
;       data_vgpr: 8
;       data_size: 2
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 3
;       data_vgpr: 12
;       data_size: 1
;     }
;     input_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       channel_mask: 15
;       data_vgpr: 16
;       data_size: 3
;     }
;     input_semantic[4] {
;       usage: GENERIC
;       usage_idx: 4
;       channel_mask: 15
;       data_vgpr: 20
;       data_size: 3
;     }
; 
;   num_output_semantics: 4
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[3] {
;       usage: GENERIC
;       usage_idx: 3
;       param_idx: 3
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 40 {
;     scratch_en: 0
;     user_sgpr: 20
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 6 {
;     vs_export_count: 3
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 16
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000011110000000000110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000111111110011011111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=62,NumSGPR=46,LDS=0,Scratch=0,WaveSize=64,Occupancy=8
; VAlu:131,SAlu:24,VMem:12,SMem:6,LDS:0,WaitCntOnVMem:10,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char PBREffect_VSSkinned[] = {
  0x44, 0x58, 0x42, 0x43, 0x2c, 0xca, 0xbd, 0x96, 0x40, 0x41, 0xaf, 0xef,
  0x24, 0xef, 0x18, 0x89, 0xf0, 0x17, 0x20, 0xfe, 0x01, 0x00, 0x00, 0x00,
  0xd0, 0x1a, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00,
  0xe8, 0x03, 0x00, 0x00, 0x98, 0x05, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,
  0x3c, 0x06, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xe0, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x00, 0x00, 0x00,
  0x4f, 0x53, 0x47, 0x31, 0xc4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43,
  0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00,
  0x50, 0x53, 0x56, 0x30, 0xdc, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x57, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x64, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69,
  0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c,
  0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f,
  0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x56, 0x53, 0x53, 0x6b, 0x69,
  0x6e, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x04, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0x70, 0x00, 0x0f, 0x00,
  0x70, 0x00, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00, 0x70, 0x00, 0x0f, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00, 0x70, 0x07, 0x0f, 0x00,
  0x70, 0x07, 0x0f, 0x00, 0x52, 0x54, 0x53, 0x30, 0xa8, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x78, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x49, 0x4c, 0x44, 0x4e, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x79, 0x00, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73,
  0x5c, 0x6d, 0x61, 0x72, 0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
  0x6f, 0x61, 0x64, 0x73, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58,
  0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69,
  0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61,
  0x69, 0x6e, 0x5c, 0x53, 0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65,
  0x72, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c,
  0x58, 0x62, 0x6f, 0x78, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
  0x61, 0x72, 0x6c, 0x65, 0x74, 0x74, 0x50, 0x42, 0x52, 0x45, 0x66, 0x66,
  0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65,
  0x64, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0xef, 0x2a, 0xad,
  0x62, 0xa6, 0xa1, 0xbf, 0x89, 0x58, 0xca, 0xf1, 0x57, 0x2b, 0x64, 0x1b,
  0x44, 0x58, 0x49, 0x4c, 0x8c, 0x14, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x23, 0x05, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x80, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x94, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0xa4, 0x10, 0x00, 0x00, 0xd6, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x7c, 0x14, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x08, 0x04, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x98, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x82, 0x20, 0x88, 0x82, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5,
  0x40, 0x4a, 0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3,
  0x40, 0x0c, 0xe4, 0x1c, 0x35, 0x5c, 0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x73,
  0x1b, 0x55, 0xac, 0xc4, 0xe4, 0x17, 0xb7, 0x8d, 0x88, 0x61, 0x18, 0x06,
  0x2a, 0xee, 0x19, 0x2e, 0x7f, 0xc2, 0x1e, 0x42, 0xf2, 0x43, 0xa0, 0x19,
  0x16, 0x02, 0x05, 0x51, 0x21, 0x20, 0x42, 0x22, 0x68, 0x2a, 0xc5, 0x40,
  0x0c, 0xc3, 0x40, 0xd5, 0x1c, 0x41, 0x50, 0x0c, 0x89, 0x28, 0x08, 0xe2,
  0x22, 0x6c, 0x20, 0x60, 0x18, 0x61, 0x18, 0x86, 0x11, 0x88, 0x21, 0x09,
  0xb8, 0x1c, 0xd8, 0x8e, 0x3a, 0x1c, 0x69, 0x5a, 0x00, 0xcc, 0xa1, 0x26,
  0x9f, 0x73, 0x1a, 0x69, 0x02, 0x9a, 0x49, 0x42, 0xce, 0xd6, 0x79, 0x5d,
  0xe7, 0x79, 0xdb, 0x30, 0x0c, 0xc4, 0x30, 0xd0, 0x97, 0x03, 0x5c, 0x22,
  0x85, 0xd7, 0x1d, 0x8e, 0x34, 0x2d, 0x00, 0xe6, 0x50, 0x93, 0xcf, 0x2a,
  0x48, 0xd3, 0x20, 0x8d, 0x91, 0x02, 0x11, 0xc0, 0x10, 0x13, 0x11, 0x49,
  0x28, 0x10, 0x69, 0x4c, 0x0b, 0x02, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x0e,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x54, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0xc1, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x0b, 0x04, 0x1b, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x10, 0x0d, 0x0a, 0xd0, 0xa6,
  0x0c, 0xca, 0xa3, 0x1c, 0x8a, 0xa0, 0x10, 0xa8, 0x28, 0x89, 0x11, 0x80,
  0x42, 0x28, 0x83, 0x22, 0x28, 0x05, 0x02, 0x67, 0x00, 0x88, 0x9c, 0x01,
  0xa0, 0x72, 0x2c, 0x8b, 0xa2, 0xe0, 0x11, 0xf4, 0xe0, 0x11, 0xf4, 0xe0,
  0x11, 0xf4, 0xe0, 0x11, 0xf4, 0x40, 0x3c, 0x00, 0xf1, 0x00, 0xc4, 0x03,
  0x20, 0x10, 0x00, 0x00, 0xde, 0x43, 0x0f, 0xde, 0x43, 0x0f, 0xde, 0x43,
  0x0f, 0xde, 0x43, 0x0f, 0xde, 0x43, 0x0f, 0xde, 0x43, 0x0f, 0xde, 0x43,
  0x0f, 0xde, 0x43, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
  0x96, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4,
  0x36, 0xf8, 0xfa, 0xc2, 0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa,
  0xa2, 0x42, 0x92, 0x2a, 0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2,
  0x1a, 0x42, 0xfa, 0x9a, 0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a,
  0xa2, 0xfa, 0x4a, 0x72, 0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00,
  0xb3, 0x41, 0x08, 0x04, 0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78,
  0x20, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31,
  0x31, 0x31, 0x31, 0x36, 0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02,
  0x62, 0x82, 0x40, 0x24, 0x13, 0x04, 0x42, 0xd9, 0x20, 0x18, 0xc7, 0x04,
  0x81, 0x58, 0x36, 0x08, 0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x30,
  0x1b, 0x86, 0x85, 0x39, 0x26, 0x08, 0x60, 0xa0, 0x11, 0x98, 0x20, 0x10,
  0xcd, 0x06, 0xe4, 0x70, 0x9e, 0xe3, 0x30, 0x20, 0x60, 0x82, 0x40, 0x06,
  0xdb, 0x04, 0x81, 0x70, 0x36, 0x20, 0x86, 0xf4, 0x1c, 0x86, 0x31, 0x01,
  0x1b, 0x84, 0x88, 0xda, 0x40, 0x00, 0x40, 0x05, 0x4c, 0x10, 0xca, 0x80,
  0xdb, 0x10, 0x5c, 0x13, 0x04, 0x01, 0x60, 0x62, 0x35, 0x35, 0xb5, 0x96,
  0xe6, 0xe6, 0x56, 0x46, 0xc6, 0x65, 0xca, 0xea, 0x0b, 0xea, 0x6d, 0x2e,
  0x8d, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x50, 0x50, 0x13, 0x84, 0xa2, 0xda,
  0x10, 0x1c, 0x13, 0x84, 0xc2, 0x9a, 0x20, 0x10, 0xcf, 0x04, 0x81, 0x80,
  0x36, 0x08, 0x60, 0x10, 0x06, 0x1b, 0x96, 0x63, 0xe3, 0x3a, 0xaf, 0x33,
  0xbe, 0xa3, 0x13, 0x03, 0x1a, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x13,
  0x84, 0xe2, 0x9a, 0x20, 0x10, 0xd1, 0x06, 0x01, 0x0c, 0xcc, 0x60, 0xc3,
  0x62, 0x90, 0x01, 0xd7, 0x79, 0x9d, 0x51, 0x06, 0x46, 0x77, 0x06, 0x13,
  0x04, 0x42, 0x22, 0x42, 0x55, 0x84, 0x35, 0xf4, 0xf4, 0x24, 0x45, 0x34,
  0x41, 0x28, 0xb0, 0x0d, 0x02, 0x18, 0x80, 0xc1, 0x86, 0x25, 0x0d, 0xd4,
  0x80, 0xeb, 0xbc, 0xce, 0x58, 0x83, 0x34, 0xe8, 0xd8, 0x80, 0x8c, 0x10,
  0x53, 0x91, 0x13, 0x51, 0x92, 0x13, 0x51, 0xd2, 0x50, 0xd1, 0xd4, 0x04,
  0xa1, 0xc8, 0x36, 0x2c, 0x60, 0xe0, 0x06, 0x6f, 0xd0, 0x79, 0x9d, 0xf1,
  0x81, 0x41, 0x27, 0x06, 0x13, 0x04, 0x62, 0xe2, 0x22, 0xc4, 0x54, 0xe4,
  0x44, 0x74, 0x55, 0x94, 0x74, 0x84, 0x44, 0xb5, 0x61, 0x89, 0x03, 0x39,
  0xe0, 0x3a, 0xaf, 0x33, 0xbe, 0x38, 0xe8, 0xc4, 0x60, 0x43, 0x31, 0x06,
  0x68, 0xd0, 0x06, 0x70, 0x30, 0x07, 0x1b, 0x96, 0x43, 0x0d, 0xb8, 0xce,
  0x5b, 0x03, 0x63, 0x0d, 0x8e, 0x8e, 0x0d, 0x36, 0x04, 0xc6, 0x86, 0xc5,
  0x50, 0x03, 0xae, 0xb3, 0x83, 0x35, 0x30, 0x3e, 0xa3, 0x13, 0x83, 0x0d,
  0x41, 0x1a, 0x6c, 0x58, 0xd2, 0x40, 0x0d, 0xb8, 0x0e, 0x0f, 0xd6, 0xc0,
  0x28, 0x83, 0x34, 0xe8, 0xce, 0x80, 0xc5, 0xd0, 0x13, 0xd3, 0x93, 0xd4,
  0x86, 0x05, 0x0c, 0xf4, 0x80, 0xeb, 0xbc, 0x35, 0x30, 0x3e, 0x30, 0xe8,
  0xc4, 0x60, 0xc3, 0x12, 0x07, 0x1b, 0x57, 0x06, 0xde, 0x67, 0x7c, 0x71,
  0xd0, 0x89, 0xc1, 0x86, 0xa2, 0x0e, 0xee, 0x20, 0x0f, 0xf6, 0x80, 0x0f,
  0x36, 0x0c, 0x74, 0xd0, 0x07, 0xc0, 0x86, 0x22, 0xd3, 0xfc, 0xc0, 0x02,
  0x5a, 0xe1, 0x89, 0xbd, 0xe1, 0xb9, 0x8c, 0xbd, 0xb5, 0xc1, 0xa5, 0xb1,
  0x95, 0xc9, 0xb9, 0xbc, 0xc1, 0xd1, 0xa5, 0xbd, 0xb9, 0xcd, 0x4d, 0x09,
  0x84, 0x2a, 0x6c, 0x6c, 0x76, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
  0x53, 0x02, 0xa2, 0x0a, 0x19, 0x9e, 0x8b, 0x5d, 0x99, 0xdc, 0x5c, 0xda,
  0x9b, 0xdb, 0x94, 0xe0, 0x68, 0x42, 0x86, 0xe7, 0x62, 0x17, 0xc6, 0x66,
  0x57, 0x26, 0x37, 0x25, 0x48, 0xea, 0x90, 0xe1, 0xb9, 0xcc, 0xa1, 0x85,
  0x91, 0x95, 0xc9, 0x35, 0xbd, 0x91, 0x95, 0xb1, 0x4d, 0x09, 0x98, 0x32,
  0x64, 0x78, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
  0x53, 0x82, 0xaa, 0x0e, 0x19, 0x9e, 0x8b, 0x5d, 0x5a, 0xd9, 0x5d, 0x12,
  0xd9, 0x14, 0x5d, 0x18, 0x5d, 0xd9, 0x94, 0xe0, 0xaa, 0x43, 0x86, 0xe7,
  0x52, 0xe6, 0x46, 0x27, 0x97, 0x07, 0xf5, 0x96, 0xe6, 0x46, 0x37, 0x37,
  0x25, 0xf0, 0x03, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e,
  0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41,
  0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21,
  0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x06, 0x90, 0xbc, 0x2c, 0xab, 0x20, 0x4d, 0x43,
  0x0c, 0x66, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41,
  0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d,
  0x08, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08,
  0x34, 0xc3, 0x42, 0x18, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33,
  0xdd, 0x7e, 0x71, 0xdb, 0x16, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2,
  0x00, 0x83, 0xd8, 0x3c, 0xd4, 0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd3, 0x70,
  0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x3e, 0x72,
  0xdb, 0x36, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81,
  0x52, 0xd3, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x76, 0x20, 0x0d, 0x97, 0xef,
  0x3c, 0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x15,
  0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d,
  0x03, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x74, 0x8d, 0x00, 0x10, 0x51, 0x5c, 0x65, 0x57, 0x0a, 0x33, 0x00, 0x25,
  0x57, 0x12, 0x45, 0x51, 0x16, 0xe5, 0x56, 0x32, 0xc5, 0x42, 0x45, 0x09,
  0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x00, 0x00, 0x00, 0x00,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x8d, 0x41, 0x32, 0x89, 0x81,
  0x18, 0x38, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x91, 0x81, 0x42,
  0x89, 0x81, 0x18, 0x3c, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xb0,
  0x81, 0xa6, 0x8d, 0x01, 0xc6, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0xd1, 0x06, 0xdb, 0x46, 0x06, 0x45, 0x33, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x86, 0x1b, 0x70, 0x5c, 0x19, 0x5c, 0xce, 0x88, 0x41, 0x02, 0x80,
  0x20, 0x18, 0x18, 0x6f, 0xd0, 0x75, 0x66, 0x90, 0x3d, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x80, 0xbc, 0x81, 0x27, 0x06, 0x67, 0xc0, 0x41, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xc0, 0xc1, 0x37, 0x06, 0x68, 0x90,
  0x44, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0xc4, 0x01, 0x18, 0x90,
  0x41, 0x1a, 0x6c, 0xd2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0x72,
  0x10, 0x06, 0x65, 0xa0, 0x06, 0xdd, 0x34, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x06, 0x1d, 0x88, 0xc1, 0x18, 0xac, 0x01, 0x18, 0x50, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xd4, 0xc1, 0x18, 0x90, 0x01, 0x1b, 0x34,
  0xd5, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x76, 0x40, 0x06, 0x6e,
  0xd0, 0x06, 0x62, 0x60, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x71,
  0x07, 0x65, 0xf0, 0x06, 0x6e, 0xf0, 0x5c, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x60, 0xe0, 0x81, 0x19, 0xc0, 0xc1, 0x1b, 0x84, 0x01, 0x36, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1e, 0x9c, 0x01, 0x1c, 0xc0, 0x41,
  0x19, 0x64, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe8, 0x01, 0x1a,
  0xc4, 0x41, 0x1c, 0x48, 0xda, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x7b, 0x90, 0x06, 0x72, 0x20, 0x07, 0x64, 0xb0, 0x8d, 0x18, 0x24, 0x00,
  0x08, 0x82, 0x81, 0xc1, 0x07, 0x6a, 0x30, 0x07, 0x73, 0x60, 0x06, 0x5c,
  0x35, 0x6f, 0x20, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xe5, 0x01,
  0x18, 0x50, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0x43, 0x19, 0x7b, 0x00, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x30, 0xfd, 0x81, 0x19, 0x68, 0xc1, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x31, 0x78,
  0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0x95, 0x02, 0x1b, 0x80,
  0x41, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x60, 0xd0, 0x18, 0xc8, 0xc7, 0x16, 0x32, 0x90, 0x8f,
  0x19, 0x65, 0x20, 0x1f, 0x93, 0xcc, 0x40, 0x3e, 0xd6, 0x9c, 0x81, 0x7c,
  0x0c, 0x41, 0x03, 0xf9, 0x18, 0x95, 0x06, 0xf2, 0xb1, 0x47, 0x0d, 0xe4,
  0x63, 0xca, 0x1a, 0xc8, 0xc7, 0x2c, 0x36, 0x90, 0x8f, 0x45, 0x6d, 0x20,
  0x1f, 0x63, 0xdc, 0x40, 0x3e, 0xa5, 0x06, 0xad, 0x20, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x30, 0xdd, 0x82, 0x1f, 0xc8, 0x41, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50,
  0x46, 0x2e, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0xbd, 0x40,
  0x0a, 0x78, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x68, 0x02, 0x31, 0x14, 0x63, 0x0b, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0xd3, 0x38, 0xa8, 0x82, 0x1f, 0x04, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06,
  0x81, 0x82, 0x7c, 0x6c, 0x09, 0x05, 0xf9, 0x98, 0x21, 0x0a, 0xf2, 0x31,
  0x69, 0x14, 0xe4, 0x63, 0x0d, 0x29, 0xc8, 0xc7, 0x90, 0x52, 0x90, 0x8f,
  0x51, 0xa6, 0x20, 0x1f, 0x7b, 0x4e, 0x41, 0x3e, 0xa6, 0xa0, 0x82, 0x7c,
  0xcc, 0x4a, 0x05, 0xf9, 0x58, 0xa4, 0x0a, 0xf2, 0x31, 0x66, 0x15, 0xe4,
  0x63, 0x8c, 0x1a, 0xc0, 0xc7, 0x18, 0x35, 0x80, 0x8f, 0x31, 0x6a, 0x00,
  0x1f, 0x63, 0xd4, 0x00, 0x3e, 0xc6, 0xa8, 0x01, 0x7c, 0x8c, 0x51, 0x03,
  0xf8, 0x18, 0xa3, 0x06, 0xf0, 0x31, 0x46, 0x0d, 0xe0, 0x63, 0x8c, 0x1a,
  0xc0, 0xc7, 0x18, 0x35, 0x80, 0x8f, 0x31, 0x6a, 0x00, 0x1f, 0x63, 0xd4,
  0x00, 0x3e, 0x35, 0x0b, 0xf7, 0x20, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x30, 0x85, 0x04, 0x3a, 0xf0, 0x42, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0xc6, 0x48, 0xc0,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x4c, 0x27, 0xe1, 0x0e, 0xe2, 0x10,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68,
  0x02, 0x31, 0x14, 0x03, 0x12, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06,
  0x53, 0x4b, 0xd0, 0x03, 0x3a, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20,
  0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0xa5, 0x83, 0x7c,
  0x6c, 0x51, 0x07, 0xf9, 0x98, 0xb1, 0x0e, 0xf2, 0x31, 0x89, 0x1d, 0xe4,
  0x63, 0x4d, 0x3b, 0xc8, 0xc7, 0x10, 0x77, 0x90, 0x8f, 0x51, 0xef, 0x20,
  0x1f, 0x7b, 0xe0, 0x41, 0x3e, 0xa6, 0xc4, 0x83, 0x7c, 0xcc, 0x92, 0x07,
  0xf9, 0x58, 0x34, 0x0f, 0xf2, 0x31, 0x86, 0x1e, 0xe4, 0x63, 0x6a, 0xc0,
  0xc0, 0xc7, 0xd4, 0x80, 0x81, 0x8f, 0xa9, 0x01, 0x03, 0x1f, 0x53, 0x03,
  0x06, 0x3e, 0xa6, 0x06, 0x0c, 0x7c, 0x4c, 0x0d, 0x18, 0xf8, 0x98, 0x1a,
  0x30, 0xf0, 0x31, 0x35, 0x60, 0xe0, 0x63, 0x6a, 0xc0, 0xc0, 0xc7, 0xd4,
  0x80, 0x81, 0x8f, 0xa9, 0x01, 0x03, 0x1f, 0x53, 0x03, 0x06, 0x3e, 0xc5,
  0x0f, 0x61, 0x21, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xad, 0x85,
  0x4c, 0x98, 0x44, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x46, 0x5b, 0xc0, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x4c, 0x71, 0x81, 0x13, 0x2c, 0x11, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x14,
  0xa3, 0x16, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd3, 0x5d, 0xf8,
  0x84, 0x4c, 0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0xc9, 0x84, 0x7c, 0x6c, 0x99, 0x09,
  0xf9, 0x98, 0x41, 0x13, 0xf2, 0x31, 0xa9, 0x26, 0xe4, 0x63, 0x8d, 0x4d,
  0xc8, 0xc7, 0x90, 0x9b, 0x90, 0x8f, 0x51, 0x38, 0x21, 0x1f, 0x7b, 0x72,
  0x42, 0x3e, 0xa6, 0xe8, 0x84, 0x7c, 0xcc, 0xda, 0x09, 0xf9, 0x58, 0xc4,
  0x13, 0xf2, 0x31, 0xa6, 0x27, 0xe4, 0x63, 0x6a, 0xc0, 0xc0, 0xc7, 0xd4,
  0x80, 0x81, 0x8f, 0xa9, 0x01, 0x03, 0x1f, 0x53, 0x03, 0x06, 0x3e, 0xa6,
  0x06, 0x0c, 0x7c, 0x4c, 0x0d, 0x18, 0xf8, 0x98, 0x1a, 0x30, 0xf0, 0x31,
  0x35, 0x60, 0xe0, 0x63, 0x6a, 0xc0, 0xc0, 0xc7, 0xd4, 0x80, 0x81, 0x8f,
  0xa9, 0x01, 0x03, 0x1f, 0x53, 0x03, 0x06, 0x3e, 0xc6, 0x80, 0x85, 0x7c,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0xa2, 0x8d, 0xbe, 0x00, 0x0b,
  0x25, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xaa, 0x36, 0xfc, 0x02,
  0x2c, 0x90, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2a, 0xdb, 0xf8,
  0x0b, 0xb0, 0x30, 0x02, 0x7b, 0xc8, 0x42, 0x3e, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x50, 0xe1, 0x46, 0x68, 0x90, 0x45, 0x13, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0x95, 0x1b, 0xa2, 0x41, 0x16, 0x4b, 0x30, 0x62,
  0x80, 0x00, 0x20, 0x08, 0x06, 0x95, 0x6e, 0x8c, 0x06, 0x59, 0x24, 0x81,
  0x49, 0x68, 0x21, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x78,
  0xa3, 0x34, 0xd0, 0x02, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0,
  0xea, 0x0d, 0xd3, 0x40, 0x0b, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0xca, 0x37, 0x4e, 0x03, 0x2d, 0x98, 0xc0, 0xb0, 0xb7, 0x90, 0xcf,
  0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0xe0, 0x91, 0x1a, 0x6f, 0x61,
  0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x85, 0x87, 0x6a, 0xbc,
  0x05, 0x15, 0x98, 0x26, 0x17, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04,
  0x83, 0x6a, 0x3c, 0x58, 0x43, 0x2e, 0xb0, 0x60, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x2a, 0xf2, 0x68, 0x0d, 0xb9, 0xb0, 0x02, 0xe3, 0xea, 0x42,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x99, 0xc7, 0x6b, 0xd4,
  0x85, 0x16, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x75, 0x1e, 0xb0,
  0x51, 0x17, 0x58, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x53, 0x7a,
  0xc0, 0xc6, 0x68, 0x90, 0xc7, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x4c, 0xee, 0x51, 0x1b, 0xa8, 0x11, 0x1b, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06,
  0x07, 0x00, 0x82, 0x60, 0x30, 0xcd, 0x87, 0x6e, 0xb4, 0x46, 0x6d, 0x8c,
  0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02,
  0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x84, 0x1f, 0xbf, 0x21,
  0x1b, 0xb9, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x60, 0x93, 0x19, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xaa, 0xfe, 0x30, 0x8f, 0x31, 0x98, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xa8, 0xfc, 0xe3, 0x3c, 0xc0, 0x60, 0x0a, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0xfa, 0x0f, 0xf4, 0x48, 0x8d, 0x29,
  0x30, 0x49, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x55,
  0x88, 0xa8, 0xc7, 0x19, 0x48, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x54, 0x22, 0xb2, 0x1e, 0x64, 0x20, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x50, 0x8d, 0x08, 0x7b, 0xb4, 0x86, 0x14, 0x58, 0xe4, 0x06, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xaa, 0x44, 0xdc, 0x63, 0x0d,
  0xa2, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2a, 0x13, 0x79, 0x0f,
  0x34, 0x88, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x4e, 0x04,
  0x3e, 0x62, 0x23, 0x0a, 0x0c, 0x92, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x95, 0x22, 0xf2, 0xf1, 0x06, 0x50, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x95, 0x8a, 0xcc, 0x07, 0x1b, 0x40, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x2b, 0x42, 0x1f, 0xb5, 0x01, 0x05,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xb5, 0x08, 0x7d, 0x9c, 0x87,
  0x8a, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x24, 0x23,
  0xf9, 0xc1, 0x1e, 0x26, 0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0xd3, 0x8d, 0xf8, 0x47, 0x7c, 0xb8, 0xc8, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x39, 0xa5,
  0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xa8, 0x78, 0xa4, 0x44,
  0x44, 0xc1, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xa0, 0xea, 0x11,
  0x13, 0xf9, 0x03, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xca,
  0x47, 0x4e, 0x04, 0x3d, 0x9c, 0xc0, 0x9a, 0x54, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x54, 0x60, 0x92, 0x22, 0xa6, 0xd0, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0x85, 0x89, 0x8a, 0x8c, 0x42, 0x13,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x25, 0x26, 0x2b, 0xc2, 0x1e,
  0x4d, 0x60, 0x4c, 0x2b, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x2a, 0x32, 0x69, 0x11, 0x55, 0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xa8, 0xca, 0xc4, 0x45, 0x4e, 0x81, 0x09, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xa0, 0x32, 0x93, 0x17, 0x81, 0x0f, 0x26, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0x09, 0x4d, 0x5e, 0x44, 0x44, 0x5c, 0x64, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0x60, 0x62, 0x93, 0x19, 0x31, 0x11, 0x33, 0x19, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03,
  0x00, 0x41, 0x30, 0x98, 0xe0, 0xe4, 0x46, 0x54, 0xa4, 0x4c, 0x46, 0x13,
  0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x16, 0x59, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x54, 0x74, 0xd2, 0x23, 0xb0,
  0xb0, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xd5, 0x89, 0x8f,
  0xb8, 0xc2, 0x12, 0x98, 0x52, 0x0b, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xea, 0x4e, 0xc0, 0x64, 0x16, 0x94, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x2a, 0x3c, 0x09, 0x93, 0x58, 0x50, 0x02, 0x4b, 0x70,
  0x41, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x50, 0xe9, 0xc9, 0x98,
  0xd8, 0x42, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xb5, 0x27,
  0x64, 0x42, 0x0b, 0x49, 0x30, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xcc,
  0x9f, 0xf4, 0xc8, 0x41, 0x04, 0x07, 0x11, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x81, 0xf3, 0x27, 0x3d, 0x12, 0x58, 0x90, 0xc8, 0xc7, 0x84, 0x43,
  0x3e, 0x36, 0x14, 0xf2, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x49,
  0x54, 0xd2, 0x84, 0x47, 0xc0, 0x64, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x14, 0x55, 0x69, 0x93, 0x51, 0x19, 0x15, 0x3c, 0xc1, 0x91,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x54, 0xa5, 0x4d, 0x46, 0x65,
  0x54, 0xc8, 0xe4, 0x46, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x51,
  0x95, 0x36, 0x21, 0x95, 0x51, 0xc1, 0x13, 0x34, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x45, 0x55, 0xda, 0x84, 0x54, 0x46, 0x85, 0x4c, 0xc8,
  0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x55, 0x69, 0x13, 0x52,
  0x19, 0x95, 0x3a, 0x01, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50,
  0x54, 0xa5, 0x4d, 0x48, 0x65, 0x54, 0xec, 0x64, 0x4c, 0x46, 0x0c, 0x12,
  0x00, 0x04, 0xc1, 0x40, 0x51, 0x95, 0x36, 0xd9, 0x93, 0x51, 0xc1, 0x13,
  0x64, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x55, 0x69, 0x93, 0x3d,
  0x19, 0x15, 0x32, 0x39, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x51,
  0x95, 0x36, 0xd9, 0x93, 0x51, 0xa9, 0x13, 0x63, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x14, 0x55, 0x69, 0x13, 0x3f, 0x19, 0x15, 0x3c, 0x21, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x51, 0x95, 0x36, 0xf1, 0x93, 0x51,
  0x21, 0x93, 0x61, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x55, 0x69,
  0x13, 0x3f, 0x19, 0x95, 0x3a, 0x11, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x51, 0x95, 0x36, 0xf1, 0x93, 0x51, 0xb1, 0x93, 0x60, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x14, 0x55, 0x69, 0x13, 0x3d, 0x19, 0x15, 0x3c,
  0x39, 0x85, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x54, 0xa5, 0x4d,
  0xf4, 0x64, 0x54, 0xc8, 0x64, 0x14, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x51, 0x95, 0x36, 0xd1, 0x93, 0x51, 0xa9, 0x93, 0x3f, 0x18, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0x45, 0x55, 0xda, 0x44, 0x4f, 0x46, 0xc5,
  0x4e, 0xf6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0x6f, 0x70,
  0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x70, 0x4a, 0x17, 0x2a, 0x02, 0x52, 0xcb, 0xce,
  0xe4, 0xcd, 0xb0, 0xbb, 0xe3, 0xc7, 0xad, 0x6a, 0x58, 0x42, 0x43, 0x48,
  0x03, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x15, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x9c, 0xd5, 0x55,
  0xcd, 0x8b, 0x23, 0x55, 0x10, 0x7f, 0xfd, 0x5e, 0x77, 0xa7, 0x3b, 0x93,
  0xa9, 0xee, 0x74, 0xb2, 0x99, 0xec, 0x4e, 0x27, 0xd3, 0xd3, 0xdb, 0xd3,
  0xdb, 0x1f, 0xd3, 0xd3, 0x31, 0x93, 0x71, 0x33, 0xba, 0xb8, 0xab, 0xe8,
  0x82, 0x81, 0x45, 0x61, 0xa0, 0x5c, 0x10, 0x41, 0x64, 0x3d, 0x88, 0xb0,
  0xf8, 0x85, 0x0e, 0xb3, 0x10, 0x3b, 0x83, 0x07, 0x85, 0x3d, 0x78, 0x10,
  0x3d, 0xaa, 0x20, 0xeb, 0x45, 0xc1, 0xbf, 0x20, 0x19, 0xaf, 0x5e, 0x3c,
  0x2d, 0xde, 0x64, 0xc1, 0x8b, 0xb7, 0x15, 0xc9, 0x61, 0x98, 0x4b, 0x7c,
  0x2f, 0x1f, 0x6c, 0xb2, 0xa2, 0x0c, 0x9e, 0xd6, 0x82, 0xe2, 0x57, 0xf5,
  0xab, 0x7a, 0xef, 0x55, 0xf5, 0xeb, 0xae, 0xbe, 0xba, 0xb7, 0x77, 0x4d,
  0x92, 0x08, 0x51, 0x34, 0x32, 0x16, 0x75, 0x02, 0xe4, 0x7e, 0xff, 0xfb,
  0x5f, 0xff, 0x4d, 0x7f, 0x38, 0x65, 0xde, 0x3f, 0x29, 0x9d, 0xae, 0x7f,
  0x96, 0xfc, 0x37, 0x99, 0xed, 0x73, 0x3c, 0xdb, 0x48, 0x7e, 0x10, 0x93,
  0x49, 0x59, 0x96, 0x1f, 0xca, 0x3f, 0x9e, 0x36, 0x76, 0x94, 0x9b, 0x60,
  0x9e, 0x2b, 0x1d, 0xe7, 0x52, 0x72, 0x34, 0x97, 0xf7, 0x14, 0xb9, 0x47,
  0xa5, 0x39, 0xff, 0xf7, 0x69, 0xbe, 0xe0, 0x6a, 0x73, 0xe7, 0xaa, 0xc4,
  0x90, 0x99, 0x2a, 0xe5, 0x34, 0xaa, 0x52, 0x56, 0x90, 0x54, 0x66, 0x98,
  0x4c, 0x95, 0x8d, 0x32, 0x23, 0x8f, 0x86, 0x28, 0x64, 0x76, 0x97, 0xaa,
  0xb8, 0x5e, 0xa2, 0x52, 0xd1, 0xad, 0xca, 0x1e, 0x95, 0xfa, 0x4e, 0x23,
  0xe2, 0x0e, 0x83, 0x39, 0x55, 0xc9, 0xc2, 0x35, 0x8f, 0xc5, 0x7c, 0xc8,
  0x6f, 0x10, 0x63, 0xc1, 0xff, 0xe3, 0xe2, 0xe8, 0x54, 0x67, 0x6d, 0xdd,
  0xcf, 0xee, 0x46, 0x2f, 0x8f, 0xd8, 0x6b, 0x77, 0xbe, 0x1e, 0x7c, 0x72,
  0x3d, 0xbb, 0xfb, 0xd3, 0x6f, 0x23, 0xf6, 0x52, 0x7c, 0x63, 0x55, 0x5e,
  0xff, 0xa8, 0xcf, 0xc8, 0x57, 0x83, 0xb7, 0x2e, 0xdf, 0x1e, 0x38, 0xe4,
  0xea, 0x2f, 0x45, 0xf6, 0x9c, 0xbc, 0xc4, 0xd1, 0x64, 0x4f, 0xcb, 0x23,
  0x96, 0xf5, 0xbf, 0x7b, 0x41, 0x2a, 0x96, 0x46, 0x67, 0x3e, 0x1e, 0x57,
  0xc2, 0xbe, 0xe8, 0xff, 0xc8, 0x3e, 0xef, 0x5b, 0xec, 0xb3, 0x7e, 0xaf,
  0xd2, 0xe8, 0x10, 0xa7, 0x7d, 0x6f, 0x89, 0x28, 0xd9, 0x61, 0xa5, 0xd2,
  0xe9, 0x5d, 0x79, 0x66, 0xec, 0x3b, 0xc0, 0xfd, 0x2b, 0xd7, 0x3b, 0x16,
  0xdf, 0xc3, 0x62, 0xcf, 0xcb, 0x82, 0xab, 0x56, 0x95, 0x4c, 0xe0, 0xba,
  0x33, 0xc1, 0x25, 0x4f, 0xc9, 0x4a, 0x3c, 0x5e, 0x62, 0xd7, 0xc6, 0x71,
  0xcb, 0x56, 0xb2, 0x9e, 0x57, 0xe9, 0x10, 0xf6, 0x2d, 0xdf, 0xff, 0x4e,
  0x5f, 0x70, 0xa5, 0x60, 0x92, 0xbb, 0xb9, 0x39, 0x5d, 0xd3, 0x50, 0x32,
  0x93, 0x7d, 0xd3, 0x2f, 0x8e, 0x36, 0xc6, 0xb5, 0x58, 0xa4, 0x31, 0x7c,
  0x91, 0x90, 0x13, 0x4b, 0x0b, 0x86, 0x0d, 0x81, 0xea, 0xe6, 0x90, 0x57,
  0x78, 0xb2, 0xcf, 0xfb, 0x20, 0xe1, 0x3e, 0x1c, 0x7a, 0xa4, 0x43, 0xc3,
  0x03, 0x60, 0x61, 0x05, 0x3e, 0xe0, 0x1c, 0xc4, 0xfb, 0xf8, 0x3e, 0xc7,
  0x73, 0xa1, 0x0d, 0x52, 0xd8, 0x82, 0xf7, 0xb8, 0xbd, 0x11, 0x7a, 0x70,
  0xe8, 0x77, 0x3a, 0x3d, 0xdf, 0x1f, 0xd7, 0xce, 0xdf, 0xaa, 0xac, 0x1a,
  0x36, 0xc0, 0x88, 0x5b, 0x28, 0xe2, 0x76, 0xb2, 0x8f, 0xe3, 0x5a, 0x5a,
  0x93, 0x1a, 0x36, 0xda, 0x4a, 0x76, 0x36, 0x6c, 0x82, 0x13, 0x37, 0xd0,
  0x0b, 0xeb, 0x60, 0xc6, 0x07, 0x58, 0x4b, 0x5a, 0xb8, 0x1e, 0x37, 0xf1,
  0x5d, 0x9e, 0xdf, 0x48, 0x1a, 0x18, 0xa4, 0xfb, 0xb8, 0x19, 0xd7, 0x31,
  0x89, 0x3d, 0x74, 0x63, 0x1b, 0xfd, 0xb0, 0x0d, 0x8f, 0x25, 0x4d, 0xac,
  0x27, 0x07, 0x18, 0xa6, 0x2d, 0xbc, 0x54, 0x74, 0xa0, 0x18, 0x57, 0x70,
  0x2b, 0x6e, 0xe3, 0x25, 0xdd, 0x87, 0x66, 0x62, 0xa3, 0x25, 0x6f, 0x0e,
  0x3f, 0x15, 0x3d, 0xe4, 0x83, 0x21, 0x9f, 0x3b, 0x27, 0x51, 0x7a, 0x80,
  0xfa, 0x8e, 0x83, 0x6b, 0x49, 0x05, 0x95, 0x1d, 0x1f, 0x2d, 0x3d, 0x18,
  0xbe, 0x2a, 0x91, 0x93, 0xfc, 0x2d, 0x07, 0xe3, 0xb4, 0x82, 0xea, 0x2d,
  0x1f, 0x73, 0x2b, 0x3e, 0x7e, 0x78, 0xc4, 0x7b, 0xa0, 0x95, 0xee, 0x3b,
  0xa2, 0xe7, 0xa4, 0x8e, 0xab, 0x21, 0x01, 0x29, 0xf1, 0x90, 0x26, 0x6d,
  0x7c, 0x9b, 0x73, 0xad, 0xb4, 0x81, 0x3b, 0x69, 0x13, 0xc5, 0xdd, 0xb6,
  0xd3, 0x3a, 0x9e, 0x8f, 0x09, 0x5e, 0x08, 0x03, 0xa8, 0x16, 0x29, 0x54,
  0x75, 0x17, 0x1e, 0x4f, 0x6d, 0xdc, 0x4d, 0x3d, 0x34, 0x8a, 0x26, 0xe8,
  0xdb, 0x14, 0xd3, 0x38, 0x40, 0x43, 0x8f, 0x60, 0x3b, 0x21, 0xa8, 0x6c,
  0xbb, 0xa8, 0x6f, 0x98, 0xf8, 0x44, 0xda, 0x46, 0xd9, 0xb1, 0x20, 0x5f,
  0xa3, 0xc8, 0x92, 0x00, 0x95, 0x8d, 0x88, 0x3f, 0x13, 0x15, 0xd4, 0x9a,
  0x8b, 0x17, 0x53, 0x82, 0xf9, 0x5d, 0x13, 0x15, 0x6a, 0xa1, 0x44, 0x55,
  0x7c, 0x32, 0x0d, 0x50, 0xdd, 0x8d, 0x50, 0x73, 0xb6, 0x40, 0x35, 0x2d,
  0xcc, 0x49, 0x2e, 0x16, 0xfc, 0x02, 0x98, 0x7e, 0x19, 0xca, 0xbe, 0x06,
  0x81, 0x6f, 0x83, 0x4e, 0xb7, 0x70, 0xd9, 0x2d, 0x60, 0x2e, 0x8c, 0xf0,
  0x8c, 0xab, 0x61, 0xe8, 0xda, 0x58, 0x74, 0xcb, 0x48, 0x4d, 0x15, 0xf5,
  0x12, 0x01, 0x88, 0x0a, 0x58, 0x89, 0x34, 0xb4, 0xa2, 0x32, 0x46, 0x91,
  0x8d, 0x79, 0x73, 0x0b, 0x59, 0x8e, 0x60, 0xd5, 0xf7, 0xc0, 0xf6, 0x4d,
  0x70, 0xfc, 0x3a, 0xc4, 0x60, 0xe3, 0x0a, 0x3f, 0x7b, 0x05, 0x34, 0x2c,
  0x41, 0x19, 0x0d, 0x28, 0xe0, 0xba, 0x5b, 0xc7, 0x9a, 0x6b, 0xe2, 0x59,
  0xd7, 0x43, 0xf2, 0x0a, 0xe9, 0xfe, 0xac, 0xf1, 0x91, 0x98, 0x97, 0xc1,
  0x8d, 0xea, 0x58, 0x8f, 0x4c, 0x3c, 0x17, 0x79, 0xf8, 0x27, 0x95, 0xbb,
  0x19, 0xf5, 0xbb, 0xc6, 0xe8, 0xf6, 0xe0, 0x02, 0x2d, 0x74, 0x7d, 0xaa,
  0x75, 0x3d, 0xea, 0x76, 0xcf, 0x43, 0x1d, 0xd7, 0xc0, 0xc4, 0x55, 0xe0,
  0x6b, 0x73, 0x2a, 0x90, 0x34, 0x0f, 0x84, 0xd7, 0x62, 0x50, 0x72, 0x5c,
  0x58, 0x2e, 0xd1, 0x35, 0x8e, 0x96, 0x66, 0xd0, 0x94, 0x23, 0x23, 0x0a,
  0xbd, 0xcc, 0xb1, 0xb8, 0x24, 0xf3, 0xcf, 0xb5, 0x37, 0x20, 0xe4, 0xcb,
  0xff, 0x85, 0xce, 0xe6, 0xe2, 0x6c, 0xf6, 0x8b, 0xdf, 0xe1, 0x3c, 0x27,
  0x54, 0x97, 0x16, 0x39, 0x31, 0x51, 0xf3, 0x74, 0x91, 0x13, 0xf6, 0x12,
  0x5b, 0xe4, 0xc4, 0xcc, 0x2a, 0xc8, 0x8b, 0x9c, 0x98, 0xcf, 0xcb, 0xca,
  0x22, 0x27, 0x04, 0xd4, 0xbf, 0x9f, 0x6b, 0xe4, 0x1e, 0xc4, 0x67, 0xbf,
  0x3b, 0x53, 0x5b, 0xe4, 0x84, 0x6d, 0xe9, 0xdc, 0x96, 0x16, 0xe7, 0x9a,
  0xcc, 0x13, 0x67, 0xdc, 0x2c, 0x24, 0x8b, 0xc4, 0xa9, 0x8c, 0xb8, 0x4c,
  0x2c, 0x9d, 0xe0, 0xde, 0xde, 0x9b, 0x6f, 0xdc, 0xbc, 0xf9, 0xfa, 0x8d,
  0xbf, 0x00, 0xa8, 0x69, 0x65, 0x2b, 0x00, 0x00, 0x2e, 0xef, 0x2a, 0xad,
  0x62, 0xa6, 0xa1, 0xbf, 0x89, 0x58, 0xca, 0xf1, 0x57, 0x2b, 0x64, 0x1b
};
