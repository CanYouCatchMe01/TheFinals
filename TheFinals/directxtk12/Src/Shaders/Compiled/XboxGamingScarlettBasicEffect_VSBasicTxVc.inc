#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; TEXCOORD                 0   xy          1     NONE   float   xy  
; COLOR                    0   xyzw        2     NONE   float   xyzw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: C:\Users\marcu\Downloads\DirectXTK12-main\DirectXTK12-main\Src/Shaders/Compiled\XboxGamingScarlettBasicEffect_VSBasicTxVc.pdb
; shader hash: 115c2c2c55f314fbae3c29b7cf876c04
;
; Pipeline Runtime Information: 
;
;PSVRuntimeInfo:
; Vertex Shader
; OutputPositionPresent=1
; MinimumExpectedWaveLaneCount: 0
; MaximumExpectedWaveLaneCount: 4294967295
; UsesViewID: false
; SigInputElements: 3
; SigOutputElements: 4
; SigPatchConstOrPrimElements: 0
; SigInputVectors: 3
; SigOutputVectors[0]: 4
; SigOutputVectors[1]: 0
; SigOutputVectors[2]: 0
; SigOutputVectors[3]: 0
; EntryFunctionName: VSBasicTxVc
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; TEXCOORD                 0                              
; COLOR                    0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [416 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 2 depends on inputs: { 10 }
;   output 3 depends on inputs: { 11 }
;   output 7 depends on inputs: { 0, 1, 2, 3 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 5 }
;   output 12 depends on inputs: { 0, 1, 2, 3 }
;   output 13 depends on inputs: { 0, 1, 2, 3 }
;   output 14 depends on inputs: { 0, 1, 2, 3 }
;   output 15 depends on inputs: { 0, 1, 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-xb2"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%hostlayout.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>] }

define void @VSBasicTxVc() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %13 = extractvalue %dx.types.CBufRet.f32 %12, 0
  %14 = extractvalue %dx.types.CBufRet.f32 %12, 1
  %15 = extractvalue %dx.types.CBufRet.f32 %12, 2
  %16 = extractvalue %dx.types.CBufRet.f32 %12, 3
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = extractvalue %dx.types.CBufRet.f32 %17, 3
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %24 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %25 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %26 = extractvalue %dx.types.CBufRet.f32 %22, 3
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = fmul fast float %13, %8
  %33 = call float @dx.op.tertiary.f32(i32 46, float %9, float %14, float %32)  ; FMad(a,b,c)
  %34 = call float @dx.op.tertiary.f32(i32 46, float %10, float %15, float %33)  ; FMad(a,b,c)
  %35 = call float @dx.op.tertiary.f32(i32 46, float %11, float %16, float %34)  ; FMad(a,b,c)
  %36 = fmul fast float %18, %8
  %37 = call float @dx.op.tertiary.f32(i32 46, float %9, float %19, float %36)  ; FMad(a,b,c)
  %38 = call float @dx.op.tertiary.f32(i32 46, float %10, float %20, float %37)  ; FMad(a,b,c)
  %39 = call float @dx.op.tertiary.f32(i32 46, float %11, float %21, float %38)  ; FMad(a,b,c)
  %40 = fmul fast float %23, %8
  %41 = call float @dx.op.tertiary.f32(i32 46, float %9, float %24, float %40)  ; FMad(a,b,c)
  %42 = call float @dx.op.tertiary.f32(i32 46, float %10, float %25, float %41)  ; FMad(a,b,c)
  %43 = call float @dx.op.tertiary.f32(i32 46, float %11, float %26, float %42)  ; FMad(a,b,c)
  %44 = fmul fast float %28, %8
  %45 = call float @dx.op.tertiary.f32(i32 46, float %9, float %29, float %44)  ; FMad(a,b,c)
  %46 = call float @dx.op.tertiary.f32(i32 46, float %10, float %30, float %45)  ; FMad(a,b,c)
  %47 = call float @dx.op.tertiary.f32(i32 46, float %11, float %31, float %46)  ; FMad(a,b,c)
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = extractvalue %dx.types.CBufRet.f32 %53, 3
  %58 = call float @dx.op.dot4.f32(i32 56, float %8, float %9, float %10, float %11, float %54, float %55, float %56, float %57)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %59 = call float @dx.op.unary.f32(i32 7, float %58)  ; Saturate(value)
  %60 = fmul fast float %49, %2
  %61 = fmul fast float %50, %3
  %62 = fmul fast float %51, %4
  %63 = fmul fast float %52, %5
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %60)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %61)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %62)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %63)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %59)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %35)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %39)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %43)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %47)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!xbox.compiler.options = !{!0}
!llvm.ident = !{!1}
!dx.version = !{!2}
!dx.valver = !{!3}
!dx.shaderModel = !{!4}
!dx.resources = !{!5}
!dx.viewIdState = !{!8}
!dx.entryPoints = !{!9}

!0 = !{!"__XBOX_PER_THREAD_SCRATCH_SIZE_LIMIT_IN_BYTES", !"0"}
!1 = !{!"dxcxbox 2410.2410.11116.10741"}
!2 = !{i32 1, i32 0}
!3 = !{i32 1, i32 8}
!4 = !{!"vs", i32 6, i32 0}
!5 = !{null, null, !6, null}
!6 = !{!7}
!7 = !{i32 0, %hostlayout.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 416, null}
!8 = !{[14 x i32] [i32 12, i32 16, i32 61568, i32 61568, i32 61568, i32 61568, i32 256, i32 512, i32 0, i32 0, i32 1, i32 2, i32 4, i32 8]}
!9 = !{void ()* @VSBasicTxVc, !"VSBasicTxVc", !10, !5, null}
!10 = !{!11, !18, null}
!11 = !{!12, !15, !17}
!12 = !{i32 0, !"SV_Position", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 0, i8 0, !14}
!13 = !{i32 0}
!14 = !{i32 3, i32 15}
!15 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !13, i8 0, i32 1, i8 2, i32 1, i8 0, !16}
!16 = !{i32 3, i32 3}
!17 = !{i32 2, !"COLOR", i8 9, i8 0, !13, i8 0, i32 1, i8 4, i32 2, i8 0, !14}
!18 = !{!19, !20, !22, !23}
!19 = !{i32 0, !"COLOR", i8 9, i8 0, !13, i8 2, i32 1, i8 4, i32 0, i8 0, !14}
!20 = !{i32 1, !"COLOR", i8 9, i8 0, !21, i8 2, i32 1, i8 4, i32 1, i8 0, !14}
!21 = !{i32 1}
!22 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !13, i8 2, i32 1, i8 2, i32 2, i8 0, !16}
!23 = !{i32 3, !"SV_Position", i8 9, i8 3, !13, i8 4, i32 1, i8 4, i32 3, i8 0, !14}
; 
; ----------------------------------------------------------------
; ----------------------XBOX SHADER COMPILER----------------------
; ----------------------------------------------------------------
; 
; 
; Dumping Xbox Precompiled Shaders (Found 1 Shader)
; 
; Shader #1
; version: 6
; 
; PipelineCompileOptions { 
;   asic: GFX10
;   compiler: NB
;   pipeline: GCN
;   mesh_shader_pipeline: 0
;   enable_fast_launch: 0
;   disable_embedded_option_parsing: 1
;   enable_recompile_warnings: 0
;   disable_minprec_to_native_16bit: 0
;   slience_recompile_warnings: 1
;   override_ngg_pipeline_confg: 0
;   ngg_enable_user_gs: 0
;   disable_inst_stats: 0
; }
; 
; LS: null
; HS: null
; ES: null
; GS: null
; VS {
;   // -------------------  COMMON FIELDS --------------------//
;   // shader info 
;   hw_shader_stage: VS
;   dx_shader_stage: VERTEX
;   isa: GFX10
;   compiler: NB
;   num_vgprs: 16
;   num_shared_vgprs: 0
;   num_sgprs: 26
;   float_mode: 192
;   dx10_clamp: 1
;   ieee_mode: 0
;   uses_prim_id: 0
;   flat_ptr_32: 0
;   scratch_size: 0
;   lds_byte_size: 0
;   has_indirect_calls: 0
;   precompiled_shader: 0
; 
;   // code info 
;   code_size_in_bytes: 384
; shader main
;   asic(GFX10_A)
;   type(VS)
; 
;   v_nop_xbox_data 0x2c2c5c11, 0xfb14f355                // 000000000000: D5805C11 03FE592C FB14F355
;   v_nop_xbox_data 0xb7293cae, 0x046c87cf                // 00000000000C: D5803CAE 03FF6F29 046C87CF
;   s_swappc_b64  s[4:5], s[4:5]                          // 000000000018: BE842104
;   s_inst_prefetch  0x0003                               // 00000000001C: BFA00003
;   s_or_b32      s21, s9, lit(0x00100000)                // 000000000020: 8815FF09 00100000
;   s_mov_b32     s20, s8                                 // 000000000028: BE940308
;   s_mov_b32     s22, -1                                 // 00000000002C: BE9603C1
;   s_mov_b32     s23, lit(0x11014fac)                    // 000000000030: BE9703FF 11014FAC
;   s_buffer_load_dwordx16  s[0:15], s[20:23], 0x000160   // 000000000038: F430000A FA000160
;   s_buffer_load_dwordx4  s[16:19], s[20:23], 0x0000e0   // 000000000040: F428040A FA0000E0
;   s_buffer_load_dwordx4  s[20:23], s[20:23], null       // 000000000048: F428050A FA000000
;   s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 000000000050: BF8C0070
;   v_mul_legacy_f32  v0, s0, v4                          // 000000000054: 0E000800
;   v_mul_legacy_f32  v1, s4, v4                          // 000000000058: 0E020804
;   v_mul_legacy_f32  v2, s8, v4                          // 00000000005C: 0E040808
;   v_mul_legacy_f32  v3, s12, v4                         // 000000000060: 0E06080C
;   v_fmac_f32    v0, s1, v5                              // 000000000064: 56000A01
;   v_fmac_f32    v1, s5, v5                              // 000000000068: 56020A05
;   v_fmac_f32    v2, s9, v5                              // 00000000006C: 56040A09
;   v_fmac_f32    v3, s13, v5                             // 000000000070: 56060A0D
;   v_mul_legacy_f32  v5, s17, v5                         // 000000000074: 0E0A0A11
;   v_fmac_f32    v0, s2, v6                              // 000000000078: 56000C02
;   v_fmac_f32    v1, s6, v6                              // 00000000007C: 56020C06
;   v_fmac_f32    v2, s10, v6                             // 000000000080: 56040C0A
;   v_fmac_f32    v3, s14, v6                             // 000000000084: 56060C0E
;   v_fmac_f32    v5, s16, v4                             // 000000000088: 560A0810
;   v_fmac_f32    v0, s3, v7                              // 00000000008C: 56000E03
;   v_fmac_f32    v1, s7, v7                              // 000000000090: 56020E07
;   v_fmac_f32    v2, s11, v7                             // 000000000094: 56040E0B
;   v_fmac_f32    v3, s15, v7                             // 000000000098: 56060E0F
;   v_fmac_f32    v5, s19, v7                             // 00000000009C: 560A0E13
;   v_mov_b32     v7, 0                                   // 0000000000A0: 7E0E0280
;   exp           pos0, v0, v1, v2, v3 done               // 0000000000A4: F80008CF 03020100
;   v_fmac_f32    v5, v6, s18 clamp                       // 0000000000AC: D52B8005 00002506
;   s_waitcnt     expcnt(0)                               // 0000000000B4: BF8CFF0F
;   v_mul_legacy_f32  v0, s20, v12                        // 0000000000B8: 0E001814
;   v_mul_legacy_f32  v1, s21, v13                        // 0000000000BC: 0E021A15
;   v_mul_legacy_f32  v2, s22, v14                        // 0000000000C0: 0E041C16
;   v_mul_legacy_f32  v3, s23, v15                        // 0000000000C4: 0E061E17
;   v_mov_b32     v6, 1.0                                 // 0000000000C8: 7E0C02F2
;   exp           param0, v0, v1, v2, v3                  // 0000000000CC: F800020F 03020100
;   exp           param1, v7, v7, v7, v5                  // 0000000000D4: F800021F 05070707
;   exp           param2, v8, v9, v7, v6                  // 0000000000DC: F800022F 06070908
;   s_endpgm                                              // 0000000000E4: BF810000
;   s_code_end                                            // 0000000000E8: BF9F0000
;   s_code_end                                            // 0000000000EC: BF9F0000
;   s_code_end                                            // 0000000000F0: BF9F0000
;   s_code_end                                            // 0000000000F4: BF9F0000
;   s_code_end                                            // 0000000000F8: BF9F0000
;   s_code_end                                            // 0000000000FC: BF9F0000
;   s_code_end                                            // 000000000100: BF9F0000
;   s_code_end                                            // 000000000104: BF9F0000
;   s_code_end                                            // 000000000108: BF9F0000
;   s_code_end                                            // 00000000010C: BF9F0000
;   s_code_end                                            // 000000000110: BF9F0000
;   s_code_end                                            // 000000000114: BF9F0000
;   s_code_end                                            // 000000000118: BF9F0000
;   s_code_end                                            // 00000000011C: BF9F0000
;   s_code_end                                            // 000000000120: BF9F0000
;   s_code_end                                            // 000000000124: BF9F0000
;   s_code_end                                            // 000000000128: BF9F0000
;   s_code_end                                            // 00000000012C: BF9F0000
;   s_code_end                                            // 000000000130: BF9F0000
;   s_code_end                                            // 000000000134: BF9F0000
;   s_code_end                                            // 000000000138: BF9F0000
;   s_code_end                                            // 00000000013C: BF9F0000
;   s_code_end                                            // 000000000140: BF9F0000
;   s_code_end                                            // 000000000144: BF9F0000
;   s_code_end                                            // 000000000148: BF9F0000
;   s_code_end                                            // 00000000014C: BF9F0000
;   s_code_end                                            // 000000000150: BF9F0000
;   s_code_end                                            // 000000000154: BF9F0000
;   s_code_end                                            // 000000000158: BF9F0000
;   s_code_end                                            // 00000000015C: BF9F0000
;   s_code_end                                            // 000000000160: BF9F0000
;   s_code_end                                            // 000000000164: BF9F0000
;   s_code_end                                            // 000000000168: BF9F0000
;   s_code_end                                            // 00000000016C: BF9F0000
;   s_code_end                                            // 000000000170: BF9F0000
;   s_code_end                                            // 000000000174: BF9F0000
;   s_code_end                                            // 000000000178: BF9F0000
;   s_code_end                                            // 00000000017C: BF9F0000
; end
; 
;   // abi info 
;   uses_global_table: 0
;   uses_streamout_table: 0
;   uses_fetch_shader: 1
;   fetch_shader_address_reg: 4
;   fetch_shader_return_reg: 4
;   uses_gds_memory_range: 0
;   uses_gds_counter_range: 0
;   uses_lds_es_gs_size: 0
;   enable_wave32: 0
;   top_root_signature_dword_used: 12
;   es_or_ls_part_size_bytes: 0
; 
;   // pix info 
;   root_signature_layout_count: 3
;     rootsig_layout[0] {
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       num_user_regs: 2
;       resource_base_register: 0
;       allocated_offset: 8
;       orig_rootsig_slot_id: 0
;     }
;     rootsig_layout[1] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 10
;       orig_rootsig_slot_id: 1
;     }
;     rootsig_layout[2] {
;       root_type: DX12_DESCRIPTOR_TABLE_RANGE
;       table_offset_dwords: 0
;       num_user_regs: 1
;       resource_base_register: 0
;       allocated_offset: 11
;       orig_rootsig_slot_id: 2
;     }
; 
;   // entry used resources info
;   used_resources_count: 1
;     used_resource[0] {
;       resource_type: CBV
;       root_type: DX12_ROOT_DESCRIPTOR_64
;       table_offset_dwords: 0
;       descriptor_reg_count: 4
;       resource_lower_bound: 0
;       allocated_offset : 8
;       orig_rootsig_slot_id: 0
;       resource_stride: 0
;       dynamically_indexed: 0
;       part_mask: 0
;       local_rootsig: 0
;     }
; 
;   // symbol info
;   num_entries: 1
;   entries_data_allocation_size_bytes: 31
;     entry[0] {
;       offset_in_code_bytes: 0
;       name_offset_bytes: 0 (VSBasicTxVc)
;       num_vgprs_minus_one: 0
;       num_sgprs: 0
;       scratch_dwords_per_lane: 0
;       size_bytes: 4294967295
;       lds_dwords_per_threadgroup: 0
;       has_indirect_calls: 0
;     }
; 
;   // -------------------  VS FIELDS --------------------//
;   // Input and output semantics
;   num_input_semantics: 3
;     input_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       channel_mask: 15
;       data_vgpr: 4
;       data_size: 3
;     }
;     input_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       channel_mask: 3
;       data_vgpr: 8
;       data_size: 1
;     }
;     input_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       channel_mask: 15
;       data_vgpr: 12
;       data_size: 3
;     }
; 
;   num_output_semantics: 3
;     output_semantic[0] {
;       usage: GENERIC
;       usage_idx: 0
;       param_idx: 0
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[1] {
;       usage: GENERIC
;       usage_idx: 1
;       param_idx: 1
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
;     output_semantic[2] {
;       usage: GENERIC
;       usage_idx: 2
;       param_idx: 2
;       fp16_mode: 0
;       fp16_pack2: 0
;       usage_idx2: 0
;       param_slot: 0
;     }
; 
;   // Hardware registers
;   reg_spi_shader_pgm_rsrc2_LS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     lds_size: 0
;     excp_en: 0
;   }
;   reg_spi_shader_pgm_rsrc2_ES: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     excp_en: 0
;     lds_size: 0
;   }
;   reg_spi_shader_pgm_rsrc2_VS: 24 {
;     scratch_en: 0
;     user_sgpr: 12
;     trap_present: 0
;     oc_lds_en: 0
;     so_base0_en: 0
;     so_base1_en: 0
;     so_base2_en: 0
;     so_base3_en: 0
;     so_en: 0
;     excp_en: 0
;     pc_base_en: 0
;     dispatch_draw_en: 0
;     user_sgpr_msb: 0
;     shared_vgpr_cnt: 0
;   }
;   reg_spi_vs_out_config: 4 {
;     vs_export_count: 2
;     vs_half_pack: 0
;     no_pc_export: 0
;     prim_export_count: 0
;   }
;   reg_spi_shader_pos_format: 4 {
;     pos0_export_format: 4 (4Component)
;     pos1_export_format: 0 (None)
;     pos2_export_format: 0 (None)
;     pos3_export_format: 0 (None)
;     pos4_export_format: 0 (None)
;   }
;   reg_pa_cl_vs_out_cntl: 0 {
;     clip_dist_ena_0: 0
;     clip_dist_ena_1: 0
;     clip_dist_ena_2: 0
;     clip_dist_ena_3: 0
;     clip_dist_ena_4: 0
;     clip_dist_ena_5: 0
;     clip_dist_ena_6: 0
;     clip_dist_ena_7: 0
;     cull_dist_ena_0: 0
;     cull_dist_ena_1: 0
;     cull_dist_ena_2: 0
;     cull_dist_ena_3: 0
;     cull_dist_ena_4: 0
;     cull_dist_ena_5: 0
;     cull_dist_ena_6: 0
;     cull_dist_ena_7: 0
;     use_vtx_point_size: 0
;     use_vtx_edge_flag: 0
;     use_vtx_render_target_indx: 0
;     use_vtx_viewport_indx: 0
;     use_vtx_kill_flag: 0
;     vs_out_misc_vec_ena: 0
;     vs_out_ccdist0_vec_ena: 0
;     vs_out_ccdist1_vec_ena: 0
;     vs_out_misc_side_bus_ena: 0
;     use_vtx_gs_cut_flag: 0
;     use_vtx_line_width: 0
;     use_vtx_vrs_rate: 0
;   }
;   reg_vgt_strmout_config: 0 {
;     streamout_0_en: 0
;     streamout_1_en: 0
;     streamout_2_en: 0
;     streamout_3_en: 0
;     rast_stream: 0
;     en_prims_needed_cnt: 0
;     rast_stream_mask: 0
;     use_rast_stream_mask: 0
;   }
; 
;   // VS shader info
;   vgpr_comp_cnt: 0
;   export_vertex_size: 12
;   es_gs_ring_item_size: 0
;   ls_stride: 0
;   uses_vertex_id: 0
; 
;   // Fetch shader live reg info
;   LiveRegInfo {
;     sgpr[31:0]    = 00000000000000000000001100110000
;     sgpr[63:32]   = 00000000000000000000000000000000
;     sgpr[95:64]   = 00000000000000000000000000000000
;     sgpr[127:96]  = 00000000000000000000000000000000
; 
;     vgpr[31:0]    = 00000000000000001111001111110000
;     vgpr[63:32]   = 00000000000000000000000000000000
;     vgpr[95:64]   = 00000000000000000000000000000000
;     vgpr[127:96]  = 00000000000000000000000000000000
;     vgpr[159:128] = 00000000000000000000000000000000
;     vgpr[191:160] = 00000000000000000000000000000000
;     vgpr[223:192] = 00000000000000000000000000000000
;     vgpr[255:224] = 00000000000000000000000000000000
;   }
; }
; 
; VS NumVGPR=16,NumSGPR=26,LDS=0,Scratch=0,WaveSize=64,Occupancy=20
; VAlu:26,SAlu:9,VMem:0,SMem:3,LDS:0,WaitCntOnVMem:1,UncondBranch:0,CondBranch:0
; 
; PS: null

#endif

const unsigned char BasicEffect_VSBasicTxVc[] = {
  0x44, 0x58, 0x42, 0x43, 0x4b, 0xb8, 0x1c, 0x21, 0xcd, 0xfb, 0x52, 0xca,
  0x76, 0x01, 0xe8, 0x56, 0x52, 0x63, 0x2c, 0xa4, 0x01, 0x00, 0x00, 0x00,
  0xd8, 0x0f, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00,
  0xdc, 0x02, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00,
  0x14, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0xa4, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45,
  0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0x4c, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x04, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
  0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x78, 0x56, 0x63,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x42, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x44, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x02, 0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00,
  0x80, 0xf0, 0x00, 0x00, 0x80, 0xf0, 0x00, 0x00, 0x80, 0xf0, 0x00, 0x00,
  0x80, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x49, 0x4c, 0x44, 0x4e, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x00,
  0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5c, 0x6d, 0x61, 0x72,
  0x63, 0x75, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
  0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x58, 0x54, 0x4b, 0x31, 0x32,
  0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
  0x58, 0x54, 0x4b, 0x31, 0x32, 0x2d, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x53,
  0x72, 0x63, 0x2f, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x43,
  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x58, 0x62, 0x6f, 0x78,
  0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x72, 0x6c, 0x65,
  0x74, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x45, 0x66, 0x66, 0x65, 0x63,
  0x74, 0x5f, 0x56, 0x53, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x78, 0x56,
  0x63, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5c, 0x2c, 0x2c,
  0x55, 0xf3, 0x14, 0xfb, 0xae, 0x3c, 0x29, 0xb7, 0xcf, 0x87, 0x6c, 0x04,
  0x44, 0x58, 0x49, 0x4c, 0xbc, 0x0b, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0xef, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x64, 0x09, 0x00, 0x00, 0x58, 0x44, 0x41, 0x54,
  0x05, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x7c, 0x09, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0xdc, 0x09, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0xf0, 0x09, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x0a, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0xac, 0x0b, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
  0x5f, 0x02, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x64, 0x09, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde,
  0x21, 0x0c, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b,
  0x0a, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5,
  0x00, 0x19, 0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50,
  0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06,
  0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f,
  0x00, 0x09, 0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x82, 0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x20, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
  0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3,
  0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c,
  0x10, 0x80, 0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08,
  0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51,
  0x0c, 0x80, 0x20, 0x88, 0x62, 0x20, 0xa4, 0x0c, 0x03, 0x31, 0x90, 0x52,
  0x94, 0x81, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0x20, 0xe6, 0xa8, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0xbf,
  0xb8, 0x6d, 0x44, 0x0c, 0xc3, 0x30, 0x50, 0x71, 0xcf, 0x70, 0xf9, 0x13,
  0xf6, 0x10, 0x92, 0x1f, 0x02, 0xcd, 0xb0, 0x10, 0x28, 0x78, 0x0a, 0xe1,
  0x10, 0x10, 0x41, 0x51, 0x29, 0x06, 0x62, 0x18, 0x06, 0x9a, 0xe6, 0x08,
  0x82, 0x62, 0x40, 0x44, 0x41, 0x10, 0x15, 0x59, 0x03, 0x01, 0xc3, 0x08,
  0xc4, 0x30, 0x8c, 0x30, 0x0c, 0x39, 0xa0, 0x25, 0x41, 0x76, 0xd5, 0xe1,
  0x48, 0xd3, 0x02, 0x60, 0x0e, 0x35, 0xf9, 0x29, 0x10, 0x01, 0x0c, 0x31,
  0x11, 0x91, 0x84, 0x9a, 0x4c, 0xd3, 0x86, 0x6d, 0xdb, 0x34, 0x2d, 0xe3,
  0x36, 0x8e, 0xba, 0x74, 0x20, 0x00, 0x00, 0x00, 0x13, 0x16, 0x72, 0xc0,
  0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x7c, 0x10,
  0x07, 0x39, 0xd8, 0xf0, 0x0a, 0xe5, 0xd0, 0x06, 0xed, 0xa0, 0x07, 0xe5,
  0xd0, 0x06, 0xf0, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x80, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xee,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x63, 0x00, 0x01, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90, 0x07, 0x01, 0x02, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x02, 0x04, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x1e, 0x06, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x11,
  0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x26, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x58, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x90, 0x05, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22,
  0x4a, 0x60, 0x04, 0xa0, 0x20, 0x8a, 0xa1, 0x80, 0x0d, 0xca, 0xa0, 0x3c,
  0x8a, 0x80, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x22, 0x28, 0x03, 0xf2,
  0x66, 0x00, 0xe8, 0x1b, 0xcb, 0x61, 0x20, 0x90, 0xe4, 0x03, 0x90, 0xe4,
  0x03, 0x90, 0xe4, 0x03, 0x90, 0xe4, 0x03, 0x10, 0x01, 0x21, 0x00, 0x08,
  0x04, 0x02, 0x01, 0x00, 0x79, 0x18, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0xc4, 0x36, 0xf8, 0xfa, 0xc2,
  0x12, 0x7a, 0xc2, 0xfa, 0x82, 0x2a, 0x92, 0xfa, 0xa2, 0x42, 0x92, 0x2a,
  0x0a, 0x22, 0xfa, 0x9a, 0x1a, 0x92, 0x0a, 0xa2, 0x1a, 0x42, 0xfa, 0x9a,
  0x4a, 0xd2, 0x2a, 0xfa, 0x62, 0x4a, 0x6a, 0x4a, 0xa2, 0xfa, 0x4a, 0x72,
  0xfa, 0x12, 0xca, 0xa2, 0x2a, 0x9a, 0x62, 0x00, 0xb3, 0x41, 0x08, 0x04,
  0x76, 0x64, 0x78, 0x63, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x32, 0x34, 0x31,
  0x30, 0x2e, 0x32, 0x34, 0x31, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x31, 0x36,
  0x2e, 0x31, 0x30, 0x37, 0x34, 0x31, 0x1b, 0x02, 0x62, 0x82, 0x40, 0x20,
  0x13, 0x04, 0x22, 0xd9, 0x20, 0x18, 0xc7, 0x04, 0x81, 0x50, 0x36, 0x08,
  0x46, 0x42, 0xc1, 0x6e, 0x6e, 0x82, 0x40, 0x2c, 0x1b, 0x86, 0x85, 0x39,
  0x26, 0x08, 0x5e, 0x45, 0x60, 0x82, 0x40, 0x30, 0x1b, 0x90, 0xc3, 0x79,
  0x8e, 0xc3, 0x80, 0x80, 0x0d, 0x41, 0xb4, 0x81, 0x00, 0x00, 0x09, 0x98,
  0x20, 0x7c, 0xd6, 0x86, 0x80, 0x9a, 0x20, 0x08, 0x00, 0x17, 0xab, 0x29,
  0xa1, 0xb0, 0xb9, 0xb4, 0x31, 0x2a, 0x3c, 0xab, 0x31, 0x2e, 0x53, 0x56,
  0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x13, 0x84, 0x02,
  0x9a, 0x20, 0x14, 0xd1, 0x86, 0xe0, 0x98, 0x20, 0x14, 0xd2, 0x04, 0x81,
  0x68, 0x26, 0x08, 0x84, 0xb3, 0x41, 0xe8, 0xbc, 0x0d, 0xcb, 0x81, 0x65,
  0xda, 0xa6, 0x19, 0xdc, 0xa1, 0x7d, 0x44, 0xa8, 0x8a, 0xb0, 0x86, 0x9e,
  0x9e, 0xa4, 0x88, 0x26, 0x08, 0xc5, 0xb4, 0x41, 0xe8, 0xba, 0x0d, 0x8b,
  0x11, 0x06, 0x99, 0xb6, 0x69, 0x86, 0x18, 0x18, 0xda, 0x18, 0x4c, 0x10,
  0x88, 0x87, 0xc5, 0xd0, 0x13, 0xd3, 0x93, 0xd4, 0x86, 0xa5, 0x0c, 0xcc,
  0x20, 0xd3, 0x36, 0xcd, 0xe0, 0xca, 0x40, 0xfb, 0x36, 0x0c, 0x60, 0x40,
  0x06, 0x67, 0xb0, 0x61, 0x39, 0xcc, 0x20, 0xd3, 0x36, 0x31, 0x30, 0xb8,
  0x43, 0xfb, 0x36, 0x04, 0xc6, 0x86, 0xc5, 0x30, 0x83, 0x4c, 0x53, 0x03,
  0x31, 0x30, 0x38, 0x43, 0xfb, 0x36, 0x2c, 0x65, 0x10, 0x06, 0x99, 0xb6,
  0x89, 0x81, 0x21, 0x06, 0x65, 0xa0, 0x8d, 0xc1, 0x04, 0xa1, 0xa0, 0x36,
  0x2c, 0x1d, 0x96, 0xb5, 0xc1, 0xc6, 0x19, 0x5c, 0xa7, 0x7d, 0x1b, 0x88,
  0x34, 0x58, 0x03, 0x36, 0x70, 0x83, 0x0d, 0x03, 0x1a, 0xbc, 0x01, 0xb0,
  0xa1, 0xb0, 0x2e, 0x38, 0x98, 0x80, 0x56, 0x78, 0x62, 0x6f, 0x78, 0x2e,
  0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x74,
  0x69, 0x6f, 0x6e, 0x73, 0x53, 0x02, 0xa1, 0x0a, 0x1b, 0x9b, 0x5d, 0x9b,
  0x4b, 0x1a, 0x59, 0x99, 0x1b, 0xdd, 0x94, 0x80, 0xa8, 0x42, 0x86, 0xe7,
  0x62, 0x57, 0x26, 0x37, 0x97, 0xf6, 0xe6, 0x36, 0x25, 0x38, 0x9a, 0x90,
  0xe1, 0xb9, 0xd8, 0x85, 0xb1, 0xd9, 0x95, 0xc9, 0x4d, 0x09, 0x92, 0x3a,
  0x64, 0x78, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
  0x65, 0x6c, 0x53, 0x02, 0xa6, 0x0c, 0x19, 0x9e, 0x8b, 0x5c, 0xd9, 0xdc,
  0x5b, 0x9d, 0xdc, 0x58, 0xd9, 0xdc, 0x94, 0x40, 0xaa, 0x43, 0x86, 0xe7,
  0x62, 0x97, 0x56, 0x76, 0x97, 0x44, 0x36, 0x45, 0x17, 0x46, 0x57, 0x36,
  0x25, 0xa0, 0xea, 0x90, 0xe1, 0xb9, 0x94, 0xb9, 0xd1, 0xc9, 0xe5, 0x41,
  0xbd, 0xa5, 0xb9, 0xd1, 0xcd, 0x4d, 0x09, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70,
  0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xd1, 0x43, 0x0e, 0xf8,
  0xe0, 0x06, 0xe4, 0x20, 0x0e, 0xe7, 0xe0, 0x06, 0xf6, 0x10, 0x0e, 0xf2,
  0xc0, 0x0e, 0xe1, 0x90, 0x0f, 0xef, 0x50, 0x0f, 0xf4, 0x00, 0x00, 0x00,
  0x71, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x06, 0xb0, 0xbc, 0xec,
  0x06, 0x48, 0x88, 0xd0, 0x5e, 0xaf, 0x60, 0x05, 0xdb, 0x70, 0xf9, 0xce,
  0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06,
  0x20, 0x60, 0x7e, 0x71, 0xdb, 0x76, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe,
  0x10, 0x11, 0xc0, 0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x11, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3,
  0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e,
  0x71, 0xdb, 0x26, 0x50, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11,
  0x81, 0x52, 0xd3, 0x43, 0x4d, 0x7e, 0x71, 0xdb, 0x66, 0x20, 0x0d, 0x97,
  0xef, 0x3c, 0xfe, 0x44, 0x44, 0x13, 0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6,
  0x0d, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5,
  0x6d, 0x03, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x54, 0x8d, 0x00, 0x10, 0x51, 0x0a, 0xc5, 0x55, 0x08, 0x33, 0x00, 0x65,
  0x57, 0x72, 0xc5, 0x52, 0x2e, 0x05, 0x53, 0x32, 0xc5, 0x51, 0x70, 0xe5,
  0x40, 0x45, 0x09, 0xd0, 0x30, 0x02, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0x81, 0x81, 0x42, 0x79, 0x1e, 0x34, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0xc6, 0x19, 0x38, 0xd9, 0x77, 0x35, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xa0, 0xc1, 0xa3, 0x81, 0x01, 0xe1, 0x8c, 0x18,
  0x24, 0x00, 0x08, 0x82, 0x81, 0x91, 0x06, 0xd0, 0x16, 0x06, 0xd7, 0x33,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1a, 0x44, 0x9c, 0x18, 0x5c,
  0xd0, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x6b, 0x20, 0x91, 0xc1,
  0x18, 0x6c, 0xd1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x6c, 0x30,
  0x95, 0x01, 0x19, 0x20, 0xd2, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18,
  0x6d, 0x40, 0x95, 0x41, 0x19, 0x74, 0xd3, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0x6e, 0x50, 0x99, 0x81, 0x19, 0x28, 0xd4, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x6f, 0x60, 0x9d, 0xc1, 0x19, 0x74, 0xd5, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x70, 0x70, 0xa1, 0x01, 0x1a, 0x74,
  0xd6, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x44, 0x6d, 0x60, 0x2d, 0xd4,
  0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26,
  0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x44, 0x72, 0xb0, 0x41,
  0xd8, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x44, 0x77, 0x00,
  0x06, 0x15, 0x37, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30,
  0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x11,
  0x1f, 0x94, 0x81, 0x06, 0x06, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x36, 0x61, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x29, 0x14, 0xdc, 0x00, 0x9b, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0x98, 0x44, 0xe1, 0x0d, 0xb0, 0x29, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x69, 0x14, 0xe0, 0x00, 0x9b, 0x02,
  0x93, 0x38, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x54, 0x0a,
  0x72, 0xc0, 0x49, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c, 0xa6,
  0x30, 0x07, 0x9c, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x74,
  0x0a, 0x74, 0xc0, 0x49, 0x81, 0x45, 0x60, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0x98, 0x52, 0xc1, 0x0e, 0xc0, 0x20, 0x0a, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0x60, 0x52, 0x85, 0x3b, 0x00, 0x83, 0x28, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x69, 0x15, 0xf0, 0x00, 0x0c, 0xa2,
  0xc0, 0x20, 0x32, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x4c,
  0xad, 0xa0, 0x07, 0x64, 0x00, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x30, 0xb9, 0xc2, 0x1e, 0x90, 0x01, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xf4, 0x0a, 0x7c, 0x40, 0x06, 0x50, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x51, 0x2c, 0xe8, 0xc1, 0x1b, 0xb4, 0xc2, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x44, 0xb6, 0xf0, 0x07, 0x74, 0x90,
  0x07, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0x23, 0x06, 0x0d, 0x00, 0x82, 0x60, 0xc0, 0xf0, 0x42,
  0x1f, 0xc8, 0x41, 0x1c, 0xc0, 0xc1, 0x1b, 0x10, 0x83, 0x10, 0x8c, 0x18,
  0x18, 0x00, 0x08, 0x82, 0x81, 0xe2, 0x0b, 0x7d, 0x10, 0xd8, 0xa2, 0x07,
  0xf2, 0xb1, 0x45, 0x0f, 0xe4, 0x63, 0x8b, 0x1e, 0xc8, 0xc7, 0x16, 0x3d,
  0x90, 0xcf, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xe4, 0xe0, 0x0a,
  0xbd, 0xd0, 0x0b, 0xb5, 0x40, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01,
  0x42, 0x0e, 0xae, 0xd0, 0x0b, 0xbd, 0x10, 0x0a, 0xc3, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x20, 0xe4, 0xe0, 0x0a, 0xbd, 0xd0, 0x0b, 0xb3, 0x20,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x42, 0x0e, 0xae, 0xd0, 0x0b,
  0xbd, 0x20, 0x0b, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x20, 0xe4,
  0xe0, 0x0a, 0xbe, 0xd0, 0x0b, 0xb5, 0x00, 0x0a, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0x90, 0x83, 0x2b, 0xf8, 0x42, 0x2f, 0x84, 0x02, 0x28,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x42, 0x0e, 0xae, 0xe0, 0x0b,
  0xbd, 0x30, 0x0b, 0xa0, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x08,
  0x39, 0xb8, 0x82, 0x2f, 0xf4, 0x82, 0x2c, 0x14, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0x90, 0x83, 0x2b, 0xdc, 0x42, 0x2f, 0xd4, 0x82, 0x1e,
  0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x42, 0x0e, 0xae, 0x70, 0x0b,
  0xbd, 0x10, 0x0a, 0x79, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x08,
  0x39, 0xb8, 0x42, 0x2e, 0xf4, 0x42, 0x2d, 0x74, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0x90, 0x83, 0x2b, 0xe4, 0x42, 0x2f, 0x84, 0x42, 0x36,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x08, 0x39, 0xb8, 0x42, 0x2e, 0xf4,
  0xc2, 0x2c, 0x54, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x80, 0x90, 0x83,
  0x2b, 0xe4, 0x42, 0x2f, 0xc8, 0x42, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x62, 0x6f, 0x70, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0xc9, 0x03,
  0xed, 0x63, 0x88, 0x6e, 0x64, 0xa6, 0x1c, 0x9f, 0xaf, 0x4a, 0xf9, 0xc2,
  0x58, 0x42, 0x43, 0x48, 0x03, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf7, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x78, 0x9c, 0xd5, 0x53, 0xbf, 0x4b, 0x03, 0x31, 0x14, 0x7e, 0xf9, 0xd1,
  0x5c, 0x9a, 0xc6, 0x5c, 0x8b, 0xad, 0x16, 0x11, 0x8b, 0x83, 0x50, 0x51,
  0xb0, 0x7f, 0x80, 0x93, 0x88, 0x9b, 0x38, 0x54, 0x03, 0x82, 0x83, 0xd2,
  0x49, 0x10, 0x14, 0x5c, 0x3a, 0x95, 0x13, 0x04, 0x1d, 0x3a, 0x8a, 0x8e,
  0xf6, 0x0f, 0x50, 0x71, 0x70, 0xbe, 0xd3, 0xcd, 0xad, 0x53, 0x57, 0x71,
  0x73, 0x54, 0x6c, 0x87, 0x52, 0xc1, 0xf3, 0xae, 0xbd, 0xd2, 0xb3, 0xa2,
  0x88, 0x53, 0xfd, 0xe0, 0xe3, 0x4b, 0x5e, 0xbe, 0xbc, 0x24, 0xbc, 0x97,
  0xa5, 0x7c, 0x7e, 0x19, 0x21, 0x80, 0x27, 0x0a, 0x6d, 0xb0, 0x8e, 0xc0,
  0xb3, 0x7d, 0xf9, 0xf0, 0x13, 0xaf, 0x7f, 0xe9, 0xfb, 0x8e, 0x38, 0xd8,
  0xbf, 0x08, 0x7f, 0x43, 0x37, 0x4f, 0x33, 0x48, 0x64, 0xa1, 0xde, 0x1a,
  0x05, 0x49, 0x69, 0x9f, 0xbf, 0x18, 0x04, 0x6e, 0x02, 0x25, 0x1e, 0x51,
  0xdb, 0x8b, 0xe1, 0x36, 0xe4, 0x8b, 0x43, 0x05, 0x85, 0x52, 0xc1, 0x7d,
  0xe0, 0xf7, 0x63, 0x99, 0xd0, 0xb9, 0x0c, 0x4c, 0x4a, 0x18, 0x22, 0x1c,
  0x31, 0x6c, 0x4a, 0x02, 0x83, 0x06, 0xff, 0x46, 0x9d, 0x5a, 0xb2, 0xf6,
  0x7b, 0x18, 0xc6, 0xf0, 0xdf, 0xe0, 0xbf, 0x21, 0x1d, 0x22, 0x0d, 0x18,
  0x86, 0xec, 0x9b, 0xe7, 0xfa, 0x4a, 0xf1, 0x52, 0xff, 0xdd, 0x59, 0x89,
  0x0d, 0xab, 0x36, 0xbb, 0xfe, 0x4e, 0xd6, 0xea, 0xc9, 0xb7, 0xab, 0x79,
  0xab, 0x36, 0xbd, 0xeb, 0x92, 0xea, 0xd1, 0x0e, 0xa5, 0x93, 0x87, 0x36,
  0x81, 0x8a, 0x13, 0x75, 0x53, 0xc7, 0x7e, 0x77, 0x70, 0x72, 0x62, 0xdf,
  0x91, 0x53, 0xdb, 0x25, 0x67, 0xf6, 0xc5, 0x0a, 0x4a, 0x08, 0xc8, 0x35,
  0x36, 0x11, 0xb4, 0x04, 0xcd, 0x36, 0x1e, 0xc1, 0xd3, 0x48, 0xb6, 0xe1,
  0xa5, 0x6b, 0xed, 0x41, 0xd9, 0x01, 0x0e, 0x8a, 0x72, 0xac, 0x38, 0xa7,
  0x4a, 0x72, 0xa6, 0x90, 0x00, 0x1d, 0x11, 0x58, 0x47, 0x05, 0xd5, 0x43,
  0x82, 0xe9, 0x84, 0x10, 0x0a, 0x4b, 0xd0, 0x4c, 0x62, 0x2d, 0x24, 0xd5,
  0x4a, 0x32, 0x1d, 0xe7, 0x42, 0x13, 0x05, 0xda, 0x50, 0x58, 0xc7, 0x14,
  0xd5, 0xa6, 0x62, 0x7a, 0x58, 0x09, 0x6d, 0x61, 0x55, 0xaa, 0x72, 0x68,
  0x02, 0xc2, 0x24, 0x62, 0xcd, 0xd4, 0xd8, 0x14, 0x80, 0xe9, 0x96, 0x9d,
  0x64, 0x1a, 0x54, 0x6a, 0x0c, 0xab, 0x91, 0x71, 0xaa, 0x46, 0x27, 0x98,
  0x7a, 0xc5, 0xb2, 0x64, 0xe2, 0x8e, 0x2f, 0xe3, 0xa9, 0x61, 0x18, 0x91,
  0x39, 0x4f, 0x79, 0xd4, 0xf0, 0xda, 0xe1, 0xc0, 0x01, 0x38, 0x1f, 0x48,
  0x76, 0xff, 0x5c, 0xb7, 0x4b, 0x79, 0x50, 0x7f, 0x1f, 0xdd, 0x35, 0x81,
  0xbe, 0xc6, 0x62, 0xde, 0x06, 0x8c, 0x3e, 0xd7, 0x92, 0xf2, 0xde, 0xd8,
  0xf5, 0x10, 0x38, 0x41, 0xe7, 0x17, 0xb6, 0xf6, 0xb7, 0x0b, 0xab, 0x45,
  0x5d, 0xf8, 0x00, 0xbd, 0x0b, 0xd0, 0x2b, 0x00, 0x11, 0x5c, 0x2c, 0x2c,
  0x55, 0xf3, 0x14, 0xfb, 0xae, 0x3c, 0x29, 0xb7, 0xcf, 0x87, 0x6c, 0x04
};
